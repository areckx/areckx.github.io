.TH "Splash" 3 "Mon Jun 5 2017" "MuseScore-2.2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Splash
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSplash\fP (\fBSplashBitmap\fP *bitmapA, GBool vectorAntialiasA, \fBSplashScreenParams\fP *screenParams=NULL)"
.br
.ti -1c
.RI "\fBSplash\fP (\fBSplashBitmap\fP *bitmapA, GBool vectorAntialiasA, \fBSplashScreen\fP *screenA)"
.br
.ti -1c
.RI "SplashCoord * \fBgetMatrix\fP ()"
.br
.ti -1c
.RI "\fBSplashPattern\fP * \fBgetStrokePattern\fP ()"
.br
.ti -1c
.RI "\fBSplashPattern\fP * \fBgetFillPattern\fP ()"
.br
.ti -1c
.RI "\fBSplashScreen\fP * \fBgetScreen\fP ()"
.br
.ti -1c
.RI "SplashBlendFunc \fBgetBlendFunc\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetStrokeAlpha\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetFillAlpha\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetLineWidth\fP ()"
.br
.ti -1c
.RI "int \fBgetLineCap\fP ()"
.br
.ti -1c
.RI "int \fBgetLineJoin\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetMiterLimit\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetFlatness\fP ()"
.br
.ti -1c
.RI "SplashCoord * \fBgetLineDash\fP ()"
.br
.ti -1c
.RI "int \fBgetLineDashLength\fP ()"
.br
.ti -1c
.RI "SplashCoord \fBgetLineDashPhase\fP ()"
.br
.ti -1c
.RI "GBool \fBgetStrokeAdjust\fP ()"
.br
.ti -1c
.RI "\fBSplashClip\fP * \fBgetClip\fP ()"
.br
.ti -1c
.RI "\fBSplashBitmap\fP * \fBgetSoftMask\fP ()"
.br
.ti -1c
.RI "GBool \fBgetInNonIsolatedGroup\fP ()"
.br
.ti -1c
.RI "void \fBsetMatrix\fP (SplashCoord *matrix)"
.br
.ti -1c
.RI "void \fBsetStrokePattern\fP (\fBSplashPattern\fP *strokeColor)"
.br
.ti -1c
.RI "void \fBsetFillPattern\fP (\fBSplashPattern\fP *fillColor)"
.br
.ti -1c
.RI "void \fBsetScreen\fP (\fBSplashScreen\fP *screen)"
.br
.ti -1c
.RI "void \fBsetBlendFunc\fP (SplashBlendFunc func)"
.br
.ti -1c
.RI "void \fBsetStrokeAlpha\fP (SplashCoord alpha)"
.br
.ti -1c
.RI "void \fBsetFillAlpha\fP (SplashCoord alpha)"
.br
.ti -1c
.RI "void \fBsetPatternAlpha\fP (SplashCoord strokeAlpha, SplashCoord fillAlpha)"
.br
.ti -1c
.RI "void \fBclearPatternAlpha\fP ()"
.br
.ti -1c
.RI "void \fBsetFillOverprint\fP (GBool fop)"
.br
.ti -1c
.RI "void \fBsetStrokeOverprint\fP (GBool sop)"
.br
.ti -1c
.RI "void \fBsetOverprintMode\fP (int opm)"
.br
.ti -1c
.RI "void \fBsetLineWidth\fP (SplashCoord lineWidth)"
.br
.ti -1c
.RI "void \fBsetLineCap\fP (int lineCap)"
.br
.ti -1c
.RI "void \fBsetLineJoin\fP (int lineJoin)"
.br
.ti -1c
.RI "void \fBsetMiterLimit\fP (SplashCoord miterLimit)"
.br
.ti -1c
.RI "void \fBsetFlatness\fP (SplashCoord flatness)"
.br
.ti -1c
.RI "void \fBsetLineDash\fP (SplashCoord *lineDash, int lineDashLength, SplashCoord lineDashPhase)"
.br
.ti -1c
.RI "void \fBsetStrokeAdjust\fP (GBool strokeAdjust)"
.br
.ti -1c
.RI "void \fBclipResetToRect\fP (SplashCoord x0, SplashCoord y0, SplashCoord x1, SplashCoord y1)"
.br
.ti -1c
.RI "SplashError \fBclipToRect\fP (SplashCoord x0, SplashCoord y0, SplashCoord x1, SplashCoord y1)"
.br
.ti -1c
.RI "SplashError \fBclipToPath\fP (\fBSplashPath\fP *path, GBool eo)"
.br
.ti -1c
.RI "void \fBsetSoftMask\fP (\fBSplashBitmap\fP *softMask)"
.br
.ti -1c
.RI "void \fBsetInNonIsolatedGroup\fP (\fBSplashBitmap\fP *alpha0BitmapA, int alpha0XA, int alpha0YA)"
.br
.ti -1c
.RI "void \fBsetTransfer\fP (Guchar *red, Guchar *green, Guchar *blue, Guchar *gray)"
.br
.ti -1c
.RI "void \fBsetOverprintMask\fP (Guint overprintMask, GBool additive)"
.br
.ti -1c
.RI "void \fBsaveState\fP ()"
.br
.ti -1c
.RI "SplashError \fBrestoreState\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP (SplashColorPtr \fBcolor\fP, Guchar alpha=0x00)"
.br
.ti -1c
.RI "SplashError \fBstroke\fP (\fBSplashPath\fP *path)"
.br
.ti -1c
.RI "SplashError \fBfill\fP (\fBSplashPath\fP *path, GBool eo)"
.br
.ti -1c
.RI "SplashError \fBxorFill\fP (\fBSplashPath\fP *path, GBool eo)"
.br
.ti -1c
.RI "SplashError \fBfillChar\fP (SplashCoord x, SplashCoord y, int c, \fBSplashFont\fP *\fBfont\fP)"
.br
.ti -1c
.RI "void \fBfillGlyph\fP (SplashCoord x, SplashCoord y, \fBSplashGlyphBitmap\fP *glyph)"
.br
.ti -1c
.RI "SplashError \fBfillImageMask\fP (SplashImageMaskSource src, void *srcData, int w, int h, SplashCoord *mat, GBool glyphMode)"
.br
.ti -1c
.RI "SplashError \fBdrawImage\fP (SplashImageSource src, SplashICCTransform tf, void *srcData, SplashColorMode srcMode, GBool srcAlpha, int w, int h, SplashCoord *mat, GBool interpolate, GBool tilingPattern=gFalse)"
.br
.ti -1c
.RI "SplashError \fBcomposite\fP (\fBSplashBitmap\fP *src, int xSrc, int ySrc, int xDest, int yDest, int w, int h, GBool noClip, GBool nonIsolated, GBool knockout=gFalse, SplashCoord knockoutOpacity=1\&.0)"
.br
.ti -1c
.RI "void \fBcompositeBackground\fP (SplashColorPtr \fBcolor\fP)"
.br
.ti -1c
.RI "SplashError \fBblitTransparent\fP (\fBSplashBitmap\fP *src, int xSrc, int ySrc, int xDest, int yDest, int w, int h)"
.br
.ti -1c
.RI "void \fBblitImage\fP (\fBSplashBitmap\fP *src, GBool srcAlpha, int xDest, int yDest)"
.br
.ti -1c
.RI "\fBSplashPath\fP * \fBmakeStrokePath\fP (\fBSplashPath\fP *path, SplashCoord w, GBool flatten=gTrue)"
.br
.ti -1c
.RI "\fBSplashBitmap\fP * \fBgetBitmap\fP ()"
.br
.ti -1c
.RI "void \fBsetMinLineWidth\fP (SplashCoord w)"
.br
.ti -1c
.RI "void \fBsetThinLineMode\fP (SplashThinLineMode thinLineModeA)"
.br
.ti -1c
.RI "SplashThinLineMode \fBgetThinLineMode\fP ()"
.br
.ti -1c
.RI "void \fBgetModRegion\fP (int *xMin, int *yMin, int *xMax, int *yMax)"
.br
.ti -1c
.RI "void \fBclearModRegion\fP ()"
.br
.ti -1c
.RI "SplashClipResult \fBgetClipRes\fP ()"
.br
.ti -1c
.RI "void \fBsetDebugMode\fP (GBool debugModeA)"
.br
.ti -1c
.RI "void \fBsetInShading\fP (GBool sh)"
.br
.ti -1c
.RI "GBool \fBgetVectorAntialias\fP ()"
.br
.ti -1c
.RI "void \fBsetVectorAntialias\fP (GBool vaa)"
.br
.ti -1c
.RI "SplashError \fBshadedFill\fP (\fBSplashPath\fP *path, GBool hasBBox, \fBSplashPattern\fP *pattern)"
.br
.ti -1c
.RI "GBool \fBgouraudTriangleShadedFill\fP (\fBSplashGouraudColor\fP *shading)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 90 of file Splash\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MuseScore-2\&.2 from the source code\&.
