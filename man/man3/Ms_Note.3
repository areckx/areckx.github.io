.TH "Ms::Note" 3 "Mon Jun 5 2017" "MuseScore-2.2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Ms::Note \- Graphic representation of a note\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <note\&.h>\fP
.PP
Inherits \fBMs::Element\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBValueType\fP : char { \fBOFFSET_VAL\fP, \fBUSER_VAL\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "int \fBqmlAccidentalType\fP () const"
.br
.ti -1c
.RI "void \fBqmlSetAccidentalType\fP (int t)"
.br
.ti -1c
.RI "\fBNote\fP (\fBScore\fP *s=0)"
.br
.ti -1c
.RI "\fBNote\fP (const \fBNote\fP &, bool link=false)"
.br
.ti -1c
.RI "\fBNote\fP & \fBoperator=\fP (const \fBNote\fP &)=delete"
.br
.ti -1c
.RI "virtual \fBNote\fP * \fBclone\fP () const override"
.br
.ti -1c
.RI "ElementType \fBtype\fP () const override"
.br
.ti -1c
.RI "virtual qreal \fBmag\fP () const override"
.br
.ti -1c
.RI "void \fBlayout\fP ()"
.br
.ti -1c
.RI "void \fBlayout2\fP ()"
.br
.ti -1c
.RI "void \fBscanElements\fP (void *data, void(*func)(void *, \fBElement\fP *), bool all=true)"
.br
.ti -1c
.RI "void \fBsetTrack\fP (int val)"
.br
.ti -1c
.RI "int \fBplayTicks\fP () const"
.br
.RI "Return total tick len of tied notes\&. "
.ti -1c
.RI "qreal \fBheadWidth\fP () const"
.br
.ti -1c
.RI "qreal \fBheadHeight\fP () const"
.br
.ti -1c
.RI "qreal \fBtabHeadWidth\fP (\fBStaffType\fP *tab=0) const"
.br
.ti -1c
.RI "qreal \fBtabHeadHeight\fP (\fBStaffType\fP *tab=0) const"
.br
.ti -1c
.RI "QPointF \fBstemDownNW\fP () const"
.br
.ti -1c
.RI "QPointF \fBstemUpSE\fP () const"
.br
.ti -1c
.RI "NoteHead::Group \fBheadGroup\fP () const"
.br
.ti -1c
.RI "NoteHead::Type \fBheadType\fP () const"
.br
.ti -1c
.RI "void \fBsetHeadGroup\fP (NoteHead::Group val)"
.br
.ti -1c
.RI "void \fBsetHeadType\fP (NoteHead::Type t)"
.br
.ti -1c
.RI "virtual int \fBsubtype\fP () const override"
.br
.ti -1c
.RI "virtual QString \fBsubtypeName\fP () const override"
.br
.ti -1c
.RI "void \fBsetPitch\fP (int val)"
.br
.ti -1c
.RI "void \fBundoSetPitch\fP (int val)"
.br
.ti -1c
.RI "void \fBsetPitch\fP (int pitch, int tpc1, int tpc2)"
.br
.ti -1c
.RI "int \fBpitch\fP () const"
.br
.ti -1c
.RI "int \fBppitch\fP () const"
.br
.RI "playback pitch "
.ti -1c
.RI "int \fBepitch\fP () const"
.br
.RI "effective pitch "
.ti -1c
.RI "qreal \fBtuning\fP () const"
.br
.ti -1c
.RI "void \fBsetTuning\fP (qreal v)"
.br
.ti -1c
.RI "void \fBundoSetTpc\fP (int v)"
.br
.ti -1c
.RI "int \fBtransposition\fP () const"
.br
.ti -1c
.RI "bool \fBfixed\fP () const"
.br
.ti -1c
.RI "void \fBsetFixed\fP (bool v)"
.br
.ti -1c
.RI "int \fBfixedLine\fP () const"
.br
.ti -1c
.RI "void \fBsetFixedLine\fP (int v)"
.br
.ti -1c
.RI "int \fBtpc\fP () const"
.br
.ti -1c
.RI "int \fBtpc1\fP () const"
.br
.ti -1c
.RI "int \fBtpc2\fP () const"
.br
.ti -1c
.RI "QString \fBtpcUserName\fP (bool explicitAccidental=false) const"
.br
.ti -1c
.RI "void \fBsetTpc\fP (int v)"
.br
.ti -1c
.RI "void \fBsetTpc1\fP (int v)"
.br
.ti -1c
.RI "void \fBsetTpc2\fP (int v)"
.br
.ti -1c
.RI "void \fBsetTpcFromPitch\fP ()"
.br
.ti -1c
.RI "int \fBtpc1default\fP (int pitch) const"
.br
.ti -1c
.RI "int \fBtpc2default\fP (int pitch) const"
.br
.ti -1c
.RI "int \fBtransposeTpc\fP (int tpc)"
.br
.ti -1c
.RI "\fBAccidental\fP * \fBaccidental\fP () const"
.br
.ti -1c
.RI "void \fBsetAccidental\fP (\fBAccidental\fP *a)"
.br
.ti -1c
.RI "AccidentalType \fBaccidentalType\fP () const"
.br
.ti -1c
.RI "void \fBsetAccidentalType\fP (AccidentalType type)"
.br
.ti -1c
.RI "int \fBline\fP () const"
.br
.ti -1c
.RI "void \fBsetLine\fP (int n)"
.br
.ti -1c
.RI "int \fBphysicalLine\fP () const"
.br
.ti -1c
.RI "int \fBfret\fP () const"
.br
.ti -1c
.RI "void \fBsetFret\fP (int val)"
.br
.ti -1c
.RI "int \fBstring\fP () const"
.br
.ti -1c
.RI "void \fBsetString\fP (int val)"
.br
.ti -1c
.RI "bool \fBghost\fP () const"
.br
.ti -1c
.RI "void \fBsetGhost\fP (bool val)"
.br
.ti -1c
.RI "bool \fBfretConflict\fP () const"
.br
.ti -1c
.RI "void \fBsetFretConflict\fP (bool val)"
.br
.ti -1c
.RI "virtual void \fBadd\fP (\fBElement\fP *) override"
.br
.ti -1c
.RI "virtual void \fBremove\fP (\fBElement\fP *) override"
.br
.ti -1c
.RI "bool \fBmirror\fP () const"
.br
.ti -1c
.RI "void \fBsetMirror\fP (bool val)"
.br
.ti -1c
.RI "bool \fBsmall\fP () const"
.br
.ti -1c
.RI "void \fBsetSmall\fP (bool val)"
.br
.ti -1c
.RI "bool \fBplay\fP () const"
.br
.ti -1c
.RI "void \fBsetPlay\fP (bool val)"
.br
.ti -1c
.RI "\fBMs::Tie\fP * \fBtieFor\fP () const"
.br
.ti -1c
.RI "\fBMs::Tie\fP * \fBtieBack\fP () const"
.br
.ti -1c
.RI "void \fBsetTieFor\fP (\fBTie\fP *t)"
.br
.ti -1c
.RI "void \fBsetTieBack\fP (\fBTie\fP *t)"
.br
.ti -1c
.RI "\fBNote\fP * \fBfirstTiedNote\fP () const"
.br
.ti -1c
.RI "\fBNote\fP * \fBlastTiedNote\fP () const"
.br
.ti -1c
.RI "\fBChord\fP * \fBchord\fP () const"
.br
.ti -1c
.RI "void \fBsetChord\fP (\fBChord\fP *a)"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (QPainter *) const override"
.br
.ti -1c
.RI "virtual void \fBread\fP (\fBXmlReader\fP &) override"
.br
.ti -1c
.RI "virtual bool \fBreadProperties\fP (\fBXmlReader\fP &) override"
.br
.ti -1c
.RI "virtual void \fBwrite\fP (\fBXmlWriter\fP &) const override"
.br
.ti -1c
.RI "bool \fBacceptDrop\fP (\fBEditData\fP &) const override"
.br
.ti -1c
.RI "\fBElement\fP * \fBdrop\fP (\fBEditData\fP &)"
.br
.ti -1c
.RI "bool \fBhidden\fP () const"
.br
.ti -1c
.RI "void \fBsetHidden\fP (bool val)"
.br
.ti -1c
.RI "bool \fBdotsHidden\fP () const"
.br
.ti -1c
.RI "void \fBsetDotsHidden\fP (bool val)"
.br
.ti -1c
.RI "NoteType \fBnoteType\fP () const"
.br
.ti -1c
.RI "QString \fBnoteTypeUserName\fP () const"
.br
.ti -1c
.RI "\fBElementList\fP & \fBel\fP ()"
.br
.ti -1c
.RI "const \fBElementList\fP & \fBel\fP () const"
.br
.ti -1c
.RI "int \fBsubchannel\fP () const"
.br
.ti -1c
.RI "void \fBsetSubchannel\fP (int val)"
.br
.ti -1c
.RI "MScore::DirectionH \fBuserMirror\fP () const"
.br
.ti -1c
.RI "void \fBsetUserMirror\fP (MScore::DirectionH d)"
.br
.ti -1c
.RI "\fBDirection\fP \fBuserDotPosition\fP () const"
.br
.ti -1c
.RI "void \fBsetUserDotPosition\fP (\fBDirection\fP d)"
.br
.ti -1c
.RI "bool \fBdotIsUp\fP () const"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "ValueType \fBveloType\fP () const"
.br
.ti -1c
.RI "void \fBsetVeloType\fP (ValueType v)"
.br
.ti -1c
.RI "int \fBveloOffset\fP () const"
.br
.ti -1c
.RI "void \fBsetVeloOffset\fP (int v)"
.br
.ti -1c
.RI "void \fBsetOnTimeOffset\fP (int v)"
.br
.ti -1c
.RI "void \fBsetOffTimeOffset\fP (int v)"
.br
.ti -1c
.RI "int \fBcustomizeVelocity\fP (int velo) const"
.br
.ti -1c
.RI "\fBNoteDot\fP * \fBdot\fP (int n)"
.br
.ti -1c
.RI "const QVector< \fBNoteDot\fP * > & \fBdots\fP () const"
.br
.ti -1c
.RI "QVector< \fBNoteDot\fP * > & \fBdots\fP ()"
.br
.ti -1c
.RI "int \fBqmlDotsCount\fP ()"
.br
.ti -1c
.RI "void \fBupdateAccidental\fP (\fBAccidentalState\fP *)"
.br
.ti -1c
.RI "void \fBupdateLine\fP ()"
.br
.ti -1c
.RI "void \fBsetNval\fP (const \fBNoteVal\fP &, int tick=\-1)"
.br
.ti -1c
.RI "\fBNoteEventList\fP & \fBplayEvents\fP ()"
.br
.ti -1c
.RI "const \fBNoteEventList\fP & \fBplayEvents\fP () const"
.br
.ti -1c
.RI "\fBNoteEvent\fP * \fBnoteEvent\fP (int idx)"
.br
.ti -1c
.RI "void \fBsetPlayEvents\fP (const \fBNoteEventList\fP &l)"
.br
.ti -1c
.RI "const QVector< \fBSpanner\fP * > & \fBspannerFor\fP () const"
.br
.ti -1c
.RI "const QVector< \fBSpanner\fP * > & \fBspannerBack\fP () const"
.br
.ti -1c
.RI "void \fBaddSpannerBack\fP (\fBSpanner\fP *e)"
.br
.ti -1c
.RI "bool \fBremoveSpannerBack\fP (\fBSpanner\fP *e)"
.br
.ti -1c
.RI "void \fBaddSpannerFor\fP (\fBSpanner\fP *e)"
.br
.ti -1c
.RI "bool \fBremoveSpannerFor\fP (\fBSpanner\fP *e)"
.br
.ti -1c
.RI "void \fBtransposeDiatonic\fP (int \fBinterval\fP, bool keepAlterations, bool useDoubleAccidentals)"
.br
.ti -1c
.RI "void \fBundoSetFret\fP (int)"
.br
.ti -1c
.RI "void \fBundoSetString\fP (int)"
.br
.ti -1c
.RI "void \fBundoSetGhost\fP (bool)"
.br
.ti -1c
.RI "void \fBundoSetMirror\fP (bool)"
.br
.ti -1c
.RI "void \fBundoSetSmall\fP (bool)"
.br
.ti -1c
.RI "void \fBundoSetPlay\fP (bool)"
.br
.ti -1c
.RI "void \fBundoSetTuning\fP (qreal)"
.br
.ti -1c
.RI "void \fBundoSetVeloType\fP (ValueType)"
.br
.ti -1c
.RI "void \fBundoSetVeloOffset\fP (int)"
.br
.ti -1c
.RI "void \fBundoSetOnTimeUserOffset\fP (int)"
.br
.ti -1c
.RI "void \fBundoSetOffTimeUserOffset\fP (int)"
.br
.ti -1c
.RI "void \fBundoSetUserMirror\fP (MScore::DirectionH)"
.br
.ti -1c
.RI "void \fBundoSetUserDotPosition\fP (\fBDirection\fP)"
.br
.ti -1c
.RI "void \fBundoSetHeadGroup\fP (NoteHead::Group)"
.br
.ti -1c
.RI "void \fBundoSetHeadType\fP (NoteHead::Type)"
.br
.ti -1c
.RI "virtual QVariant \fBgetProperty\fP (P_ID propertyId) const override"
.br
.ti -1c
.RI "virtual bool \fBsetProperty\fP (P_ID propertyId, const QVariant &) override"
.br
.ti -1c
.RI "virtual QVariant \fBpropertyDefault\fP (P_ID) const override"
.br
.ti -1c
.RI "bool \fBmark\fP () const"
.br
.ti -1c
.RI "void \fBsetMark\fP (bool v) const"
.br
.ti -1c
.RI "virtual void \fBsetScore\fP (\fBScore\fP *s) override"
.br
.ti -1c
.RI "void \fBsetDotY\fP (\fBDirection\fP)"
.br
.ti -1c
.RI "void \fBaddParentheses\fP ()"
.br
.ti -1c
.RI "\fBNoteVal\fP \fBnoteVal\fP () const"
.br
.ti -1c
.RI "virtual \fBElement\fP * \fBnextElement\fP () override"
.br
.ti -1c
.RI "virtual \fBElement\fP * \fBprevElement\fP () override"
.br
.ti -1c
.RI "virtual QString \fBaccessibleInfo\fP () const override"
.br
.ti -1c
.RI "virtual QString \fBscreenReaderInfo\fP () const override"
.br
.ti -1c
.RI "virtual QString \fBaccessibleExtraInfo\fP () const override"
.br
.ti -1c
.RI "virtual \fBShape\fP \fBshape\fP () const override"
.br
.ti -1c
.RI "std::vector< \fBNote\fP * > \fBtiedNotes\fP () const"
.br
.ti -1c
.RI "void \fBsetOffTimeType\fP (int v)"
.br
.ti -1c
.RI "void \fBsetOnTimeType\fP (int v)"
.br
.ti -1c
.RI "int \fBoffTimeType\fP () const"
.br
.ti -1c
.RI "int \fBonTimeType\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static SymId \fBnoteHead\fP (int direction, NoteHead::Group, NoteHead::Type, int tpc, Key key, NoteHeadScheme scheme)"
.br
.ti -1c
.RI "static SymId \fBnoteHead\fP (int direction, NoteHead::Group, NoteHead::Type)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMs::Accidental\fP \fBaccidental\fP"
.br
.ti -1c
.RI "int \fBaccidentalType\fP"
.br
.ti -1c
.RI "int \fBdotsCount\fP"
.br
.ti -1c
.RI "int \fBfret\fP"
.br
.ti -1c
.RI "bool \fBghost\fP"
.br
.ti -1c
.RI "Ms::NoteHead::Group \fBheadGroup\fP"
.br
.ti -1c
.RI "Ms::NoteHead::Type \fBheadType\fP"
.br
.ti -1c
.RI "bool \fBhidden\fP"
.br
.ti -1c
.RI "int \fBline\fP"
.br
.ti -1c
.RI "bool \fBmirror\fP"
.br
.ti -1c
.RI "int \fBpitch\fP"
.br
.ti -1c
.RI "bool \fBplay\fP"
.br
.ti -1c
.RI "int \fBppitch\fP"
.br
.ti -1c
.RI "bool \fBsmall\fP"
.br
.ti -1c
.RI "int \fBstring\fP"
.br
.ti -1c
.RI "int \fBsubchannel\fP"
.br
.ti -1c
.RI "\fBMs::Tie\fP \fBtieBack\fP"
.br
.ti -1c
.RI "\fBMs::Tie\fP \fBtieFor\fP"
.br
.ti -1c
.RI "int \fBtpc\fP"
.br
.ti -1c
.RI "qreal \fBtuning\fP"
.br
.ti -1c
.RI "Ms::MScore::DirectionH \fBuserMirror\fP"
.br
.ti -1c
.RI "int \fBveloOffset\fP"
.br
.ti -1c
.RI "Ms::Note::ValueType \fBveloType\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Graphic representation of a note\&. 
.PP
Definition at line 206 of file note\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool Ms::Note::acceptDrop (\fBEditData\fP &) const\fC [override]\fP, \fC [virtual]\fP"
Return true if this element accepts a drop at canvas relative \fIpos\fP of given element \fItype\fP and \fIsubtype\fP\&.
.PP
Reimplemented by elements that accept drops\&. Used to change cursor shape while dragging to indicate drop targets\&. 
.PP
Reimplemented from \fBMs::Element\fP\&.
.PP
Definition at line 1566 of file note\&.cpp\&.
.SS "\fBElement\fP * Ms::Note::drop (\fBEditData\fP &)\fC [virtual]\fP"
Handle a dropped element at canvas relative \fIpos\fP of given element \fItype\fP and \fIsubtype\fP\&. Returns dropped element if any\&. The ownership of element in DropData is transfered to the called element (if not used, element has to be deleted)\&. The returned element will be selected if not in note edit mode\&.
.PP
Reimplemented by elements that accept drops\&. 
.PP
Reimplemented from \fBMs::Element\fP\&.
.PP
Definition at line 1633 of file note\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MuseScore-2\&.2 from the source code\&.
