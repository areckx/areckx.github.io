<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_k_q_o_auth_manager" kind="class" language="C++" prot="public">
    <compoundname>KQOAuthManager</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8c" prot="public" static="no">
        <name>KQOAuthError</name>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca806cc46435eabdabdaeaf17392cd6c1b" prot="public">
          <name>NoError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca74c6b6e2f68febe66c54d14f5b346c22" prot="public">
          <name>NetworkError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca97da83c6d25a4b45befbd285eab9a17f" prot="public">
          <name>RequestEndpointError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cab3fa9377c46287538950652550c263d9" prot="public">
          <name>RequestValidationError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cae9479a79dc8d66a81106e857c25ddd2f" prot="public">
          <name>RequestUnauthorized</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca7e038060c713ef9f3cafafc9dabaa1e2" prot="public">
          <name>ContentOperationNotPermittedError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cac39c8b4b02087e5ca7dadc7c13950a58" prot="public">
          <name>ContentNotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca449a82dc682e242863085dd044131de2" prot="public">
          <name>RequestError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca6f99724881344d1a3501ea2cca2690f8" prot="public">
          <name>ManagerError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="40" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.h" bodystart="40" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_q_o_auth_manager_1aef5e7293fd7883b7c54f5911520589cb" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_q_o_auth_manager_private" kindref="compound">KQOAuthManagerPrivate</ref> *</type>
        <definition>KQOAuthManagerPrivate* KQOAuthManager::d_ptr</definition>
        <argsstring></argsstring>
        <name>d_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="197" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a947992e36987a0d1a5c1f958f575b067" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KQOAuthManager::KQOAuthManager</definition>
        <argsstring>(QObject *parent=0)</argsstring>
        <name>KQOAuthManager</name>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="52" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a773ac70ade0be075f2b79afd995fd147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KQOAuthManager::~KQOAuthManager</definition>
        <argsstring>()</argsstring>
        <name>~KQOAuthManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="53" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1acbef5c40d8ef15099270323b25c86ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KQOAuthError</type>
        <definition>KQOAuthManager::KQOAuthError KQOAuthManager::lastError</definition>
        <argsstring>()</argsstring>
        <name>lastError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="55" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a7ed4ddfccc440383f72215cff7cb37ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::executeRequest</definition>
        <argsstring>(KQOAuthRequest *request)</argsstring>
        <name>executeRequest</name>
        <param>
          <type><ref refid="class_k_q_o_auth_request" kindref="compound">KQOAuthRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The manager executes the given request. It takes the HTTP parameters from the request and uses QNetworkAccessManager to submit the HTTP request to the net. When the request is done it will emit signal requestReady(QByteArray networkReply). NOTE: At the moment there is no timeout for the request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="63" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="158" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1aa6e5a3664329ba0e52d8447f0cd911f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::executeAuthorizedRequest</definition>
        <argsstring>(KQOAuthRequest *request, int id)</argsstring>
        <name>executeAuthorizedRequest</name>
        <param>
          <type><ref refid="class_k_q_o_auth_request" kindref="compound">KQOAuthRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="64" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="257" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::setHandleUserAuthorization</definition>
        <argsstring>(bool set)</argsstring>
        <name>setHandleUserAuthorization</name>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates to the user that <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> should handle user authorization by opening the user&apos;s default browser and parsing the reply from the service. By setting the parameter to true, <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> will store intermediate results of the OAuth 1.0 process in its own opaque request. This information is used in the user authorization process and also when calling <ref refid="class_k_q_o_auth_manager_1ab605e437fb159d0a20e2e92601d679fe" kindref="member">sendAuthorizedRequest()</ref>. NOTE: You need to set this to true if you want to use <ref refid="class_k_q_o_auth_manager_1a657d5a05c680ed6c53199e9de59f2e1c" kindref="member">getUserAccessTokens()</ref> or <ref refid="class_k_q_o_auth_manager_1ab605e437fb159d0a20e2e92601d679fe" kindref="member">sendAuthorizedRequest()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="74" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="371" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a6da0168889f374d2b2d8e3a2ac0efe7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::setHandleAuthorizationPageOpening</definition>
        <argsstring>(bool set)</argsstring>
        <name>setHandleAuthorizationPageOpening</name>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> should launch the browser with the user authorization page itself.</para><para>If set to true (the default), the <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> uses QDesktopServices::openUrl() for opening the browser. Otherwise it emits the authorizationPageRequested() signal which must then be handled by the calling code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="83" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a559976e71f9e27e0a34ce8aeacd8387a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KQOAuthManager::hasTemporaryToken</definition>
        <argsstring>()</argsstring>
        <name>hasTemporaryToken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> has retrieved the oauth_token value. Otherwise return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="89" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="383" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a2286fa49c7d21a46361cdac897efb726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KQOAuthManager::isVerified</definition>
        <argsstring>()</argsstring>
        <name>isVerified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the user has authorized us to use the protected resources. Otherwise returns false. NOTE: In order for <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> to know if the user has authorized us to use the protected resources, <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> must be in control of the user authorization process. Hence, this returns true if <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> is set to true and the user is authorized with <ref refid="class_k_q_o_auth_manager_1ab33a5aead44d35476d13152f4a35700b" kindref="member">getUserAuthorization()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="98" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1ad16edf00de0367e95f0b04b9de97ba32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KQOAuthManager::isAuthorized</definition>
        <argsstring>()</argsstring>
        <name>isAuthorized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> has the access token and hence can access the protected resources. Otherwise returns false. NOTE: In order for <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> to know if we have access to protected resource <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> must be in control of the user authorization process and requesting the acess token. Hence, this returns true if <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> is set to true and the user is authorized with <ref refid="class_k_q_o_auth_manager_1ab33a5aead44d35476d13152f4a35700b" kindref="member">getUserAuthorization()</ref> and the access token must be retrieved with getUserAccessTokens. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="108" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="395" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1ab33a5aead44d35476d13152f4a35700b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::getUserAuthorization</definition>
        <argsstring>(QUrl authorizationEndpoint)</argsstring>
        <name>getUserAuthorization</name>
        <param>
          <type>QUrl</type>
          <declname>authorizationEndpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience API for authorizing the user. The call will open the user&apos;s default browser, setup a local HTTP server and parse the reply from the service after the user has authorized us to access protected resources. If the user authorizes us to access protected resources, the verifier token is stored in <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> for further use. In order to use this method, you must set <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> to true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="117" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="437" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a657d5a05c680ed6c53199e9de59f2e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::getUserAccessTokens</definition>
        <argsstring>(QUrl accessTokenEndpoint)</argsstring>
        <name>getUserAccessTokens</name>
        <param>
          <type>QUrl</type>
          <declname>accessTokenEndpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience API for retrieving the access token in exchange for the temporary token and the verifier. This call will create a <ref refid="class_k_q_o_auth_request" kindref="compound">KQOAuthRequest</ref> and use the previously stored temporary token and verifier to exchange for the access token, which will be used to access the protected resources. Note that in order to use this method, <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> must be in control of the user authorization process. Set <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> to true and retrieve user authorization with void getUserAuthorization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="126" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="474" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a9bcf83ccbd9fbbc352b7a228d80713ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::verifyToken</definition>
        <argsstring>(const QString &amp;token, const QString &amp;verifier)</argsstring>
        <name>verifyToken</name>
        <param>
          <type>const QString &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>verifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a conveience API for setting the token verifier. If <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> is set to false you need to call this function before calling <ref refid="class_k_q_o_auth_manager_1a657d5a05c680ed6c53199e9de59f2e1c" kindref="member">getUserAccessTokens()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="132" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="503" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1ab605e437fb159d0a20e2e92601d679fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::sendAuthorizedRequest</definition>
        <argsstring>(QUrl requestEndpoint, const KQOAuthParameters &amp;requestParameters)</argsstring>
        <name>sendAuthorizedRequest</name>
        <param>
          <type>QUrl</type>
          <declname>requestEndpoint</declname>
        </param>
        <param>
          <type>const KQOAuthParameters &amp;</type>
          <declname>requestParameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a request to the protected resources. Parameters for the request are service specific and are given to the &apos;requestParameters&apos; as parameters. Note that in order to use this method, <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> must be in control of the user authorization process. Set <ref refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" kindref="member">setHandleUserAuthorization()</ref> to true and retrieve user authorization with void getUserAuthorization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="139" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="510" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a4cc730a5e030d461c889cd844b6b9e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::setNetworkManager</definition>
        <argsstring>(QNetworkAccessManager *manager)</argsstring>
        <name>setNetworkManager</name>
        <param>
          <type>QNetworkAccessManager *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a custom QNetworkAccessManager to handle network requests. This method can be useful if the application is using some proxy settings for example. The application is responsible for deleting this manager. <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> will not delete any previously given manager. If the manager is NULL, the manager will not be set and the KQOAuthManager::Error. If no manager is given, <ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref> will use the default one it will create by itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="149" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="407" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a0e798ce8a270552a490369d6afd35e2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QNetworkAccessManager *</type>
        <definition>QNetworkAccessManager * KQOAuthManager::networkManager</definition>
        <argsstring>() const</argsstring>
        <name>networkManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the given QNetworkAccessManager. Returns NULL if none is given. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="154" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="423" bodyend="432"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a637a90374031a674248dd2c38b56c5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::requestReady</definition>
        <argsstring>(QByteArray networkReply)</argsstring>
        <name>requestReady</name>
        <param>
          <type>QByteArray</type>
          <declname>networkReply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="159" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a7f14d3dee2310d76f8a129eb37b1214f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::authorizedRequestReady</definition>
        <argsstring>(QByteArray networkReply, int id)</argsstring>
        <name>authorizedRequestReady</name>
        <param>
          <type>QByteArray</type>
          <declname>networkReply</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="161" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a8f95a236a939a075690d32fd1be2b8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::authorizationPageRequested</definition>
        <argsstring>(QUrl pageUrl)</argsstring>
        <name>authorizationPageRequested</name>
        <param>
          <type>QUrl</type>
          <declname>pageUrl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="165" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a848468c8c53717c76f4b553620669cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::receivedToken</definition>
        <argsstring>(QString oauth_token, QString oauth_token_secret)</argsstring>
        <name>receivedToken</name>
        <param>
          <type>QString</type>
          <declname>oauth_token</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>oauth_token_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="169" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="278" bodyend="282"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1acddf279ebc3585afbed2ed8fdf3f008d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::temporaryTokenReceived</definition>
        <argsstring>(QString oauth_token, QString oauth_token_secret)</argsstring>
        <name>temporaryTokenReceived</name>
        <param>
          <type>QString</type>
          <declname>oauth_token</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>oauth_token_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="173" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a31b318f4f7ec3b73785082e68be8f979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::authorizationReceived</definition>
        <argsstring>(QString oauth_token, QString oauth_verifier)</argsstring>
        <name>authorizationReceived</name>
        <param>
          <type>QString</type>
          <declname>oauth_token</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>oauth_verifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="179" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1aebc8f8f6e6cb10efc7189c2273191d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::accessTokenReceived</definition>
        <argsstring>(QString oauth_token, QString oauth_token_secret)</argsstring>
        <name>accessTokenReceived</name>
        <param>
          <type>QString</type>
          <declname>oauth_token</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>oauth_token_secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="183" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_q_o_auth_manager_1a77a72a935a30489842981b6ea21b9f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::authorizedRequestDone</definition>
        <argsstring>()</argsstring>
        <name>authorizedRequestDone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="187" column="1" bodyfile="build.release/thirdparty/kQOAuth/kqoauth_autogen/EWIEGA46WW/moc_kqoauthmanager.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-slot">
      <memberdef kind="slot" id="class_k_q_o_auth_manager_1ae4477d7fea48c4e78bd5fdb5696bdb29" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::onRequestReplyReceived</definition>
        <argsstring>()</argsstring>
        <name>onRequestReplyReceived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="190" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="541" bodyend="631"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_q_o_auth_manager_1ab00224638f11d559653a4f0425252554" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::onAuthorizedRequestReplyReceived</definition>
        <argsstring>()</argsstring>
        <name>onAuthorizedRequestReplyReceived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="191" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="633" bodyend="699"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_q_o_auth_manager_1a80aa2b10b868799abf14d21a5853cfc0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::onVerificationReceived</definition>
        <argsstring>(QMultiMap&lt; QString, QString &gt; response)</argsstring>
        <name>onVerificationReceived</name>
        <param>
          <type>QMultiMap&lt; QString, QString &gt;</type>
          <declname>response</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="192" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="702" bodyend="720"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_q_o_auth_manager_1af144b0243f53442a993e55587c14ce9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::slotError</definition>
        <argsstring>(QNetworkReply::NetworkError error)</argsstring>
        <name>slotError</name>
        <param>
          <type>QNetworkReply::NetworkError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="193" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="722" bodyend="771"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_q_o_auth_manager_1a57d09997e4fb24a6e9903c68993516ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KQOAuthManager::requestTimeout</definition>
        <argsstring>()</argsstring>
        <name>requestTimeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="194" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.cpp" bodystart="774" bodyend="783"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_q_o_auth_manager_1a097403fff1942e97c6f7b4868f575b94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KQOAuthManager::Q_DECLARE_PRIVATE</definition>
        <argsstring>(KQOAuthManager)</argsstring>
        <name>Q_DECLARE_PRIVATE</name>
        <param>
          <type><ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_k_q_o_auth_manager_1ad78bf535a32a40c3ad00026fefdf663d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KQOAuthManager::Q_DISABLE_COPY</definition>
        <argsstring>(KQOAuthManager)</argsstring>
        <name>Q_DISABLE_COPY</name>
        <param>
          <type><ref refid="class_k_q_o_auth_manager" kindref="compound">KQOAuthManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="199" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="9403">
        <label>QObject</label>
      </node>
      <node id="9402">
        <label>KQOAuthManager</label>
        <link refid="class_k_q_o_auth_manager"/>
        <childnode refid="9403" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9405">
        <label>QObject</label>
      </node>
      <node id="9404">
        <label>KQOAuthManager</label>
        <link refid="class_k_q_o_auth_manager"/>
        <childnode refid="9405" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="thirdparty/kQOAuth/kqoauthmanager.h" line="36" column="1" bodyfile="thirdparty/kQOAuth/kqoauthmanager.h" bodystart="35" bodyend="201"/>
    <listofallmembers>
      <member refid="class_k_q_o_auth_manager_1aebc8f8f6e6cb10efc7189c2273191d39" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>accessTokenReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1a8f95a236a939a075690d32fd1be2b8cf" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>authorizationPageRequested</name></member>
      <member refid="class_k_q_o_auth_manager_1a31b318f4f7ec3b73785082e68be8f979" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>authorizationReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1a77a72a935a30489842981b6ea21b9f5d" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>authorizedRequestDone</name></member>
      <member refid="class_k_q_o_auth_manager_1a7f14d3dee2310d76f8a129eb37b1214f" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>authorizedRequestReady</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cac39c8b4b02087e5ca7dadc7c13950a58" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>ContentNotFound</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca7e038060c713ef9f3cafafc9dabaa1e2" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>ContentOperationNotPermittedError</name></member>
      <member refid="class_k_q_o_auth_manager_1aef5e7293fd7883b7c54f5911520589cb" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>d_ptr</name></member>
      <member refid="class_k_q_o_auth_manager_1aa6e5a3664329ba0e52d8447f0cd911f0" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>executeAuthorizedRequest</name></member>
      <member refid="class_k_q_o_auth_manager_1a7ed4ddfccc440383f72215cff7cb37ef" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>executeRequest</name></member>
      <member refid="class_k_q_o_auth_manager_1a657d5a05c680ed6c53199e9de59f2e1c" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>getUserAccessTokens</name></member>
      <member refid="class_k_q_o_auth_manager_1ab33a5aead44d35476d13152f4a35700b" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>getUserAuthorization</name></member>
      <member refid="class_k_q_o_auth_manager_1a559976e71f9e27e0a34ce8aeacd8387a" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>hasTemporaryToken</name></member>
      <member refid="class_k_q_o_auth_manager_1ad16edf00de0367e95f0b04b9de97ba32" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>isAuthorized</name></member>
      <member refid="class_k_q_o_auth_manager_1a2286fa49c7d21a46361cdac897efb726" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>isVerified</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8c" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>KQOAuthError</name></member>
      <member refid="class_k_q_o_auth_manager_1a947992e36987a0d1a5c1f958f575b067" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>KQOAuthManager</name></member>
      <member refid="class_k_q_o_auth_manager_1acbef5c40d8ef15099270323b25c86ec6" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>lastError</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca6f99724881344d1a3501ea2cca2690f8" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>ManagerError</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca74c6b6e2f68febe66c54d14f5b346c22" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>NetworkError</name></member>
      <member refid="class_k_q_o_auth_manager_1a0e798ce8a270552a490369d6afd35e2d" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>networkManager</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca806cc46435eabdabdaeaf17392cd6c1b" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>NoError</name></member>
      <member refid="class_k_q_o_auth_manager_1ab00224638f11d559653a4f0425252554" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>onAuthorizedRequestReplyReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1ae4477d7fea48c4e78bd5fdb5696bdb29" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>onRequestReplyReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1a80aa2b10b868799abf14d21a5853cfc0" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>onVerificationReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1a097403fff1942e97c6f7b4868f575b94" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>Q_DECLARE_PRIVATE</name></member>
      <member refid="class_k_q_o_auth_manager_1ad78bf535a32a40c3ad00026fefdf663d" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>Q_DISABLE_COPY</name></member>
      <member refid="class_k_q_o_auth_manager_1a848468c8c53717c76f4b553620669cba" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>receivedToken</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca97da83c6d25a4b45befbd285eab9a17f" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>RequestEndpointError</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8ca449a82dc682e242863085dd044131de2" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>RequestError</name></member>
      <member refid="class_k_q_o_auth_manager_1a637a90374031a674248dd2c38b56c5db" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>requestReady</name></member>
      <member refid="class_k_q_o_auth_manager_1a57d09997e4fb24a6e9903c68993516ab" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>requestTimeout</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cae9479a79dc8d66a81106e857c25ddd2f" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>RequestUnauthorized</name></member>
      <member refid="class_k_q_o_auth_manager_1afdc8962f67eb38149455a14c0a5efb8cab3fa9377c46287538950652550c263d9" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>RequestValidationError</name></member>
      <member refid="class_k_q_o_auth_manager_1ab605e437fb159d0a20e2e92601d679fe" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>sendAuthorizedRequest</name></member>
      <member refid="class_k_q_o_auth_manager_1a6da0168889f374d2b2d8e3a2ac0efe7d" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>setHandleAuthorizationPageOpening</name></member>
      <member refid="class_k_q_o_auth_manager_1a55409df469317596b81ab50823eb6a97" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>setHandleUserAuthorization</name></member>
      <member refid="class_k_q_o_auth_manager_1a4cc730a5e030d461c889cd844b6b9e40" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>setNetworkManager</name></member>
      <member refid="class_k_q_o_auth_manager_1af144b0243f53442a993e55587c14ce9d" prot="private" virt="non-virtual"><scope>KQOAuthManager</scope><name>slotError</name></member>
      <member refid="class_k_q_o_auth_manager_1acddf279ebc3585afbed2ed8fdf3f008d" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>temporaryTokenReceived</name></member>
      <member refid="class_k_q_o_auth_manager_1a9bcf83ccbd9fbbc352b7a228d80713ef" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>verifyToken</name></member>
      <member refid="class_k_q_o_auth_manager_1a773ac70ade0be075f2b79afd995fd147" prot="public" virt="non-virtual"><scope>KQOAuthManager</scope><name>~KQOAuthManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
