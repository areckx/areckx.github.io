<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="zlib_8h" kind="file" language="C++">
    <compoundname>zlib.h</compoundname>
    <includes refid="zconf_8h" local="yes">zconf.h</includes>
    <includedby refid="adler32_8c" local="yes">thirdparty/freetype/src/gzip/adler32.c</includedby>
    <includedby refid="zutil_8h" local="yes">thirdparty/freetype/src/gzip/zutil.h</includedby>
    <includedby refid="_flate_encoder_8h" local="no">thirdparty/poppler/poppler/FlateEncoder.h</includedby>
    <includedby refid="_flate_stream_8h" local="no">thirdparty/poppler/poppler/FlateStream.h</includedby>
    <includedby refid="qzip_8cpp" local="no">thirdparty/qzip/qzip.cpp</includedby>
    <incdepgraph>
      <node id="80123">
        <label>thirdparty/freetype/src/gzip/zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="80124" relation="include">
        </childnode>
      </node>
      <node id="80124">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="80134">
        <label>thirdparty/poppler/poppler/FlateEncoder.h</label>
        <link refid="_flate_encoder_8h_source"/>
        <childnode refid="80135" relation="include">
        </childnode>
      </node>
      <node id="80135">
        <label>thirdparty/poppler/poppler/FlateEncoder.cc</label>
        <link refid="_flate_encoder_8cc_source"/>
      </node>
      <node id="80128">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c_source"/>
      </node>
      <node id="80133">
        <label>thirdparty/freetype/src/gzip/zutil.c</label>
        <link refid="zutil_8c_source"/>
      </node>
      <node id="80127">
        <label>thirdparty/freetype/src/gzip/zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80128" relation="include">
        </childnode>
        <childnode refid="80129" relation="include">
        </childnode>
        <childnode refid="80130" relation="include">
        </childnode>
        <childnode refid="80131" relation="include">
        </childnode>
        <childnode refid="80132" relation="include">
        </childnode>
        <childnode refid="80133" relation="include">
        </childnode>
      </node>
      <node id="80126">
        <label>thirdparty/freetype/src/gzip/adler32.c</label>
        <link refid="adler32_8c_source"/>
      </node>
      <node id="80125">
        <label>thirdparty/freetype/src/gzip/zlib.h</label>
        <link refid="zlib_8h"/>
        <childnode refid="80126" relation="include">
        </childnode>
        <childnode refid="80127" relation="include">
        </childnode>
        <childnode refid="80134" relation="include">
        </childnode>
        <childnode refid="80136" relation="include">
        </childnode>
        <childnode refid="80137" relation="include">
        </childnode>
      </node>
      <node id="80132">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c_source"/>
      </node>
      <node id="80137">
        <label>thirdparty/qzip/qzip.cpp</label>
        <link refid="qzip_8cpp_source"/>
      </node>
      <node id="80131">
        <label>thirdparty/freetype/src/gzip/inftrees.c</label>
        <link refid="inftrees_8c_source"/>
      </node>
      <node id="80130">
        <label>thirdparty/freetype/src/gzip/inflate.c</label>
        <link refid="inflate_8c_source"/>
      </node>
      <node id="80136">
        <label>thirdparty/poppler/poppler/FlateStream.h</label>
        <link refid="_flate_stream_8h_source"/>
      </node>
      <node id="80129">
        <label>thirdparty/freetype/src/gzip/infcodes.c</label>
        <link refid="infcodes_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structz__stream__s" prot="public">z_stream_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="zlib_8h_1a51dc9dc65e483b3222c1f0f6a87eb76e" prot="public" static="no">
        <name>ZLIB_VERSION</name>
        <initializer>&quot;1.1.4&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="40" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ac3b62e37b9922d9496014515acd6083a" prot="public" static="no">
        <name>Z_NO_FLUSH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="125" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1adbd49089a5611593f05ac80c9e12cc7f" prot="public" static="no">
        <name>Z_PARTIAL_FLUSH</name>
        <initializer>1 /* will be removed, use Z_SYNC_FLUSH instead */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="126" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aa32ca175522e0ef314f4dc0b0196bada" prot="public" static="no">
        <name>Z_SYNC_FLUSH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="127" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aed4fbb038c3973aacf52fccffbc44b53" prot="public" static="no">
        <name>Z_FULL_FLUSH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="128" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a876a626ba14eb12eea4bbf6823b6ca50" prot="public" static="no">
        <name>Z_FINISH</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="129" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a8cb802b6a11e926478dc6547c514c65c" prot="public" static="no">
        <name>Z_OK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="132" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a7d94a4a852228a899864a0053162e7a8" prot="public" static="no">
        <name>Z_STREAM_END</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="133" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a32916ba675b2d06463da2576b6a49d64" prot="public" static="no">
        <name>Z_NEED_DICT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="134" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a3c66d64c427c0337c64e578537478737" prot="public" static="no">
        <name>Z_ERRNO</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="135" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1aad97cde83a9a4bb77f5c3b03bb68e483" prot="public" static="no">
        <name>Z_STREAM_ERROR</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="136" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a9eda83d428a71752d148f38b5dbe04f2" prot="public" static="no">
        <name>Z_DATA_ERROR</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="137" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ae2be6be871e377c6e2c25a7296ce320c" prot="public" static="no">
        <name>Z_MEM_ERROR</name>
        <initializer>(-4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="138" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a425e2f0664e1b1f75bf2bffab88d353d" prot="public" static="no">
        <name>Z_BUF_ERROR</name>
        <initializer>(-5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="139" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a7634cdd55f955ee1be99c065c6977371" prot="public" static="no">
        <name>Z_VERSION_ERROR</name>
        <initializer>(-6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="140" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a496a4523776bcfa14568cd083b59f24c" prot="public" static="no">
        <name>Z_NO_COMPRESSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="145" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad5222ae19b77c6e83815d07ca5d03fd8" prot="public" static="no">
        <name>Z_BEST_SPEED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="146" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a8db83edd9dea51f8cf0afd1727838b95" prot="public" static="no">
        <name>Z_BEST_COMPRESSION</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="147" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1af5387baee05124298e431ebe6fe96b17" prot="public" static="no">
        <name>Z_DEFAULT_COMPRESSION</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="148" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1af01ccb5a9db8d415cde987d9553ad200" prot="public" static="no">
        <name>Z_FILTERED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="151" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a1eec3d3720ba91fd54fa08d2757c1785" prot="public" static="no">
        <name>Z_HUFFMAN_ONLY</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="152" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a580d7c2527e653ddd783109271750849" prot="public" static="no">
        <name>Z_DEFAULT_STRATEGY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="153" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a2bfe22ed89d3553335d18a4c3cab67af" prot="public" static="no">
        <name>Z_BINARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="156" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a9a852d9163cdb10687403d4e79dda06e" prot="public" static="no">
        <name>Z_ASCII</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="157" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a4be54d9d68d40adb73f87492284cc290" prot="public" static="no">
        <name>Z_UNKNOWN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="158" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a27a96226f3dc88e4743131c632adf32f" prot="public" static="no">
        <name>Z_DEFLATED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="161" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad15afa2776b41b2f4d8582dd152bd736" prot="public" static="no">
        <name>Z_NULL</name>
        <initializer>0  /* for initializing zalloc, zfree, opaque */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="164" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ae7440c1c5a8becba6dbf410275dc0a5c" prot="public" static="no">
        <name>deflateInit</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <initializer>deflateInit_((strm), (level),       ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="815" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1ad7c6797b618699f70f61323c5184f26e" prot="public" static="no">
        <name>inflateInit</name>
        <param><defname>strm</defname></param>
        <initializer>inflateInit_((strm),                ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="817" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a59b575a521efe7ea0d3b9dd3c8d315c1" prot="public" static="no">
        <name>deflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <param><defname>method</defname></param>
        <param><defname>windowBits</defname></param>
        <param><defname>memLevel</defname></param>
        <param><defname>strategy</defname></param>
        <initializer>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                      (strategy),           ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="819" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zlib_8h_1a611fc206e69f34e812ca8b590982fdd5" prot="public" static="no">
        <name>inflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>windowBits</defname></param>
        <initializer>inflateInit2_((strm), (windowBits), ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="822" column="9" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="zlib_8h_1a50c1ee21dddbe571817d8207f067d64a" prot="public" static="no">
        <type>voidpf alloc_func</type>
        <definition>typedef void free_func OF((voidpf opaque, voidpf address))</definition>
        <argsstring>((voidpf opaque, uInt items, uInt size))</argsstring>
        <name>OF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="63" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1afa60092f4e0b9bc4f23b41c6930463f0" prot="public" static="no">
        <type>struct <ref refid="structz__stream__s" kindref="compound">z_stream_s</ref></type>
        <definition>typedef struct z_stream_s  z_stream</definition>
        <argsstring></argsstring>
        <name>z_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="zlib_8h_1a6ede25c84d3c9f8632305866acffb1d6" prot="public" static="no">
        <type><ref refid="structz__stream__s" kindref="compound">z_stream</ref> FAR *</type>
        <definition>typedef z_stream FAR* z_streamp</definition>
        <argsstring></argsstring>
        <name>z_streamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="89" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="zlib_8h_1ad2ba6d9035f493ae9191a5d9f150367e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int flush</definition>
        <argsstring></argsstring>
        <name>flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="309" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zlib_8h_1ae42f696789fa50b0d534b80f2fd88417" prot="public" static="no" mutable="no">
        <type>const Bytef *</type>
        <definition>const Bytef* buf</definition>
        <argsstring></argsstring>
        <name>buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="775" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zlib_8h_1ad8c3db4434e9cb5cd772cc009f40e856" prot="public" static="no" mutable="no">
        <type>const Bytef uInt</type>
        <definition>const char int const unsigned char int len</definition>
        <argsstring></argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="775" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zlib_8h_1a8b399da0014447c2c36fe1c88c52d38e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int windowBits</definition>
        <argsstring></argsstring>
        <name>windowBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="813" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zlib_8h_1a7a27f70bfdb0dc3b6050c8c8442c93dd" prot="public" static="no" mutable="no">
        <type>int const char *</type>
        <definition>int const char* version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="814" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zlib_8h_1a441c4b70f97a9ebcd7982f7dcc6ef0f4" prot="public" static="no" mutable="no">
        <type>int const char int</type>
        <definition>int const char int stream_size</definition>
        <argsstring></argsstring>
        <name>stream_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="814" column="1" bodyfile="thirdparty/freetype/src/gzip/zlib.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="zlib_8h_1a21fde6e6abdbe49d3137ca570bb35290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ZEXTERN</definition>
        <argsstring>(int) inflate OF((z_streamp strm</argsstring>
        <name>ZEXTERN</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zlib_8h_1a6fc2b4a985d00839e1fa5b1756a16ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ZEXTERN</definition>
        <argsstring>(uLong) adler32 OF((uLong adler</argsstring>
        <name>ZEXTERN</name>
        <param>
          <type>uLong</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zlib.h" line="775" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>zlib.h<sp/>--<sp/>interface<sp/>of<sp/>the<sp/>&apos;zlib&apos;<sp/>general<sp/>purpose<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>version<sp/>1.1.4,<sp/>March<sp/>11th,<sp/>2002</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Jean-loup<sp/>Gailly<sp/>and<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>Jean-loup<sp/>Gailly<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>jloup@gzip.org<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>madler@alumni.caltech.edu</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>The<sp/>data<sp/>format<sp/>used<sp/>by<sp/>the<sp/>zlib<sp/>library<sp/>is<sp/>described<sp/>by<sp/>RFCs<sp/>(Request<sp/>for</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>Comments)<sp/>1950<sp/>to<sp/>1952<sp/>in<sp/>the<sp/>files<sp/>ftp://ds.internic.net/rfc/rfc1950.txt</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>(zlib<sp/>format),<sp/>rfc1951.txt<sp/>(deflate<sp/>format)<sp/>and<sp/>rfc1952.txt<sp/>(gzip<sp/>format).</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ZLIB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ZLIB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zconf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERSION<sp/>&quot;1.1.4&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;zlib&apos;<sp/>compression<sp/>library<sp/>provides<sp/>in-memory<sp/>compression<sp/>and</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>decompression<sp/>functions,<sp/>including<sp/>integrity<sp/>checks<sp/>of<sp/>the<sp/>uncompressed</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>data.<sp/><sp/>This<sp/>version<sp/>of<sp/>the<sp/>library<sp/>supports<sp/>only<sp/>one<sp/>compression<sp/>method</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>(deflation)<sp/>but<sp/>other<sp/>algorithms<sp/>will<sp/>be<sp/>added<sp/>later<sp/>and<sp/>will<sp/>have<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>stream<sp/>interface.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compression<sp/>can<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step<sp/>if<sp/>the<sp/>buffers<sp/>are<sp/>large</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>enough<sp/>(for<sp/>example<sp/>if<sp/>an<sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed),<sp/>or<sp/>can<sp/>be<sp/>done<sp/>by</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>repeated<sp/>calls<sp/>of<sp/>the<sp/>compression<sp/>function.<sp/><sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>application<sp/>must<sp/>provide<sp/>more<sp/>input<sp/>and/or<sp/>consume<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>(providing<sp/>more<sp/>output<sp/>space)<sp/>before<sp/>each<sp/>call.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>library<sp/>also<sp/>supports<sp/>reading<sp/>and<sp/>writing<sp/>files<sp/>in<sp/>gzip<sp/>(.gz)<sp/>format</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>with<sp/>an<sp/>interface<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>stdio.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>library<sp/>does<sp/>not<sp/>install<sp/>any<sp/>signal<sp/>handler.<sp/>The<sp/>decoder<sp/>checks</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>the<sp/>consistency<sp/>of<sp/>the<sp/>compressed<sp/>data,<sp/>so<sp/>the<sp/>library<sp/>should<sp/>never</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>crash<sp/>even<sp/>in<sp/>case<sp/>of<sp/>corrupted<sp/>input.</highlight></codeline>
<codeline lineno="61"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>voidpf<sp/>(*alloc_func)<sp/>OF((voidpf<sp/>opaque,<sp/>uInt<sp/>items,<sp/>uInt<sp/>size));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/>(*free_func)<sp/><sp/>OF((voidpf<sp/>opaque,<sp/>voidpf<sp/>address));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structz__stream__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structz__stream__s" kindref="compound">z_stream_s</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Bytef<sp/><sp/><sp/><sp/>*next_in;<sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>input<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/><sp/><sp/><sp/>avail_in;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>at<sp/>next_in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/><sp/><sp/><sp/>total_in;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>nb<sp/>of<sp/>input<sp/>bytes<sp/>read<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Bytef<sp/><sp/><sp/><sp/>*next_out;<sp/></highlight><highlight class="comment">/*<sp/>next<sp/>output<sp/>byte<sp/>should<sp/>be<sp/>put<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/><sp/><sp/><sp/>avail_out;<sp/></highlight><highlight class="comment">/*<sp/>remaining<sp/>free<sp/>space<sp/>at<sp/>next_out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/><sp/><sp/><sp/>total_out;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>nb<sp/>of<sp/>bytes<sp/>output<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*msg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>error<sp/>message,<sp/>NULL<sp/>if<sp/>no<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/>FAR<sp/>*state;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>visible<sp/>by<sp/>applications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_func<sp/>zalloc;<sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>allocate<sp/>the<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>free_func<sp/><sp/>zfree;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>free<sp/>the<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/><sp/><sp/><sp/><sp/>opaque;<sp/><sp/></highlight><highlight class="comment">/*<sp/>private<sp/>data<sp/>object<sp/>passed<sp/>to<sp/>zalloc<sp/>and<sp/>zfree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>data_type;<sp/><sp/></highlight><highlight class="comment">/*<sp/>best<sp/>guess<sp/>about<sp/>the<sp/>data<sp/>type:<sp/>ascii<sp/>or<sp/>binary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/><sp/><sp/>adler;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>adler32<sp/>value<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/><sp/><sp/>reserved;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved<sp/>for<sp/>future<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="structz__stream__s" kindref="compound">z_stream</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structz__stream__s" kindref="compound">z_stream</ref><sp/>FAR<sp/>*z_streamp;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>The<sp/>application<sp/>must<sp/>update<sp/>next_in<sp/>and<sp/>avail_in<sp/>when<sp/>avail_in<sp/>has</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>dropped<sp/>to<sp/>zero.<sp/>It<sp/>must<sp/>update<sp/>next_out<sp/>and<sp/>avail_out<sp/>when<sp/>avail_out</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>has<sp/>dropped<sp/>to<sp/>zero.<sp/>The<sp/>application<sp/>must<sp/>initialize<sp/>zalloc,<sp/>zfree<sp/>and</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>opaque<sp/>before<sp/>calling<sp/>the<sp/>init<sp/>function.<sp/>All<sp/>other<sp/>fields<sp/>are<sp/>set<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>library<sp/>and<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>The<sp/>opaque<sp/>value<sp/>provided<sp/>by<sp/>the<sp/>application<sp/>will<sp/>be<sp/>passed<sp/>as<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>for<sp/>calls<sp/>of<sp/>zalloc<sp/>and<sp/>zfree.<sp/>This<sp/>can<sp/>be<sp/>useful<sp/>for<sp/>custom</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>memory<sp/>management.<sp/>The<sp/>compression<sp/>library<sp/>attaches<sp/>no<sp/>meaning<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>opaque<sp/>value.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>zalloc<sp/>must<sp/>return<sp/>Z_NULL<sp/>if<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>memory<sp/>for<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>If<sp/>zlib<sp/>is<sp/>used<sp/>in<sp/>a<sp/>multi-threaded<sp/>application,<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>thread<sp/>safe.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>On<sp/>16-bit<sp/>systems,<sp/>the<sp/>functions<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be<sp/>able<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>exactly<sp/>65536<sp/>bytes,<sp/>but<sp/>will<sp/>not<sp/>be<sp/>required<sp/>to<sp/>allocate<sp/>more<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>symbol<sp/>MAXSEG_64K<sp/>is<sp/>defined<sp/>(see<sp/>zconf.h).<sp/>WARNING:<sp/>On<sp/>MSDOS,</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>pointers<sp/>returned<sp/>by<sp/>zalloc<sp/>for<sp/>objects<sp/>of<sp/>exactly<sp/>65536<sp/>bytes<sp/>*must*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>have<sp/>their<sp/>offset<sp/>normalized<sp/>to<sp/>zero.<sp/>The<sp/>default<sp/>allocation<sp/>function</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>by<sp/>this<sp/>library<sp/>ensures<sp/>this<sp/>(see<sp/>zutil.c).<sp/>To<sp/>reduce<sp/>memory</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>requirements<sp/>and<sp/>avoid<sp/>any<sp/>allocation<sp/>of<sp/>64K<sp/>objects,<sp/>at<sp/>the<sp/>expense<sp/>of</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>ratio,<sp/>compile<sp/>the<sp/>library<sp/>with<sp/>-DMAX_WBITS=14<sp/>(see<sp/>zconf.h).</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>The<sp/>fields<sp/>total_in<sp/>and<sp/>total_out<sp/>can<sp/>be<sp/>used<sp/>for<sp/>statistics<sp/>or</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>progress<sp/>reports.<sp/>After<sp/>compression,<sp/>total_in<sp/>holds<sp/>the<sp/>total<sp/>size<sp/>of</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>the<sp/>uncompressed<sp/>data<sp/>and<sp/>may<sp/>be<sp/>saved<sp/>for<sp/>use<sp/>in<sp/>the<sp/>decompressor</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>(particularly<sp/>if<sp/>the<sp/>decompressor<sp/>wants<sp/>to<sp/>decompress<sp/>everything<sp/>in</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>a<sp/>single<sp/>step).</highlight></codeline>
<codeline lineno="121"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_FLUSH<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PARTIAL_FLUSH<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>will<sp/>be<sp/>removed,<sp/>use<sp/>Z_SYNC_FLUSH<sp/>instead<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SYNC_FLUSH<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FULL_FLUSH<sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FINISH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allowed<sp/>flush<sp/>values;<sp/>see<sp/>deflate()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_END<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NEED_DICT<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ERRNO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_ERROR<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DATA_ERROR<sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MEM_ERROR<sp/><sp/><sp/><sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BUF_ERROR<sp/><sp/><sp/><sp/>(-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_VERSION_ERROR<sp/>(-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>codes<sp/>for<sp/>the<sp/>compression/decompression<sp/>functions.<sp/>Negative</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>values<sp/>are<sp/>errors,<sp/>positive<sp/>values<sp/>are<sp/>used<sp/>for<sp/>special<sp/>but<sp/>normal<sp/>events.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_SPEED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_COMPRESSION<sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compression<sp/>levels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FILTERED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_HUFFMAN_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_STRATEGY<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compression<sp/>strategy;<sp/>see<sp/>deflateInit2()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BINARY<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ASCII<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_UNKNOWN<sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Possible<sp/>values<sp/>of<sp/>the<sp/>data_type<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFLATED<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>deflate<sp/>compression<sp/>method<sp/>(the<sp/>only<sp/>one<sp/>supported<sp/>in<sp/>this<sp/>version)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NULL<sp/><sp/>0<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>initializing<sp/>zalloc,<sp/>zfree,<sp/>opaque<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>basic<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>application<sp/>can<sp/>compare<sp/>zlibVersion<sp/>and<sp/>ZLIB_VERSION<sp/>for<sp/>consistency.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>first<sp/>character<sp/>differs,<sp/>the<sp/>library<sp/>code<sp/>actually<sp/>used<sp/>is</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>not<sp/>compatible<sp/>with<sp/>the<sp/>zlib.h<sp/>header<sp/>file<sp/>used<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>This<sp/>check<sp/>is<sp/>automatically<sp/>made<sp/>by<sp/>deflateInit<sp/>and<sp/>inflateInit.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="176"><highlight class="comment">ZEXTERN(int)<sp/><sp/>deflateInit<sp/>OF((z_streamp<sp/>strm,<sp/>int<sp/>level));</highlight></codeline>
<codeline lineno="177"><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>compression.<sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>deflateInit<sp/>updates<sp/>them<sp/>to</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/>use<sp/>default<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>compression<sp/>level<sp/>must<sp/>be<sp/>Z_DEFAULT_COMPRESSION,<sp/>or<sp/>between<sp/>0<sp/>and<sp/>9:</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/>1<sp/>gives<sp/>best<sp/>speed,<sp/>9<sp/>gives<sp/>best<sp/>compression,<sp/>0<sp/>gives<sp/>no<sp/>compression<sp/>at</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/>all<sp/>(the<sp/>input<sp/>data<sp/>is<sp/>simply<sp/>copied<sp/>a<sp/>block<sp/>at<sp/>a<sp/>time).</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/>Z_DEFAULT_COMPRESSION<sp/>requests<sp/>a<sp/>default<sp/>compromise<sp/>between<sp/>speed<sp/>and</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>(currently<sp/>equivalent<sp/>to<sp/>level<sp/>6).</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>level<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>compression<sp/>level,</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>(zlib_version)<sp/>is<sp/>incompatible</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller<sp/>(ZLIB_VERSION).</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate<sp/>compresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/>It<sp/>may<sp/>introduce<sp/>some</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)<sp/>except<sp/>when</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/>deflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>-<sp/>Compress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>and<sp/>avail_in<sp/>are<sp/>updated<sp/>and</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>processing<sp/>will<sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="211"><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>This<sp/>action<sp/>is<sp/>forced<sp/>if<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>non<sp/>zero.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>Forcing<sp/>flush<sp/>frequently<sp/>degrades<sp/>the<sp/>compression<sp/>ratio,<sp/>so<sp/>this<sp/>parameter</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>only<sp/>when<sp/>necessary<sp/>(in<sp/>interactive<sp/>applications).</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>Some<sp/>output<sp/>may<sp/>be<sp/>provided<sp/>even<sp/>if<sp/>flush<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>more<sp/>output,<sp/>and<sp/>updating<sp/>avail_in<sp/>or<sp/>avail_out<sp/>accordingly;<sp/>avail_out</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>should<sp/>never<sp/>be<sp/>zero<sp/>before<sp/>the<sp/>call.<sp/>The<sp/>application<sp/>can<sp/>consume<sp/>the</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>compressed<sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for<sp/>example<sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/>(avail_out<sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each<sp/>call<sp/>of<sp/>deflate().<sp/>If<sp/>deflate<sp/>returns<sp/>Z_OK</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>and<sp/>with<sp/>zero<sp/>avail_out,<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>output<sp/>buffer<sp/>because<sp/>there<sp/>might<sp/>be<sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_SYNC_FLUSH,<sp/>all<sp/>pending<sp/>output<sp/>is</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>flushed<sp/>to<sp/>the<sp/>output<sp/>buffer<sp/>and<sp/>the<sp/>output<sp/>is<sp/>aligned<sp/>on<sp/>a<sp/>byte<sp/>boundary,<sp/>so</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/>that<sp/>the<sp/>decompressor<sp/>can<sp/>get<sp/>all<sp/>input<sp/>data<sp/>available<sp/>so<sp/>far.<sp/>(In<sp/>particular</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>avail_in<sp/>is<sp/>zero<sp/>after<sp/>the<sp/>call<sp/>if<sp/>enough<sp/>output<sp/>space<sp/>has<sp/>been<sp/>provided</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>before<sp/>the<sp/>call.)<sp/><sp/>Flushing<sp/>may<sp/>degrade<sp/>compression<sp/>for<sp/>some<sp/>compression</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/>algorithms<sp/>and<sp/>so<sp/>it<sp/>should<sp/>be<sp/>used<sp/>only<sp/>when<sp/>necessary.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FULL_FLUSH,<sp/>all<sp/>output<sp/>is<sp/>flushed<sp/>as<sp/>with</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>Z_SYNC_FLUSH,<sp/>and<sp/>the<sp/>compression<sp/>state<sp/>is<sp/>reset<sp/>so<sp/>that<sp/>decompression<sp/>can</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/>restart<sp/>from<sp/>this<sp/>point<sp/>if<sp/>previous<sp/>compressed<sp/>data<sp/>has<sp/>been<sp/>damaged<sp/>or<sp/>if</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/>random<sp/>access<sp/>is<sp/>desired.<sp/>Using<sp/>Z_FULL_FLUSH<sp/>too<sp/>often<sp/>can<sp/>seriously<sp/>degrade</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/>the<sp/>compression.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>deflate<sp/>returns<sp/>with<sp/>avail_out<sp/>==<sp/>0,<sp/>this<sp/>function<sp/>must<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/>with<sp/>the<sp/>same<sp/>value<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/>avail_out),<sp/>until<sp/>the<sp/>flush<sp/>is<sp/>complete<sp/>(deflate<sp/>returns<sp/>with<sp/>non-zero</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>avail_out).</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FINISH,<sp/>pending<sp/>input<sp/>is<sp/>processed,</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>pending<sp/>output<sp/>is<sp/>flushed<sp/>and<sp/>deflate<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>if<sp/>there</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/>was<sp/>enough<sp/>output<sp/>space;<sp/>if<sp/>deflate<sp/>returns<sp/>with<sp/>Z_OK,<sp/>this<sp/>function<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>called<sp/>again<sp/>with<sp/>Z_FINISH<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated<sp/>avail_out)<sp/>but<sp/>no</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>more<sp/>input<sp/>data,<sp/>until<sp/>it<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>or<sp/>an<sp/>error.<sp/>After</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>deflate<sp/>has<sp/>returned<sp/>Z_STREAM_END,<sp/>the<sp/>only<sp/>possible<sp/>operations<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>stream<sp/>are<sp/>deflateReset<sp/>or<sp/>deflateEnd.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>Z_FINISH<sp/>can<sp/>be<sp/>used<sp/>immediately<sp/>after<sp/>deflateInit<sp/>if<sp/>all<sp/>the<sp/>compression</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>is<sp/>to<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step.<sp/>In<sp/>this<sp/>case,<sp/>avail_out<sp/>must<sp/>be<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/>0.1%<sp/>larger<sp/>than<sp/>avail_in<sp/>plus<sp/>12<sp/>bytes.<sp/><sp/>If<sp/>deflate<sp/>does<sp/>not<sp/>return</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>Z_STREAM_END,<sp/>then<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>as<sp/>described<sp/>above.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>input<sp/>read</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/>so<sp/>far<sp/>(that<sp/>is,<sp/>total_in<sp/>bytes).</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>may<sp/>update<sp/>data_type<sp/>if<sp/>it<sp/>can<sp/>make<sp/>a<sp/>good<sp/>guess<sp/>about</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/>the<sp/>input<sp/>data<sp/>type<sp/>(Z_ASCII<sp/>or<sp/>Z_BINARY).<sp/>In<sp/>doubt,<sp/>the<sp/>data<sp/>is<sp/>considered</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/>binary.<sp/>This<sp/>field<sp/>is<sp/>only<sp/>for<sp/>information<sp/>purposes<sp/>and<sp/>does<sp/>not<sp/>affect</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>the<sp/>compression<sp/>algorithm<sp/>in<sp/>any<sp/>manner.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/>processed<sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>all<sp/>input<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>consumed<sp/>and<sp/>all<sp/>output<sp/>has<sp/>been<sp/>produced<sp/>(only<sp/>when<sp/>flush<sp/>is<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>Z_FINISH),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(for<sp/>example</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>if<sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>NULL),<sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>(for<sp/>example<sp/>avail_in<sp/>or<sp/>avail_out<sp/>was<sp/>zero).</highlight></codeline>
<codeline lineno="272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/>pending<sp/>output.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>freed</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/>prematurely<sp/>(some<sp/>input<sp/>or<sp/>output<sp/>was<sp/>discarded).<sp/>In<sp/>the<sp/>error<sp/>case,</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/>msg<sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a<sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>deallocated).</highlight></codeline>
<codeline lineno="285"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="289"><highlight class="comment">ZEXTERN(int)<sp/><sp/>inflateInit<sp/>OF((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="290"><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>decompression.<sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/>the<sp/>caller.<sp/>If<sp/>next_in<sp/>is<sp/>not<sp/>Z_NULL<sp/>and<sp/>avail_in<sp/>is<sp/>large<sp/>enough<sp/>(the<sp/>exact</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>value<sp/>depends<sp/>on<sp/>the<sp/>compression<sp/>method),<sp/>inflateInit<sp/>determines<sp/>the</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>method<sp/>from<sp/>the<sp/>zlib<sp/>header<sp/>and<sp/>allocates<sp/>all<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/>accordingly;<sp/>otherwise<sp/>the<sp/>allocation<sp/>will<sp/>be<sp/>deferred<sp/>to<sp/>the<sp/>first<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/>inflate.<sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>inflateInit<sp/>updates<sp/>them<sp/>to</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>use<sp/>default<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller.<sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/>message.<sp/>inflateInit<sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression<sp/>apart<sp/>from<sp/>reading</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/>the<sp/>zlib<sp/>header<sp/>if<sp/>present:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/><sp/>(So<sp/>next_in<sp/>and</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/>avail_in<sp/>may<sp/>be<sp/>modified,<sp/>but<sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unchanged.)</highlight></codeline>
<codeline lineno="306"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">ZEXTERN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>inflate<sp/>OF((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate<sp/>decompresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/>It<sp/>may<sp/>some</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>introduce<sp/>some<sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>except<sp/>when<sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/>inflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>-<sp/>Decompress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>is<sp/>updated<sp/>and<sp/>processing</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>inflate().</highlight></codeline>
<codeline lineno="323"><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>inflate()<sp/>provides<sp/>as<sp/>much<sp/>output<sp/>as<sp/>possible,<sp/>until<sp/>there</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>no<sp/>more<sp/>input<sp/>data<sp/>or<sp/>no<sp/>more<sp/>space<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>(see<sp/>below</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>about<sp/>the<sp/>flush<sp/>parameter).</highlight></codeline>
<codeline lineno="328"><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>inflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>more<sp/>output,<sp/>and<sp/>updating<sp/>the<sp/>next_*<sp/>and<sp/>avail_*<sp/>values<sp/>accordingly.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/>The<sp/>application<sp/>can<sp/>consume<sp/>the<sp/>uncompressed<sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/>example<sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full<sp/>(avail_out<sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/>call<sp/>of<sp/>inflate().<sp/>If<sp/>inflate<sp/>returns<sp/>Z_OK<sp/>and<sp/>with<sp/>zero<sp/>avail_out,<sp/>it</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/>must<sp/>be<sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>because<sp/>there</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>might<sp/>be<sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_SYNC_FLUSH,<sp/>inflate<sp/>flushes<sp/>as<sp/>much</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/>output<sp/>as<sp/>possible<sp/>to<sp/>the<sp/>output<sp/>buffer.<sp/>The<sp/>flushing<sp/>behavior<sp/>of<sp/>inflate<sp/>is</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/>not<sp/>specified<sp/>for<sp/>values<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>other<sp/>than<sp/>Z_SYNC_FLUSH</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>and<sp/>Z_FINISH,<sp/>but<sp/>the<sp/>current<sp/>implementation<sp/>actually<sp/>flushes<sp/>as<sp/>much<sp/>output</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>as<sp/>possible<sp/>anyway.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>should<sp/>normally<sp/>be<sp/>called<sp/>until<sp/>it<sp/>returns<sp/>Z_STREAM_END<sp/>or<sp/>an</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>error.<sp/>However<sp/>if<sp/>all<sp/>decompression<sp/>is<sp/>to<sp/>be<sp/>performed<sp/>in<sp/>a<sp/>single<sp/>step</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/>(a<sp/>single<sp/>call<sp/>of<sp/>inflate),<sp/>the<sp/>parameter<sp/>flush<sp/>should<sp/>be<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>Z_FINISH.<sp/>In<sp/>this<sp/>case<sp/>all<sp/>pending<sp/>input<sp/>is<sp/>processed<sp/>and<sp/>all<sp/>pending</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>output<sp/>is<sp/>flushed;<sp/>avail_out<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>uncompressed<sp/>data.<sp/>(The<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>may<sp/>have<sp/>been<sp/>saved</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/>by<sp/>the<sp/>compressor<sp/>for<sp/>this<sp/>purpose.)<sp/>The<sp/>next<sp/>operation<sp/>on<sp/>this<sp/>stream<sp/>must</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/>be<sp/>inflateEnd<sp/>to<sp/>deallocate<sp/>the<sp/>decompression<sp/>state.<sp/>The<sp/>use<sp/>of<sp/>Z_FINISH</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/>is<sp/>never<sp/>required,<sp/>but<sp/>can<sp/>be<sp/>used<sp/>to<sp/>inform<sp/>inflate<sp/>that<sp/>a<sp/>faster<sp/>routine</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/>may<sp/>be<sp/>used<sp/>for<sp/>the<sp/>single<sp/>inflate()<sp/>call.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>at<sp/>this<sp/>point<sp/>(see<sp/>inflateSetDictionary</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/>below),<sp/>inflate<sp/>sets<sp/>strm-adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/>dictionary<sp/>chosen<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>returns<sp/>Z_NEED_DICT;<sp/>otherwise</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/>it<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>output<sp/>produced</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/>so<sp/>far<sp/>(that<sp/>is,<sp/>total_out<sp/>bytes)<sp/>and<sp/>returns<sp/>Z_OK,<sp/>Z_STREAM_END<sp/>or</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/>an<sp/>error<sp/>code<sp/>as<sp/>described<sp/>below.<sp/>At<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream,<sp/>inflate()</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/>checks<sp/>that<sp/>its<sp/>computed<sp/>adler32<sp/>checksum<sp/>is<sp/>equal<sp/>to<sp/>that<sp/>saved<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/>compressor<sp/>and<sp/>returns<sp/>Z_STREAM_END<sp/>only<sp/>if<sp/>the<sp/>checksum<sp/>is<sp/>correct.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input<sp/>processed</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>the<sp/>end<sp/>of<sp/>the<sp/>compressed<sp/>data<sp/>has</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/>been<sp/>reached<sp/>and<sp/>all<sp/>uncompressed<sp/>output<sp/>has<sp/>been<sp/>produced,<sp/>Z_NEED_DICT<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>at<sp/>this<sp/>point,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>corrupted<sp/>(input<sp/>stream<sp/>not<sp/>conforming<sp/>to<sp/>the<sp/>zlib<sp/>format<sp/>or<sp/>incorrect</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/>adler32<sp/>checksum),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>(for<sp/>example<sp/>if<sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>NULL),<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible<sp/>or<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>when<sp/>Z_FINISH<sp/>is<sp/>used.<sp/>In<sp/>the<sp/>Z_DATA_ERROR</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>case,<sp/>the<sp/>application<sp/>may<sp/>then<sp/>call<sp/>inflateSync<sp/>to<sp/>look<sp/>for<sp/>a<sp/>good</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/>compression<sp/>block.</highlight></codeline>
<codeline lineno="375"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">ZEXTERN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>inflateEnd<sp/>OF((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>pending<sp/>output.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>was<sp/>inconsistent.<sp/>In<sp/>the<sp/>error<sp/>case,<sp/>msg<sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be<sp/>deallocated).</highlight></codeline>
<codeline lineno="387"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advanced<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>functions<sp/>are<sp/>needed<sp/>only<sp/>in<sp/>some<sp/>special<sp/>applications.</highlight></codeline>
<codeline lineno="393"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="396"><highlight class="comment">ZEXTERN(int)<sp/><sp/>deflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>level,</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>method,</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>memLevel,</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>strategy));</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>deflateInit<sp/>with<sp/>more<sp/>compression<sp/>options.<sp/>The</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>method<sp/>parameter<sp/>is<sp/>the<sp/>compression<sp/>method.<sp/>It<sp/>must<sp/>be<sp/>Z_DEFLATED<sp/>in</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>window<sp/>size</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for<sp/>this</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/>version<sp/>of<sp/>the<sp/>library.<sp/>Larger<sp/>values<sp/>of<sp/>this<sp/>parameter<sp/>result<sp/>in<sp/>better</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>memory<sp/>usage.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>is<sp/>used<sp/>instead.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"></highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>memLevel<sp/>parameter<sp/>specifies<sp/>how<sp/>much<sp/>memory<sp/>should<sp/>be<sp/>allocated</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/>for<sp/>the<sp/>internal<sp/>compression<sp/>state.<sp/>memLevel=1<sp/>uses<sp/>minimum<sp/>memory<sp/>but</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/>is<sp/>slow<sp/>and<sp/>reduces<sp/>compression<sp/>ratio;<sp/>memLevel=9<sp/>uses<sp/>maximum<sp/>memory</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/>for<sp/>optimal<sp/>speed.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>8.<sp/>See<sp/>zconf.h<sp/>for<sp/>total<sp/>memory</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/>usage<sp/>as<sp/>a<sp/>function<sp/>of<sp/>windowBits<sp/>and<sp/>memLevel.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>strategy<sp/>parameter<sp/>is<sp/>used<sp/>to<sp/>tune<sp/>the<sp/>compression<sp/>algorithm.<sp/>Use<sp/>the</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/>value<sp/>Z_DEFAULT_STRATEGY<sp/>for<sp/>normal<sp/>data,<sp/>Z_FILTERED<sp/>for<sp/>data<sp/>produced<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/>filter<sp/>(or<sp/>predictor),<sp/>or<sp/>Z_HUFFMAN_ONLY<sp/>to<sp/>force<sp/>Huffman<sp/>encoding<sp/>only<sp/>(no</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/>string<sp/>match).<sp/><sp/>Filtered<sp/>data<sp/>consists<sp/>mostly<sp/>of<sp/>small<sp/>values<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/>somewhat<sp/>random<sp/>distribution.<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>compression<sp/>algorithm<sp/>is</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/>tuned<sp/>to<sp/>compress<sp/>them<sp/>better.<sp/>The<sp/>effect<sp/>of<sp/>Z_FILTERED<sp/>is<sp/>to<sp/>force<sp/>more</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>coding<sp/>and<sp/>less<sp/>string<sp/>matching;<sp/>it<sp/>is<sp/>somewhat<sp/>intermediate</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/>between<sp/>Z_DEFAULT<sp/>and<sp/>Z_HUFFMAN_ONLY.<sp/>The<sp/>strategy<sp/>parameter<sp/>only<sp/>affects</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/>the<sp/>compression<sp/>ratio<sp/>but<sp/>not<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>compressed<sp/>output<sp/>even</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/>if<sp/>it<sp/>is<sp/>not<sp/>set<sp/>appropriately.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a<sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>an<sp/>invalid</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/>method).<sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit2<sp/>does</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/>not<sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>compression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>byte<sp/>sequence</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/>without<sp/>producing<sp/>any<sp/>compressed<sp/>output.<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>after<sp/>deflateInit,<sp/>deflateInit2<sp/>or<sp/>deflateReset,<sp/>before<sp/>any</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/>call<sp/>of<sp/>deflate.<sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>(see<sp/>inflateSetDictionary).</highlight></codeline>
<codeline lineno="445"><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>dictionary<sp/>should<sp/>consist<sp/>of<sp/>strings<sp/>(byte<sp/>sequences)<sp/>that<sp/>are<sp/>likely</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/>to<sp/>be<sp/>encountered<sp/>later<sp/>in<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed,<sp/>with<sp/>the<sp/>most<sp/>commonly</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/>used<sp/>strings<sp/>preferably<sp/>put<sp/>towards<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary.<sp/>Using<sp/>a</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>is<sp/>most<sp/>useful<sp/>when<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed<sp/>is<sp/>short<sp/>and<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/>predicted<sp/>with<sp/>good<sp/>accuracy;<sp/>the<sp/>data<sp/>can<sp/>then<sp/>be<sp/>compressed<sp/>better<sp/>than</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>default<sp/>empty<sp/>dictionary.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"></highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>compression<sp/>data<sp/>structures<sp/>selected<sp/>by</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>or<sp/>deflateInit2,<sp/>a<sp/>part<sp/>of<sp/>the<sp/>dictionary<sp/>may<sp/>in<sp/>effect<sp/>be</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/>discarded,<sp/>for<sp/>example<sp/>if<sp/>the<sp/>dictionary<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>window<sp/>size<sp/>in</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/>deflate<sp/>or<sp/>deflate2.<sp/>Thus<sp/>the<sp/>strings<sp/>most<sp/>likely<sp/>to<sp/>be<sp/>useful<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/>put<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary,<sp/>not<sp/>at<sp/>the<sp/>front.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Upon<sp/>return<sp/>of<sp/>this<sp/>function,<sp/>strm-&gt;adler<sp/>is<sp/>set<sp/>to<sp/>the<sp/>Adler32<sp/>value</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>dictionary;<sp/>the<sp/>decompressor<sp/>may<sp/>later<sp/>use<sp/>this<sp/>value<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/>which<sp/>dictionary<sp/>has<sp/>been<sp/>used<sp/>by<sp/>the<sp/>compressor.<sp/>(The<sp/>Adler32<sp/>value</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/>applies<sp/>to<sp/>the<sp/>whole<sp/>dictionary<sp/>even<sp/>if<sp/>only<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>dictionary<sp/>is</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>actually<sp/>used<sp/>by<sp/>the<sp/>compressor.)</highlight></codeline>
<codeline lineno="464"><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>NULL<sp/>dictionary)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>inconsistent<sp/>(for<sp/>example<sp/>if<sp/>deflate<sp/>has<sp/>already<sp/>been<sp/>called<sp/>for<sp/>this<sp/>stream</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>or<sp/>if<sp/>the<sp/>compression<sp/>method<sp/>is<sp/>bsort).<sp/>deflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="470"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>destination<sp/>stream<sp/>as<sp/>a<sp/>complete<sp/>copy<sp/>of<sp/>the<sp/>source<sp/>stream.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>several<sp/>compression<sp/>strategies<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>tried,<sp/>for<sp/>example<sp/>when<sp/>there<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>pre-processing<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>data<sp/>with<sp/>a<sp/>filter.<sp/>The<sp/>streams<sp/>that<sp/>will<sp/>be<sp/>discarded<sp/>should<sp/>then<sp/>be<sp/>freed</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>by<sp/>calling<sp/>deflateEnd.<sp/><sp/>Note<sp/>that<sp/>deflateCopy<sp/>duplicates<sp/>the<sp/>internal</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>state<sp/>which<sp/>can<sp/>be<sp/>quite<sp/>large,<sp/>so<sp/>this<sp/>strategy<sp/>is<sp/>slow<sp/>and</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/>can<sp/>consume<sp/>lots<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"></highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateCopy<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source<sp/>stream<sp/>state<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>(such<sp/>as<sp/>zalloc<sp/>being<sp/>NULL).<sp/>msg<sp/>is<sp/>left<sp/>unchanged<sp/>in<sp/>both<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>destination.</highlight></codeline>
<codeline lineno="486"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>deflateEnd<sp/>followed<sp/>by<sp/>deflateInit,</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>compression<sp/>state.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/>The<sp/>stream<sp/>will<sp/>keep<sp/>the<sp/>same<sp/>compression<sp/>level<sp/>and<sp/>any<sp/>other<sp/>attributes</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/>that<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>deflateInit2.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"></highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>deflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>NULL).</highlight></codeline>
<codeline lineno="496"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>and<sp/>compression<sp/>strategy.<sp/><sp/>The</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/>interpretation<sp/>of<sp/>level<sp/>and<sp/>strategy<sp/>is<sp/>as<sp/>in<sp/>deflateInit2.<sp/><sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/>used<sp/>to<sp/>switch<sp/>between<sp/>compression<sp/>and<sp/>straight<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>data,<sp/>or</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>to<sp/>switch<sp/>to<sp/>a<sp/>different<sp/>kind<sp/>of<sp/>input<sp/>data<sp/>requiring<sp/>a<sp/>different</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>strategy.<sp/>If<sp/>the<sp/>compression<sp/>level<sp/>is<sp/>changed,<sp/>the<sp/>input<sp/>available<sp/>so<sp/>far</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/>is<sp/>compressed<sp/>with<sp/>the<sp/>old<sp/>level<sp/>(and<sp/>may<sp/>be<sp/>flushed);<sp/>the<sp/>new<sp/>level<sp/>will</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/>take<sp/>effect<sp/>only<sp/>at<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="506"><highlight class="comment"></highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflateParams,<sp/>the<sp/>stream<sp/>state<sp/>must<sp/>be<sp/>set<sp/>as<sp/>for</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/>a<sp/>call<sp/>of<sp/>deflate(),<sp/>since<sp/>the<sp/>currently<sp/>available<sp/>input<sp/>may<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/>be<sp/>compressed<sp/>and<sp/>flushed.<sp/>In<sp/>particular,<sp/>strm-&gt;avail_out<sp/>must<sp/>be<sp/>non-zero.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateParams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>or<sp/>if<sp/>a<sp/>parameter<sp/>was<sp/>invalid,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/>if<sp/>strm-&gt;avail_out<sp/>was<sp/>zero.</highlight></codeline>
<codeline lineno="514"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment">ZEXTERN(int)<sp/><sp/>inflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits));</highlight></codeline>
<codeline lineno="519"><highlight class="comment"></highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>inflateInit<sp/>with<sp/>an<sp/>extra<sp/>parameter.<sp/>The</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/>before<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"></highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>maximum<sp/>window</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/>size<sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if<sp/>inflateInit<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/>instead.<sp/>If<sp/>a<sp/>compressed<sp/>stream<sp/>with<sp/>a<sp/>larger<sp/>window<sp/>size<sp/>is<sp/>given<sp/>as</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/><sp/>input,<sp/>inflate()<sp/>will<sp/>return<sp/>with<sp/>the<sp/>error<sp/>code<sp/>Z_DATA_ERROR<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/>trying<sp/>to<sp/>allocate<sp/>a<sp/>larger<sp/>window.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a<sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>a<sp/>negative</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>memLevel).<sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>inflateInit2</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression<sp/>apart<sp/>from<sp/>reading<sp/>the<sp/>zlib<sp/>header<sp/>if</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/>present:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/>(So<sp/>next_in<sp/>and<sp/>avail_in<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/>modified,<sp/>but<sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unchanged.)</highlight></codeline>
<codeline lineno="537"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>decompression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>uncompressed<sp/>byte</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/>sequence.<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>immediately<sp/>after<sp/>a<sp/>call<sp/>of<sp/>inflate</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/>if<sp/>this<sp/>call<sp/>returned<sp/>Z_NEED_DICT.<sp/>The<sp/>dictionary<sp/>chosen<sp/>by<sp/>the<sp/>compressor</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>determined<sp/>from<sp/>the<sp/>Adler32<sp/>value<sp/>returned<sp/>by<sp/>this<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/>inflate.<sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>(see<sp/>deflateSetDictionary).</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>NULL<sp/>dictionary)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>given<sp/>dictionary<sp/>doesn&apos;t<sp/>match<sp/>the</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/>expected<sp/>one<sp/>(incorrect<sp/>Adler32<sp/>value).<sp/>inflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>decompression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>subsequent<sp/>calls<sp/>of</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/>inflate().</highlight></codeline>
<codeline lineno="553"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/>Skips<sp/>invalid<sp/>compressed<sp/>data<sp/>until<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>(see<sp/>above<sp/>the</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/>description<sp/>of<sp/>deflate<sp/>with<sp/>Z_FULL_FLUSH)<sp/>can<sp/>be<sp/>found,<sp/>or<sp/>until<sp/>all</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/>available<sp/>input<sp/>is<sp/>skipped.<sp/>No<sp/>output<sp/>is<sp/>provided.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"></highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/>inflateSync<sp/>returns<sp/>Z_OK<sp/>if<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>has<sp/>been<sp/>found,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/>if<sp/>no<sp/>more<sp/>input<sp/>was<sp/>provided,<sp/>Z_DATA_ERROR<sp/>if<sp/>no<sp/>flush<sp/>point<sp/>has<sp/>been<sp/>found,</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent.<sp/>In<sp/>the<sp/>success</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/>case,<sp/>the<sp/>application<sp/>may<sp/>save<sp/>the<sp/>current<sp/>current<sp/>value<sp/>of<sp/>total_in<sp/>which</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/>indicates<sp/>where<sp/>valid<sp/>compressed<sp/>data<sp/>was<sp/>found.<sp/>In<sp/>the<sp/>error<sp/>case,<sp/>the</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/>application<sp/>may<sp/>repeatedly<sp/>call<sp/>inflateSync,<sp/>providing<sp/>more<sp/>input<sp/>each<sp/>time,</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/>until<sp/>success<sp/>or<sp/>end<sp/>of<sp/>the<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="567"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">ZEXTERN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>inflateReset<sp/>OF((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>inflateEnd<sp/>followed<sp/>by<sp/>inflateInit,</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>decompression<sp/>state.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/>The<sp/>stream<sp/>will<sp/>keep<sp/>attributes<sp/>that<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>NULL).</highlight></codeline>
<codeline lineno="577"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>utility<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>utility<sp/>functions<sp/>are<sp/>implemented<sp/>on<sp/>top<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/>basic<sp/>stream-oriented<sp/>functions.<sp/>To<sp/>simplify<sp/>the<sp/>interface,<sp/>some</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/>default<sp/>options<sp/>are<sp/>assumed<sp/>(compression<sp/>level<sp/>and<sp/>memory<sp/>usage,</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/>standard<sp/>memory<sp/>allocation<sp/>functions).<sp/>The<sp/>source<sp/>code<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/>utility<sp/>functions<sp/>can<sp/>easily<sp/>be<sp/>modified<sp/>if<sp/>you<sp/>need<sp/>special<sp/>options.</highlight></codeline>
<codeline lineno="588"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>0.1%<sp/>larger<sp/>than</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/><sp/>sourceLen<sp/>plus<sp/>12<sp/>bytes.<sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>compress<sp/>a<sp/>whole<sp/>file<sp/>at<sp/>once<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/>buffer.</highlight></codeline>
<codeline lineno="601"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/>The<sp/>level</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>has<sp/>the<sp/>same<sp/>meaning<sp/>as<sp/>in<sp/>deflateInit.<sp/><sp/>sourceLen<sp/>is<sp/>the<sp/>byte</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>0.1%<sp/>larger<sp/>than<sp/>sourceLen<sp/>plus</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/>12<sp/>bytes.<sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the<sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer,</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>level<sp/>parameter<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="613"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Decompresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/><sp/>entire<sp/>uncompressed<sp/>data.<sp/>(The<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>must<sp/>have</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/>been<sp/>saved<sp/>previously<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>transmitted<sp/>to<sp/>the<sp/>decompressor</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/>by<sp/>some<sp/>mechanism<sp/>outside<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>compression<sp/>library.)</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the<sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>decompress<sp/>a<sp/>whole<sp/>file<sp/>at<sp/>once<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"></highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uncompress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/>buffer,<sp/>or<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was<sp/>corrupted.</highlight></codeline>
<codeline lineno="629"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Opens<sp/>a<sp/>gzip<sp/>(.gz)<sp/>file<sp/>for<sp/>reading<sp/>or<sp/>writing.<sp/>The<sp/>mode<sp/>parameter</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/>is<sp/>as<sp/>in<sp/>fopen<sp/>(&quot;rb&quot;<sp/>or<sp/>&quot;wb&quot;)<sp/>but<sp/>can<sp/>also<sp/>include<sp/>a<sp/>compression<sp/>level</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/>(&quot;wb9&quot;)<sp/>or<sp/>a<sp/>strategy:<sp/>&apos;f&apos;<sp/>for<sp/>filtered<sp/>data<sp/>as<sp/>in<sp/>&quot;wb6f&quot;,<sp/>&apos;h&apos;<sp/>for</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>only<sp/>compression<sp/>as<sp/>in<sp/>&quot;wb1h&quot;.<sp/>(See<sp/>the<sp/>description</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflateInit2<sp/>for<sp/>more<sp/>information<sp/>about<sp/>the<sp/>strategy<sp/>parameter.)</highlight></codeline>
<codeline lineno="638"><highlight class="comment"></highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>can<sp/>be<sp/>used<sp/>to<sp/>read<sp/>a<sp/>file<sp/>which<sp/>is<sp/>not<sp/>in<sp/>gzip<sp/>format;<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/>case<sp/>gzread<sp/>will<sp/>directly<sp/>read<sp/>from<sp/>the<sp/>file<sp/>without<sp/>decompression.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"></highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>returns<sp/>NULL<sp/>if<sp/>the<sp/>file<sp/>could<sp/>not<sp/>be<sp/>opened<sp/>or<sp/>if<sp/>there<sp/>was</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/>insufficient<sp/>memory<sp/>to<sp/>allocate<sp/>the<sp/>(de)compression<sp/>state;<sp/>errno</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>checked<sp/>to<sp/>distinguish<sp/>the<sp/>two<sp/>cases<sp/>(if<sp/>errno<sp/>is<sp/>zero,<sp/>the</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/>zlib<sp/>error<sp/>is<sp/>Z_MEM_ERROR).<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen()<sp/>associates<sp/>a<sp/>gzFile<sp/>with<sp/>the<sp/>file<sp/>descriptor<sp/>fd.<sp/><sp/>File</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/>descriptors<sp/>are<sp/>obtained<sp/>from<sp/>calls<sp/>like<sp/>open,<sp/>dup,<sp/>creat,<sp/>pipe<sp/>or</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/>fileno<sp/>(in<sp/>the<sp/>file<sp/>has<sp/>been<sp/>previously<sp/>opened<sp/>with<sp/>fopen).</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/>The<sp/>mode<sp/>parameter<sp/>is<sp/>as<sp/>in<sp/>gzopen.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>next<sp/>call<sp/>of<sp/>gzclose<sp/>on<sp/>the<sp/>returned<sp/>gzFile<sp/>will<sp/>also<sp/>close<sp/>the</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/>file<sp/>descriptor<sp/>fd,<sp/>just<sp/>like<sp/>fclose(fdopen(fd),<sp/>mode)<sp/>closes<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/>descriptor<sp/>fd.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>keep<sp/>fd<sp/>open,<sp/>use<sp/>gzdopen(dup(fd),<sp/>mode).</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen<sp/>returns<sp/>NULL<sp/>if<sp/>there<sp/>was<sp/>insufficient<sp/>memory<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/>the<sp/>(de)compression<sp/>state.</highlight></codeline>
<codeline lineno="657"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>or<sp/>strategy.<sp/>See<sp/>the<sp/>description</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflateInit2<sp/>for<sp/>the<sp/>meaning<sp/>of<sp/>these<sp/>parameters.</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzsetparams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>file<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/>opened<sp/>for<sp/>writing.</highlight></codeline>
<codeline lineno="664"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Reads<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>input<sp/>file<sp/>was<sp/>not<sp/>in<sp/>gzip<sp/>format,<sp/>gzread<sp/>copies<sp/>the<sp/>given<sp/>number</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/>of<sp/>bytes<sp/>into<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzread<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>actually<sp/>read<sp/>(0<sp/>for</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/>end<sp/>of<sp/>file,<sp/>-1<sp/>for<sp/>error).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>into<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/>gzwrite<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>actually<sp/>written</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/>(0<sp/>in<sp/>case<sp/>of<sp/>error).</highlight></codeline>
<codeline lineno="677"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Converts,<sp/>formats,<sp/>and<sp/>writes<sp/>the<sp/>args<sp/>to<sp/>the<sp/>compressed<sp/>file<sp/>under</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>control<sp/>of<sp/>the<sp/>format<sp/>string,<sp/>as<sp/>in<sp/>fprintf.<sp/>gzprintf<sp/>returns<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>bytes<sp/>actually<sp/>written<sp/>(0<sp/>in<sp/>case<sp/>of<sp/>error).</highlight></codeline>
<codeline lineno="683"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>null-terminated<sp/>string<sp/>to<sp/>the<sp/>compressed<sp/>file,<sp/>excluding</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/>the<sp/>terminating<sp/>null<sp/>character.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzputs<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="689"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Reads<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file<sp/>until<sp/>len-1<sp/>characters<sp/>are<sp/>read,<sp/>or</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/>a<sp/>newline<sp/>character<sp/>is<sp/>read<sp/>and<sp/>transferred<sp/>to<sp/>buf,<sp/>or<sp/>an<sp/>end-of-file</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/>condition<sp/>is<sp/>encountered.<sp/><sp/>The<sp/>string<sp/>is<sp/>then<sp/>terminated<sp/>with<sp/>a<sp/>null</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/>character.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzgets<sp/>returns<sp/>buf,<sp/>or<sp/>Z_NULL<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="697"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Writes<sp/>c,<sp/>converted<sp/>to<sp/>an<sp/>unsigned<sp/>char,<sp/>into<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/>gzputc<sp/>returns<sp/>the<sp/>value<sp/>that<sp/>was<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="702"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Reads<sp/>one<sp/>byte<sp/>from<sp/>the<sp/>compressed<sp/>file.<sp/>gzgetc<sp/>returns<sp/>this<sp/>byte</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>end<sp/>of<sp/>file<sp/>or<sp/>error.</highlight></codeline>
<codeline lineno="707"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>into<sp/>the<sp/>compressed<sp/>file.<sp/>The<sp/>parameter</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/>flush<sp/>is<sp/>as<sp/>in<sp/>the<sp/>deflate()<sp/>function.<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>zlib</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/>error<sp/>number<sp/>(see<sp/>function<sp/>gzerror<sp/>below).<sp/>gzflush<sp/>returns<sp/>Z_OK<sp/>if</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/>the<sp/>flush<sp/>parameter<sp/>is<sp/>Z_FINISH<sp/>and<sp/>all<sp/>output<sp/>could<sp/>be<sp/>flushed.</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzflush<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>strictly<sp/>necessary<sp/>because<sp/>it<sp/>can</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/>degrade<sp/>compression.</highlight></codeline>
<codeline lineno="716"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>The<sp/>offset<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream.<sp/>The<sp/>whence<sp/>parameter<sp/>is<sp/>defined<sp/>as<sp/>in<sp/>lseek(2);</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/>the<sp/>value<sp/>SEEK_END<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>reading,<sp/>this<sp/>function<sp/>is<sp/>emulated<sp/>but<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/>extremely<sp/>slow.<sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing,<sp/>only<sp/>forward<sp/>seeks<sp/>are</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/>supported;<sp/>gzseek<sp/>then<sp/>compresses<sp/>a<sp/>sequence<sp/>of<sp/>zeroes<sp/>up<sp/>to<sp/>the<sp/>new</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/>starting<sp/>position.</highlight></codeline>
<codeline lineno="727"><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzseek<sp/>returns<sp/>the<sp/>resulting<sp/>offset<sp/>location<sp/>as<sp/>measured<sp/>in<sp/>bytes<sp/>from</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>uncompressed<sp/>stream,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error,<sp/>in</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/>particular<sp/>if<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing<sp/>and<sp/>the<sp/>new<sp/>starting<sp/>position</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/>would<sp/>be<sp/>before<sp/>the<sp/>current<sp/>position.</highlight></codeline>
<codeline lineno="732"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Rewinds<sp/>the<sp/>given<sp/>file.<sp/>This<sp/>function<sp/>is<sp/>supported<sp/>only<sp/>for<sp/>reading.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"></highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/>gzrewind(file)<sp/>is<sp/>equivalent<sp/>to<sp/>(int)gzseek(file,<sp/>0L,<sp/>SEEK_SET)</highlight></codeline>
<codeline lineno="738"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>This<sp/>position<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/>gztell(file)<sp/>is<sp/>equivalent<sp/>to<sp/>gzseek(file,<sp/>0L,<sp/>SEEK_CUR)</highlight></codeline>
<codeline lineno="746"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>when<sp/>EOF<sp/>has<sp/>previously<sp/>been<sp/>detected<sp/>reading<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/>input<sp/>stream,<sp/>otherwise<sp/>zero.</highlight></codeline>
<codeline lineno="751"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>if<sp/>necessary,<sp/>closes<sp/>the<sp/>compressed<sp/>file</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/>and<sp/>deallocates<sp/>all<sp/>the<sp/>(de)compression<sp/>state.<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>zlib</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/>error<sp/>number<sp/>(see<sp/>function<sp/>gzerror<sp/>below).</highlight></codeline>
<codeline lineno="757"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>error<sp/>message<sp/>for<sp/>the<sp/>last<sp/>error<sp/>which<sp/>occurred<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>errnum<sp/>is<sp/>set<sp/>to<sp/>zlib<sp/>error<sp/>number.<sp/>If<sp/>an</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/>error<sp/>occurred<sp/>in<sp/>the<sp/>file<sp/>system<sp/>and<sp/>not<sp/>in<sp/>the<sp/>compression<sp/>library,</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/><sp/>errnum<sp/>is<sp/>set<sp/>to<sp/>Z_ERRNO<sp/>and<sp/>the<sp/>application<sp/>may<sp/>consult<sp/>errno</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/>to<sp/>get<sp/>the<sp/>exact<sp/>error<sp/>code.</highlight></codeline>
<codeline lineno="765"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>checksum<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>are<sp/>not<sp/>related<sp/>to<sp/>compression<sp/>but<sp/>are<sp/>exported</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/>anyway<sp/>because<sp/>they<sp/>might<sp/>be<sp/>useful<sp/>in<sp/>applications<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>library.</highlight></codeline>
<codeline lineno="773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">ZEXTERN(uLong)<sp/><sp/>adler32<sp/>OF((uLong<sp/>adler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*buf,<sp/>uInt<sp/>len));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>Adler-32<sp/>checksum<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/>return<sp/>the<sp/>updated<sp/>checksum.<sp/>If<sp/>buf<sp/>is<sp/>NULL,<sp/>this<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/>the<sp/>required<sp/>initial<sp/>value<sp/>for<sp/>the<sp/>checksum.</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/>An<sp/>Adler-32<sp/>checksum<sp/>is<sp/>almost<sp/>as<sp/>reliable<sp/>as<sp/>a<sp/>CRC32<sp/>but<sp/>can<sp/>be<sp/>computed</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/>much<sp/>faster.<sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="783"><highlight class="comment"></highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>adler<sp/>=<sp/>adler32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="785"><highlight class="comment"></highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adler<sp/>=<sp/>adler32(adler,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(adler<sp/>!=<sp/>original_adler)<sp/>error();</highlight></codeline>
<codeline lineno="790"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>crc<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and<sp/>return<sp/>the<sp/>updated</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/>crc.<sp/>If<sp/>buf<sp/>is<sp/>NULL,<sp/>this<sp/>function<sp/>returns<sp/>the<sp/>required<sp/>initial<sp/>value</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/>for<sp/>the<sp/>crc.<sp/>Pre-<sp/>and<sp/>post-conditioning<sp/>(one&apos;s<sp/>complement)<sp/>is<sp/>performed</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/>within<sp/>this<sp/>function<sp/>so<sp/>it<sp/>shouldn&apos;t<sp/>be<sp/>done<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="798"><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>crc<sp/>=<sp/>crc32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="800"><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32(crc,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(crc<sp/>!=<sp/>original_crc)<sp/>error();</highlight></codeline>
<codeline lineno="805"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>various<sp/>hacks,<sp/>don&apos;t<sp/>look<sp/>:)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>deflateInit<sp/>and<sp/>inflateInit<sp/>are<sp/>macros<sp/>to<sp/>allow<sp/>checking<sp/>the<sp/>zlib<sp/>version</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/>and<sp/>the<sp/>compiler&apos;s<sp/>view<sp/>of<sp/>z_stream:</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">ZEXTERN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>inflateInit2_<sp/>OF((z_streamp<sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit(strm,<sp/>level)<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit_((strm),<sp/>(level),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflateInit(strm)<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit_((strm),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit2(strm,<sp/>level,<sp/>method,<sp/>windowBits,<sp/>memLevel,<sp/>strategy)<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strategy),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inflateInit2(strm,<sp/>windowBits)<sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit2_((strm),<sp/>(windowBits),<sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ZLIB_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/zlib.h"/>
  </compounddef>
</doxygen>
