<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_gfx_state_8cc" kind="file" language="C++">
    <compoundname>GfxState.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_array_8h" local="yes">Array.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_gfx_state__helpers_8h" local="yes">GfxState_helpers.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_poppler_cache_8h" local="yes">PopplerCache.h</includes>
    <includes refid="_output_dev_8h" local="yes">OutputDev.h</includes>
    <includes refid="_splash_types_8h" local="yes">splash/SplashTypes.h</includes>
    <incdepgraph>
      <node id="87362">
        <label>stdarg.h</label>
      </node>
      <node id="87379">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87368" relation="include">
        </childnode>
      </node>
      <node id="87384">
        <label>GfxState_helpers.h</label>
        <link refid="_gfx_state__helpers_8h_source"/>
        <childnode refid="87378" relation="include">
        </childnode>
      </node>
      <node id="87380">
        <label>assert.h</label>
      </node>
      <node id="87378">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87379" relation="include">
        </childnode>
        <childnode refid="87380" relation="include">
        </childnode>
        <childnode refid="87381" relation="include">
        </childnode>
      </node>
      <node id="87385">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87364" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87386" relation="include">
        </childnode>
      </node>
      <node id="87366">
        <label>stdlib.h</label>
      </node>
      <node id="87358">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="87359" relation="include">
        </childnode>
        <childnode refid="87360" relation="include">
        </childnode>
      </node>
      <node id="87370">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87371" relation="include">
        </childnode>
      </node>
      <node id="87387">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="87380" relation="include">
        </childnode>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87359" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87386" relation="include">
        </childnode>
        <childnode refid="87371" relation="include">
        </childnode>
      </node>
      <node id="87381">
        <label>map</label>
      </node>
      <node id="87361">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="87362" relation="include">
        </childnode>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87364" relation="include">
        </childnode>
      </node>
      <node id="87376">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87377" relation="include">
        </childnode>
        <childnode refid="87378" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87382" relation="include">
        </childnode>
        <childnode refid="87383" relation="include">
        </childnode>
      </node>
      <node id="87377">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="87363" relation="include">
        </childnode>
      </node>
      <node id="87373">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87371" relation="include">
        </childnode>
      </node>
      <node id="87355">
        <label>stddef.h</label>
      </node>
      <node id="87375">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87371" relation="include">
        </childnode>
      </node>
      <node id="87365">
        <label>limits.h</label>
      </node>
      <node id="87360">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="87359" relation="include">
        </childnode>
      </node>
      <node id="87369">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="87374">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87359" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87371" relation="include">
        </childnode>
      </node>
      <node id="87372">
        <label>pthread.h</label>
      </node>
      <node id="87382">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="87367" relation="include">
        </childnode>
      </node>
      <node id="87357">
        <label>string.h</label>
      </node>
      <node id="87364">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="87365" relation="include">
        </childnode>
        <childnode refid="87362" relation="include">
        </childnode>
        <childnode refid="87366" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
      </node>
      <node id="87367">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="87368" relation="include">
        </childnode>
        <childnode refid="87359" relation="include">
        </childnode>
        <childnode refid="87357" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87358" relation="include">
        </childnode>
        <childnode refid="87364" relation="include">
        </childnode>
        <childnode refid="87369" relation="include">
        </childnode>
        <childnode refid="87361" relation="include">
        </childnode>
        <childnode refid="87370" relation="include">
        </childnode>
        <childnode refid="87373" relation="include">
        </childnode>
        <childnode refid="87374" relation="include">
        </childnode>
      </node>
      <node id="87383">
        <label>vector</label>
      </node>
      <node id="87388">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
        <childnode refid="87363" relation="include">
        </childnode>
        <childnode refid="87386" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87382" relation="include">
        </childnode>
      </node>
      <node id="87356">
        <label>math.h</label>
      </node>
      <node id="87371">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="87372" relation="include">
        </childnode>
      </node>
      <node id="87386">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="87389">
        <label>splash/SplashTypes.h</label>
        <link refid="_splash_types_8h_source"/>
        <childnode refid="87363" relation="include">
        </childnode>
      </node>
      <node id="87363">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="87360" relation="include">
        </childnode>
      </node>
      <node id="87352">
        <label>thirdparty/poppler/poppler/GfxState.cc</label>
        <link refid="_gfx_state_8cc"/>
        <childnode refid="87353" relation="include">
        </childnode>
        <childnode refid="87354" relation="include">
        </childnode>
        <childnode refid="87355" relation="include">
        </childnode>
        <childnode refid="87356" relation="include">
        </childnode>
        <childnode refid="87357" relation="include">
        </childnode>
        <childnode refid="87358" relation="include">
        </childnode>
        <childnode refid="87361" relation="include">
        </childnode>
        <childnode refid="87367" relation="include">
        </childnode>
        <childnode refid="87370" relation="include">
        </childnode>
        <childnode refid="87375" relation="include">
        </childnode>
        <childnode refid="87376" relation="include">
        </childnode>
        <childnode refid="87378" relation="include">
        </childnode>
        <childnode refid="87384" relation="include">
        </childnode>
        <childnode refid="87385" relation="include">
        </childnode>
        <childnode refid="87387" relation="include">
        </childnode>
        <childnode refid="87382" relation="include">
        </childnode>
        <childnode refid="87388" relation="include">
        </childnode>
        <childnode refid="87389" relation="include">
        </childnode>
      </node>
      <node id="87368">
        <label>set</label>
      </node>
      <node id="87353">
        <label>config.h</label>
      </node>
      <node id="87354">
        <label>algorithm</label>
      </node>
      <node id="87359">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_gfx_blend_mode_info" prot="public">GfxBlendModeInfo</innerclass>
    <innerclass refid="class_gfx_i_c_c_based_color_space_key" prot="public">GfxICCBasedColorSpaceKey</innerclass>
    <innerclass refid="class_gfx_i_c_c_based_color_space_item" prot="public">GfxICCBasedColorSpaceItem</innerclass>
    <innerclass refid="class_gfx_shading_bit_buf" prot="public">GfxShadingBitBuf</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_gfx_state_8cc_1ad9df1a62ccf614cd5bf425a48846b8b8" prot="public" static="no">
        <name>colorSpaceRecursionLimit</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="65" column="9" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_state_8cc_1a281029b50e724d56117c40cdcfa2e862" prot="public" static="no">
        <name>nGfxBlendModeNames</name>
        <initializer>((int)((sizeof(gfxBlendModeNames) / sizeof(<ref refid="struct_gfx_blend_mode_info" kindref="compound">GfxBlendModeInfo</ref>))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="153" column="9" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_state_8cc_1a74e151baec962ccddaefe3ebc19ddac0" prot="public" static="no">
        <name>nGfxColorSpaceModes</name>
        <initializer>((sizeof(gfxColorSpaceModeNames) / sizeof(char *)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="174" column="9" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_state_8cc_1a3ffd32730f63e6d5fdc04ca2d8284ada" prot="public" static="no">
        <name>RADIAL_EPSILON</name>
        <initializer>(1. / 1024 / 1024)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="4355" column="9" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="4355" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_gfx_state_8cc_1a6068be64e107bbe4daec06617c9efcae" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_gfx_blend_mode_info" kindref="compound">GfxBlendModeInfo</ref></type>
        <definition>const GfxBlendModeInfo gfxBlendModeNames[]</definition>
        <argsstring>[]</argsstring>
        <name>gfxBlendModeNames</name>
        <initializer>= {
  { &quot;Normal&quot;,     gfxBlendNormal },
  { &quot;Compatible&quot;, gfxBlendNormal },
  { &quot;Multiply&quot;,   gfxBlendMultiply },
  { &quot;Screen&quot;,     gfxBlendScreen },
  { &quot;Overlay&quot;,    gfxBlendOverlay },
  { &quot;Darken&quot;,     gfxBlendDarken },
  { &quot;Lighten&quot;,    gfxBlendLighten },
  { &quot;ColorDodge&quot;, gfxBlendColorDodge },
  { &quot;ColorBurn&quot;,  gfxBlendColorBurn },
  { &quot;HardLight&quot;,  gfxBlendHardLight },
  { &quot;SoftLight&quot;,  gfxBlendSoftLight },
  { &quot;Difference&quot;, gfxBlendDifference },
  { &quot;Exclusion&quot;,  gfxBlendExclusion },
  { &quot;Hue&quot;,        gfxBlendHue },
  { &quot;Saturation&quot;, gfxBlendSaturation },
  { &quot;Color&quot;,      gfxBlendColor },
  { &quot;Luminosity&quot;, gfxBlendLuminosity }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="133" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_gfx_state_8cc_1a94b608561cf9a3b5915490490a3f1094" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* gfxColorSpaceModeNames[]</definition>
        <argsstring>[]</argsstring>
        <name>gfxColorSpaceModeNames</name>
        <initializer>= {
  &quot;DeviceGray&quot;,
  &quot;CalGray&quot;,
  &quot;DeviceRGB&quot;,
  &quot;CalRGB&quot;,
  &quot;DeviceCMYK&quot;,
  &quot;Lab&quot;,
  &quot;ICCBased&quot;,
  &quot;Indexed&quot;,
  &quot;Separation&quot;,
  &quot;DeviceN&quot;,
  &quot;Pattern&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="160" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_gfx_state_8cc_1aa8b13f3e057651737640ab4958166967" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double xyzrgb[3][3]</definition>
        <argsstring>[3][3]</argsstring>
        <name>xyzrgb</name>
        <initializer>= {
  {  3.240449, -1.537136, -0.498531 },
  { -0.969265,  1.876011,  0.041556 },
  {  0.055643, -0.204026,  1.057229 }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="824" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="824" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_gfx_state_8cc_1a7022fb18af1007a0d2e401e2275c861b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void GfxDeviceCMYKColorSpacegetRGBLineHelper</definition>
        <argsstring>(Guchar *&amp;in, double &amp;r, double &amp;g, double &amp;b)</argsstring>
        <name>GfxDeviceCMYKColorSpacegetRGBLineHelper</name>
        <param>
          <type>Guchar *&amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="1458" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="1458" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_state_8cc_1afb6f295fc34a4aa6df1e5d0a843d4d85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool radialExtendRange</definition>
        <argsstring>(double range[2], double value, GBool valid)</argsstring>
        <name>radialExtendRange</name>
        <param>
          <type>double</type>
          <declname>range</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="4496" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="4496" bodyend="4506"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_state_8cc_1a04edfe4c7ffdda9eb2166b8718277e09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void radialEdge</definition>
        <argsstring>(double num, double den, double delta, double lower, double upper, double dr, double mindr, GBool &amp;valid, double *range)</argsstring>
        <name>radialEdge</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <param>
          <type>double</type>
          <declname>den</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mindr</declname>
        </param>
        <param>
          <type>GBool &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="4508" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="4508" bodyend="4518"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_state_8cc_1a423065fe14181837237edc14d28e48ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void radialCorner1</definition>
        <argsstring>(double x, double y, double &amp;b, double dx, double dy, double cr, double dr, double mindr, GBool &amp;valid, double *range)</argsstring>
        <name>radialCorner1</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mindr</declname>
        </param>
        <param>
          <type>GBool &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="4520" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="4520" bodyend="4535"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_state_8cc_1ac1e77502719e43ff895430201b0148b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void radialCorner2</definition>
        <argsstring>(double x, double y, double a, double &amp;b, double &amp;c, double &amp;d, double dx, double dy, double cr, double inva, double dr, double mindr, GBool &amp;valid, double *range)</argsstring>
        <name>radialCorner2</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inva</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mindr</declname>
        </param>
        <param>
          <type>GBool &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GfxState.cc" line="4537" column="1" bodyfile="thirdparty/poppler/poppler/GfxState.cc" bodystart="4537" bodyend="4554"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxState.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2007<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2010<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2012<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2011-2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Christian<sp/>Persch<sp/>&lt;chpe@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Paweł<sp/>Wiejacha<sp/>&lt;pawel.wiejacha@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Christian<sp/>Feuersänger<sp/>&lt;cfeuersaenger@googlemail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Andrea<sp/>Canciani<sp/>&lt;ranma42@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Lu<sp/>Wang<sp/>&lt;coolwanglu@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState_helpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PopplerCache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>depth<sp/>of<sp/>nested<sp/>color<sp/>spaces.<sp/><sp/>This<sp/>is<sp/>used<sp/>to<sp/>catch<sp/>infinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>loops<sp/>in<sp/>the<sp/>color<sp/>space<sp/>object<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>colorSpaceRecursionLimit<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">GBool<sp/>Matrix::invertTo(<ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>*other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="70"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>determinant();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>other-&gt;m[0]<sp/>=<sp/>m[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>other-&gt;m[1]<sp/>=<sp/>-m[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>other-&gt;m[2]<sp/>=<sp/>-m[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>other-&gt;m[3]<sp/>=<sp/>m[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>other-&gt;m[4]<sp/>=<sp/>(m[2]<sp/>*<sp/>m[5]<sp/>-<sp/>m[3]<sp/>*<sp/>m[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>other-&gt;m[5]<sp/>=<sp/>(m[1]<sp/>*<sp/>m[4]<sp/>-<sp/>m[0]<sp/>*<sp/>m[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Matrix::translate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ty)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>tx*m[0]<sp/>+<sp/>ty*m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>tx*m[1]<sp/>+<sp/>ty*m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>m[4]<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m[5]<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Matrix::scale(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sy)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>m[0]<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>m[1]<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>m[2]<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>m[3]<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Matrix::transform(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*tx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ty)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="101"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp_x,<sp/>temp_y;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>temp_x<sp/>=<sp/>m[0]<sp/>*<sp/>x<sp/>+<sp/>m[2]<sp/>*<sp/>y<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>temp_y<sp/>=<sp/>m[1]<sp/>*<sp/>x<sp/>+<sp/>m[3]<sp/>*<sp/>y<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>*tx<sp/>=<sp/>temp_x;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>*ty<sp/>=<sp/>temp_y;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matrix<sp/>norm,<sp/>taken<sp/>from<sp/>_cairo_matrix_transformed_circle_major_axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Matrix::norm()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="113"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>m[0]*m[0]<sp/>+<sp/>m[1]*m[1];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>m[2]*m[2]<sp/>+<sp/>m[3]*m[3];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>0.5<sp/>*<sp/>(i<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>0.5<sp/>*<sp/>(i<sp/>-<sp/>j);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>m[0]*m[2]<sp/>+<sp/>m[1]*m[3];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt<sp/>(f<sp/>+<sp/>hypot<sp/>(g,<sp/>h));</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="struct_gfx_blend_mode_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_gfx_blend_mode_info" kindref="compound">GfxBlendModeInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>GfxBlendMode<sp/>mode;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gfx_blend_mode_info" kindref="compound">GfxBlendModeInfo</ref><sp/>gfxBlendModeNames[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>gfxBlendNormal<sp/>},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Compatible&quot;</highlight><highlight class="normal">,<sp/>gfxBlendNormal<sp/>},</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Multiply&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>gfxBlendMultiply<sp/>},</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Screen&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>gfxBlendScreen<sp/>},</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Overlay&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>gfxBlendOverlay<sp/>},</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Darken&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>gfxBlendDarken<sp/>},</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Lighten&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>gfxBlendLighten<sp/>},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ColorDodge&quot;</highlight><highlight class="normal">,<sp/>gfxBlendColorDodge<sp/>},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ColorBurn&quot;</highlight><highlight class="normal">,<sp/><sp/>gfxBlendColorBurn<sp/>},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;HardLight&quot;</highlight><highlight class="normal">,<sp/><sp/>gfxBlendHardLight<sp/>},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;SoftLight&quot;</highlight><highlight class="normal">,<sp/><sp/>gfxBlendSoftLight<sp/>},</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Difference&quot;</highlight><highlight class="normal">,<sp/>gfxBlendDifference<sp/>},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Exclusion&quot;</highlight><highlight class="normal">,<sp/><sp/>gfxBlendExclusion<sp/>},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Hue&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxBlendHue<sp/>},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Saturation&quot;</highlight><highlight class="normal">,<sp/>gfxBlendSaturation<sp/>},</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Color&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>gfxBlendColor<sp/>},</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Luminosity&quot;</highlight><highlight class="normal">,<sp/>gfxBlendLuminosity<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nGfxBlendModeNames<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int)((sizeof(gfxBlendModeNames)<sp/>/<sp/>sizeof(GfxBlendModeInfo))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>This<sp/>must<sp/>match<sp/>the<sp/>GfxColorSpaceMode<sp/>enum<sp/>defined<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxState.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gfxColorSpaceModeNames[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;DeviceGray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;CalGray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;DeviceRGB&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;CalRGB&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;DeviceCMYK&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lab&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;ICCBased&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Indexed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Separation&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;DeviceN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nGfxColorSpaceModes<sp/>((sizeof(gfxColorSpaceModeNames)<sp/>/<sp/>sizeof(char<sp/>*)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::size_type<sp/>CMSCACHE_LIMIT<sp/>=<sp/>2048;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_LCMS1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsColorSpaceSignature<sp/>icColorSpaceSignature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSetLogErrorHandler<sp/>cmsSetErrorHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigXYZData<sp/>icSigXYZData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigLuvData<sp/>icSigLuvData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigLabData<sp/>icSigLabData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigYCbCrData<sp/>icSigYCbCrData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigYxyData<sp/>icSigYxyData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigRgbData<sp/>icSigRgbData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigHsvData<sp/>icSigHsvData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigHlsData<sp/>icSigHlsData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigCmyData<sp/>icSigCmyData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig3colorData<sp/>icSig3colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigGrayData<sp/>icSigGrayData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSigCmykData<sp/>icSigCmykData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig4colorData<sp/>icSig4colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig2colorData<sp/>icSig2colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig5colorData<sp/>icSig5colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig6colorData<sp/>icSig6colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig7colorData<sp/>icSig7colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig8colorData<sp/>icSig8colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig9colorData<sp/>icSig9colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig10colorData<sp/>icSig10colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig11colorData<sp/>icSig11colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig12colorData<sp/>icSig12colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig13colorData<sp/>icSig13colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig14colorData<sp/>icSig14colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmsSig15colorData<sp/>icSig15colorData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LCMS_FLAGS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LCMS_FLAGS<sp/>cmsFLAGS_NOOPTIMIZE<sp/>|<sp/>cmsFLAGS_BLACKPOINTCOMPENSATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COLOR_PROFILE_DIR<sp/>&quot;/ColorProfiles/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GLOBAL_COLOR_PROFILE_DIR<sp/>POPPLER_DATADIR<sp/>COLOR_PROFILE_DIR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorTransform::doTransform(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>cmsDoTransform(transform,<sp/>in,<sp/>out,<sp/>size);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transformA<sp/>should<sp/>be<sp/>a<sp/>cmsHTRANSFORM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">GfxColorTransform::GfxColorTransform(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*transformA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmsIntentA,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputPixelTypeA,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transformPixelTypeA)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>transform<sp/>=<sp/>transformA;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>refCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>cmsIntent<sp/>=<sp/>cmsIntentA;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>inputPixelType<sp/>=<sp/>inputPixelTypeA;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>transformPixelType<sp/>=<sp/>transformPixelTypeA;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">GfxColorTransform::~GfxColorTransform()<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>cmsDeleteTransform(transform);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorTransform::ref()<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>refCount++;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GfxColorTransform::unref()<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>--refCount;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cmsHPROFILE<sp/>RGBProfile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*displayProfileName<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>display<sp/>profile<sp/>file<sp/>Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cmsHPROFILE<sp/>displayProfile<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>display<sp/>profile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>displayPixelType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref><sp/>*XYZ2DisplayTransform<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>color<sp/>space<sp/>signature<sp/>to<sp/>cmsColor<sp/>type<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCMSColorSpaceType(cmsColorSpaceSignature<sp/>cs);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCMSNChannels(cmsColorSpaceSignature<sp/>cs);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cmsHPROFILE<sp/>loadColorProfile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorSpace::setDisplayProfile(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*displayProfileA)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>displayProfile<sp/>=<sp/>displayProfileA;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayProfile<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHTRANSFORM<sp/>transform;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChannels;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>displayPixelType<sp/>=<sp/>getCMSColorSpaceType(cmsGetColorSpace(displayProfile));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>nChannels<sp/>=<sp/>getCMSNChannels(cmsGetColorSpace(displayProfile));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>transform<sp/>from<sp/>XYZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHPROFILE<sp/>XYZProfile<sp/>=<sp/>cmsCreateXYZProfile();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayProfile,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(displayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_RELATIVE_COLORIMETRIC,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransform<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_RELATIVE_COLORIMETRIC,<sp/>PT_XYZ,<sp/>displayPixelType);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(XYZProfile);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorSpace::setDisplayProfileName(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>displayProfileName<sp/>=<sp/>name-&gt;copy();</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">cmsHPROFILE<sp/>GfxColorSpace::getRGBProfile()<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RGBProfile;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">cmsHPROFILE<sp/>GfxColorSpace::getDisplayProfile()<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>displayProfile;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">GfxColorSpace::GfxColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>0x0f;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">GfxColorSpace::~GfxColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxColorSpace::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*csObj,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recursion<sp/>&gt;<sp/>colorSpaceRecursionLimit)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Loop<sp/>detected<sp/>in<sp/>color<sp/>space<sp/>objects&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;DeviceGray&quot;</highlight><highlight class="normal">)<sp/>||<sp/>csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;DeviceRGB&quot;</highlight><highlight class="normal">)<sp/>||<sp/>csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;RGB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;DeviceCMYK&quot;</highlight><highlight class="normal">)<sp/>||<sp/>csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;CMYK&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isName(</highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref>(NULL);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>csObj-&gt;getName());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isArray()<sp/>&amp;&amp;<sp/>csObj-&gt;arrayGetLength()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>csObj-&gt;arrayGet(0,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceGray&quot;</highlight><highlight class="normal">)<sp/>||<sp/>obj1.isName(</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceRGB&quot;</highlight><highlight class="normal">)<sp/>||<sp/>obj1.isName(</highlight><highlight class="stringliteral">&quot;RGB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceCMYK&quot;</highlight><highlight class="normal">)<sp/>||<sp/>obj1.isName(</highlight><highlight class="stringliteral">&quot;CMYK&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;CalGray&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxCalGrayColorSpace::parse(csObj-&gt;getArray(),<sp/>state);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;CalRGB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxCalRGBColorSpace::parse(csObj-&gt;getArray(),<sp/>state);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;Lab&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxLabColorSpace::parse(csObj-&gt;getArray(),<sp/>state);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;ICCBased&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxICCBasedColorSpace::parse(csObj-&gt;getArray(),<sp/>out,<sp/>state,<sp/>recursion);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;Indexed&quot;</highlight><highlight class="normal">)<sp/>||<sp/>obj1.isName(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxIndexedColorSpace::parse(res,<sp/>csObj-&gt;getArray(),<sp/>out,<sp/>state,<sp/>recursion);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;Separation&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxSeparationColorSpace::parse(res,<sp/>csObj-&gt;getArray(),<sp/>out,<sp/>state,<sp/>recursion);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceN&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxDeviceNColorSpace::parse(res,<sp/>csObj-&gt;getArray(),<sp/>out,<sp/>state,<sp/>recursion);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxPatternColorSpace::parse(res,<sp/>csObj-&gt;getArray(),<sp/>out,<sp/>state,<sp/>recursion);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csObj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>csObj-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceGray&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceRGB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName(</highlight><highlight class="stringliteral">&quot;DeviceCMYK&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>dict&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>-<sp/>expected<sp/>name<sp/>or<sp/>array<sp/>or<sp/>dict&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorSpace::createMapping(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*separationList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSepComps)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxColorSpace::getDefaultRanges(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeLow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeRange,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxImgPixel)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeLow[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeRange[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GfxColorSpace::getNumColorSpaceModes()<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nGfxColorSpaceModes;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*GfxColorSpace::getColorSpaceModeName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfxColorSpaceModeNames[idx];</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">cmsHPROFILE<sp/>loadColorProfile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>cmsHPROFILE<sp/>hp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>open<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(fileName,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp<sp/>=<sp/>cmsOpenProfileFromFile(fileName,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hp;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>load<sp/>from<sp/>global<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(GLOBAL_COLOR_PROFILE_DIR);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>path-&gt;append(fileName);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>open<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(path-&gt;getCString(),</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>hp<sp/>=<sp/>cmsOpenProfileFromFile(path-&gt;getCString(),</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hp;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_LCMS1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CMSError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ecode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;{0:s}&quot;</highlight><highlight class="normal">,<sp/>msg);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CMSError(cmsContext<sp/></highlight><highlight class="comment">/*contextId*/</highlight><highlight class="normal">,<sp/>cmsUInt32Number<sp/></highlight><highlight class="comment">/*ecode*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;{0:s}&quot;</highlight><highlight class="normal">,<sp/>text);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GfxColorSpace::setupColorProfiles()</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>initialized<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>cmsHTRANSFORM<sp/>transform;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChannels;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>initialized<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>error<sp/>handlor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>cmsSetLogErrorHandler(CMSError);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayProfile<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>display<sp/>profile<sp/>if<sp/>it<sp/>was<sp/>not<sp/>already<sp/>loaded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayProfileName<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>displayProfile<sp/>=<sp/>loadColorProfile(</highlight><highlight class="stringliteral">&quot;display.icc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayProfileName-&gt;getLength()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>displayProfile<sp/>=<sp/>loadColorProfile(displayProfileName-&gt;getCString());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>RGB<sp/>profile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>RGBProfile<sp/>=<sp/>loadColorProfile(</highlight><highlight class="stringliteral">&quot;RGB.icc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RGBProfile<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>built<sp/>in<sp/>sRGB<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>RGBProfile<sp/>=<sp/>cmsCreate_sRGBProfile();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayProfile<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>displayPixelType<sp/>=<sp/>getCMSColorSpaceType(cmsGetColorSpace(displayProfile));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>nChannels<sp/>=<sp/>getCMSNChannels(cmsGetColorSpace(displayProfile));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>transform<sp/>from<sp/>XYZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHPROFILE<sp/>XYZProfile<sp/>=<sp/>cmsCreateXYZProfile();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayProfile,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(displayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_RELATIVE_COLORIMETRIC,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransform<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_RELATIVE_COLORIMETRIC,<sp/>PT_XYZ,<sp/>displayPixelType);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(XYZProfile);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCMSColorSpaceType(cmsColorSpaceSignature<sp/>cs)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cs)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigXYZData:</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_XYZ;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLabData:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_Lab;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLuvData:</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_YUV;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigYCbCrData:</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_YCbCr;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigYxyData:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_Yxy;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigRgbData:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_RGB;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigGrayData:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_GRAY;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigHsvData:</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_HSV;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigHlsData:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_HLS;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigCmykData:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_CMYK;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigCmyData:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_CMY;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig2colorData:</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig3colorData:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig4colorData:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig5colorData:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig6colorData:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig7colorData:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig8colorData:</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig9colorData:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig10colorData:</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig11colorData:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig12colorData:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig13colorData:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig14colorData:</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig15colorData:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PT_RGB;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCMSNChannels(cmsColorSpaceSignature<sp/>cs)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cs)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigXYZData:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLuvData:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLabData:</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigYCbCrData:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigYxyData:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigRgbData:</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigHsvData:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigHlsData:</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigCmyData:</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig3colorData:</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigGrayData:</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigCmykData:</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig4colorData:</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig2colorData:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig5colorData:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig6colorData:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig7colorData:</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig8colorData:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig9colorData:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig10colorData:</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig11colorData:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>11;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig12colorData:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>12;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig13colorData:</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>13;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig14colorData:</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>14;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSig15colorData:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>15;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxDeviceGrayColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">GfxDeviceGrayColorSpace::GfxDeviceGrayColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxDeviceGrayColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*<ref refid="structcolor" kindref="compound">color</ref>,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getGrayLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>memcpy<sp/>(out,<sp/>in,<sp/>length);</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>rgb-&gt;g<sp/>=<sp/>rgb-&gt;b<sp/>=<sp/>clip01(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(in[i]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(in[i]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(in[i]<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>out[4]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>(SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>cmyk-&gt;m<sp/>=<sp/>cmyk-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceGrayColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxCalGrayColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">GfxCalGrayColorSpace::GfxCalGrayColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>whiteX<sp/>=<sp/>whiteY<sp/>=<sp/>whiteZ<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>blackX<sp/>=<sp/>blackY<sp/>=<sp/>blackZ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>gamma<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">GfxCalGrayColorSpace::~GfxCalGrayColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform-&gt;unref()<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transform;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxCalGrayColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>whiteX;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>whiteY;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>whiteZ;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>blackX;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>blackY;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>blackZ;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>cs-&gt;gamma<sp/>=<sp/>gamma;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>kr;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>kg;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>kb;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>transform;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>transform-&gt;ref();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>inverse<sp/>of<sp/>MatrixLMN<sp/>in<sp/>Example<sp/>4.10<sp/>from<sp/>the<sp/>PostScript</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Language<sp/>Reference,<sp/>Third<sp/>Edition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xyzrgb[3][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>{<sp/><sp/>3.240449,<sp/>-1.537136,<sp/>-0.498531<sp/>},</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>{<sp/>-0.969265,<sp/><sp/>1.876011,<sp/><sp/>0.041556<sp/>},</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>{<sp/><sp/>0.055643,<sp/>-0.204026,<sp/><sp/>1.057229<sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal">};</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxCalGrayColorSpace::parse(<ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>CalGray<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;WhitePoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;BlackPoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Gamma&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;gamma<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[0][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[1][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[2][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>(state<sp/>!=<sp/>NULL)<sp/>?<sp/>state-&gt;getXYZ2DisplayTransform()<sp/>:<sp/>XYZ2DisplayTransform;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs-&gt;transform<sp/>!=<sp/>NULL)<sp/>cs-&gt;transform-&gt;ref();</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>CalGray<sp/>to<sp/>media<sp/>XYZ<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(not<sp/>multiply<sp/>by<sp/>the<sp/>white<sp/>point)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getXYZ(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pY,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pZ)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>colToDbl(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xyzColor<sp/>=<sp/>pow(A,gamma);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>*pX<sp/>=<sp/>xyzColor;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>*pY<sp/>=<sp/>xyzColor;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>*pZ<sp/>=<sp/>xyzColor;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_GRAY)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(0.299<sp/>*<sp/>rgb.r<sp/>+</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.587<sp/>*<sp/>rgb.g<sp/>+</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.114<sp/>*<sp/>rgb.b<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>X<sp/>*=<sp/>whiteX;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>Y<sp/>*=<sp/>whiteY;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>Z<sp/>*=<sp/>whiteZ;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>XYZ<sp/>to<sp/>RGB,<sp/>including<sp/>gamut<sp/>mapping<sp/>and<sp/>gamma<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>xyzrgb[0][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[0][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[0][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>xyzrgb[1][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[1][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[1][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>xyzrgb[2][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[2][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[2][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>dblToCol(sqrt(clip01(r<sp/>*<sp/>kr)));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>rgb-&gt;g<sp/>=<sp/>dblToCol(sqrt(clip01(g<sp/>*<sp/>kg)));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>rgb-&gt;b<sp/>=<sp/>dblToCol(sqrt(clip01(b<sp/>*<sp/>kb)));</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>byteToCol(out[3]);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.r);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.g);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.b);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>c<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>m<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalGrayColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxDeviceRGBColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">GfxDeviceRGBColorSpace::GfxDeviceRGBColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxDeviceRGBColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(0.3<sp/>*<sp/>color-&gt;c[0]<sp/>+</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.59<sp/>*<sp/>color-&gt;c[1]<sp/>+</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.11<sp/>*<sp/>color-&gt;c[2]<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getGrayLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(in[i<sp/>*<sp/>3<sp/>+<sp/>0]<sp/>*<sp/>19595<sp/>+<sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>1]<sp/>*<sp/>38469<sp/>+<sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>2]<sp/>*<sp/>7472)<sp/>/<sp/>65536;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>clip01(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>rgb-&gt;g<sp/>=<sp/>clip01(color-&gt;c[1]);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>rgb-&gt;b<sp/>=<sp/>clip01(color-&gt;c[2]);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>p<sp/>=<sp/>in;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++,<sp/>p<sp/>+=<sp/>3)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(p[0]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(p[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(p[2]<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(c<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(m<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(y<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(k);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)<sp/></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*in++);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>colToByte(c<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>colToByte(m<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>colToByte(y<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>colToByte(k);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>(SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[1]);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[2]);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>c<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>m<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceRGBColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxCalRGBColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">GfxCalRGBColorSpace::GfxCalRGBColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>whiteX<sp/>=<sp/>whiteY<sp/>=<sp/>whiteZ<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>blackX<sp/>=<sp/>blackY<sp/>=<sp/>blackZ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>gammaR<sp/>=<sp/>gammaG<sp/>=<sp/>gammaB<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>1;<sp/>mat[1]<sp/>=<sp/>0;<sp/>mat[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>0;<sp/>mat[4]<sp/>=<sp/>1;<sp/>mat[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>mat[6]<sp/>=<sp/>0;<sp/>mat[7]<sp/>=<sp/>0;<sp/>mat[8]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">GfxCalRGBColorSpace::~GfxCalRGBColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform-&gt;unref()<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transform;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxCalRGBColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>whiteX;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>whiteY;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>whiteZ;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>blackX;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>blackY;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>blackZ;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>cs-&gt;gammaR<sp/>=<sp/>gammaR;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>cs-&gt;gammaG<sp/>=<sp/>gammaG;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>cs-&gt;gammaB<sp/>=<sp/>gammaB;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>kr;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>kg;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>kb;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;mat[i]<sp/>=<sp/>mat[i];</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>transform;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>transform-&gt;ref();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxCalRGBColorSpace::parse(<ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>CalRGB<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;WhitePoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;BlackPoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Gamma&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;gammaR<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;gammaG<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;gammaB<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj3.isNum()))</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;mat[i]<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[0][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[1][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[2][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>(state<sp/>!=<sp/>NULL)<sp/>?<sp/>state-&gt;getXYZ2DisplayTransform()<sp/>:<sp/>XYZ2DisplayTransform;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs-&gt;transform<sp/>!=<sp/>NULL)<sp/>cs-&gt;transform-&gt;ref();</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>CalRGB<sp/>to<sp/>XYZ<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getXYZ(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pY,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pZ)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/>B,<sp/>C;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>pow(colToDbl(color-&gt;c[0]),<sp/>gammaR);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>pow(colToDbl(color-&gt;c[1]),<sp/>gammaG);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>pow(colToDbl(color-&gt;c[2]),<sp/>gammaB);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>*pX<sp/>=<sp/>mat[0]<sp/>*<sp/>A<sp/>+<sp/>mat[3]<sp/>*<sp/>B<sp/>+<sp/>mat[6]<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>*pY<sp/>=<sp/>mat[1]<sp/>*<sp/>A<sp/>+<sp/>mat[4]<sp/>*<sp/>B<sp/>+<sp/>mat[7]<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>*pZ<sp/>=<sp/>mat[2]<sp/>*<sp/>A<sp/>+<sp/>mat[5]<sp/>*<sp/>B<sp/>+<sp/>mat[8]<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_GRAY)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(0.299<sp/>*<sp/>rgb.r<sp/>+</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.587<sp/>*<sp/>rgb.g<sp/>+</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.114<sp/>*<sp/>rgb.b<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X/whiteX);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y/whiteY);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z/whiteZ);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>XYZ<sp/>to<sp/>RGB,<sp/>including<sp/>gamut<sp/>mapping<sp/>and<sp/>gamma<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>xyzrgb[0][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[0][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[0][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>xyzrgb[1][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[1][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[1][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>xyzrgb[2][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[2][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[2][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>dblToCol(sqrt(clip01(r)));</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>rgb-&gt;g<sp/>=<sp/>dblToCol(sqrt(clip01(g)));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>rgb-&gt;b<sp/>=<sp/>dblToCol(sqrt(clip01(b)));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,&amp;X,&amp;Y,&amp;Z);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>byteToCol(out[3]);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.r);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.g);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.b);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>c<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>m<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxCalRGBColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxDeviceCMYKColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal">GfxDeviceCMYKColorSpace::GfxDeviceCMYKColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal">GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxDeviceCMYKColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(gfxColorComp1<sp/>-<sp/>color-&gt;c[3]</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>0.3<sp/><sp/>*<sp/>color-&gt;c[0]</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>0.59<sp/>*<sp/>color-&gt;c[1]</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>0.11<sp/>*<sp/>color-&gt;c[2]<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>colToDbl(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>colToDbl(color-&gt;c[1]);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>colToDbl(color-&gt;c[2]);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>colToDbl(color-&gt;c[3]);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>clip01(dblToCol(r));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>rgb-&gt;g<sp/>=<sp/>clip01(dblToCol(g));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>rgb-&gt;b<sp/>=<sp/>clip01(dblToCol(b));</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpacegetRGBLineHelper(Guchar<sp/>*&amp;in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>byteToDbl(*in++);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>byteToDbl(*in++);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>byteToDbl(*in++);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>byteToDbl(*in++);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxDeviceCMYKColorSpacegetRGBLineHelper(in,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>(dblToByte(clip01(r))<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(dblToByte(clip01(g))<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>dblToByte(clip01(b));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxDeviceCMYKColorSpacegetRGBLineHelper(in,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(r));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(g));</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(b));</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxDeviceCMYKColorSpacegetRGBLineHelper(in,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(r));</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(g));</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(clip01(b));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>*in++;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>(SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>clip01(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>clip01(color-&gt;c[1]);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>clip01(color-&gt;c[2]);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>clip01(color-&gt;c[3]);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>clip01(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>clip01(color-&gt;c[1]);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>clip01(color-&gt;c[2]);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>clip01(color-&gt;c[3]);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceCMYKColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>color-&gt;c[3]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxLabColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">GfxLabColorSpace::GfxLabColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>whiteX<sp/>=<sp/>whiteY<sp/>=<sp/>whiteZ<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>blackX<sp/>=<sp/>blackY<sp/>=<sp/>blackZ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>aMin<sp/>=<sp/>bMin<sp/>=<sp/>-100;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>aMax<sp/>=<sp/>bMax<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal">GfxLabColorSpace::~GfxLabColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform-&gt;unref()<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transform;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxLabColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref>();</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>whiteX;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>whiteY;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>whiteZ;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>blackX;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>blackY;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>blackZ;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>cs-&gt;aMin<sp/>=<sp/>aMin;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>cs-&gt;aMax<sp/>=<sp/>aMax;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>cs-&gt;bMin<sp/>=<sp/>bMin;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>cs-&gt;bMax<sp/>=<sp/>bMax;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>kr;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>kg;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>kb;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>transform;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>transform-&gt;ref();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxLabColorSpace::parse(<ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Lab<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref>();</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;WhitePoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;whiteX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;whiteY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;whiteZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;BlackPoint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;blackX<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;blackY<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;blackZ<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Range&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;aMin<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;aMax<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(2,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;bMin<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(3,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;bMax<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>cs-&gt;kr<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[0][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[0][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>cs-&gt;kg<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[1][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[1][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>cs-&gt;kb<sp/>=<sp/>1<sp/>/<sp/>(xyzrgb[2][0]<sp/>*<sp/>cs-&gt;whiteX<sp/>+</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][1]<sp/>*<sp/>cs-&gt;whiteY<sp/>+</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xyzrgb[2][2]<sp/>*<sp/>cs-&gt;whiteZ);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>(state<sp/>!=<sp/>NULL)<sp/>?<sp/>state-&gt;getXYZ2DisplayTransform()<sp/>:<sp/>XYZ2DisplayTransform;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs-&gt;transform<sp/>!=<sp/>NULL)<sp/>cs-&gt;transform-&gt;ref();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_GRAY)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,<sp/>&amp;in[0],<sp/>&amp;in[1],<sp/>&amp;in[2]);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(0.299<sp/>*<sp/>rgb.r<sp/>+</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.587<sp/>*<sp/>rgb.g<sp/>+</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.114<sp/>*<sp/>rgb.b<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>L*a*b*<sp/>to<sp/>media<sp/>XYZ<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(not<sp/>multiply<sp/>by<sp/>the<sp/>white<sp/>point)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getXYZ(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pY,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pZ)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1,<sp/>t2;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>(colToDbl(color-&gt;c[0])<sp/>+<sp/>16)<sp/>/<sp/>116;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>t1<sp/>+<sp/>colToDbl(color-&gt;c[1])<sp/>/<sp/>500;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&gt;=<sp/>(6.0<sp/>/<sp/>29.0))<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>t2<sp/>*<sp/>t2<sp/>*<sp/>t2;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>(108.0<sp/>/<sp/>841.0)<sp/>*<sp/>(t2<sp/>-<sp/>(4.0<sp/>/<sp/>29.0));</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&gt;=<sp/>(6.0<sp/>/<sp/>29.0))<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>t1<sp/>*<sp/>t1<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>(108.0<sp/>/<sp/>841.0)<sp/>*<sp/>(t1<sp/>-<sp/>(4.0<sp/>/<sp/>29.0));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>t1<sp/>-<sp/>colToDbl(color-&gt;c[2])<sp/>/<sp/>200;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&gt;=<sp/>(6.0<sp/>/<sp/>29.0))<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>Z<sp/>=<sp/>t2<sp/>*<sp/>t2<sp/>*<sp/>t2;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>Z<sp/>=<sp/>(108.0<sp/>/<sp/>841.0)<sp/>*<sp/>(t2<sp/>-<sp/>(4.0<sp/>/<sp/>29.0));</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>*pX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>*pY<sp/>=<sp/>Y;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>*pZ<sp/>=<sp/>Z;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/>Y,<sp/>Z;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>getXYZ(color,<sp/>&amp;X,<sp/>&amp;Y,<sp/>&amp;Z);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>clip01(X);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>clip01(Y);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>clip01(Z);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToDbl(out[0]);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToDbl(out[1]);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToDbl(out[2]);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>byteToDbl(out[3]);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>clip01(dblToCol(r));</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>clip01(dblToCol(g));</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>clip01(dblToCol(b));</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>X<sp/>*=<sp/>whiteX;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>Y<sp/>*=<sp/>whiteY;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>Z<sp/>*=<sp/>whiteZ;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>XYZ<sp/>to<sp/>RGB,<sp/>including<sp/>gamut<sp/>mapping<sp/>and<sp/>gamma<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>xyzrgb[0][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[0][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[0][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>xyzrgb[1][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[1][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[1][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>xyzrgb[2][0]<sp/>*<sp/>X<sp/>+<sp/>xyzrgb[2][1]<sp/>*<sp/>Y<sp/>+<sp/>xyzrgb[2][2]<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>dblToCol(sqrt(clip01(r<sp/>*<sp/>kr)));</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>rgb-&gt;g<sp/>=<sp/>dblToCol(sqrt(clip01(g<sp/>*<sp/>kg)));</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>rgb-&gt;b<sp/>=<sp/>dblToCol(sqrt(clip01(b<sp/>*<sp/>kb)));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>getXYZ(color,<sp/>&amp;in[0],<sp/>&amp;in[1],<sp/>&amp;in[2]);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>byteToCol(out[3]);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.r);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.g);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.b);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>c<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>m<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aMin<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>dblToCol(aMin);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aMax<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>dblToCol(aMax);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bMin<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>dblToCol(bMin);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bMax<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>dblToCol(bMax);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxLabColorSpace::getDefaultRanges(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeLow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeRange,</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxImgPixel)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>decodeLow[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>decodeRange[0]<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>decodeLow[1]<sp/>=<sp/>aMin;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>decodeRange[1]<sp/>=<sp/>aMax<sp/>-<sp/>aMin;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>decodeLow[2]<sp/>=<sp/>bMin;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>decodeRange[2]<sp/>=<sp/>bMax<sp/>-<sp/>bMin;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxICCBasedColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850" refid="class_gfx_i_c_c_based_color_space_key" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_key" kindref="compound">PopplerCacheKey</ref></highlight></codeline>
<codeline lineno="1851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>genA)<sp/>:<sp/>num(numA),<sp/>gen(genA)</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_key" kindref="compound">PopplerCacheKey</ref><sp/>&amp;key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1858"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref><sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;key);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k-&gt;num<sp/>==<sp/>num<sp/>&amp;&amp;<sp/>k-&gt;gen<sp/>==<sp/>gen;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>gen;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866" refid="class_gfx_i_c_c_based_color_space_item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_item" kindref="compound">PopplerCacheItem</ref></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref>(<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*csA)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(csA-&gt;copy());</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref>()</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal">GfxICCBasedColorSpace::GfxICCBasedColorSpace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA,<sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA,</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*iccProfileStreamA)<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nCompsA;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>alt<sp/>=<sp/>altA;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>iccProfileStream<sp/>=<sp/>*iccProfileStreamA;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>rangeMin[0]<sp/>=<sp/>rangeMin[1]<sp/>=<sp/>rangeMin[2]<sp/>=<sp/>rangeMin[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/>rangeMax[0]<sp/>=<sp/>rangeMax[1]<sp/>=<sp/>rangeMax[2]<sp/>=<sp/>rangeMax[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>transform<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>lineTransform<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal">GfxICCBasedColorSpace::~GfxICCBasedColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>alt;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform-&gt;unref()<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transform;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform-&gt;unref()<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>lineTransform;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxICCBasedColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>(nComps,<sp/>alt-&gt;copy(),<sp/>&amp;iccProfileStream);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;rangeMin[i]<sp/>=<sp/>rangeMin[i];</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;rangeMax[i]<sp/>=<sp/>rangeMax[i];</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>cs-&gt;transform<sp/>=<sp/>transform;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL)<sp/>transform-&gt;ref();</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>cs-&gt;lineTransform<sp/>=<sp/>lineTransform;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL)<sp/>lineTransform-&gt;ref();</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxICCBasedColorSpace::parse(<ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>iccProfileStreamA;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>ICCBased<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>arr-&gt;getNF(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isRef())<sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>iccProfileStreamA<sp/>=<sp/>obj1.getRef();</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>iccProfileStreamA.num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>iccProfileStreamA.gen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>&amp;&amp;<sp/>iccProfileStreamA.num<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref><sp/>k(iccProfileStreamA.num,<sp/>iccProfileStreamA.gen);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref><sp/>*item<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(out-&gt;getIccColorSpaceCache()-&gt;lookup(k));</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item-&gt;cs-&gt;copy());</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transformIntent<sp/>=<sp/>cs-&gt;getIntent();</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmsIntent<sp/>=<sp/>INTENT_RELATIVE_COLORIMETRIC;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*intent<sp/>=<sp/>state-&gt;getRenderingIntent();</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intent<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;AbsoluteColorimetric&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_ABSOLUTE_COLORIMETRIC;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;Saturation&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_SATURATION;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;Perceptual&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_PERCEPTUAL;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transformIntent<sp/>==<sp/>cmsIntent)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isStream())<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>ICCBased<sp/>color<sp/>space<sp/>(stream)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>obj1.streamGetDict();</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;N&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>ICCBased<sp/>color<sp/>space<sp/>(N)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/>nCompsA<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nCompsA<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ICCBased<sp/>color<sp/>space<sp/>with<sp/>too<sp/>many<sp/>({0:d}<sp/>&gt;<sp/>4)<sp/>components&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nCompsA);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>nCompsA<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Alternate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull()<sp/>||</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(altA<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;obj2,<sp/>out,<sp/>state,<sp/>recursion<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(nCompsA)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>altA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>altA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>altA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>ICCBased<sp/>color<sp/>space<sp/>-<sp/>invalid<sp/>N&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>(nCompsA,<sp/>altA,<sp/>&amp;iccProfileStreamA);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Range&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>2<sp/>*<sp/>nCompsA)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj4;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCompsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(2*i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(2*i+1,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.isNum()<sp/>&amp;&amp;<sp/>obj4.isNum())<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;rangeMin[i]<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;rangeMax[i]<sp/>=<sp/>obj4.getNum();</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/>Guchar<sp/>*profBuf;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*iccStream<sp/>=<sp/>obj1.getStream();</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>profBuf<sp/>=<sp/>iccStream-&gt;toUnsignedChars(&amp;length,<sp/>65536,<sp/>65536);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>cmsHPROFILE<sp/>hp<sp/>=<sp/>cmsOpenProfileFromMem(profBuf,length);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>gfree(profBuf);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>ICCBased<sp/>color<sp/>space<sp/>profile<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHPROFILE<sp/>dhp<sp/>=<sp/>(state<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>state-&gt;getDisplayProfile()<sp/>!=<sp/>NULL)<sp/>?<sp/>state-&gt;getDisplayProfile()<sp/>:<sp/>displayProfile;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dhp<sp/>==<sp/>NULL)<sp/>dhp<sp/>=<sp/>RGBProfile;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cst<sp/>=<sp/>getCMSColorSpaceType(cmsGetColorSpace(hp));</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dNChannels<sp/>=<sp/>getCMSNChannels(cmsGetColorSpace(dhp));</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcst<sp/>=<sp/>getCMSColorSpaceType(cmsGetColorSpace(dhp));</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHTRANSFORM<sp/>transform;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmsIntent<sp/>=<sp/>INTENT_RELATIVE_COLORIMETRIC;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*intent<sp/>=<sp/>state-&gt;getRenderingIntent();</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intent<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;AbsoluteColorimetric&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_ABSOLUTE_COLORIMETRIC;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;Saturation&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_SATURATION;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(intent,<sp/></highlight><highlight class="stringliteral">&quot;Perceptual&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent<sp/>=<sp/>INTENT_PERCEPTUAL;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(hp,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(cst)<sp/>|CHANNELS_SH(nCompsA)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dhp,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(dcst)<sp/>|</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(dNChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsIntent,<sp/>LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;transform<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;transform<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>cmsIntent,<sp/>cst,<sp/>dcst);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dcst<sp/>==<sp/>PT_RGB<sp/>||<sp/>dcst<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>line<sp/>transform<sp/>only<sp/>when<sp/>the<sp/>display<sp/>is<sp/>RGB<sp/>type<sp/>color<sp/>space<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(hp,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nCompsA)<sp/>|<sp/>BYTES_SH(1),dhp,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dcst<sp/>==<sp/>PT_RGB)<sp/>?<sp/>TYPE_RGB_8<sp/>:<sp/>TYPE_CMYK_8,<sp/>cmsIntent,<sp/>LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;lineTransform<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;lineTransform<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>cmsIntent,<sp/>cst,<sp/>dcst);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(hp);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>this<sp/>colorSpace<sp/>into<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>&amp;&amp;<sp/>iccProfileStreamA.num<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref><sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_i_c_c_based_color_space_key" kindref="compound">GfxICCBasedColorSpaceKey</ref>(iccProfileStreamA.num,<sp/>iccProfileStreamA.gen);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref><sp/>*item<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_i_c_c_based_color_space_item" kindref="compound">GfxICCBasedColorSpaceItem</ref>(cs);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;getIccColorSpaceCache()-&gt;put(k,<sp/>item);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_GRAY)<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>transform-&gt;getInputPixelType()<sp/>==<sp/>PT_Lab)<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>colToByte(dblToCol(colToDbl(color-&gt;c[0])<sp/>/<sp/>100.0));</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[1])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[2])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nComps;i++)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>colToByte(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>cmsCache.find(key);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>cmsCache.end())<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>byteToCol(value<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4<sp/>&amp;&amp;<sp/>cmsCache.size()<sp/>&lt;=<sp/>CMSCACHE_LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>out[0];</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmsCache.insert(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(key,<sp/>value));</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>getRGB(color,&amp;rgb);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>clip01((GfxColorComp)(0.3<sp/>*<sp/>rgb.r<sp/>+</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.59<sp/>*<sp/>rgb.g<sp/>+</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.11<sp/>*<sp/>rgb.b<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>alt-&gt;getGray(color,<sp/>gray);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>transform-&gt;getInputPixelType()<sp/>==<sp/>PT_Lab)<sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>colToByte(dblToCol(colToDbl(color-&gt;c[0])<sp/>/<sp/>100.0));</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[1])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[2])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nComps;i++)<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>colToByte(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>cmsCache.find(key);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>cmsCache.end())<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(value<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol((value<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(value<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4<sp/>&amp;&amp;<sp/>cmsCache.size()<sp/>&lt;=<sp/>CMSCACHE_LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(out[0]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(out[1]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>out[2];</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmsCache.insert(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(key,<sp/>value));</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>transform-&gt;getInputPixelType()<sp/>==<sp/>PT_Lab)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>colToByte(dblToCol(colToDbl(color-&gt;c[0])<sp/>/<sp/>100.0));</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[1])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[2])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nComps;i++)<sp/>{</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>colToByte(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>cmsCache.find(key);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>cmsCache.end())<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>byteToCol(value<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>byteToCol((value<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>byteToCol(value<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToDbl(out[0]);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToDbl(out[1]);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToDbl(out[2]);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>byteToDbl(out[3]);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>clip01(dblToCol(r));</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>clip01(dblToCol(g));</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>clip01(dblToCol(b));</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4<sp/>&amp;&amp;<sp/>cmsCache.size()<sp/>&lt;=<sp/>CMSCACHE_LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(dblToByte(r)<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(dblToByte(g)<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>dblToByte(b);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmsCache.insert(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(key,<sp/>value));</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getRGB(color,<sp/>rgb);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>alt-&gt;getRGB(color,<sp/>rgb);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(3<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>lineTransform-&gt;doTransform(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*current<sp/>=<sp/>tmp<sp/>+<sp/>(i<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(current[0]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(current[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>current[2];</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>alt-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(3<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>lineTransform-&gt;doTransform(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*current<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(4<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>lineTransform-&gt;doTransform(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*current<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToDbl(*current++);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToDbl(*current++);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToDbl(*current++);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>byteToDbl(*current++);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(r);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(g);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dblToByte(b);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>alt-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(3<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>lineTransform-&gt;doTransform(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*current<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getRGBXLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>alt-&gt;getRGBXLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,length);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>nComps<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(3<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>getRGBLine(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*p<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(c<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(m<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(y<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(k);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getCMYKLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>alt-&gt;getCMYKLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>lineTransform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(4<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,tmp,length);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*p<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>4;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineTransform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>nComps<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar*<sp/>tmp<sp/>=<sp/>(Guchar<sp/>*)gmallocn(3<sp/>*<sp/>length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>getRGBLine(in,<sp/>tmp,<sp/>length);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*p<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)<sp/></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>byteToCol(255<sp/>-<sp/>*p++);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>colToByte(c<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>colToByte(m<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>colToByte(y<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>colToByte(k);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>(SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(tmp);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getDeviceNLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>alt-&gt;getDeviceNLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_CMYK)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>in[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>transform-&gt;getInputPixelType()<sp/>==<sp/>PT_Lab)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>colToByte(dblToCol(colToDbl(color-&gt;c[0])<sp/>/<sp/>100.0));</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[1]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[1])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[2]<sp/>=<sp/>colToByte(dblToCol((colToDbl(color-&gt;c[2])<sp/>+<sp/>128.0)<sp/>/<sp/>255.0));</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nComps;i++)<sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>colToByte(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>cmsCache.find(key);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>cmsCache.end())<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>byteToCol(value<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>byteToCol((value<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>byteToCol((value<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>byteToCol(value<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>transform-&gt;doTransform(in,out,1);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>byteToCol(out[0]);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>byteToCol(out[1]);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>byteToCol(out[2]);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>byteToCol(out[3]);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;=<sp/>4<sp/>&amp;&amp;<sp/>cmsCache.size()<sp/>&lt;=<sp/>CMSCACHE_LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>in[j];</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(out[0]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(out[1]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(out[2]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>out[3];</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmsCache.insert(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(key,<sp/>value));</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>transform<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transform-&gt;getTransformPixelType()<sp/>==<sp/>PT_RGB)<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>getRGB(color,&amp;rgb);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.r);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.g);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>rgb.b);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>c<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>m<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getCMYK(color,<sp/>cmyk);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>alt-&gt;getCMYK(color,<sp/>cmyk);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal">GBool<sp/>GfxICCBasedColorSpace::useGetRGBLine()<sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lineTransform<sp/>!=<sp/>NULL<sp/>||<sp/>alt-&gt;useGetRGBLine();</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alt-&gt;useGetRGBLine();</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal">GBool<sp/>GfxICCBasedColorSpace::useGetCMYKLine()<sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lineTransform<sp/>!=<sp/>NULL<sp/>||<sp/>alt-&gt;useGetCMYKLine();</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alt-&gt;useGetCMYKLine();</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal">GBool<sp/>GfxICCBasedColorSpace::useGetDeviceNLine()<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lineTransform<sp/>!=<sp/>NULL<sp/>||<sp/>alt-&gt;useGetDeviceNLine();</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alt-&gt;useGetDeviceNLine();</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rangeMin[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>dblToCol(rangeMin[i]);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rangeMax[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>dblToCol(rangeMax[i]);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxICCBasedColorSpace::getDefaultRanges(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeLow,</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeRange,</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxImgPixel)<sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>alt-&gt;getDefaultRanges(decodeLow,<sp/>decodeRange,<sp/>maxImgPixel);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>nominally<sp/>correct,<sp/>but<sp/>some<sp/>PDF<sp/>files<sp/>don&apos;t<sp/>set<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>ranges<sp/>in<sp/>the<sp/>ICCBased<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeLow[i]<sp/>=<sp/>rangeMin[i];</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeRange[i]<sp/>=<sp/>rangeMax[i]<sp/>-<sp/>rangeMin[i];</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxIndexedColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal">GfxIndexedColorSpace::GfxIndexedColorSpace(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*baseA,</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexHighA)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>baseA;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>indexHigh<sp/>=<sp/>indexHighA;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>lookup<sp/>=<sp/>(Guchar<sp/>*)gmallocn((indexHigh<sp/>+<sp/>1)<sp/>*<sp/>base-&gt;getNComps(),</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>base-&gt;getOverprintMask();</highlight></codeline>
<codeline lineno="2555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal">GfxIndexedColorSpace::~GfxIndexedColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>gfree(lookup);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxIndexedColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref>(base-&gt;copy(),<sp/>indexHigh);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>memcpy(cs-&gt;lookup,<sp/>lookup,</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(indexHigh<sp/>+<sp/>1)<sp/>*<sp/>base-&gt;getNComps()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxIndexedColorSpace::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*baseA;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexHighA;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(baseA<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state,<sp/>recursion<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(base<sp/>color<sp/>space)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr-&gt;get(2,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(hival)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>baseA;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/>indexHighA<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexHighA<sp/>&lt;<sp/>0<sp/>||<sp/>indexHighA<sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>PDF<sp/>spec<sp/>requires<sp/>indexHigh<sp/>to<sp/>be<sp/>in<sp/>[0,255]<sp/>--<sp/>allowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>larger<sp/>than<sp/>255<sp/>creates<sp/>a<sp/>security<sp/>hole:<sp/>if<sp/>nComps<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indexHigh<sp/>is<sp/>greater<sp/>than<sp/>2^31,<sp/>the<sp/>loop<sp/>below<sp/>may<sp/>overwrite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousValue<sp/>=<sp/>indexHighA;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexHighA<sp/>&lt;<sp/>0)<sp/>indexHighA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>indexHighA<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(invalid<sp/>indexHigh<sp/>value,<sp/>was<sp/>{0:d}<sp/>using<sp/>{1:d}<sp/>to<sp/>try<sp/>to<sp/>recover)&quot;</highlight><highlight class="normal">,<sp/>previousValue,<sp/>indexHighA);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref>(baseA,<sp/>indexHighA);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>arr-&gt;get(3,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>baseA-&gt;getNComps();</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isStream())<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.streamReset();</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>indexHighA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readChars<sp/>=<sp/>obj1.streamGetChars(n,<sp/>&amp;cs-&gt;lookup[i*n]);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>readChars;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(lookup<sp/>table<sp/>stream<sp/>too<sp/>short)<sp/>padding<sp/>with<sp/>zeroes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs-&gt;lookup[i*n<sp/>+<sp/>j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.streamClose();</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isString())<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.getString()-&gt;getLength()<sp/>&lt;<sp/>(indexHighA<sp/>+<sp/>1)<sp/>*<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(lookup<sp/>table<sp/>string<sp/>too<sp/>short)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err3;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>obj1.getString()-&gt;getCString();</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>indexHighA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;lookup[i*n<sp/>+<sp/>j]<sp/>=<sp/>(Guchar)*s++;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Indexed<sp/>color<sp/>space<sp/>(lookup<sp/>table)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err3;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/>err3:</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*GfxIndexedColorSpace::mapColorToBase(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*baseColor)<sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low[gfxColorMaxComps],<sp/>range[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>base-&gt;getDefaultRanges(low,<sp/>range,<sp/>indexHigh);</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>(int)(colToDbl(color-&gt;c[0])<sp/>+<sp/>0.5)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely((idx<sp/>+<sp/>n<sp/>&lt;<sp/>(indexHigh<sp/>+<sp/>1)<sp/>*<sp/>base-&gt;getNComps())<sp/>&amp;&amp;<sp/>idx<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;lookup[idx];</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseColor-&gt;c[i]<sp/>=<sp/>dblToCol(low[i]<sp/>+<sp/>(p[i]<sp/>/<sp/>255.0)<sp/>*<sp/>range[i]);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseColor-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseColor;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>base-&gt;getGray(mapColorToBase(color,<sp/>&amp;color2),<sp/>gray);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>base-&gt;getRGB(mapColorToBase(color,<sp/>&amp;color2),<sp/>rgb);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>n);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line[i<sp/>*<sp/>n<sp/>+<sp/>j]<sp/>=<sp/>lookup[in[i]<sp/>*<sp/>n<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>base-&gt;getRGBLine(line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/>gfree<sp/>(line);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="2695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>n);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line[i<sp/>*<sp/>n<sp/>+<sp/>j]<sp/>=<sp/>lookup[in[i]<sp/>*<sp/>n<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>base-&gt;getRGBLine(line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>gfree<sp/>(line);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="2711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>n);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line[i<sp/>*<sp/>n<sp/>+<sp/>j]<sp/>=<sp/>lookup[in[i]<sp/>*<sp/>n<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>base-&gt;getRGBXLine(line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/>gfree<sp/>(line);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>n);</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line[i<sp/>*<sp/>n<sp/>+<sp/>j]<sp/>=<sp/>lookup[in[i]<sp/>*<sp/>n<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/>base-&gt;getCMYKLine(line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>gfree<sp/>(line);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>base-&gt;getNComps();</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>n);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line[i<sp/>*<sp/>n<sp/>+<sp/>j]<sp/>=<sp/>lookup[in[i]<sp/>*<sp/>n<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>base-&gt;getDeviceNLine(line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>gfree<sp/>(line);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>base-&gt;getCMYK(mapColorToBase(color,<sp/>&amp;color2),<sp/>cmyk);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/>base-&gt;getDeviceN(mapColorToBase(color,<sp/>&amp;color2),<sp/>deviceN);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxIndexedColorSpace::getDefaultRanges(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeLow,</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*decodeRange,</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxImgPixel)<sp/>{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>decodeLow[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/>decodeRange[0]<sp/>=<sp/>maxImgPixel;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxSeparationColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal">GfxSeparationColorSpace::GfxSeparationColorSpace(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA,</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA)<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>nameA;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/>alt<sp/>=<sp/>altA;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>func<sp/>=<sp/>funcA;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>nonMarking<sp/>=<sp/>!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0x04;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0x08;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal">GfxSeparationColorSpace::GfxSeparationColorSpace(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA,</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA,</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>nonMarkingA,</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>overprintMaskA,</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mappingA)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>nameA;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>alt<sp/>=<sp/>altA;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/>func<sp/>=<sp/>funcA;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/>nonMarking<sp/>=<sp/>nonMarkingA;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>overprintMaskA;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>mappingA;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal">GfxSeparationColorSpace::~GfxSeparationColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>alt;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxSeparationColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mappingA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>mappingA<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>gmalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>*mappingA<sp/>=<sp/>*mapping;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref>(name-&gt;copy(),<sp/>alt-&gt;copy(),<sp/>func-&gt;copy(),</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonMarking,<sp/>overprintMask,<sp/>mappingA);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>handle<sp/>the<sp/>&apos;All&apos;<sp/>and<sp/>&apos;None&apos;<sp/>colorants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxSeparationColorSpace::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Separation<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr-&gt;get(1,<sp/>&amp;obj1)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Separation<sp/>color<sp/>space<sp/>(name)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/>nameA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(obj1.getName());</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>arr-&gt;get(2,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(altA<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state,<sp/>recursion<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Separation<sp/>color<sp/>space<sp/>(alternate<sp/>color<sp/>space)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err3;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>arr-&gt;get(3,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcA<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err4;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcA-&gt;getInputSize()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>SeparationColorSpace<sp/>function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err5;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref>(nameA,<sp/>altA,<sp/>funcA);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/>err5:</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcA;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/>err4:</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>altA;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/>err3:</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>nameA;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alt-&gt;getMode()<sp/>==<sp/>csDeviceGray<sp/>&amp;&amp;<sp/>name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>*gray<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>colToDbl(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;transform(&amp;x,<sp/>c);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getGray(&amp;color2,<sp/>gray);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alt-&gt;getMode()<sp/>==<sp/>csDeviceGray<sp/>&amp;&amp;<sp/>name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;r<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;g<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb-&gt;b<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>colToDbl(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;transform(&amp;x,<sp/>c);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getRGB(&amp;color2,<sp/>rgb);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>color-&gt;c[0];</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>color-&gt;c[0];</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>color-&gt;c[0];</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;y<sp/>=<sp/>color-&gt;c[0];</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>colToDbl(color-&gt;c[0]);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;transform(&amp;x,<sp/>c);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>alt-&gt;getCMYK(&amp;color2,<sp/>cmyk);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>if<sp/>(mapping<sp/>==<sp/>NULL<sp/>||<sp/>mapping[0]<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[mapping[0]]<sp/>=<sp/>color-&gt;c[0];</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>color-&gt;c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSeparationColorSpace::createMapping(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*separationList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSepComps)<sp/>{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonMarking)</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(overprintMask)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x02:</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04:</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x08:</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>newOverprintMask<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>separationList-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)separationList-&gt;get(i);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(name))<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sepCS-&gt;getFunc()-&gt;hasDifferentResultSet(func))<sp/>{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Different<sp/>functions<sp/>found<sp/>for<sp/>&apos;{0:t}&apos;,<sp/>convert<sp/>immediately&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>i+4;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>newOverprintMask;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>&lt;&lt;=1;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separationList-&gt;getLength()<sp/>==<sp/>maxSepComps)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>({0:d})<sp/>spots,<sp/>convert<sp/>&apos;{1:t}&apos;<sp/>immediately&quot;</highlight><highlight class="normal">,<sp/>maxSepComps,<sp/>name);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mapping<sp/>=<sp/>separationList-&gt;getLength()<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>separationList-&gt;append(copy());</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>newOverprintMask;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxDeviceNColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal">GfxDeviceNColorSpace::GfxDeviceNColorSpace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA,</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>**namesA,</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA,</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA,</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*sepsCSA)<sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nCompsA;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/>alt<sp/>=<sp/>altA;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/>func<sp/>=<sp/>funcA;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/>sepsCS<sp/>=<sp/>sepsCSA;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/>nonMarking<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>names[i]<sp/>=<sp/>namesA[i];</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonMarking<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>|=<sp/>0x02;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>|=<sp/>0x04;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>|=<sp/>0x08;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0x0f;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal">GfxDeviceNColorSpace::GfxDeviceNColorSpace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA,</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>**namesA,</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA,</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA,</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*sepsCSA,</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mappingA,</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>nonMarkingA,</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>overprintMaskA)<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nCompsA;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/>alt<sp/>=<sp/>altA;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/>func<sp/>=<sp/>funcA;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/>sepsCS<sp/>=<sp/>sepsCSA;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>mappingA;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/>nonMarking<sp/>=<sp/>nonMarkingA;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>overprintMaskA;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/>names[i]<sp/>=<sp/>namesA[i]-&gt;copy();</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal">GfxDeviceNColorSpace::~GfxDeviceNColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>names[i];</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>alt;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/>deleteGooList(sepsCS,<sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref>);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxDeviceNColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mappingA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*sepsCSA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>(sepsCS-&gt;getLength());</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sepsCS-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*scs<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)<sp/>sepsCS-&gt;get(i);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(scs<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepsCSA-&gt;append(scs-&gt;copy());</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>mappingA<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>nComps);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mappingA[i]<sp/>=<sp/>mapping[i];</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref>(nComps,<sp/>names,<sp/>alt-&gt;copy(),<sp/>func-&gt;copy(),</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepsCSA,<sp/>mappingA,<sp/>nonMarking,<sp/>overprintMask);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>handle<sp/>the<sp/>&apos;None&apos;<sp/>colorant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxDeviceNColorSpace::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*namesA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*altA;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcA;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*separationList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>arr-&gt;getLength()<sp/>!=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr-&gt;get(1,<sp/>&amp;obj1)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space<sp/>(names)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>nCompsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nCompsA<sp/>&gt;<sp/>gfxColorMaxComps)<sp/>{</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;DeviceN<sp/>color<sp/>space<sp/>with<sp/>too<sp/>many<sp/>({0:d}<sp/>&gt;<sp/>{1:d})<sp/>components&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nCompsA,<sp/>gfxColorMaxComps);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/>nCompsA<sp/>=<sp/>gfxColorMaxComps;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCompsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space<sp/>(names)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/>namesA[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(obj2.getName());</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>arr-&gt;get(2,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(altA<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state,<sp/>recursion<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space<sp/>(alternate<sp/>color<sp/>space)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err3;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/>arr-&gt;get(3,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcA<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err4;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr-&gt;get(4,<sp/>&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space<sp/>(attributes)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err4;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*attribs<sp/>=<sp/>obj1.getDict();</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/>attribs-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Colorants&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isDict())<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*colorants<sp/>=<sp/>obj2.getDict();</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>colorants-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj3;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorants-&gt;getVal(i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.isArray())<sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separationList-&gt;append(GfxSeparationColorSpace::parse(res,<sp/>obj3.getArray(),<sp/>out,<sp/>state,<sp/>recursion));</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DeviceN<sp/>color<sp/>space<sp/>(colorant<sp/>value<sp/>entry<sp/>is<sp/>not<sp/>an<sp/>Array)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err4;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref>(nCompsA,<sp/>namesA,<sp/>altA,<sp/>funcA,<sp/>separationList);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/>err4:</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>altA;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/>err3:</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCompsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>namesA[i];</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>separationList;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps],<sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>colToDbl(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/>func-&gt;transform(x,<sp/>c);</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/>alt-&gt;getGray(&amp;color2,<sp/>gray);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps],<sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>colToDbl(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>func-&gt;transform(x,<sp/>c);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/>alt-&gt;getRGB(&amp;color2,<sp/>rgb);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps],<sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color2;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>colToDbl(color-&gt;c[i]);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>func-&gt;transform(x,<sp/>c);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>alt-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>color2.c[i]<sp/>=<sp/>dblToCol(c[i]);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>alt-&gt;getCMYK(&amp;color2,<sp/>cmyk);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>if<sp/>(mapping<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>getCMYK(color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[0]<sp/>=<sp/>cmyk.c;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[1]<sp/>=<sp/>cmyk.m;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[2]<sp/>=<sp/>cmyk.y;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>cmyk.k;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>j++)</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping[j]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviceN-&gt;c[mapping[j]]<sp/>=<sp/>color-&gt;c[j];</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxDeviceNColorSpace::createMapping(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*separationList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSepComps)<sp/>{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonMarking)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>mapping<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>nComps);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>Guint<sp/>newOverprintMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>0x02;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>0x04;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names[i]-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>0x08;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>startOverprintMask<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>found<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*sepFunc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepFunc<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sepsCS-&gt;getLength();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)sepsCS-&gt;get(k);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(names[i]))<sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepFunc<sp/>=<sp/>sepCS-&gt;getFunc();</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>separationList-&gt;getLength();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)separationList-&gt;get(j);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(names[i]))<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sepFunc<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>sepCS-&gt;getFunc()-&gt;hasDifferentResultSet(sepFunc))<sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Different<sp/>functions<sp/>found<sp/>for<sp/>&apos;{0:t}&apos;,<sp/>convert<sp/>immediately&quot;</highlight><highlight class="normal">,<sp/>names[i]);</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>j+4;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>startOverprintMask;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startOverprintMask<sp/>&lt;&lt;=1;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separationList-&gt;getLength()<sp/>==<sp/>maxSepComps)<sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>({0:d})<sp/>spots,<sp/>convert<sp/>&apos;{1:t}&apos;<sp/>immediately&quot;</highlight><highlight class="normal">,<sp/>maxSepComps,<sp/>names[i]);</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping[i]<sp/>=<sp/>separationList-&gt;getLength()<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newOverprintMask<sp/>|=<sp/>startOverprintMask;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separationList-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref>(names[i]-&gt;copy(),alt-&gt;copy(),<sp/>func-&gt;copy()));</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sepsCS-&gt;getLength();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)sepsCS-&gt;get(k);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(names[i]))<sp/>{</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separationList-&gt;append(sepCS-&gt;copy());</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!found)<sp/>{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;DeviceN<sp/>has<sp/>no<sp/>suitable<sp/>colorant&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(mapping);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintMask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/>overprintMask<sp/>=<sp/>newOverprintMask;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxPatternColorSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal">GfxPatternColorSpace::GfxPatternColorSpace(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*underA)<sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>under<sp/>=<sp/>underA;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal">GfxPatternColorSpace::~GfxPatternColorSpace()<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(under)<sp/>{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>under;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxPatternColorSpace::copy()<sp/>{</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref>(under<sp/>?<sp/>under-&gt;copy()<sp/>:</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*)NULL);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*GfxPatternColorSpace::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*arr,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*underA;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>arr-&gt;getLength()<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Pattern<sp/>color<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/>underA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr-&gt;getLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>arr-&gt;get(1,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(underA<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state,<sp/>recursion<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Pattern<sp/>color<sp/>space<sp/>(underlying<sp/>color<sp/>space)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref>(underA);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatternColorSpace::getGray(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/>*gray<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatternColorSpace::getRGB(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>rgb-&gt;r<sp/>=<sp/>rgb-&gt;g<sp/>=<sp/>rgb-&gt;b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatternColorSpace::getCMYK(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>cmyk-&gt;c<sp/>=<sp/>cmyk-&gt;m<sp/>=<sp/>cmyk-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/>cmyk-&gt;k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatternColorSpace::getDeviceN(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>i++)</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceN-&gt;c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>deviceN-&gt;c[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatternColorSpace::getDefaultColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>color-&gt;c[0]=0;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal">GfxPattern::GfxPattern(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>typeA;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal">GfxPattern::~GfxPattern()<sp/>{</highlight></codeline>
<codeline lineno="3442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*GfxPattern::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>obj-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;PatternType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>obj-&gt;streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;PatternType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt()<sp/>&amp;&amp;<sp/>obj1.getInt()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>GfxTilingPattern::parse(obj);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt()<sp/>&amp;&amp;<sp/>obj1.getInt()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>GfxShadingPattern::parse(res,<sp/>obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxTilingPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*GfxTilingPattern::parse(<ref refid="class_object" kindref="compound">Object</ref><sp/>*patObj)<sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*pat;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintTypeA,<sp/>tilingTypeA;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bboxA[4],<sp/>matrixA[6];</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStepA,<sp/>yStepA;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>resDictA;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!patObj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>patObj-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;PaintType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>paintTypeA<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/>paintTypeA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>PaintType<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;TilingType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>tilingTypeA<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>tilingTypeA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>TilingType<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>bboxA[0]<sp/>=<sp/>bboxA[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>bboxA[2]<sp/>=<sp/>bboxA[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxA[i]<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>BBox<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XStep&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>xStepA<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/>xStepA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>XStep<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;YStep&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/>yStepA<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/>yStepA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>YStep<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resDictA)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>resDictA.free();</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>resDictA.initNull();</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>missing<sp/>Resources<sp/>in<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>matrixA[0]<sp/>=<sp/>1;<sp/>matrixA[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>matrixA[2]<sp/>=<sp/>0;<sp/>matrixA[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/>matrixA[4]<sp/>=<sp/>0;<sp/>matrixA[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[i]<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>pat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref>(paintTypeA,<sp/>tilingTypeA,<sp/>bboxA,<sp/>xStepA,<sp/>yStepA,</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;resDictA,<sp/>matrixA,<sp/>patObj);</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/>resDictA.free();</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pat;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal">GfxTilingPattern::GfxTilingPattern(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintTypeA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tilingTypeA,</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bboxA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStepA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStepA,</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*resDictA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrixA,</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*contentStreamA):</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref>(1)</highlight></codeline>
<codeline lineno="3556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>paintType<sp/>=<sp/>paintTypeA;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/>tilingType<sp/>=<sp/>tilingTypeA;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox[i]<sp/>=<sp/>bboxA[i];</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>xStep<sp/>=<sp/>xStepA;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>yStep<sp/>=<sp/>yStepA;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/>resDictA-&gt;copy(&amp;resDict);</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>matrixA[i];</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>contentStreamA-&gt;copy(&amp;contentStream);</highlight></codeline>
<codeline lineno="3571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal">GfxTilingPattern::~GfxTilingPattern()<sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/>resDict.free();</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/>contentStream.free();</highlight></codeline>
<codeline lineno="3576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*GfxTilingPattern::copy()<sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref>(paintType,<sp/>tilingType,<sp/>bbox,<sp/>xStep,<sp/>yStep,</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;resDict,<sp/>matrix,<sp/>&amp;contentStream);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxShadingPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref><sp/>*GfxShadingPattern::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*patObj,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shadingA;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>matrixA[6];</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!patObj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>patObj-&gt;getDict();</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Shading&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>shadingA<sp/>=<sp/>GfxShading::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shadingA)<sp/>{</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/>matrixA[0]<sp/>=<sp/>1;<sp/>matrixA[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>matrixA[2]<sp/>=<sp/>0;<sp/>matrixA[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/>matrixA[4]<sp/>=<sp/>0;<sp/>matrixA[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[i]<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref>(shadingA,<sp/>matrixA);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal">GfxShadingPattern::GfxShadingPattern(<ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shadingA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrixA):</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref>(2)</highlight></codeline>
<codeline lineno="3625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/>shadingA;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>matrixA[i];</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal">GfxShadingPattern::~GfxShadingPattern()<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*GfxShadingPattern::copy()<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref>(shading-&gt;copy(),<sp/>matrix);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal">GfxShading::GfxShading(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA)<sp/>{</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>typeA;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal">GfxShading::GfxShading(<ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>shading-&gt;type;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>shading-&gt;colorSpace-&gt;copy();</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>background.c[i]<sp/>=<sp/>shading-&gt;background.c[i];</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>hasBackground<sp/>=<sp/>shading-&gt;hasBackground;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>shading-&gt;xMin;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>shading-&gt;yMin;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>shading-&gt;xMax;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>yMax<sp/>=<sp/>shading-&gt;yMax;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/>hasBBox<sp/>=<sp/>shading-&gt;hasBBox;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal">GfxShading::~GfxShading()<sp/>{</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorSpace;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>obj-&gt;getDict();</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>obj-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ShadingType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>ShadingType<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/>typeA<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(typeA)<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxFunctionShading::parse(res,<sp/>dict,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxAxialShading::parse(res,<sp/>dict,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxRadialShading::parse(res,<sp/>dict,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxGouraudTriangleShading::parse(res,<sp/>4,<sp/>dict,<sp/>obj-&gt;getStream(),<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Type<sp/>4<sp/>shading<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxGouraudTriangleShading::parse(res,<sp/>5,<sp/>dict,<sp/>obj-&gt;getStream(),<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Type<sp/>5<sp/>shading<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxPatchMeshShading::parse(res,<sp/>6,<sp/>dict,<sp/>obj-&gt;getStream(),<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Type<sp/>6<sp/>shading<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxPatchMeshShading::parse(res,<sp/>7,<sp/>dict,<sp/>obj-&gt;getStream(),<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Type<sp/>7<sp/>shading<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Unimplemented<sp/>shading<sp/>type<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>typeA);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal">GBool<sp/>GfxShading::init(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state)))<sp/>{</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/>background.c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>hasBackground<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Background&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGetLength()<sp/>==<sp/>colorSpace-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasBackground<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>colorSpace-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/>background.c[i]<sp/>=<sp/>dblToCol(obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;getNum());</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Background<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>yMin<sp/>=<sp/>xMax<sp/>=<sp/>yMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>hasBBox<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj3,<sp/>obj4,<sp/>obj5;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj5);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isNum()<sp/>&amp;&amp;<sp/>obj3.isNum()<sp/>&amp;&amp;<sp/>obj4.isNum()<sp/>&amp;&amp;<sp/>obj5.isNum())</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasBBox<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>obj4.getNum();</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>obj5.getNum();</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>BBox<sp/>in<sp/>shading<sp/>dictionary<sp/>(Values<sp/>not<sp/>numbers)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj5.free();</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>BBox<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxFunctionShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal">GfxFunctionShading::GfxFunctionShading(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0A,</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1A,</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrixA,</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA):</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(1)</highlight></codeline>
<codeline lineno="3818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>x0A;</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>y0A;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x1A;</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>y1A;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>matrixA[i];</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>nFuncsA;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>funcsA[i];</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal">GfxFunctionShading::GfxFunctionShading(<ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(shading)</highlight></codeline>
<codeline lineno="3836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>shading-&gt;x0;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>shading-&gt;y0;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>shading-&gt;x1;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>shading-&gt;y1;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>shading-&gt;matrix[i];</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>shading-&gt;nFuncs;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>shading-&gt;funcs[i]-&gt;copy();</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal">GfxFunctionShading::~GfxFunctionShading()<sp/>{</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[i];</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*GfxFunctionShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/>y0A,<sp/>x1A,<sp/>y1A;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>matrixA[6];</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcsA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>x0A<sp/>=<sp/>y0A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>x1A<sp/>=<sp/>y1A<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Domain&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>x0A<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>x1A<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>y0A<sp/>=<sp/>obj1.arrayGet(2,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>y1A<sp/>=<sp/>obj1.arrayGet(3,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>matrixA[0]<sp/>=<sp/>1;<sp/>matrixA[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/>matrixA[2]<sp/>=<sp/>0;<sp/>matrixA[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>matrixA[4]<sp/>=<sp/>0;<sp/>matrixA[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[0]<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[1]<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[2]<sp/>=<sp/>obj1.arrayGet(2,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[3]<sp/>=<sp/>obj1.arrayGet(3,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[4]<sp/>=<sp/>obj1.arrayGet(4,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[5]<sp/>=<sp/>obj1.arrayGet(5,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Function&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncsA<sp/>&gt;<sp/>gfxColorMaxComps<sp/>||<sp/>nFuncsA<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Function<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[i]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[0]<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref>(x0A,<sp/>y0A,<sp/>x1A,<sp/>y1A,<sp/>matrixA,</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcsA,<sp/>nFuncsA);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;init(res,<sp/>dict,<sp/>out,<sp/>state))<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxFunctionShading::copy()<sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxFunctionShading::getColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in[2],<sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>there<sp/>can<sp/>be<sp/>one<sp/>function<sp/>with<sp/>n<sp/>outputs<sp/>or<sp/>n<sp/>functions<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>output<sp/>each<sp/>(where<sp/>n<sp/>=<sp/>number<sp/>of<sp/>color<sp/>components)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/>in[0]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/>in[1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]-&gt;transform(in,<sp/>&amp;out[i]);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>dblToCol(out[i]);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxUnivariateShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal">GfxUnivariateShading::GfxUnivariateShading(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA,</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1A,</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA,</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>extend0A,<sp/>GBool<sp/>extend1A):</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(typeA)</highlight></codeline>
<codeline lineno="3973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>t0A;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>t1A;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>nFuncsA;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>funcsA[i];</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>extend0<sp/>=<sp/>extend0A;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/>extend1<sp/>=<sp/>extend1A;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>cacheSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/>lastMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>cacheBounds<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/>cacheCoeff<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>cacheValues<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal">GfxUnivariateShading::GfxUnivariateShading(<ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(shading)</highlight></codeline>
<codeline lineno="3994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;t0;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;t1;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>shading-&gt;nFuncs;</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>shading-&gt;funcs[i]-&gt;copy();</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>extend0<sp/>=<sp/>shading-&gt;extend0;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/>extend1<sp/>=<sp/>shading-&gt;extend1;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/>cacheSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>lastMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>cacheBounds<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/>cacheCoeff<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/>cacheValues<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal">GfxUnivariateShading::~GfxUnivariateShading()<sp/>{</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[i];</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/>gfree<sp/>(cacheBounds);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxUnivariateShading::getColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nComps;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>there<sp/>can<sp/>be<sp/>one<sp/>function<sp/>with<sp/>n<sp/>outputs<sp/>or<sp/>n<sp/>functions<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>output<sp/>each<sp/>(where<sp/>n<sp/>=<sp/>number<sp/>of<sp/>color<sp/>components)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nFuncs<sp/>*<sp/>funcs[0]-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheSize<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>ix,<sp/>*l,<sp/>*u,<sp/>*upper;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBounds[lastMatch<sp/>-<sp/>1]<sp/>&gt;=<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>std::lower_bound<sp/>(cacheBounds,<sp/>cacheBounds<sp/>+<sp/>lastMatch<sp/>-<sp/>1,<sp/>t);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastMatch<sp/>=<sp/>upper<sp/>-<sp/>cacheBounds;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastMatch<sp/>=<sp/>std::min&lt;int&gt;(std::max&lt;int&gt;(1,<sp/>lastMatch),<sp/>cacheSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBounds[lastMatch]<sp/>&lt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>std::lower_bound<sp/>(cacheBounds<sp/>+<sp/>lastMatch<sp/>+<sp/>1,<sp/>cacheBounds<sp/>+<sp/>cacheSize,<sp/>t);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastMatch<sp/>=<sp/>upper<sp/>-<sp/>cacheBounds;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastMatch<sp/>=<sp/>std::min&lt;int&gt;(std::max&lt;int&gt;(1,<sp/>lastMatch),<sp/>cacheSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(t<sp/>-<sp/>cacheBounds[lastMatch-1])<sp/>*<sp/>cacheCoeff[lastMatch];</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>1.0<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>cacheValues<sp/>+<sp/>lastMatch<sp/>*<sp/>nComps;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>u<sp/>-<sp/>nComps;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>ix<sp/>*<sp/>l[i]<sp/>+<sp/>x<sp/>*<sp/>u[i];</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs[i]-&gt;getInputSize()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shading<sp/>function<sp/>(input<sp/>!=<sp/>1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[i]-&gt;transform(&amp;t,<sp/>&amp;out[i]);</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>dblToCol(out[i]);</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxUnivariateShading::setupCache(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>*ctm,</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMin,<sp/>sMax,<sp/>tMin,<sp/>tMax,<sp/>upperBound;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>nComps,<sp/>maxSize;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>gfree<sp/>(cacheBounds);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>cacheBounds<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/>cacheSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>there<sp/>can<sp/>be<sp/>one<sp/>function<sp/>with<sp/>n<sp/>outputs<sp/>or<sp/>n<sp/>functions<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>output<sp/>each<sp/>(where<sp/>n<sp/>=<sp/>number<sp/>of<sp/>color<sp/>components)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nFuncs<sp/>*<sp/>funcs[0]-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>getParameterRange(&amp;sMin,<sp/>&amp;sMax,<sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/>upperBound<sp/>=<sp/>ctm-&gt;norm()<sp/>*<sp/>getDistance(sMin,<sp/>sMax);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/>maxSize<sp/>=<sp/>ceil(upperBound);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>maxSize<sp/>=<sp/>std::max&lt;int&gt;(maxSize,<sp/>2);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[4],<sp/>y[4];</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm-&gt;transform(xMin,<sp/>yMin,<sp/>&amp;x[0],<sp/>&amp;y[0]);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm-&gt;transform(xMax,<sp/>yMin,<sp/>&amp;x[1],<sp/>&amp;y[1]);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm-&gt;transform(xMin,<sp/>yMax,<sp/>&amp;x[2],<sp/>&amp;y[2]);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm-&gt;transform(xMax,<sp/>yMax,<sp/>&amp;x[3],<sp/>&amp;y[3]);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>std::min&lt;double&gt;(xMin,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>std::min&lt;double&gt;(yMin,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>std::max&lt;double&gt;(xMax,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>std::max&lt;double&gt;(yMax,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxSize<sp/>&gt;<sp/>(xMax-xMin)<sp/>*<sp/>(yMax-yMin))<sp/>{</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>t0<sp/>+<sp/>sMin<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>t0<sp/>+<sp/>sMax<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>t0<sp/>+<sp/>sMax<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>t0<sp/>+<sp/>sMin<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>cacheBounds<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(maxSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>(nComps<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>cacheCoeff<sp/>=<sp/>cacheBounds<sp/>+<sp/>maxSize;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>cacheValues<sp/>=<sp/>cacheCoeff<sp/>+<sp/>maxSize;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheSize<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cacheSize;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cacheCoeff[j]<sp/>=<sp/>1<sp/>/<sp/>(cacheBounds[j+1]<sp/>-<sp/>cacheBounds[j]);</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMax<sp/>!=<sp/>tMin)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>(tMax<sp/>-<sp/>tMin)<sp/>/<sp/>(maxSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeff<sp/>=<sp/>(maxSize<sp/>-<sp/>1)<sp/>/<sp/>(tMax<sp/>-<sp/>tMin);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheSize<sp/>=<sp/>maxSize;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cacheSize;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cacheBounds[j]<sp/>=<sp/>tMin<sp/>+<sp/>j<sp/>*<sp/>step;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cacheCoeff[j]<sp/>=<sp/>coeff;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheValues[j*nComps<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]-&gt;transform(&amp;cacheBounds[j],<sp/>&amp;cacheValues[j*nComps<sp/>+<sp/>i]);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>lastMatch<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxAxialShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal">GfxAxialShading::GfxAxialShading(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0A,</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1A,</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1A,</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA,</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>extend0A,<sp/>GBool<sp/>extend1A):</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref>(2,<sp/>t0A,<sp/>t1A,<sp/>funcsA,<sp/>nFuncsA,<sp/>extend0A,<sp/>extend1A)</highlight></codeline>
<codeline lineno="4160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>x0A;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>y0A;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x1A;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>y1A;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal">GfxAxialShading::GfxAxialShading(<ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref>(shading)</highlight></codeline>
<codeline lineno="4169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>shading-&gt;x0;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>shading-&gt;y0;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>shading-&gt;x1;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>shading-&gt;y1;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal">GfxAxialShading::~GfxAxialShading()<sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*GfxAxialShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/>y0A,<sp/>x1A,<sp/>y1A;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0A,<sp/>t1A;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcsA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/>GBool<sp/>extend0A,<sp/>extend1A;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/>x0A<sp/>=<sp/>y0A<sp/>=<sp/>x1A<sp/>=<sp/>y1A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Coords&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj3,<sp/>obj4,<sp/>obj5;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj5);</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isNum()<sp/>&amp;&amp;<sp/>obj3.isNum()<sp/>&amp;&amp;<sp/>obj4.isNum()<sp/>&amp;&amp;<sp/>obj5.isNum())<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x0A<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0A<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1A<sp/>=<sp/>obj4.getNum();</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1A<sp/>=<sp/>obj5.getNum();</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>obj5.free();</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>Coords<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/>t0A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>t1A<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Domain&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj3;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isNum()<sp/>&amp;&amp;<sp/>obj3.isNum())<sp/>{</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0A<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t1A<sp/>=<sp/>obj3.getNum();</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Function&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncsA<sp/>&gt;<sp/>gfxColorMaxComps<sp/>||<sp/>nFuncsA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Function<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[i]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[0]<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>extend0A<sp/>=<sp/>extend1A<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Extend&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isBool())<sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extend0A<sp/>=<sp/>obj2.getBool();</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axial<sp/>shading<sp/>extend<sp/>(0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isBool())<sp/>{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extend1A<sp/>=<sp/>obj2.getBool();</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axial<sp/>shading<sp/>extend<sp/>(1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref>(x0A,<sp/>y0A,<sp/>x1A,<sp/>y1A,<sp/>t0A,<sp/>t1A,</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcsA,<sp/>nFuncsA,<sp/>extend0A,<sp/>extend1A);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;init(res,<sp/>dict,<sp/>out,<sp/>state))<sp/>{</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxAxialShading::copy()<sp/>{</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GfxAxialShading::getDistance(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>x0<sp/>+<sp/>sMin<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>y0<sp/>+<sp/>sMin<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>x0<sp/>+<sp/>sMax<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/>yMax<sp/>=<sp/>y0<sp/>+<sp/>sMax<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypot(xMax-xMin,<sp/>yMax-yMin);</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxAxialShading::getParameterRange(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lower,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*upper,</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pdx,<sp/>pdy,<sp/>invsqnorm,<sp/>tdx,<sp/>tdy,<sp/>t,<sp/>range[2];</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>gradients<sp/>are<sp/>orthogonal<sp/>to<sp/>the<sp/>line<sp/>passing<sp/>through<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extremes.<sp/>Because<sp/>of<sp/>convexity,<sp/>the<sp/>parameter<sp/>range<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computed<sp/>as<sp/>the<sp/>convex<sp/>hull<sp/>(one<sp/>the<sp/>real<sp/>line)<sp/>of<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>of<sp/>the<sp/>4<sp/>corners<sp/>of<sp/>the<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parameter<sp/>value<sp/>t<sp/>for<sp/>a<sp/>point<sp/>(x,y)<sp/>can<sp/>be<sp/>computed<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>t<sp/>=<sp/>(p2<sp/>-<sp/>p1)<sp/>.<sp/>(x,y)<sp/>/<sp/>|p2<sp/>-<sp/>p1|^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>t0<sp/><sp/>is<sp/>the<sp/>t<sp/>value<sp/>for<sp/>the<sp/>top<sp/>left<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tdx<sp/>is<sp/>the<sp/>difference<sp/>between<sp/>left<sp/>and<sp/>right<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tdy<sp/>is<sp/>the<sp/>difference<sp/>between<sp/>top<sp/>and<sp/>bottom<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/>pdx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>pdy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/>invsqnorm<sp/>=<sp/>1.0<sp/>/<sp/>(pdx<sp/>*<sp/>pdx<sp/>+<sp/>pdy<sp/>*<sp/>pdy);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>pdx<sp/>*=<sp/>invsqnorm;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>pdy<sp/>*=<sp/>invsqnorm;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>(xMin<sp/>-<sp/>x0)<sp/>*<sp/>pdx<sp/>+<sp/>(yMin<sp/>-<sp/>y0)<sp/>*<sp/>pdy;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/>tdx<sp/>=<sp/>(xMax<sp/>-<sp/>xMin)<sp/>*<sp/>pdx;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/>tdy<sp/>=<sp/>(yMax<sp/>-<sp/>yMin)<sp/>*<sp/>pdy;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Because<sp/>of<sp/>the<sp/>linearity<sp/>of<sp/>the<sp/>t<sp/>value,<sp/>tdx<sp/>can<sp/>simply<sp/>be<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>t0<sp/>to<sp/>move<sp/>along<sp/>the<sp/>top<sp/>edge.<sp/>After<sp/>this,<sp/>*lower<sp/>and<sp/>*upper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>represent<sp/>the<sp/>parameter<sp/>range<sp/>for<sp/>the<sp/>top<sp/>edge,<sp/>so<sp/>extending<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>include<sp/>the<sp/>whole<sp/>box<sp/>simply<sp/>requires<sp/>adding<sp/>tdy<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>extreme.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/>range[0]<sp/>=<sp/>range[1]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tdx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/>range[0]<sp/>+=<sp/>tdx;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/>range[1]<sp/>+=<sp/>tdx;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tdy<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/>range[0]<sp/>+=<sp/>tdy;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>range[1]<sp/>+=<sp/>tdy;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/>*lower<sp/>=<sp/>std::max&lt;double&gt;(0.,<sp/>std::min&lt;double&gt;(1.,<sp/>range[0]));</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/>*upper<sp/>=<sp/>std::max&lt;double&gt;(0.,<sp/>std::min&lt;double&gt;(1.,<sp/>range[1]));</highlight></codeline>
<codeline lineno="4348"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxRadialShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RADIAL_EPSILON<sp/><sp/>(1.<sp/>/<sp/>1024<sp/>/<sp/>1024)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal">GfxRadialShading::GfxRadialShading(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r0A,</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r1A,</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1A,</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA,</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>extend0A,<sp/>GBool<sp/>extend1A):</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref>(3,<sp/>t0A,<sp/>t1A,<sp/>funcsA,<sp/>nFuncsA,<sp/>extend0A,<sp/>extend1A)</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>x0A;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>y0A;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/>r0<sp/>=<sp/>r0A;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x1A;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>y1A;</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/>r1<sp/>=<sp/>r1A;</highlight></codeline>
<codeline lineno="4371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal">GfxRadialShading::GfxRadialShading(<ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref>(shading)</highlight></codeline>
<codeline lineno="4375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>shading-&gt;x0;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>shading-&gt;y0;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>r0<sp/>=<sp/>shading-&gt;r0;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>shading-&gt;x1;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>shading-&gt;y1;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/>r1<sp/>=<sp/>shading-&gt;r1;</highlight></codeline>
<codeline lineno="4382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal">GfxRadialShading::~GfxRadialShading()<sp/>{</highlight></codeline>
<codeline lineno="4385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*GfxRadialShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/>y0A,<sp/>r0A,<sp/>x1A,<sp/>y1A,<sp/>r1A;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0A,<sp/>t1A;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcsA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>GBool<sp/>extend0A,<sp/>extend1A;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/>x0A<sp/>=<sp/>y0A<sp/>=<sp/>r0A<sp/>=<sp/>x1A<sp/>=<sp/>y1A<sp/>=<sp/>r1A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Coords&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>x0A<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/>y0A<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/>r0A<sp/>=<sp/>obj1.arrayGet(2,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>x1A<sp/>=<sp/>obj1.arrayGet(3,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>y1A<sp/>=<sp/>obj1.arrayGet(4,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>r1A<sp/>=<sp/>obj1.arrayGet(5,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>Coords<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>t0A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/>t1A<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Domain&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>t0A<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/>t1A<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Function&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncsA<sp/>&gt;<sp/>gfxColorMaxComps)<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Function<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[i]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[0]<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>extend0A<sp/>=<sp/>extend1A<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Extend&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/>extend0A<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getBool();</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>extend1A<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getBool();</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref>(x0A,<sp/>y0A,<sp/>r0A,<sp/>x1A,<sp/>y1A,<sp/>r1A,<sp/>t0A,<sp/>t1A,</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcsA,<sp/>nFuncsA,<sp/>extend0A,<sp/>extend1A);</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;init(res,<sp/>dict,<sp/>out,<sp/>state))<sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxRadialShading::copy()<sp/>{</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GfxRadialShading::getDistance(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>rMin,<sp/>xMax,<sp/>yMax,<sp/>rMax;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>x0<sp/>+<sp/>sMin<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>y0<sp/>+<sp/>sMin<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>rMin<sp/>=<sp/>r0<sp/>+<sp/>sMin<sp/>*<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>x0<sp/>+<sp/>sMax<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>yMax<sp/>=<sp/>y0<sp/>+<sp/>sMax<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>rMax<sp/>=<sp/>r0<sp/>+<sp/>sMax<sp/>*<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypot(xMax-xMin,<sp/>yMax-yMin)<sp/>+<sp/>fabs(rMax-rMin);</highlight></codeline>
<codeline lineno="4492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extend<sp/>range,<sp/>adapted<sp/>from<sp/>cairo,<sp/>radialExtendRange</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool</highlight></codeline>
<codeline lineno="4496"><highlight class="normal">radialExtendRange<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range[2],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/>GBool<sp/>valid)</highlight></codeline>
<codeline lineno="4497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>range[0]<sp/>=<sp/>range[1]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>range[0])</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>range[0]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>range[1])</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/>range[1]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>radialEdge(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>den,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper,</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mindr,<sp/>GBool<sp/>&amp;valid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*range)</highlight></codeline>
<codeline lineno="4510"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(den)<sp/>&gt;=<sp/>RADIAL_EPSILON)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_edge,<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>t_edge<sp/>=<sp/>(num)<sp/>/<sp/>(den);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>t_edge<sp/>*<sp/>(delta);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_edge<sp/>*<sp/>dr<sp/>&gt;=<sp/>mindr<sp/>&amp;&amp;<sp/>(lower)<sp/>&lt;=<sp/>v<sp/>&amp;&amp;<sp/>v<sp/>&lt;=<sp/>(upper))<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>t_edge,<sp/>valid);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>radialCorner1(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cr,<sp/></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mindr,<sp/>GBool<sp/>&amp;valid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*range)</highlight></codeline>
<codeline lineno="4522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(x)<sp/>*<sp/>dx<sp/>+<sp/>(y)<sp/>*<sp/>dy<sp/>+<sp/>cr<sp/>*<sp/>dr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(b)<sp/>&gt;=<sp/>RADIAL_EPSILON)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_corner;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>(x)<sp/>*<sp/>(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>(y)<sp/>*<sp/>(y);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cr2<sp/>=<sp/>(cr)<sp/>*<sp/>(cr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>x2<sp/>+<sp/>y2<sp/>-<sp/>cr2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_corner<sp/>=<sp/>0.5<sp/>*<sp/>c<sp/>/<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_corner<sp/>*<sp/>dr<sp/>&gt;=<sp/>mindr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>t_corner,<sp/>valid);<sp/></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>radialCorner2(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cr,</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inva,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mindr,<sp/>GBool<sp/>&amp;valid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*range)</highlight></codeline>
<codeline lineno="4539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(x)<sp/>*<sp/>dx<sp/>+<sp/>(y)<sp/>*<sp/>dy<sp/>+<sp/>cr<sp/>*<sp/>dr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(x)<sp/>*<sp/>(x)<sp/>+<sp/>(y)<sp/>*<sp/>(y)<sp/>-<sp/>cr<sp/>*<sp/>cr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>b<sp/>*<sp/>b<sp/>-<sp/>a<sp/>*<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_corner;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>sqrt<sp/>(d);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_corner<sp/>=<sp/>(b<sp/>+<sp/>d)<sp/>*<sp/>inva;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_corner<sp/>*<sp/>dr<sp/>&gt;=<sp/>mindr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>t_corner,<sp/>valid);<sp/></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_corner<sp/>=<sp/>(b<sp/>-<sp/>d)<sp/>*<sp/>inva;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_corner<sp/>*<sp/>dr<sp/>&gt;=<sp/>mindr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>t_corner,<sp/>valid);<sp/></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxRadialShading::getParameterRange(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lower,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*upper,</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cx,<sp/>cy,<sp/>cr,<sp/>dx,<sp/>dy,<sp/>dr;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/>x_focus,<sp/>y_focus;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mindr,<sp/>minx,<sp/>miny,<sp/>maxx,<sp/>maxy;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range[2];</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/>GBool<sp/>valid;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>radial<sp/>pattern<sp/>is<sp/>considered<sp/>degenerate<sp/>if<sp/>it<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>represented<sp/>as<sp/>a<sp/>solid<sp/>or<sp/>clear<sp/>pattern.<sp/><sp/>This<sp/>corresponds<sp/>to<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>two<sp/>cases:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>The<sp/>radii<sp/>are<sp/>both<sp/>very<sp/>small:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>|dr|<sp/>&lt;<sp/>FLT_EPSILON<sp/>&amp;&amp;<sp/>min<sp/>(r0,<sp/>r1)<sp/>&lt;<sp/>FLT_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>The<sp/>two<sp/>circles<sp/>have<sp/>about<sp/>the<sp/>same<sp/>radius<sp/>and<sp/>are<sp/>very</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>close<sp/>to<sp/>each<sp/>other<sp/>(approximately<sp/>a<sp/>cylinder<sp/>gradient<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>doesn&apos;t<sp/>move<sp/>with<sp/>the<sp/>parameter):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>|dr|<sp/>&lt;<sp/>FLT_EPSILON<sp/>&amp;&amp;<sp/>max<sp/>(|dx|,<sp/>|dy|)<sp/>&lt;<sp/>2<sp/>*<sp/>FLT_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;=<sp/>xMax<sp/>||<sp/>yMin<sp/>&gt;=yMax<sp/>||<sp/></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(fabs<sp/>(r0<sp/>-<sp/>r1)<sp/>&lt;<sp/>RADIAL_EPSILON<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::min&lt;double&gt;(r0,<sp/>r1)<sp/>&lt;<sp/>RADIAL_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>std::max&lt;double&gt;(fabs<sp/>(x0<sp/>-<sp/>x1),<sp/>fabs<sp/>(y0<sp/>-<sp/>y1))<sp/>&lt;<sp/>2<sp/>*<sp/>RADIAL_EPSILON)))<sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/>*lower<sp/>=<sp/>*upper<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/>range[0]<sp/>=<sp/>range[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>valid<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/>x_focus<sp/>=<sp/>y_focus<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>silence<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>cx<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/>cy<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>cr<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/>dr<sp/>=<sp/>r1<sp/>-<sp/>cr;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>by<sp/>-(cx,<sp/>cy)<sp/>to<sp/>simplify<sp/>computations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/>xMin<sp/>-=<sp/>cx;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>yMin<sp/>-=<sp/>cy;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>xMax<sp/>-=<sp/>cx;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>yMax<sp/>-=<sp/>cy;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enlarge<sp/>boundaries<sp/>slightly<sp/>to<sp/>avoid<sp/>rounding<sp/>problems<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>range<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>xMin<sp/>-=<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/>yMin<sp/>-=<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>xMax<sp/>+=<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>yMax<sp/>+=<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enlarge<sp/>boundaries<sp/>even<sp/>more<sp/>to<sp/>avoid<sp/>rounding<sp/>problems<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testing<sp/>if<sp/>a<sp/>point<sp/>belongs<sp/>to<sp/>the<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>minx<sp/>=<sp/>xMin<sp/>-<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>miny<sp/>=<sp/>yMin<sp/>-<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/>maxx<sp/>=<sp/>xMax<sp/>+<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/>maxy<sp/>=<sp/>yMax<sp/>+<sp/>RADIAL_EPSILON;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>dont&apos;<sp/>allow<sp/>negative<sp/>radiuses,<sp/>so<sp/>we<sp/>will<sp/>be<sp/>checking<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>t*dr<sp/>&gt;=<sp/>mindr<sp/>to<sp/>consider<sp/>t<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/>mindr<sp/>=<sp/>-(cr<sp/>+<sp/>RADIAL_EPSILON);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>the<sp/>previous<sp/>transformations,<sp/>the<sp/>start<sp/>circle<sp/>is<sp/>centered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>origin<sp/>and<sp/>has<sp/>radius<sp/>cr.<sp/>A<sp/>1-unit<sp/>change<sp/>in<sp/>the<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>corresponds<sp/>to<sp/>dx,dy,dr<sp/>changes<sp/>in<sp/>the<sp/>x,y,r<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>(center<sp/>coordinates,<sp/>radius).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>compute<sp/>the<sp/>minimum<sp/>range<sp/>needed<sp/>to<sp/>correctly<sp/>draw<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pattern,<sp/>we<sp/>start<sp/>with<sp/>an<sp/>empty<sp/>range<sp/>and<sp/>extend<sp/>it<sp/>to<sp/>include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>circles<sp/>touching<sp/>the<sp/>bounding<sp/>box<sp/>or<sp/>within<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus,<sp/>the<sp/>point<sp/>where<sp/>the<sp/>circle<sp/>has<sp/>radius<sp/>==<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r<sp/>=<sp/>cr<sp/>+<sp/>t<sp/>*<sp/>dr<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>-cr<sp/>/<sp/>dr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>radius<sp/>is<sp/>constant<sp/>(dr<sp/>==<sp/>0)<sp/>there<sp/>is<sp/>no<sp/>focus<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gradient<sp/>represents<sp/>a<sp/>cylinder<sp/>instead<sp/>of<sp/>a<sp/>cone).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(dr)<sp/>&gt;=<sp/>RADIAL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_focus;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>t_focus<sp/>=<sp/>-cr<sp/>/<sp/>dr;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>x_focus<sp/>=<sp/>t_focus<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/>y_focus<sp/>=<sp/>t_focus<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minx<sp/>&lt;=<sp/>x_focus<sp/>&amp;&amp;<sp/>x_focus<sp/>&lt;=<sp/>maxx<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/>miny<sp/>&lt;=<sp/>y_focus<sp/>&amp;&amp;<sp/>y_focus<sp/>&lt;=<sp/>maxy)</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>t_focus,<sp/>valid);</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Circles<sp/>externally<sp/>tangent<sp/>to<sp/>box<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>circles<sp/>have<sp/>center<sp/>in<sp/>(dx,<sp/>dy)<sp/>*<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>circle<sp/>is<sp/>tangent<sp/>to<sp/>the<sp/>line<sp/>defined<sp/>by<sp/>the<sp/>edge<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>box,<sp/>then<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>following<sp/>holds<sp/>true:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(dx*t)<sp/>+<sp/>(cr<sp/>+<sp/>dr*t)<sp/>==<sp/>x0<sp/>(left<sp/><sp/><sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(dx*t)<sp/>-<sp/>(cr<sp/>+<sp/>dr*t)<sp/>==<sp/>x1<sp/>(right<sp/><sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(dy*t)<sp/>+<sp/>(cr<sp/>+<sp/>dr*t)<sp/>==<sp/>y0<sp/>(top<sp/><sp/><sp/><sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(dy*t)<sp/>-<sp/>(cr<sp/>+<sp/>dr*t)<sp/>==<sp/>y1<sp/>(bottom<sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>solution<sp/>is<sp/>only<sp/>valid<sp/>if<sp/>the<sp/>tangent<sp/>point<sp/>is<sp/>actually<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>edge,<sp/>i.e.<sp/>if<sp/>its<sp/>y<sp/>coordinate<sp/>is<sp/>in<sp/>[y0,y1]<sp/>for<sp/>left/right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>edges<sp/>and<sp/>if<sp/>its<sp/>x<sp/>coordinate<sp/>is<sp/>in<sp/>[x0,x1]<sp/>for<sp/>top/bottom<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>first<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(dx<sp/>+<sp/>dr)<sp/>*<sp/>t<sp/>=<sp/>x0<sp/>-<sp/>cr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>t<sp/>=<sp/>(x0<sp/>-<sp/>cr)<sp/>/<sp/>(dx<sp/>+<sp/>dr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>y<sp/>=<sp/>dy<sp/>*<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>code<sp/>this<sp/>becomes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>t_edge<sp/>=<sp/>(num)<sp/>/<sp/>(den)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>v<sp/>=<sp/>(delta)<sp/>*<sp/>t_edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>denominator<sp/>in<sp/>t<sp/>is<sp/>0,<sp/>the<sp/>pattern<sp/>is<sp/>tangent<sp/>to<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parallel<sp/>to<sp/>the<sp/>edge<sp/>under<sp/>examination.<sp/>The<sp/>corner-case<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>boundary<sp/>line<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>edge<sp/>is<sp/>handled<sp/>by<sp/>the<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>case<sp/>and/or<sp/>by<sp/>the<sp/>a==0<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>tangent<sp/>(externally)<sp/>to<sp/>left/right/top/bottom<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>radialEdge(xMin<sp/>-<sp/>cr,<sp/>dx<sp/>+<sp/>dr,<sp/>dy,<sp/>miny,<sp/>maxy,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/>radialEdge(xMax<sp/>+<sp/>cr,<sp/>dx<sp/>-<sp/>dr,<sp/>dy,<sp/>miny,<sp/>maxy,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/>radialEdge(yMin<sp/>-<sp/>cr,<sp/>dy<sp/>+<sp/>dr,<sp/>dx,<sp/>minx,<sp/>maxx,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>radialEdge(yMax<sp/>+<sp/>cr,<sp/>dy<sp/>-<sp/>dr,<sp/>dx,<sp/>minx,<sp/>maxx,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Circles<sp/>passing<sp/>through<sp/>a<sp/>corner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>circle<sp/>passing<sp/>through<sp/>the<sp/>point<sp/>(x,y)<sp/>satisfies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(x-t*dx)^2<sp/>+<sp/>(y-t*dy)^2<sp/>==<sp/>(cr<sp/>+<sp/>t*dr)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a<sp/>=<sp/>dx^2<sp/>+<sp/>dy^2<sp/>-<sp/>dr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>b<sp/>=<sp/>x*dx<sp/>+<sp/>y*dy<sp/>+<sp/>cr*dr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>c<sp/>=<sp/>x^2<sp/>+<sp/>y^2<sp/>-<sp/>cr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a*t^2<sp/>-<sp/>2*b*t<sp/>+<sp/>c<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>-<sp/>dr<sp/>*<sp/>dr;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(a)<sp/>&lt;<sp/>RADIAL_EPSILON<sp/>*<sp/>RADIAL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>gradients<sp/>with<sp/>both<sp/>a<sp/>and<sp/>dr<sp/>small<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>considered<sp/>degenerate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>floating<sp/>point<sp/>version<sp/>of<sp/>the<sp/>degeneracy<sp/>test<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>_radial_pattern_is_degenerate()<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1)<sp/>The<sp/>circles<sp/>are<sp/>practically<sp/>the<sp/>same<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>|dr|<sp/>&lt;<sp/>RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2a)<sp/>The<sp/>circles<sp/>are<sp/>both<sp/>very<sp/>small:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>(r0,<sp/>r1)<sp/>&lt;<sp/>RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2b)<sp/>The<sp/>circles<sp/>are<sp/>very<sp/>close<sp/>to<sp/>each<sp/>other:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>(|dx|,<sp/>|dy|)<sp/>&lt;<sp/>2<sp/>*<sp/>RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>that<sp/>the<sp/>gradient<sp/>is<sp/>not<sp/>degenerate,<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>that<sp/>|a|<sp/>&lt;<sp/>RADIAL_EPSILON^2<sp/>implies<sp/>|dr|<sp/>&gt;=<sp/>RADIAL_EPSILON.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>gradient<sp/>is<sp/>not<sp/>degenerate<sp/>yet<sp/>it<sp/>has<sp/>|dr|<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RADIAL_EPSILON,<sp/>(2b)<sp/>is<sp/>false,<sp/>thus:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>max<sp/>(|dx|,<sp/>|dy|)<sp/>&gt;=<sp/>2*RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>implies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>4*RADIAL_EPSILON^2<sp/>&lt;=<sp/>max<sp/>(|dx|,<sp/>|dy|)^2<sp/>&lt;=<sp/>dx^2<sp/>+<sp/>dy^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>the<sp/>definition<sp/>of<sp/>a,<sp/>we<sp/>get:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a<sp/>=<sp/>dx^2<sp/>+<sp/>dy^2<sp/>-<sp/>dr^2<sp/>&lt;<sp/>RADIAL_EPSILON^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>dx^2<sp/>+<sp/>dy^2<sp/>-<sp/>RADIAL_EPSILON^2<sp/>&lt;<sp/>dr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3*RADIAL_EPSILON^2<sp/>&lt;<sp/>dr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>inconsistent<sp/>with<sp/>the<sp/>hypotheses,<sp/>thus<sp/>|dr|<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RADIAL_EPSILON<sp/>is<sp/>false<sp/>or<sp/>the<sp/>gradient<sp/>is<sp/>degenerate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(fabs<sp/>(dr)<sp/>&gt;=<sp/>RADIAL_EPSILON);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>==<sp/>0,<sp/>all<sp/>the<sp/>circles<sp/>are<sp/>tangent<sp/>to<sp/>a<sp/>line<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>focus<sp/>point.<sp/>If<sp/>this<sp/>line<sp/>is<sp/>within<sp/>the<sp/>box<sp/>extents,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>add<sp/>the<sp/>circle<sp/>with<sp/>infinite<sp/>radius,<sp/>but<sp/>this<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>range<sp/>unbounded.<sp/>We<sp/>will<sp/>be<sp/>limiting<sp/>the<sp/>range<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,1]<sp/>anyway,<sp/>so<sp/>we<sp/>simply<sp/>add<sp/>the<sp/>biggest<sp/>legitimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>(it<sp/>happens<sp/>for<sp/>0<sp/>or<sp/>for<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dr<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>0,<sp/>valid);</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>radialExtendRange<sp/>(range,<sp/>1,<sp/>valid);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nondegenerate,<sp/>nonlimit<sp/>circles<sp/>passing<sp/>through<sp/>the<sp/>corners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>a*t^2<sp/>-<sp/>2*b*t<sp/>+<sp/>c<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>c<sp/>/<sp/>(2*b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>b<sp/>==<sp/>0<sp/>case<sp/>has<sp/>just<sp/>been<sp/>handled,<sp/>so<sp/>we<sp/>only<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>this<sp/>if<sp/>b<sp/>!=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>touching<sp/>each<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner1(xMin,<sp/>yMin,<sp/>b,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner1(xMin,<sp/>yMax,<sp/>b,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner1(xMax,<sp/>yMin,<sp/>b,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner1(xMax,<sp/>yMax,<sp/>b,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inva,<sp/>b,<sp/>c,<sp/>d;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>inva<sp/>=<sp/>1<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nondegenerate,<sp/>nonlimit<sp/>circles<sp/>passing<sp/>through<sp/>the<sp/>corners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>a*t^2<sp/>-<sp/>2*b*t<sp/>+<sp/>c<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>(b<sp/>+-<sp/>sqrt<sp/>(b*b<sp/>-<sp/>a*c))<sp/>/<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>argument<sp/>of<sp/>sqrt()<sp/>is<sp/>negative,<sp/>then<sp/>no<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>passes<sp/>through<sp/>the<sp/>corner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>touching<sp/>each<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner2(xMin,<sp/>yMin,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>inva,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner2(xMin,<sp/>yMax,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>inva,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner2(xMax,<sp/>yMin,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>inva,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/>radialCorner2(xMax,<sp/>yMax,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>dx,<sp/>dy,<sp/>cr,<sp/>inva,<sp/>dr,<sp/>mindr,<sp/>valid,<sp/>range);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/>*lower<sp/>=<sp/>std::max&lt;double&gt;(0.,<sp/>std::min&lt;double&gt;(1.,<sp/>range[0]));</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/>*upper<sp/>=<sp/>std::max&lt;double&gt;(0.,<sp/>std::min&lt;double&gt;(1.,<sp/>range[1]));</highlight></codeline>
<codeline lineno="4787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxShadingBitBuf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight></codeline>
<codeline lineno="4793" refid="class_gfx_shading_bit_buf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref><sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref>(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/>~<ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref>();</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/>GBool<sp/>getBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Guint<sp/>*val);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flushBits();</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitBuf;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBits;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal">GfxShadingBitBuf::GfxShadingBitBuf(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA)<sp/>{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/>bitBuf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal">GfxShadingBitBuf::~GfxShadingBitBuf()<sp/>{</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="4817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal">GBool<sp/>GfxShadingBitBuf::getBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Guint<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(bitBuf<sp/>&gt;&gt;<sp/>(nBits<sp/>-<sp/>n))<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>n)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>nBits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>bitBuf<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>nBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>nBits;</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bitBuf<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>bitBuf;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>n)<sp/>|<sp/>(bitBuf<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>8<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/>*val<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxShadingBitBuf::flushBits()<sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/>bitBuf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxGouraudTriangleShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal">GfxGouraudTriangleShading::GfxGouraudTriangleShading(</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA,</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref><sp/>*verticesA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nVerticesA,</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*trianglesA)[3],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTrianglesA,</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA):</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(typeA)</highlight></codeline>
<codeline lineno="4866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/>vertices<sp/>=<sp/>verticesA;</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/>nVertices<sp/>=<sp/>nVerticesA;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>triangles<sp/>=<sp/>trianglesA;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/>nTriangles<sp/>=<sp/>nTrianglesA;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>nFuncsA;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>funcsA[i];</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal">GfxGouraudTriangleShading::GfxGouraudTriangleShading(</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(shading)</highlight></codeline>
<codeline lineno="4882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/>nVertices<sp/>=<sp/>shading-&gt;nVertices;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/>vertices<sp/>=<sp/>(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref><sp/>*)gmallocn(nVertices,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref>));</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/>memcpy(vertices,<sp/>shading-&gt;vertices,<sp/>nVertices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref>));</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/>nTriangles<sp/>=<sp/>shading-&gt;nTriangles;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>triangles<sp/>=<sp/>(int<sp/>(*)[3])gmallocn(nTriangles<sp/>*<sp/>3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>memcpy(triangles,<sp/>shading-&gt;triangles,<sp/>nTriangles<sp/>*<sp/>3<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>shading-&gt;nFuncs;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>shading-&gt;funcs[i]-&gt;copy();</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal">GfxGouraudTriangleShading::~GfxGouraudTriangleShading()<sp/>{</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>gfree(vertices);</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/>gfree(triangles);</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[i];</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*GfxGouraudTriangleShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA,</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*gfxState)<sp/>{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcsA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coordBits,<sp/>compBits,<sp/>flagBits,<sp/>vertsPerRow,<sp/>nRows;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>xMax,<sp/>yMin,<sp/>yMax;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cMin[gfxColorMaxComps],<sp/>cMax[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMul,<sp/>yMul;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cMul[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref><sp/>*verticesA;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/>int<sp/>(*trianglesA)[3];</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>nVerticesA,<sp/>nTrianglesA,<sp/>vertSize,<sp/>triSize;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>Guint<sp/>x,<sp/>y,<sp/>flag;</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/>Guint<sp/>c[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref><sp/>*bitBuf;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>state;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerCoordinate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/>coordBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerCoordinate<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>compBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerComponent<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>flagBits<sp/>=<sp/>vertsPerRow<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerFlag&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flagBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerFlag<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;VerticesPerRow&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertsPerRow<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>VerticesPerRow<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>&gt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/>xMul<sp/>=<sp/>(xMax<sp/>-<sp/>xMin)<sp/>/<sp/>(pow(2.0,<sp/>coordBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>obj1.arrayGet(2,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>obj1.arrayGet(3,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>yMul<sp/>=<sp/>(yMax<sp/>-<sp/>yMin)<sp/>/<sp/>(pow(2.0,<sp/>coordBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>5<sp/>+<sp/>2*i<sp/>&lt;<sp/>obj1.arrayGetLength()<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMin[i]<sp/>=<sp/>obj1.arrayGet(4<sp/>+<sp/>2*i,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMax[i]<sp/>=<sp/>obj1.arrayGet(5<sp/>+<sp/>2*i,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMul[i]<sp/>=<sp/>(cMax[i]<sp/>-<sp/>cMin[i])<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)((1<sp/>&lt;&lt;<sp/>compBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>Decode<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Function&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncsA<sp/>&gt;<sp/>gfxColorMaxComps)<sp/>{</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Function<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[i]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[0]<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/>nVerticesA<sp/>=<sp/>nTrianglesA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/>verticesA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/>trianglesA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/>vertSize<sp/>=<sp/>triSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/>flag<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/>bitBuf<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref>(str);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(flagBits,<sp/>&amp;flag))<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(coordBits,<sp/>&amp;x)<sp/>||</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>!bitBuf-&gt;getBits(coordBits,<sp/>&amp;y))<sp/>{</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(compBits,<sp/>&amp;c[i]))<sp/>{</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nVerticesA<sp/>==<sp/>vertSize)<sp/>{</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldVertSize<sp/>=<sp/>vertSize;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertSize<sp/>=<sp/>(vertSize<sp/>==<sp/>0)<sp/>?<sp/>16<sp/>:<sp/>2<sp/>*<sp/>vertSize;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verticesA<sp/>=<sp/>(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref><sp/>*)</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(verticesA,<sp/>vertSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref>));</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(verticesA<sp/>+<sp/>oldVertSize,<sp/>0,<sp/>(vertSize<sp/>-<sp/>oldVertSize)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_gouraud_vertex" kindref="compound">GfxGouraudVertex</ref>));</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesA[nVerticesA].x<sp/>=<sp/>xMin<sp/>+<sp/>xMul<sp/>*<sp/>(double)x;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesA[nVerticesA].y<sp/>=<sp/>yMin<sp/>+<sp/>yMul<sp/>*<sp/>(double)y;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verticesA[nVerticesA].color.c[i]<sp/>=</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dblToCol(cMin[i]<sp/>+<sp/>cMul[i]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[i]);</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>++nVerticesA;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>bitBuf-&gt;flushBits();</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>0<sp/>||<sp/>state<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/>++state;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>2<sp/>||<sp/>flag<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTrianglesA<sp/>==<sp/>triSize)<sp/>{</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>triSize<sp/>=<sp/>(triSize<sp/>==<sp/>0)<sp/>?<sp/>16<sp/>:<sp/>2<sp/>*<sp/>triSize;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA<sp/>=<sp/>(int<sp/>(*)[3])</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(trianglesA,<sp/>triSize<sp/>*<sp/>3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][0]<sp/>=<sp/>nVerticesA<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][1]<sp/>=<sp/>nVerticesA<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][2]<sp/>=<sp/>nVerticesA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++state;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][0]<sp/>=<sp/>trianglesA[nTrianglesA<sp/>-<sp/>1][1];</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][1]<sp/>=<sp/>trianglesA[nTrianglesA<sp/>-<sp/>1][2];</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][2]<sp/>=<sp/>nVerticesA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>flag<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][0]<sp/>=<sp/>trianglesA[nTrianglesA<sp/>-<sp/>1][0];</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][1]<sp/>=<sp/>trianglesA[nTrianglesA<sp/>-<sp/>1][2];</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA[nTrianglesA][2]<sp/>=<sp/>nVerticesA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/>++nTrianglesA;</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>state<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>flag<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitBuf;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>nVerticesA<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/>nRows<sp/>=<sp/>nVerticesA<sp/>/<sp/>vertsPerRow;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>nTrianglesA<sp/>=<sp/>(nRows<sp/>-<sp/>1)<sp/>*<sp/>2<sp/>*<sp/>(vertsPerRow<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA<sp/>=<sp/>(int<sp/>(*)[3])gmallocn(nTrianglesA<sp/>*<sp/>3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nRows<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vertsPerRow<sp/>-<sp/>1;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][0]<sp/>=<sp/>i<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][1]<sp/>=<sp/>i<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j+1;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][2]<sp/>=<sp/>(i+1)<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/>++k;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][0]<sp/>=<sp/>i<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j+1;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][1]<sp/>=<sp/>(i+1)<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>trianglesA[k][2]<sp/>=<sp/>(i+1)<sp/>*<sp/>vertsPerRow<sp/>+<sp/>j+1;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/>++k;</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref>(typeA,<sp/>verticesA,<sp/>nVerticesA,</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trianglesA,<sp/>nTrianglesA,</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcsA,<sp/>nFuncsA);</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;init(res,<sp/>dict,<sp/>out,<sp/>gfxState))<sp/>{</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxGouraudTriangleShading::copy()<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight></codeline>
<codeline lineno="5122" refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">GfxGouraudTriangleShading::getTriangle</ref>(</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y0,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color0,</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y1,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color1,</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y2,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color2)<sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/>j;</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/>assert(!isParameterized());<sp/></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][0];</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/>*x0<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/>*y0<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncs<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nFuncs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[j]-&gt;transform(&amp;in,<sp/>&amp;out[j]);</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color0-&gt;c[j]<sp/>=<sp/>dblToCol(out[j]);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/>*color0<sp/>=<sp/>vertices[v].color;</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][1];</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/>*x1<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/>*y1<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncs<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nFuncs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[j]-&gt;transform(&amp;in,<sp/>&amp;out[j]);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color1-&gt;c[j]<sp/>=<sp/>dblToCol(out[j]);</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>*color1<sp/>=<sp/>vertices[v].color;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][2];</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/>*x2<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/>*y2<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncs<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nFuncs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[j]-&gt;transform(&amp;in,<sp/>&amp;out[j]);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color2-&gt;c[j]<sp/>=<sp/>dblToCol(out[j]);</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>*color2<sp/>=<sp/>vertices[v].color;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxGouraudTriangleShading::getParameterizedColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nFuncs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[j]-&gt;transform(&amp;t,<sp/>&amp;out[j]);</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[j]<sp/>=<sp/>dblToCol(out[j]);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight></codeline>
<codeline lineno="5188" refid="class_gfx_gouraud_triangle_shading_1a25a761bc76108570b8ebee7c8d1012e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">GfxGouraudTriangleShading::getTriangle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*color0,</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*color1,</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*color2)<sp/>{</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/>assert(isParameterized());<sp/></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][0];</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v<sp/>&lt;<sp/>nVertices))<sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/>*x0<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/>*y0<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/>*color0<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][1];</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v<sp/>&lt;<sp/>nVertices))<sp/>{</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/>*color1<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>triangles[i][2];</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v<sp/>&lt;<sp/>nVertices))<sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/>*x2<sp/>=<sp/>vertices[v].x;</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/>*y2<sp/>=<sp/>vertices[v].y;</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/>*color2<sp/>=<sp/>colToDbl(vertices[v].color.c[0]);</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxPatchMeshShading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal">GfxPatchMeshShading::GfxPatchMeshShading(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA,</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*patchesA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPatchesA,</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA):</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(typeA)</highlight></codeline>
<codeline lineno="5224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/>patches<sp/>=<sp/>patchesA;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/>nPatches<sp/>=<sp/>nPatchesA;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>nFuncsA;</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>funcsA[i];</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal">GfxPatchMeshShading::GfxPatchMeshShading(<ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*shading):</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref>(shading)</highlight></codeline>
<codeline lineno="5237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/>nPatches<sp/>=<sp/>shading-&gt;nPatches;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/>patches<sp/>=<sp/>(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*)gmallocn(nPatches,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref>));</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/>memcpy(patches,<sp/>shading-&gt;patches,<sp/>nPatches<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref>));</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/>nFuncs<sp/>=<sp/>shading-&gt;nFuncs;</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>shading-&gt;funcs[i]-&gt;copy();</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal">GfxPatchMeshShading::~GfxPatchMeshShading()<sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/>gfree(patches);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[i];</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*GfxPatchMeshShading::parse(<ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*res,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeA,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcsA[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncsA;</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coordBits,<sp/>compBits,<sp/>flagBits;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>xMax,<sp/>yMin,<sp/>yMax;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cMin[gfxColorMaxComps],<sp/>cMax[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMul,<sp/>yMul;</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cMul[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*patchesA,<sp/>*p;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>nPatchesA,<sp/>patchesSize,<sp/>nPts,<sp/>nColors;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/>Guint<sp/>flag;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[16],<sp/>y[16];</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>Guint<sp/>xi,<sp/>yi;</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[4][gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/>Guint<sp/>ci;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref><sp/>*bitBuf;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerCoordinate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>coordBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerCoordinate<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/>compBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerComponent<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerFlag&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>flagBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>BitsPerFlag<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGetLength()<sp/>&gt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>obj1.arrayGet(0,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>obj1.arrayGet(1,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/>xMul<sp/>=<sp/>(xMax<sp/>-<sp/>xMin)<sp/>/<sp/>(pow(2.0,<sp/>coordBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>obj1.arrayGet(2,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>obj1.arrayGet(3,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/>yMul<sp/>=<sp/>(yMax<sp/>-<sp/>yMin)<sp/>/<sp/>(pow(2.0,<sp/>coordBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>5<sp/>+<sp/>2*i<sp/>&lt;<sp/>obj1.arrayGetLength()<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMin[i]<sp/>=<sp/>obj1.arrayGet(4<sp/>+<sp/>2*i,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMax[i]<sp/>=<sp/>obj1.arrayGet(5<sp/>+<sp/>2*i,<sp/>&amp;obj2)-&gt;getNum();</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cMul[i]<sp/>=<sp/>(cMax[i]<sp/>-<sp/>cMin[i])<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)((1<sp/>&lt;&lt;<sp/>compBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>invalid<sp/>Decode<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Function&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>obj1.arrayGetLength();</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFuncsA<sp/>&gt;<sp/>gfxColorMaxComps)<sp/>{</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Function<sp/>array<sp/>in<sp/>shading<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFuncsA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[i]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(funcsA[0]<sp/>=<sp/>Function::parse(&amp;obj1)))<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/>nFuncsA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/>nPatchesA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/>patchesA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/>patchesSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/>bitBuf<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_shading_bit_buf" kindref="compound">GfxShadingBitBuf</ref>(str);</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(flagBits,<sp/>&amp;flag))<sp/>{</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>nPts<sp/>=<sp/>12;<sp/>nColors<sp/>=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>nPts<sp/>=<sp/><sp/>8;<sp/>nColors<sp/>=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>nPts<sp/>=<sp/>16;<sp/>nColors<sp/>=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>nPts<sp/>=<sp/>12;<sp/>nColors<sp/>=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(coordBits,<sp/>&amp;xi)<sp/>||</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!bitBuf-&gt;getBits(coordBits,<sp/>&amp;yi))<sp/>{</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>xMin<sp/>+<sp/>xMul<sp/>*<sp/>(double)xi;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>yMin<sp/>+<sp/>yMul<sp/>*<sp/>(double)yi;</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nPts)<sp/>{</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nColors;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitBuf-&gt;getBits(compBits,<sp/>&amp;ci))<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>c[i][j]<sp/>=<sp/>cMin[j]<sp/>+<sp/>cMul[j]<sp/>*<sp/>(double)ci;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nFuncsA<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>colorspace<sp/>values<sp/>can<sp/>also<sp/>be<sp/>stored<sp/>into<sp/>doubles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>They<sp/>will<sp/>be<sp/>casted<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[i][j]<sp/>=<sp/>dblToCol(c[i][j]);</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nColors)<sp/>{</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>patchesSize)<sp/>{</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldPatchesSize<sp/>=<sp/>patchesSize;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patchesSize<sp/>=<sp/>(patchesSize<sp/>==<sp/>0)<sp/>?<sp/>16<sp/>:<sp/>2<sp/>*<sp/>patchesSize;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patchesA<sp/>=<sp/>(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*)greallocn(patchesA,</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patchesSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref>));</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(patchesA<sp/>+<sp/>oldPatchesSize,<sp/>0,<sp/>(patchesSize<sp/>-<sp/>oldPatchesSize)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref>));</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;patchesA[nPatchesA];</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[8];</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[8];</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[9];</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[9];</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[10];</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[10];</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[11];</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[11];</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[2][j];</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[3][j];</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[0][3];</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[0][3];</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[1][3];</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[1][3];</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[2][3];</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[2][3];</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][3];</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][3];</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][3];</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][3];</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][2];</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][2];</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][1];</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][1];</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][0];</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][0];</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][0];</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][0];</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[2][0];</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[2][0];</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[1][0];</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[1][0];</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[0][0];</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[0][0];</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[8];</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[8];</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[9];</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[9];</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[10];</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[10];</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[11];</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[11];</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][1]<sp/>=<sp/>x[12];</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][1]<sp/>=<sp/>y[12];</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][2]<sp/>=<sp/>x[13];</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][2]<sp/>=<sp/>y[13];</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][2]<sp/>=<sp/>x[14];</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][2]<sp/>=<sp/>y[14];</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][1]<sp/>=<sp/>x[15];</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][1]<sp/>=<sp/>y[15];</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[2][j];</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[3][j];</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[0][3];</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[0][3];</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[1][3];</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[1][3];</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[2][3];</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[2][3];</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][3];</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][3];</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][1]<sp/>=<sp/>x[8];</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][1]<sp/>=<sp/>y[8];</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][2]<sp/>=<sp/>x[9];</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][2]<sp/>=<sp/>y[9];</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][2]<sp/>=<sp/>x[10];</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][2]<sp/>=<sp/>y[10];</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][1]<sp/>=<sp/>x[11];</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][1]<sp/>=<sp/>y[11];</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][3];</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][3];</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][2];</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][2];</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][1];</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][1];</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][0];</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][0];</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][1]<sp/>=<sp/>x[8];</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][1]<sp/>=<sp/>y[8];</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][2]<sp/>=<sp/>x[9];</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][2]<sp/>=<sp/>y[9];</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][2]<sp/>=<sp/>x[10];</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][2]<sp/>=<sp/>y[10];</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][1]<sp/>=<sp/>x[11];</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][1]<sp/>=<sp/>y[11];</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPatchesA<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].x[3][0];</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][0]<sp/>=<sp/>patchesA[nPatchesA-1].y[3][0];</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].x[2][0];</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][1]<sp/>=<sp/>patchesA[nPatchesA-1].y[2][0];</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].x[1][0];</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][2]<sp/>=<sp/>patchesA[nPatchesA-1].y[1][0];</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].x[0][0];</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[0][3]<sp/>=<sp/>patchesA[nPatchesA-1].y[0][0];</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][3]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][3]<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][3]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][3]<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][3]<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][3]<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][2]<sp/>=<sp/>x[3];</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][2]<sp/>=<sp/>y[3];</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][1]<sp/>=<sp/>x[4];</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][1]<sp/>=<sp/>y[4];</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[3][0]<sp/>=<sp/>x[5];</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[3][0]<sp/>=<sp/>y[5];</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][0]<sp/>=<sp/>x[6];</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][0]<sp/>=<sp/>y[6];</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][0]<sp/>=<sp/>x[7];</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][0]<sp/>=<sp/>y[7];</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][1]<sp/>=<sp/>x[8];</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][1]<sp/>=<sp/>y[8];</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[1][2]<sp/>=<sp/>x[9];</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[1][2]<sp/>=<sp/>y[9];</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][2]<sp/>=<sp/>x[10];</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][2]<sp/>=<sp/>y[10];</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;x[2][1]<sp/>=<sp/>x[11];</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;y[2][1]<sp/>=<sp/>y[11];</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>patchesA[nPatchesA-1].color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j];</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[0][j];</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[j]<sp/>=<sp/>c[1][j];</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/>++nPatchesA;</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/>bitBuf-&gt;flushBits();</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitBuf;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPatchesA;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;patchesA[i];</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;x[1][1]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;x[0][0]</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;x[0][1]<sp/>+<sp/>p-&gt;x[1][0])</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;x[0][3]<sp/>+<sp/>p-&gt;x[3][0])</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;x[3][1]<sp/>+<sp/>p-&gt;x[1][3])</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;x[3][3])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;y[1][1]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;y[0][0]</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;y[0][1]<sp/>+<sp/>p-&gt;y[1][0])</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;y[0][3]<sp/>+<sp/>p-&gt;y[3][0])</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;y[3][1]<sp/>+<sp/>p-&gt;y[1][3])</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;y[3][3])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;x[1][2]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;x[0][3]</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;x[0][2]<sp/>+<sp/>p-&gt;x[1][3])</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;x[0][0]<sp/>+<sp/>p-&gt;x[3][3])</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;x[3][2]<sp/>+<sp/>p-&gt;x[1][0])</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;x[3][0])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;y[1][2]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;y[0][3]</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;y[0][2]<sp/>+<sp/>p-&gt;y[1][3])</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;y[0][0]<sp/>+<sp/>p-&gt;y[3][3])</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;y[3][2]<sp/>+<sp/>p-&gt;y[1][0])</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;y[3][0])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;x[2][1]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;x[3][0]</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;x[3][1]<sp/>+<sp/>p-&gt;x[2][0])</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;x[3][3]<sp/>+<sp/>p-&gt;x[0][0])</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;x[0][1]<sp/>+<sp/>p-&gt;x[2][3])</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;x[0][3])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;y[2][1]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;y[3][0]</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;y[3][1]<sp/>+<sp/>p-&gt;y[2][0])</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;y[3][3]<sp/>+<sp/>p-&gt;y[0][0])</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;y[0][1]<sp/>+<sp/>p-&gt;y[2][3])</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;y[0][3])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;x[2][2]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;x[3][3]</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;x[3][2]<sp/>+<sp/>p-&gt;x[2][3])</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;x[3][0]<sp/>+<sp/>p-&gt;x[0][3])</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;x[0][2]<sp/>+<sp/>p-&gt;x[2][0])</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;x[0][0])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;y[2][2]<sp/>=<sp/>(-4<sp/>*<sp/>p-&gt;y[3][3]</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+6<sp/>*<sp/>(p-&gt;y[3][2]<sp/>+<sp/>p-&gt;y[2][3])</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/>*<sp/>(p-&gt;y[3][0]<sp/>+<sp/>p-&gt;y[0][3])</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+3<sp/>*<sp/>(p-&gt;y[0][2]<sp/>+<sp/>p-&gt;y[2][0])</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>p-&gt;y[0][0])<sp/>/<sp/>9;</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"></highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref>(typeA,<sp/>patchesA,<sp/>nPatchesA,</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcsA,<sp/>nFuncsA);</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;init(res,<sp/>dict,<sp/>out,<sp/>state))<sp/>{</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPatchMeshShading::getParameterizedColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nFuncs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[j]-&gt;transform(&amp;t,<sp/>&amp;out[j]);</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[j]<sp/>=<sp/>dblToCol(out[j]);</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxPatchMeshShading::copy()<sp/>{</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"></highlight></codeline>
<codeline lineno="5810"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxImageColorMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5813"><highlight class="normal"></highlight></codeline>
<codeline lineno="5814"><highlight class="normal">GfxImageColorMap::GfxImageColorMap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*decode,</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpaceA)<sp/>{</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*indexedCS;</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxPixel,<sp/>indexHigh;</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/>Guchar<sp/>*indexedLookup;</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*sepFunc;</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mapped;</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/>GBool<sp/>useByteLookup;</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"></highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/>useMatte<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>per<sp/>component<sp/>and<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/>bits<sp/>=<sp/>bitsA;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/>maxPixel<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>colorSpaceA;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"></highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>hack<sp/>to<sp/>support<sp/>16<sp/>bits<sp/>images,<sp/>everywhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>a<sp/>component<sp/>fits<sp/>in<sp/>8<sp/>bits,<sp/>with<sp/>this<sp/>hack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>treat<sp/>16<sp/>bit<sp/>images<sp/>as<sp/>8<sp/>bit<sp/>ones<sp/>until<sp/>it&apos;s<sp/>fixed<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>hack<sp/>has<sp/>another<sp/>part<sp/>on<sp/>ImageStream::getLine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxPixel<sp/>&gt;<sp/>255)<sp/>maxPixel<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup2[k]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/>byte_lookup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"></highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>decode<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decode-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>colorSpace-&gt;getNComps();</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getDefaultRanges(decodeLow,<sp/>decodeRange,<sp/>maxPixel);</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decode-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>decode-&gt;arrayGetLength()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&lt;<sp/>colorSpace-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nComps<sp/>&gt;<sp/>colorSpace-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>elements<sp/>in<sp/>Decode<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>colorSpace-&gt;getNComps();</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decode-&gt;arrayGet(2*i,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNum())<sp/>{</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decodeLow[i]<sp/>=<sp/>obj.getNum();</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decode-&gt;arrayGet(2*i+1,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNum())<sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decodeRange[i]<sp/>=<sp/>obj.getNum()<sp/>-<sp/>decodeLow[i];</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"></highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>lookup<sp/>table<sp/>--<sp/>this<sp/>stores<sp/>pre-computed<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>for<sp/>each<sp/>component,<sp/>i.e.,<sp/>the<sp/>result<sp/>of<sp/>applying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>mapping<sp/>to<sp/>each<sp/>possible<sp/>image<sp/>pixel<sp/>component<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(maxPixel<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>maxPixel;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup[k][i]<sp/>=<sp/>dblToCol(decodeLow[k]<sp/>+</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>*<sp/>decodeRange[k])<sp/>/<sp/>maxPixel);</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimization:<sp/>for<sp/>Indexed<sp/>and<sp/>Separation<sp/>color<sp/>spaces<sp/>(which<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>component),<sp/>we<sp/>pre-compute<sp/>a<sp/>second<sp/>lookup<sp/>table<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/>colorSpace2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/>nComps2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/>useByteLookup<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>indexHigh<sp/>may<sp/>not<sp/>be<sp/>the<sp/>same<sp/>as<sp/>maxPixel<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Distiller<sp/>will<sp/>remove<sp/>unused<sp/>palette<sp/>entries,<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indexHigh<sp/>&lt;<sp/>maxPixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/>indexedCS<sp/>=<sp/>(<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2<sp/>=<sp/>indexedCS-&gt;getBase();</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/>indexHigh<sp/>=<sp/>indexedCS-&gt;getIndexHigh();</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps2<sp/>=<sp/>colorSpace2-&gt;getNComps();</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/>indexedLookup<sp/>=<sp/>indexedCS-&gt;getLookup();</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getDefaultRanges(x,<sp/>y,<sp/>indexHigh);</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2-&gt;useGetGrayLine()<sp/>||<sp/>colorSpace2-&gt;useGetRGBLine()<sp/>||<sp/>colorSpace2-&gt;useGetCMYKLine()<sp/>||<sp/>colorSpace2-&gt;useGetDeviceNLine())<sp/>{</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup<sp/>=<sp/>(Guchar<sp/>*)gmallocn<sp/>((maxPixel<sp/>+<sp/>1),<sp/>nComps2);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useByteLookup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps2;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup2[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(maxPixel<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>maxPixel;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(int)(decodeLow[0]<sp/>+<sp/>(i<sp/>*<sp/>decodeRange[0])<sp/>/<sp/>maxPixel<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>indexHigh)<sp/>{</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>indexHigh;</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"></highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/>mapped<sp/>=<sp/>x[k]<sp/>+<sp/>(indexedLookup[j*nComps2<sp/>+<sp/>k]<sp/>/<sp/>255.0)<sp/>*<sp/>y[k];</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup2[k][i]<sp/>=<sp/>dblToCol(mapped);</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useByteLookup)</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup[i<sp/>*<sp/>nComps2<sp/>+<sp/>k]<sp/>=<sp/>(Guchar)<sp/>(mapped<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2<sp/>=<sp/>sepCS-&gt;getAlt();</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps2<sp/>=<sp/>colorSpace2-&gt;getNComps();</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>sepFunc<sp/>=<sp/>sepCS-&gt;getFunc();</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2-&gt;useGetGrayLine()<sp/>||<sp/>colorSpace2-&gt;useGetRGBLine()<sp/>||<sp/>colorSpace2-&gt;useGetCMYKLine()<sp/>||<sp/>colorSpace2-&gt;useGetDeviceNLine())<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup<sp/>=<sp/>(Guchar<sp/>*)gmallocn<sp/>((maxPixel<sp/>+<sp/>1),<sp/>nComps2);</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useByteLookup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps2;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup2[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(maxPixel<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>maxPixel;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/>x[0]<sp/>=<sp/>decodeLow[0]<sp/>+<sp/>(i<sp/>*<sp/>decodeRange[0])<sp/>/<sp/>maxPixel;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/>sepFunc-&gt;transform(x,<sp/>y);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup2[k][i]<sp/>=<sp/>dblToCol(y[k]);</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useByteLookup)</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup[i*nComps2<sp/>+<sp/>k]<sp/>=<sp/>(Guchar)<sp/>(y[k]<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;useGetGrayLine()<sp/>||<sp/>colorSpace-&gt;useGetRGBLine()<sp/>||<sp/>colorSpace-&gt;useGetCMYKLine()<sp/>||<sp/>colorSpace-&gt;useGetDeviceNLine())<sp/>{</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup<sp/>=<sp/>(Guchar<sp/>*)gmallocn<sp/>((maxPixel<sp/>+<sp/>1),<sp/>nComps);</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useByteLookup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup2[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(maxPixel<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>maxPixel;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/>mapped<sp/>=<sp/>decodeLow[k]<sp/>+<sp/>(i<sp/>*<sp/>decodeRange[k])<sp/>/<sp/>maxPixel;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup2[k][i]<sp/>=<sp/>dblToCol(mapped);</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useByteLookup)<sp/>{</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte;</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>(int)<sp/>(mapped<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>&gt;<sp/>255)</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_lookup[i<sp/>*<sp/>nComps<sp/>+<sp/>k]<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal">GfxImageColorMap::GfxImageColorMap(<ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i,<sp/>k;</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>colorMap-&gt;colorSpace-&gt;copy();</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/>bits<sp/>=<sp/>colorMap-&gt;bits;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>colorMap-&gt;nComps;</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/>nComps2<sp/>=<sp/>colorMap-&gt;nComps2;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/>useMatte<sp/>=<sp/>colorMap-&gt;useMatte;</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/>matteColor<sp/>=<sp/>colorMap-&gt;matteColor;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/>colorSpace2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>bits;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csIndexed)<sp/>{</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2<sp/>=<sp/>((<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace)-&gt;getBase();</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps2;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(lookup[k],<sp/>colorMap-&gt;lookup[k],<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2<sp/>=<sp/>((<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorSpace)-&gt;getAlt();</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps2;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(lookup[k],<sp/>colorMap-&gt;lookup[k],<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup[k]<sp/>=<sp/>(GfxColorComp<sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(lookup[k],<sp/>colorMap-&gt;lookup[k],<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GfxColorComp));</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;byte_lookup)<sp/>{</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>colorSpace2<sp/>?<sp/>nComps2<sp/>:<sp/>nComps;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"></highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_lookup<sp/>=<sp/>(Guchar<sp/>*)gmallocn<sp/>(n,<sp/>nc);</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(byte_lookup,<sp/>colorMap-&gt;byte_lookup,<sp/>n<sp/>*<sp/>nc);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeLow[i]<sp/>=<sp/>colorMap-&gt;decodeLow[i];</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeRange[i]<sp/>=<sp/>colorMap-&gt;decodeRange[i];</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal">GfxImageColorMap::~GfxImageColorMap()<sp/>{</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"></highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorSpace;</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(lookup[i]);</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(lookup2[i]);</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/>gfree(byte_lookup);</highlight></codeline>
<codeline lineno="6039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"></highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getGray(Guchar<sp/>*x,<sp/>GfxGray<sp/>*gray)<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2)<sp/>{</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[0]];</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getGray(&amp;color,<sp/>gray);</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[i]];</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getGray(&amp;color,<sp/>gray);</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getRGB(Guchar<sp/>*x,<sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2)<sp/>{</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[0]];</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getRGB(&amp;color,<sp/>rgb);</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[i]];</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGB(&amp;color,<sp/>rgb);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"></highlight></codeline>
<codeline lineno="6075"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getGrayLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((colorSpace2<sp/>&amp;&amp;<sp/>!colorSpace2-&gt;useGetGrayLine<sp/>())<sp/>||</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!colorSpace2<sp/>&amp;&amp;<sp/>!colorSpace-&gt;useGetGrayLine<sp/>()))<sp/>{</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"></highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getGray<sp/>(inp,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getGrayLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getGrayLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getRGBLine(Guchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"></highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useRGBLine())<sp/>{</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getRGB<sp/>(inp,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int)<sp/>colToByte(rgb.r)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>colToByte(rgb.g)<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>colToByte(rgb.b)<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getRGBLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"></highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getRGBLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"></highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useRGBLine())<sp/>{</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"></highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getRGB<sp/>(inp,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"></highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getRGBLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGBLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"></highlight></codeline>
<codeline lineno="6207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getRGBXLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"></highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useRGBLine())<sp/>{</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"></highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getRGB<sp/>(inp,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"></highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getRGBXLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"></highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGBXLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"></highlight></codeline>
<codeline lineno="6250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"></highlight></codeline>
<codeline lineno="6252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getCMYKLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"></highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useCMYKLine())<sp/>{</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"></highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getCMYK<sp/>(inp,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getCMYKLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"></highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getCMYKLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"></highlight></codeline>
<codeline lineno="6295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"></highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getDeviceNLine(Guchar<sp/>*in,<sp/>Guchar<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/>Guchar<sp/>*inp,<sp/>*tmp_line;</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"></highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useDeviceNLine())<sp/>{</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"></highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getDeviceN<sp/>(inp,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>j++)</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>deviceN.c[j];</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inp<sp/>+=<sp/>nComps;</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmallocn<sp/>(length,<sp/>nComps2);</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_line[i<sp/>*<sp/>nComps2<sp/>+<sp/>j]<sp/>=<sp/>byte_lookup[in[i]<sp/>*<sp/>nComps2<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getDeviceNLine(tmp_line,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmp_line);</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"></highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/>inp<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>length;<sp/>j++)</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/>*inp<sp/>=<sp/>byte_lookup[*inp<sp/>*<sp/>nComps<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/>inp++;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getDeviceNLine(in,<sp/>out,<sp/>length);</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"></highlight></codeline>
<codeline lineno="6338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getCMYK(Guchar<sp/>*x,<sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"></highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2)<sp/>{</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[0]];</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getCMYK(&amp;color,<sp/>cmyk);</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup[i][x[i]];</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getCMYK(&amp;color,<sp/>cmyk);</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getDeviceN(Guchar<sp/>*x,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace2)<sp/>{</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup2[i][x[0]];</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace2-&gt;getDeviceN(&amp;color,<sp/>deviceN);</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>lookup[i][x[i]];</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getDeviceN(&amp;color,<sp/>deviceN);</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"></highlight></codeline>
<codeline lineno="6374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxImageColorMap::getColor(Guchar<sp/>*x,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)<sp/>{</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxPixel,<sp/>i;</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"></highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/>maxPixel<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;c[i]<sp/>=<sp/>dblToCol(decodeLow[i]<sp/>+<sp/>(x[i]<sp/>*<sp/>decodeRange[i])<sp/>/<sp/>maxPixel);</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"></highlight></codeline>
<codeline lineno="6383"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxSubpath<sp/>and<sp/>GfxPath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6385"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6386"><highlight class="normal"></highlight></codeline>
<codeline lineno="6387"><highlight class="normal">GfxSubpath::GfxSubpath(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/>curve<sp/>=<sp/>(GBool<sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/>y[0]<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/>curve[0]<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/>closed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal">GfxSubpath::~GfxSubpath()<sp/>{</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/>gfree(x);</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/>gfree(y);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/>gfree(curve);</highlight></codeline>
<codeline lineno="6403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"></highlight></codeline>
<codeline lineno="6405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>copy().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6406"><highlight class="normal">GfxSubpath::GfxSubpath(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath)<sp/>{</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>subpath-&gt;size;</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>subpath-&gt;n;</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/>curve<sp/>=<sp/>(GBool<sp/>*)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/>memcpy(x,<sp/>subpath-&gt;x,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/>memcpy(y,<sp/>subpath-&gt;y,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/>memcpy(curve,<sp/>subpath-&gt;curve,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/>closed<sp/>=<sp/>subpath-&gt;closed;</highlight></codeline>
<codeline lineno="6416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSubpath::lineTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(x,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(y,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/>curve<sp/>=<sp/>(GBool<sp/>*)greallocn(curve,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/>x[n]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/>y[n]<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/>curve[n]<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="6429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSubpath::curveTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2,</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y3)<sp/>{</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+3<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(x,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(y,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/>curve<sp/>=<sp/>(GBool<sp/>*)greallocn(curve,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/>x[n]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/>y[n]<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/>x[n+1]<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/>y[n+1]<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/>x[n+2]<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/>y[n+2]<sp/>=<sp/>y3;</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/>curve[n]<sp/>=<sp/>curve[n+1]<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/>curve[n+2]<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/>n<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="6448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight></codeline>
<codeline lineno="6450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSubpath::close()<sp/>{</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[n-1]<sp/>!=<sp/>x[0]<sp/>||<sp/>y[n-1]<sp/>!=<sp/>y[0])<sp/>{</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/>lineTo(x[0],<sp/>y[0]);</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/>closed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxSubpath::offset(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>+=<sp/>dx;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"></highlight></codeline>
<codeline lineno="6466"><highlight class="normal">GfxPath::GfxPath()<sp/>{</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/>justMoved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/>firstX<sp/>=<sp/>firstY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"></highlight></codeline>
<codeline lineno="6474"><highlight class="normal">GfxPath::~GfxPath()<sp/>{</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"></highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>subpaths[i];</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/>gfree(subpaths);</highlight></codeline>
<codeline lineno="6480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"></highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>copy().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal">GfxPath::GfxPath(GBool<sp/>justMoved1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstX1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstY1,</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**subpaths1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size1)<sp/>{</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"></highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/>justMoved<sp/>=<sp/>justMoved1;</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/>firstX<sp/>=<sp/>firstX1;</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/>firstY<sp/>=<sp/>firstY1;</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>size1;</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)gmallocn(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/>subpaths[i]<sp/>=<sp/>subpaths1[i]-&gt;copy();</highlight></codeline>
<codeline lineno="6495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::moveTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/>justMoved<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/>firstX<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/>firstY<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="6501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::lineTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justMoved<sp/>||<sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>subpaths[n-1]-&gt;isClosed()))<sp/>{</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(subpaths,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justMoved)<sp/>{</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref>(firstX,<sp/>firstY);</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref>(subpaths[n-1]-&gt;getLastX(),</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n-1]-&gt;getLastY());</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/>justMoved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/>subpaths[n-1]-&gt;lineTo(x,<sp/>y);</highlight></codeline>
<codeline lineno="6520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"></highlight></codeline>
<codeline lineno="6522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::curveTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2,</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y3)<sp/>{</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justMoved<sp/>||<sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>subpaths[n-1]-&gt;isClosed()))<sp/>{</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)<sp/></highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(subpaths,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justMoved)<sp/>{</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref>(firstX,<sp/>firstY);</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref>(subpaths[n-1]-&gt;getLastX(),</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpaths[n-1]-&gt;getLastY());</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/><sp/>justMoved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/>subpaths[n-1]-&gt;curveTo(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3);</highlight></codeline>
<codeline lineno="6540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"></highlight></codeline>
<codeline lineno="6542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::close()<sp/>{</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>necessary<sp/>to<sp/>handle<sp/>the<sp/>pathological<sp/>case<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>moveto/closepath/clip,<sp/>which<sp/>defines<sp/>an<sp/>empty<sp/>clipping<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justMoved)<sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/>greallocn(subpaths,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/>subpaths[n]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref>(firstX,<sp/>firstY);</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/>justMoved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/>subpaths[n-1]-&gt;close();</highlight></codeline>
<codeline lineno="6556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight></codeline>
<codeline lineno="6558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::append(<ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"></highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>+<sp/>path-&gt;n<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>n<sp/>+<sp/>path-&gt;n;</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/>subpaths<sp/>=<sp/>(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>**)</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(subpaths,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*));</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>path-&gt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/>subpaths[n++]<sp/>=<sp/>path-&gt;subpaths[i]-&gt;copy();</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/>justMoved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxPath::offset(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"></highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/>subpaths[i]-&gt;offset(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6581"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6583" refid="class_gfx_state_1_1_reusable_path_iterator_1a5684cb7996f4e5d90618e82a508547ab" refkind="member"><highlight class="normal"><ref refid="class_gfx_state_1_1_reusable_path_iterator_1a5684cb7996f4e5d90618e82a508547ab" kindref="member">GfxState::ReusablePathIterator::ReusablePathIterator</ref>(<ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path)</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/>:<sp/>path(path),</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/>subPathOff(0),</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/>coordOff(0),</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/>numCoords(0),</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/>curSubPath(NULL)</highlight></codeline>
<codeline lineno="6589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>path-&gt;getNumSubpaths()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/>curSubPath<sp/>=<sp/>path-&gt;getSubpath(subPathOff);</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/>numCoords<sp/>=<sp/>curSubPath-&gt;getNumPoints();</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"></highlight></codeline>
<codeline lineno="6596" refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">GfxState::ReusablePathIterator::isEnd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coordOff<sp/>&gt;=<sp/>numCoords;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"></highlight></codeline>
<codeline lineno="6600" refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">GfxState::ReusablePathIterator::next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/>++coordOff;</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coordOff<sp/>==<sp/>numCoords)<sp/>{</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/>++subPathOff;</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subPathOff<sp/>&lt;<sp/>path-&gt;getNumSubpaths())<sp/>{</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coordOff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curSubPath<sp/>=<sp/>path-&gt;getSubpath(subPathOff);</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numCoords<sp/>=<sp/>curSubPath-&gt;getNumPoints();</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"></highlight></codeline>
<codeline lineno="6612" refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">GfxState::ReusablePathIterator::setCoord</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/>curSubPath-&gt;setX(coordOff,<sp/>x);</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/>curSubPath-&gt;setY(coordOff,<sp/>y);</highlight></codeline>
<codeline lineno="6615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"></highlight></codeline>
<codeline lineno="6617" refid="class_gfx_state_1_1_reusable_path_iterator_1a59f8f6d089eb2ae9b0f28e0b7a37342a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator_1a59f8f6d089eb2ae9b0f28e0b7a37342a" kindref="member">GfxState::ReusablePathIterator::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/>coordOff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/>subPathOff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/>curSubPath<sp/>=<sp/>path-&gt;getSubpath(0);</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/>numCoords<sp/>=<sp/>curSubPath-&gt;getNumPoints();</highlight></codeline>
<codeline lineno="6622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"></highlight></codeline>
<codeline lineno="6624"><highlight class="normal">GfxState::GfxState(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPIA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPIA,<sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*pageBox,</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotateA,<sp/>GBool<sp/>upsideDown)<sp/>{</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kx,<sp/>ky;</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"></highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/>hDPI<sp/>=<sp/>hDPIA;</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/>vDPI<sp/>=<sp/>vDPIA;</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/>rotate<sp/>=<sp/>rotateA;</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/>px1<sp/>=<sp/>pageBox-&gt;x1;</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/>py1<sp/>=<sp/>pageBox-&gt;y1;</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/>px2<sp/>=<sp/>pageBox-&gt;x2;</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/>py2<sp/>=<sp/>pageBox-&gt;y2;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/>kx<sp/>=<sp/>hDPI<sp/>/<sp/>72.0;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/>ky<sp/>=<sp/>vDPI<sp/>/<sp/>72.0;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>90)<sp/>{</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[1]<sp/>=<sp/>upsideDown<sp/>?<sp/>ky<sp/>:<sp/>-ky;</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[2]<sp/>=<sp/>kx;</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[4]<sp/>=<sp/>-kx<sp/>*<sp/>py1;</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[5]<sp/>=<sp/>ky<sp/>*<sp/>(upsideDown<sp/>?<sp/>-px1<sp/>:<sp/>px2);</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>kx<sp/>*<sp/>(py2<sp/>-<sp/>py1);</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>ky<sp/>*<sp/>(px2<sp/>-<sp/>px1);</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[0]<sp/>=<sp/>-kx;</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[3]<sp/>=<sp/>upsideDown<sp/>?<sp/>ky<sp/>:<sp/>-ky;</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[4]<sp/>=<sp/>kx<sp/>*<sp/>px2;</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[5]<sp/>=<sp/>ky<sp/>*<sp/>(upsideDown<sp/>?<sp/>-py1<sp/>:<sp/>py2);</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>kx<sp/>*<sp/>(px2<sp/>-<sp/>px1);</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>ky<sp/>*<sp/>(py2<sp/>-<sp/>py1);</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>270)<sp/>{</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[1]<sp/>=<sp/>upsideDown<sp/>?<sp/>-ky<sp/>:<sp/>ky;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[2]<sp/>=<sp/>-kx;</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[4]<sp/>=<sp/>kx<sp/>*<sp/>py2;</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[5]<sp/>=<sp/>ky<sp/>*<sp/>(upsideDown<sp/>?<sp/>px2<sp/>:<sp/>-px1);</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>kx<sp/>*<sp/>(py2<sp/>-<sp/>py1);</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>ky<sp/>*<sp/>(px2<sp/>-<sp/>px1);</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[0]<sp/>=<sp/>kx;</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[3]<sp/>=<sp/>upsideDown<sp/>?<sp/>-ky<sp/>:<sp/>ky;</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[4]<sp/>=<sp/>-kx<sp/>*<sp/>px1;</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm[5]<sp/>=<sp/>ky<sp/>*<sp/>(upsideDown<sp/>?<sp/>py2<sp/>:<sp/>-py1);</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>kx<sp/>*<sp/>(px2<sp/>-<sp/>px1);</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>ky<sp/>*<sp/>(py2<sp/>-<sp/>py1);</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/>fillColorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/>strokeColorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/>fillColor.c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/>strokeColor.c[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/>fillPattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/>strokePattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/>blendMode<sp/>=<sp/>gfxBlendNormal;</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/>fillOpacity<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/>strokeOpacity<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/>fillOverprint<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/>strokeOverprint<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/>overprintMode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/>transfer[0]<sp/>=<sp/>transfer[1]<sp/>=<sp/>transfer[2]<sp/>=<sp/>transfer[3]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/>lineWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/>lineDash<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/>lineDashLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/>lineDashStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/>flatness<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/>lineJoin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/>lineCap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/>miterLimit<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/>strokeAdjust<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/>alphaIsShape<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/>textKnockout<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/>fontSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/>textMat[0]<sp/>=<sp/>1;<sp/>textMat[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/>textMat[2]<sp/>=<sp/>0;<sp/>textMat[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/>textMat[4]<sp/>=<sp/>0;<sp/>textMat[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/>charSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/>wordSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/>horizScaling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/>leading<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/>rise<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/>render<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref>();</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/>curX<sp/>=<sp/>curY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/>lineX<sp/>=<sp/>lineY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/>clipXMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/>clipYMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/>clipXMax<sp/>=<sp/>pageWidth;</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/>clipYMax<sp/>=<sp/>pageHeight;</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"></highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/>renderingIntent[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"></highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/>GfxColorSpace::setupColorProfiles();</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/>XYZ2DisplayTransformRelCol<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/>XYZ2DisplayTransformAbsCol<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/>XYZ2DisplayTransformSat<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/>XYZ2DisplayTransformPerc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/>localDisplayProfile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/>displayProfileRef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"></highlight></codeline>
<codeline lineno="6736"><highlight class="normal">GfxState::~GfxState()<sp/>{</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"></highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fillColorSpace;</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokeColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>strokeColorSpace;</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillPattern)<sp/>{</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fillPattern;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePattern)<sp/>{</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>strokePattern;</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer[i])<sp/>{</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transfer[i];</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/>gfree(lineDash);</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path)<sp/>{</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>gets<sp/>set<sp/>to<sp/>NULL<sp/>by<sp/>restore()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfont" kindref="compound">font</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformRelCol)<sp/>{</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformRelCol-&gt;unref()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>XYZ2DisplayTransformRelCol;</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformAbsCol)<sp/>{</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformAbsCol-&gt;unref()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>XYZ2DisplayTransformAbsCol;</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformSat)<sp/>{</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformSat-&gt;unref()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>XYZ2DisplayTransformSat;</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformPerc)<sp/>{</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformPerc-&gt;unref()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>XYZ2DisplayTransformPerc;</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--displayProfileRef<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>localDisplayProfile<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(localDisplayProfile);</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"></highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>copy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal">GfxState::GfxState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/>GBool<sp/>copyPath)<sp/>{</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"></highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/>memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>state,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_gfx_state" kindref="compound">GfxState</ref>));</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/>fillColorSpace<sp/>=<sp/>state-&gt;fillColorSpace-&gt;copy();</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokeColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/>strokeColorSpace<sp/>=<sp/>state-&gt;strokeColorSpace-&gt;copy();</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillPattern)<sp/>{</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPattern<sp/>=<sp/>state-&gt;fillPattern-&gt;copy();</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePattern)<sp/>{</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/>strokePattern<sp/>=<sp/>state-&gt;strokePattern-&gt;copy();</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer[i])<sp/>{</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transfer[i]<sp/>=<sp/>state-&gt;transfer[i]-&gt;copy();</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineDashLength<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/>lineDash<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(lineDashLength,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(lineDash,<sp/>state-&gt;lineDash,<sp/>lineDashLength<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfont" kindref="compound">font</ref>)</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"></highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyPath)<sp/>{</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>state-&gt;path-&gt;copy();</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformRelCol)<sp/>{</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>XYZ2DisplayTransformRelCol-&gt;ref();</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformAbsCol)<sp/>{</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/>XYZ2DisplayTransformAbsCol-&gt;ref();</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformSat)<sp/>{</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/>XYZ2DisplayTransformSat-&gt;ref();</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XYZ2DisplayTransformPerc)<sp/>{</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/>XYZ2DisplayTransformPerc-&gt;ref();</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localDisplayProfile)<sp/>{</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/>displayProfileRef++;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"></highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setDisplayProfile(cmsHPROFILE<sp/>localDisplayProfileA)<sp/>{</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localDisplayProfile<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(localDisplayProfile);</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/>localDisplayProfile<sp/>=<sp/>localDisplayProfileA;</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localDisplayProfileA<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHTRANSFORM<sp/>transform;</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChannels;</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localDisplayPixelType;</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"></highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/>localDisplayPixelType<sp/>=<sp/>getCMSColorSpaceType(cmsGetColorSpace(localDisplayProfile));</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/>nChannels<sp/>=<sp/>getCMSNChannels(cmsGetColorSpace(localDisplayProfile));</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/>displayProfileRef<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>transform<sp/>from<sp/>XYZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsHPROFILE<sp/>XYZProfile<sp/>=<sp/>cmsCreateXYZProfile();</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localDisplayProfile,</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(localDisplayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_RELATIVE_COLORIMETRIC,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransformRelCol<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_RELATIVE_COLORIMETRIC,<sp/>PT_XYZ,<sp/>localDisplayPixelType);</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localDisplayProfile,</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(localDisplayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_ABSOLUTE_COLORIMETRIC,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransformAbsCol<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_ABSOLUTE_COLORIMETRIC,<sp/>PT_XYZ,<sp/>localDisplayPixelType);</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localDisplayProfile,</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(localDisplayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_SATURATION,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransformSat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_SATURATION,<sp/>PT_XYZ,<sp/>localDisplayPixelType);</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((transform<sp/>=<sp/>cmsCreateTransform(XYZProfile,<sp/>TYPE_XYZ_DBL,</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localDisplayProfile,</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COLORSPACE_SH(localDisplayPixelType)<sp/>|</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANNELS_SH(nChannels)<sp/>|<sp/>BYTES_SH(1),</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTENT_PERCEPTUAL,LCMS_FLAGS))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>Lab<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XYZ2DisplayTransformPerc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref>(transform,<sp/>INTENT_PERCEPTUAL,<sp/>PT_XYZ,<sp/>localDisplayPixelType);</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(XYZProfile);</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref><sp/>*GfxState::getXYZ2DisplayTransform()<sp/>{</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_transform" kindref="compound">GfxColorTransform</ref><sp/>*transform;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"></highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/>transform<sp/>=<sp/>XYZ2DisplayTransformRelCol;</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(renderingIntent,<sp/></highlight><highlight class="stringliteral">&quot;AbsoluteColorimetric&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/>transform<sp/>=<sp/>XYZ2DisplayTransformAbsCol;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(renderingIntent,<sp/></highlight><highlight class="stringliteral">&quot;Saturation&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/>transform<sp/>=<sp/>XYZ2DisplayTransformSat;</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(renderingIntent,<sp/></highlight><highlight class="stringliteral">&quot;Perceptual&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/>transform<sp/>=<sp/>XYZ2DisplayTransformPerc;</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transform<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/>transform<sp/>=<sp/>XYZ2DisplayTransform;</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transform;</highlight></codeline>
<codeline lineno="6910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"></highlight></codeline>
<codeline lineno="6912"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"></highlight></codeline>
<codeline lineno="6914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setPath(<ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*pathA)<sp/>{</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>pathA;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"></highlight></codeline>
<codeline lineno="6919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::getUserClipBBox(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ictm[6];</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin1,<sp/>yMin1,<sp/>xMax1,<sp/>yMax1,<sp/>det,<sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>the<sp/>CTM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>(ctm[0]<sp/>*<sp/>ctm[3]<sp/>-<sp/>ctm[1]<sp/>*<sp/>ctm[2]);</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/>ictm[0]<sp/>=<sp/>ctm[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/>ictm[1]<sp/>=<sp/>-ctm[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/>ictm[2]<sp/>=<sp/>-ctm[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/>ictm[3]<sp/>=<sp/>ctm[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/>ictm[4]<sp/>=<sp/>(ctm[2]<sp/>*<sp/>ctm[5]<sp/>-<sp/>ctm[3]<sp/>*<sp/>ctm[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/>ictm[5]<sp/>=<sp/>(ctm[1]<sp/>*<sp/>ctm[4]<sp/>-<sp/>ctm[0]<sp/>*<sp/>ctm[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"></highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>all<sp/>four<sp/>corners<sp/>of<sp/>the<sp/>clip<sp/>bbox;<sp/>find<sp/>the<sp/>min<sp/>and<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>and<sp/>y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/>xMin1<sp/>=<sp/>xMax1<sp/>=<sp/>clipXMin<sp/>*<sp/>ictm[0]<sp/>+<sp/>clipYMin<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/>yMin1<sp/>=<sp/>yMax1<sp/>=<sp/>clipXMin<sp/>*<sp/>ictm[1]<sp/>+<sp/>clipYMin<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>clipXMin<sp/>*<sp/>ictm[0]<sp/>+<sp/>clipYMax<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>clipXMin<sp/>*<sp/>ictm[1]<sp/>+<sp/>clipYMax<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>clipXMax<sp/>*<sp/>ictm[0]<sp/>+<sp/>clipYMin<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>clipXMax<sp/>*<sp/>ictm[1]<sp/>+<sp/>clipYMin<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>clipXMax<sp/>*<sp/>ictm[0]<sp/>+<sp/>clipYMax<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>clipXMax<sp/>*<sp/>ictm[1]<sp/>+<sp/>clipYMax<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/>*xMin<sp/>=<sp/>xMin1;</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/>*yMin<sp/>=<sp/>yMin1;</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/>*xMax<sp/>=<sp/>xMax1;</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/>*yMax<sp/>=<sp/>yMax1;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"></highlight></codeline>
<codeline lineno="6980"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GfxState::transformWidth(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>ctm[0]<sp/>+<sp/>ctm[2];</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>ctm[1]<sp/>+<sp/>ctm[3];</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w<sp/>*<sp/>sqrt(0.5<sp/>*<sp/>(x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y));</highlight></codeline>
<codeline lineno="6986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GfxState::getTransformedFontSize()<sp/>{</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"></highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>textMat[2]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>textMat[3]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>ctm[0]<sp/>*<sp/>x1<sp/>+<sp/>ctm[2]<sp/>*<sp/>y1;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>ctm[1]<sp/>*<sp/>x1<sp/>+<sp/>ctm[3]<sp/>*<sp/>y1;</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(x2<sp/>*<sp/>x2<sp/>+<sp/>y2<sp/>*<sp/>y2);</highlight></codeline>
<codeline lineno="6996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"></highlight></codeline>
<codeline lineno="6998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::getFontTransMat(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m11,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m12,</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m21,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m22)<sp/>{</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/>*m11<sp/>=<sp/>(textMat[0]<sp/>*<sp/>ctm[0]<sp/>+<sp/>textMat[1]<sp/>*<sp/>ctm[2])<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/>*m12<sp/>=<sp/>(textMat[0]<sp/>*<sp/>ctm[1]<sp/>+<sp/>textMat[1]<sp/>*<sp/>ctm[3])<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/>*m21<sp/>=<sp/>(textMat[2]<sp/>*<sp/>ctm[0]<sp/>+<sp/>textMat[3]<sp/>*<sp/>ctm[2])<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/>*m22<sp/>=<sp/>(textMat[2]<sp/>*<sp/>ctm[1]<sp/>+<sp/>textMat[3]<sp/>*<sp/>ctm[3])<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="7004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setCTM(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/>ctm[0]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/>ctm[1]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/>ctm[2]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/>ctm[3]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/>ctm[4]<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/>ctm[5]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="7014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"></highlight></codeline>
<codeline lineno="7016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::concatCTM(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>ctm[2];</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>ctm[3];</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/>ctm[0]<sp/>=<sp/>a<sp/>*<sp/>a1<sp/>+<sp/>b<sp/>*<sp/>c1;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/>ctm[1]<sp/>=<sp/>a<sp/>*<sp/>b1<sp/>+<sp/>b<sp/>*<sp/>d1;</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/>ctm[2]<sp/>=<sp/>c<sp/>*<sp/>a1<sp/>+<sp/>d<sp/>*<sp/>c1;</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/>ctm[3]<sp/>=<sp/>c<sp/>*<sp/>b1<sp/>+<sp/>d<sp/>*<sp/>d1;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/>ctm[4]<sp/>=<sp/>e<sp/>*<sp/>a1<sp/>+<sp/>f<sp/>*<sp/>c1<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/>ctm[5]<sp/>=<sp/>e<sp/>*<sp/>b1<sp/>+<sp/>f<sp/>*<sp/>d1<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="7029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"></highlight></codeline>
<codeline lineno="7031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::shiftCTMAndClip(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ty)<sp/>{</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/>ctm[4]<sp/>+=<sp/>tx;</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/>ctm[5]<sp/>+=<sp/>ty;</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/>clipXMin<sp/>+=<sp/>tx;</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/>clipYMin<sp/>+=<sp/>ty;</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/>clipXMax<sp/>+=<sp/>tx;</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/>clipYMax<sp/>+=<sp/>ty;</highlight></codeline>
<codeline lineno="7038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"></highlight></codeline>
<codeline lineno="7040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setFillColorSpace(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fillColorSpace;</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/>fillColorSpace<sp/>=<sp/>colorSpace;</highlight></codeline>
<codeline lineno="7045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setStrokeColorSpace(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokeColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>strokeColorSpace;</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/>strokeColorSpace<sp/>=<sp/>colorSpace;</highlight></codeline>
<codeline lineno="7052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setFillPattern(<ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern)<sp/>{</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fillPattern)<sp/>{</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fillPattern;</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/>fillPattern<sp/>=<sp/>pattern;</highlight></codeline>
<codeline lineno="7059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setStrokePattern(<ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern)<sp/>{</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePattern)<sp/>{</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>strokePattern;</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/>strokePattern<sp/>=<sp/>pattern;</highlight></codeline>
<codeline lineno="7066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*fontA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSizeA)<sp/>{</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structfont" kindref="compound">font</ref>)</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>fontA;</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/>fontSize<sp/>=<sp/>fontSizeA;</highlight></codeline>
<codeline lineno="7074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"></highlight></codeline>
<codeline lineno="7076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setTransfer(<ref refid="class_function" kindref="compound">Function</ref><sp/>**funcs)<sp/>{</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer[i])<sp/>{</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transfer[i];</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[i]<sp/>=<sp/>funcs[i];</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::setLineDash(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dash,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineDash)</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(lineDash);</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/>lineDash<sp/>=<sp/>dash;</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/>lineDashLength<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/>lineDashStart<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="7093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"></highlight></codeline>
<codeline lineno="7095"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::clearPath()<sp/>{</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref>();</highlight></codeline>
<codeline lineno="7098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"></highlight></codeline>
<codeline lineno="7100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::clip()<sp/>{</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>path-&gt;getNumSubpaths();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(i);</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>subpath-&gt;getNumPoints();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transform(subpath-&gt;getX(j),<sp/>subpath-&gt;getY(j),<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;<sp/>clipXMin)<sp/>{</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMin<sp/>=<sp/>xMin;</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&gt;<sp/>clipYMin)<sp/>{</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMin<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>&lt;<sp/>clipXMax)<sp/>{</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMax<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>&lt;<sp/>clipYMax)<sp/>{</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMax<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::clipToStrokePath()<sp/>{</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>x,<sp/>y,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"></highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>path-&gt;getNumSubpaths();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(i);</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>subpath-&gt;getNumPoints();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transform(subpath-&gt;getX(j),<sp/>subpath-&gt;getY(j),<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"></highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>for<sp/>the<sp/>line<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>miter<sp/>joins<sp/>can<sp/>extend<sp/>farther<sp/>than<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>fabs(ctm[0]);</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>fabs(ctm[2]);</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>-=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>+=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>-=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>+=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>fabs(ctm[0]);</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>fabs(ctm[3]);</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>-=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>+=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>-=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>+=<sp/>0.5<sp/>*<sp/>lineWidth<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"></highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;<sp/>clipXMin)<sp/>{</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMin<sp/>=<sp/>xMin;</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&gt;<sp/>clipYMin)<sp/>{</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMin<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>&lt;<sp/>clipXMax)<sp/>{</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMax<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>&lt;<sp/>clipYMax)<sp/>{</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMax<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::clipToRect(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>xMin1,<sp/>yMin1,<sp/>xMax1,<sp/>yMax1;</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"></highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/>transform(xMin,<sp/>yMin,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/>xMin1<sp/>=<sp/>xMax1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/>yMin1<sp/>=<sp/>yMax1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/>transform(xMax,<sp/>yMin,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/>transform(xMax,<sp/>yMax,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/>transform(xMin,<sp/>yMax,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin1)<sp/>{</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax1)<sp/>{</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin1)<sp/>{</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax1)<sp/>{</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"></highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin1<sp/>&gt;<sp/>clipXMin)<sp/>{</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMin<sp/>=<sp/>xMin1;</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin1<sp/>&gt;<sp/>clipYMin)<sp/>{</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMin<sp/>=<sp/>yMin1;</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax1<sp/>&lt;<sp/>clipXMax)<sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/>clipXMax<sp/>=<sp/>xMax1;</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax1<sp/>&lt;<sp/>clipYMax)<sp/>{</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/>clipYMax<sp/>=<sp/>yMax1;</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"></highlight></codeline>
<codeline lineno="7258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::textShift(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ty)<sp/>{</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy;</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"></highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/>textTransformDelta(tx,<sp/>ty,<sp/>&amp;dx,<sp/>&amp;dy);</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/>curX<sp/>+=<sp/>dx;</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/>curY<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="7264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"></highlight></codeline>
<codeline lineno="7266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxState::shift(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/>curX<sp/>+=<sp/>dx;</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/>curY<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="7269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"></highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*GfxState::save()<sp/>{</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*newState;</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"></highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/>newState<sp/>=<sp/>copy();</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/>newState-&gt;saved<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newState;</highlight></codeline>
<codeline lineno="7277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*GfxState::restore()<sp/>{</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*oldState;</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved)<sp/>{</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState<sp/>=<sp/>saved;</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"></highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>attributes<sp/>aren&apos;t<sp/>saved/restored<sp/>by<sp/>the<sp/>q/Q<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState-&gt;path<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState-&gt;curX<sp/>=<sp/>curX;</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState-&gt;curY<sp/>=<sp/>curY;</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState-&gt;lineX<sp/>=<sp/>lineX;</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState-&gt;lineY<sp/>=<sp/>lineY;</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"></highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7295"><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/>oldState<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"></highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldState;</highlight></codeline>
<codeline lineno="7301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"></highlight></codeline>
<codeline lineno="7303"><highlight class="normal">GBool<sp/>GfxState::parseBlendMode(<ref refid="class_object" kindref="compound">Object</ref><sp/>*obj,<sp/>GfxBlendMode<sp/>*mode)<sp/>{</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nGfxBlendModeNames;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(obj-&gt;getName(),<sp/>gfxBlendModeNames[i].name))<sp/>{</highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/>gfxBlendModeNames[i].mode;</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj-&gt;arrayGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isName())<sp/>{</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nGfxBlendModeNames;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(obj2.getName(),<sp/>gfxBlendModeNames[j].name))<sp/>{</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/>gfxBlendModeNames[j].mode;</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/>gfxBlendNormal;</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7336"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/GfxState.cc"/>
  </compounddef>
</doxygen>
