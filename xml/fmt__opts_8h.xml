<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="fmt__opts_8h" kind="file" language="C++">
    <compoundname>fmt_opts.h</compoundname>
    <includes refid="thirdparty_2rtf2html_2config_8h" local="yes">config.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">stack</includes>
    <includes local="no">vector</includes>
    <includes local="no">deque</includes>
    <includes local="no">map</includes>
    <includedby refid="fmt__opts_8cpp" local="yes">thirdparty/rtf2html/fmt_opts.cpp</includedby>
    <includedby refid="rtf2html_8cpp" local="yes">thirdparty/rtf2html/rtf2html.cpp</includedby>
    <incdepgraph>
      <node id="93195">
        <label>iomanip</label>
      </node>
      <node id="93193">
        <label>string</label>
      </node>
      <node id="93199">
        <label>map</label>
      </node>
      <node id="93192">
        <label>common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="93191" relation="include">
        </childnode>
        <childnode refid="93193" relation="include">
        </childnode>
        <childnode refid="93194" relation="include">
        </childnode>
        <childnode refid="93195" relation="include">
        </childnode>
      </node>
      <node id="93191">
        <label>config.h</label>
        <link refid="thirdparty_2rtf2html_2config_8h_source"/>
      </node>
      <node id="93197">
        <label>vector</label>
      </node>
      <node id="93196">
        <label>stack</label>
      </node>
      <node id="93190">
        <label>thirdparty/rtf2html/fmt_opts.h</label>
        <link refid="fmt__opts_8h"/>
        <childnode refid="93191" relation="include">
        </childnode>
        <childnode refid="93192" relation="include">
        </childnode>
        <childnode refid="93196" relation="include">
        </childnode>
        <childnode refid="93197" relation="include">
        </childnode>
        <childnode refid="93198" relation="include">
        </childnode>
        <childnode refid="93199" relation="include">
        </childnode>
      </node>
      <node id="93194">
        <label>sstream</label>
      </node>
      <node id="93198">
        <label>deque</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="93202">
        <label>thirdparty/rtf2html/rtf2html.cpp</label>
        <link refid="rtf2html_8cpp_source"/>
      </node>
      <node id="93200">
        <label>thirdparty/rtf2html/fmt_opts.h</label>
        <link refid="fmt__opts_8h"/>
        <childnode refid="93201" relation="include">
        </childnode>
        <childnode refid="93202" relation="include">
        </childnode>
      </node>
      <node id="93201">
        <label>thirdparty/rtf2html/fmt_opts.cpp</label>
        <link refid="fmt__opts_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structcolor" prot="public">color</innerclass>
    <innerclass refid="structfont" prot="public">font</innerclass>
    <innerclass refid="structformatting__options" prot="public">formatting_options</innerclass>
    <innerclass refid="classformatter" prot="public">formatter</innerclass>
    <innerclass refid="classhtml__text" prot="public">html_text</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="fmt__opts_8h_1a5f4ab9c917dcd7c710e805599c457f05" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structcolor" kindref="compound">color</ref> &gt;</type>
        <definition>typedef std::vector&lt;color&gt; colorvect</definition>
        <argsstring></argsstring>
        <name>colorvect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/fmt_opts.h" line="29" column="1" bodyfile="thirdparty/rtf2html/fmt_opts.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="fmt__opts_8h_1ad6dfa308159caa39b75da4eb01f9c8c0" prot="public" static="no">
        <type>std::map&lt; int, <ref refid="structfont" kindref="compound">font</ref> &gt;</type>
        <definition>typedef std::map&lt;int, font&gt; fontmap</definition>
        <argsstring></argsstring>
        <name>fontmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/fmt_opts.h" line="54" column="1" bodyfile="thirdparty/rtf2html/fmt_opts.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="fmt__opts_8h_1a786879b9148872a09fa17c6a129e7252" prot="public" static="no">
        <type>std::stack&lt; <ref refid="structformatting__options" kindref="compound">formatting_options</ref> &gt;</type>
        <definition>typedef std::stack&lt;formatting_options&gt; fo_stack</definition>
        <argsstring></argsstring>
        <name>fo_stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/fmt_opts.h" line="105" column="1" bodyfile="thirdparty/rtf2html/fmt_opts.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="fmt__opts_8h_1a6f163e9321ff96bb1f392106c12796e6" prot="public" static="no">
        <type>std::deque&lt; <ref refid="structformatting__options" kindref="compound">formatting_options</ref> &gt;</type>
        <definition>typedef std::deque&lt;formatting_options&gt; fo_deque</definition>
        <argsstring></argsstring>
        <name>fo_deque</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/fmt_opts.h" line="107" column="1" bodyfile="thirdparty/rtf2html/fmt_opts.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__FMT_OPTS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__FMT_OPTS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structcolor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcolor" kindref="compound">color</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcolor" kindref="compound">color</ref>()<sp/>:<sp/>r(-1),<sp/>g(-1),<sp/>b(-1)<sp/>{}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>&amp;clr)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r==clr.r<sp/>&amp;&amp;<sp/>g==clr.g<sp/>&amp;&amp;<sp/>b==clr.b;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>&amp;clr)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">==clr);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>&amp;clr)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r=clr.r;<sp/>g=clr.g;<sp/>b=clr.b;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;color&gt;<sp/>colorvect;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structfont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfont" kindref="compound">font</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>font_family<sp/>{ff_none,<sp/>ff_serif,<sp/>ff_sans_serif,<sp/>ff_cursive,<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ff_fantasy,<sp/>ff_monospace};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>font_family<sp/>family;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pitch;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charset;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>()<sp/>:<sp/>family(ff_none),<sp/>name(),<sp/>pitch(0),<sp/>charset(0)<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>&amp;f)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>family==f.family<sp/>&amp;&amp;<sp/>name==f.name;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>&amp;f)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">==f);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>&amp;f)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>family=f.family;<sp/>name=f.name;<sp/>pitch=f.pitch;<sp/>charset=f.charset;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>font&gt;<sp/>fontmap;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structformatting__options" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatting__options" kindref="compound">formatting_options</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>halign<sp/>{align_left,<sp/>align_right,<sp/>align_center,<sp/>align_justify,<sp/>align_error};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>valign<sp/>{va_normal,<sp/>va_sub,<sp/>va_sup};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chpBold,<sp/>chpItalic,<sp/>chpUnderline;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>valign<sp/>chpVAlign;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chpFontSize,<sp/>chpHighlight;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>chpFColor,<sp/>chpBColor;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>chpFont;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>papLeft,<sp/>papRight,<sp/>papFirst;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>papBefore,<sp/>papAfter;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>halign<sp/>papAlign;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>papInTbl;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpBold=chpItalic=chpUnderline=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpVAlign=va_normal;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpFontSize=chpHighlight=0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papLeft=papRight=papFirst=papBefore=papAfter=0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papAlign=align_left;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papInTbl=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;opt)<sp/></highlight><highlight class="comment">//<sp/>tests<sp/>only<sp/>for<sp/>character<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chpBold==opt.chpBold<sp/>&amp;&amp;<sp/>chpItalic==opt.chpItalic<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>chpUnderline==opt.chpUnderline<sp/>&amp;&amp;<sp/>chpVAlign==opt.chpVAlign</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>chpFontSize==opt.chpFontSize</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>chpFColor==opt.chpFColor<sp/>&amp;&amp;<sp/>chpBColor==opt.chpBColor</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>chpHighlight==opt.chpHighlight<sp/>&amp;&amp;<sp/>chpFont==opt.chpFont;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;opt)<sp/></highlight><highlight class="comment">//<sp/>tests<sp/>only<sp/>for<sp/>character<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">==opt);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;opt)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpBold=opt.chpBold;<sp/>chpItalic=opt.chpItalic;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpUnderline=opt.chpUnderline;<sp/>chpVAlign=opt.chpVAlign;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpFontSize=opt.chpFontSize;<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpFColor=opt.chpFColor;<sp/>chpBColor=opt.chpBColor;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chpHighlight=opt.chpHighlight;<sp/>chpFont=opt.chpFont;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papLeft=opt.papLeft;<sp/>papRight=opt.papRight;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papFirst=opt.papFirst;<sp/>papBefore=opt.papBefore;<sp/>papAfter=opt.papAfter;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>papAlign=opt.papAlign;<sp/>papInTbl=opt.papInTbl;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>get_par_str()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::stack&lt;formatting_options&gt;<sp/>fo_stack;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::deque&lt;formatting_options&gt;<sp/>fo_deque;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classformatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceformatter" kindref="compound">formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>fo_deque<sp/>opt_stack;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;opt);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>close();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{<sp/>opt_stack.clear();<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classhtml__text" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhtml__text" kindref="compound">html_text</ref><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;opt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="namespaceformatter" kindref="compound">formatter</ref><sp/>fmt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>text;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><ref refid="classhtml__text" kindref="compound">html_text</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structformatting__options" kindref="compound">formatting_options</ref><sp/>&amp;_opt)<sp/>:<sp/>opt(_opt)<sp/>{}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text;<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(T<sp/>s)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text+=fmt.format(opt)+s;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>close()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt.close();<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>write(char<sp/>c)<sp/>{<sp/>write(std::string()+c);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{<sp/>text.clear();<sp/>fmt.clear();<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/rtf2html/fmt_opts.h"/>
  </compounddef>
</doxygen>
