<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_qt_l_p___private_1_1_qt_locked_file" kind="class" language="C++" prot="public">
    <compoundname>QtLP_Private::QtLockedFile</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QFile</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26" prot="public" static="no">
        <name>LockMode</name>
        <enumvalue id="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26ab1c0eec4a9dda28f1d65ba38336b3af8" prot="public">
          <name>NoLock</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26a346fb3b17839f4ef7fb6665ff2412158" prot="public">
          <name>ReadLock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26a7a2771b63f54da78b0c7bd54bb92101c" prot="public">
          <name>WriteLock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum describes the available lock modes.</para><para>ReadLock A read lock.  WriteLock A write lock.  NoLock Neither a read lock nor a write lock. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="70" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.h" bodystart="70" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_qt_l_p___private_1_1_qt_locked_file_1a523b327817d3af5d2d6629c26f91716e" prot="private" static="no" mutable="no">
        <type><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26" kindref="member">LockMode</ref></type>
        <definition>LockMode QtLP_Private::QtLockedFile::m_lock_mode</definition>
        <argsstring></argsstring>
        <name>m_lock_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="94" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1a69bf1d82b1ca46f97466634d8f9587aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QtLockedFile::QtLockedFile</definition>
        <argsstring>()</argsstring>
        <name>QtLockedFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an unlocked <emphasis><ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis> object. This constructor behaves in the same way as <emphasis>QFile::QFile()</emphasis>.</para><para><simplesect kind="see"><para>QFile::QFile() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="72" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.cpp" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1a8b7a228ae02dca4bb99743219d0cdb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QtLockedFile::QtLockedFile</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>QtLockedFile</name>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an unlocked <ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref> object with file <emphasis>name</emphasis>. This constructor behaves in the same way as <emphasis>QFile::QFile</emphasis>(const QString&amp;).</para><para><simplesect kind="see"><para>QFile::QFile() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="73" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.cpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1ae22e087171c094da6cfb3282e838c9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QtLockedFile::~QtLockedFile</definition>
        <argsstring>()</argsstring>
        <name>~QtLockedFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys the <emphasis><ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis> object. If any locks were held, they are released. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="74" column="1" bodyfile="thirdparty/singleapp/src/qtlocalpeer.cpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1a2e81bbaa7b1aaa83cf79284e66dbad79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QtLockedFile::open</definition>
        <argsstring>(OpenMode mode)</argsstring>
        <name>open</name>
        <param>
          <type>OpenMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opens the file in OpenMode <emphasis>mode</emphasis>.</para><para>This is identical to QFile::open(), with the one exception that the Truncate mode flag is disallowed. Truncation would conflict with the advisory file locking, since the file would be modified before the write lock is obtained. If truncation is required, use resize(0) after obtaining the write lock.</para><para>Returns true if successful; otherwise false.</para><para><simplesect kind="see"><para>QFile::open(), QFile::resize() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="76" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.cpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1af7876c08254a16d00022939f2fb9a8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QtLockedFile::lock</definition>
        <argsstring>(LockMode mode, bool block=true)</argsstring>
        <name>lock</name>
        <param>
          <type><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26" kindref="member">LockMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>block</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a lock of type <emphasis>mode</emphasis>. The file must be opened before it can be locked.</para><para>If <emphasis>block</emphasis> is true, this function will block until the lock is aquired. If <emphasis>block</emphasis> is false, this function returns <emphasis>false</emphasis> immediately if the lock cannot be aquired.</para><para>If this object already has a lock of type <emphasis>mode</emphasis>, this function returns <emphasis>true</emphasis> immediately. If this object has a lock of a different type than <emphasis>mode</emphasis>, the lock is first released and then a new lock is obtained.</para><para>This function returns <emphasis>true</emphasis> if, after it executes, the file is locked by this object, and <emphasis>false</emphasis> otherwise.</para><para><simplesect kind="see"><para><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1abb4d7e6211d9e6e14afaa661818fb2bf" kindref="member">unlock()</ref>, <ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0800b8ae9f4d268fe6968b9075f64bb3" kindref="member">isLocked()</ref>, <ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0ae096d85cb722b1563521ad2b6dbde2" kindref="member">lockMode()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="78" column="1" bodyfile="thirdparty/singleapp/src/qtlocalpeer.cpp" bodystart="48" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1abb4d7e6211d9e6e14afaa661818fb2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QtLockedFile::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a lock.</para><para>If the object has no lock, this function returns immediately.</para><para>This function returns <emphasis>true</emphasis> if, after it executes, the file is not locked by this object, and <emphasis>false</emphasis> otherwise.</para><para><simplesect kind="see"><para><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1af7876c08254a16d00022939f2fb9a8b8" kindref="member">lock()</ref>, <ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0800b8ae9f4d268fe6968b9075f64bb3" kindref="member">isLocked()</ref>, <ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0ae096d85cb722b1563521ad2b6dbde2" kindref="member">lockMode()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="79" column="1" bodyfile="thirdparty/singleapp/src/qtlocalpeer.cpp" bodystart="84" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1a0800b8ae9f4d268fe6968b9075f64bb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QtLockedFile::isLocked</definition>
        <argsstring>() const</argsstring>
        <name>isLocked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>true</emphasis> if this object has a in read or write lock; otherwise returns <emphasis>false</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0ae096d85cb722b1563521ad2b6dbde2" kindref="member">lockMode()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="80" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_qt_l_p___private_1_1_qt_locked_file_1a0ae096d85cb722b1563521ad2b6dbde2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26" kindref="member">LockMode</ref></type>
        <definition>QtLockedFile::LockMode QtLockedFile::lockMode</definition>
        <argsstring>() const</argsstring>
        <name>lockMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of lock currently held by this object, or <emphasis>QtLockedFile::NoLock</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_qt_l_p___private_1_1_qt_locked_file_1a0800b8ae9f4d268fe6968b9075f64bb3" kindref="member">isLocked()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/singleapp/src/qtlockedfile.h" line="81" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref> class extends QFile with advisory locking functions. </para>    </briefdescription>
    <detaileddescription>
<para>A file may be locked in read or write mode. Multiple instances of <emphasis><ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis>, created in multiple processes running on the same machine, may have a file locked in read mode. Exactly one instance may have it locked in write mode. A read and a write lock cannot exist simultaneously on the same file.</para><para>The file locks are advisory. This means that nothing prevents another process from manipulating a locked file using QFile or file system functions offered by the OS. Serialization is only guaranteed if all processes that access the file use QLockedFile. Also, while holding a lock on a file, a process must not open the same file again (through any API), or locks can be unexpectedly lost.</para><para>The lock provided by an instance of <emphasis><ref refid="class_qt_l_p___private_1_1_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis> is released whenever the program terminates. This is true even when the program crashes and no destructors are called. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="14076">
        <label>QFile</label>
      </node>
      <node id="14075">
        <label>QtLP_Private::QtLockedFile</label>
        <link refid="class_qt_l_p___private_1_1_qt_locked_file"/>
        <childnode refid="14076" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="14078">
        <label>QFile</label>
      </node>
      <node id="14077">
        <label>QtLP_Private::QtLockedFile</label>
        <link refid="class_qt_l_p___private_1_1_qt_locked_file"/>
        <childnode refid="14078" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="thirdparty/singleapp/src/qtlockedfile.h" line="68" column="1" bodyfile="thirdparty/singleapp/src/qtlockedfile.h" bodystart="67" bodyend="95"/>
    <listofallmembers>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a0800b8ae9f4d268fe6968b9075f64bb3" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>isLocked</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1af7876c08254a16d00022939f2fb9a8b8" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>lock</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>LockMode</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a0ae096d85cb722b1563521ad2b6dbde2" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>lockMode</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a523b327817d3af5d2d6629c26f91716e" prot="private" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>m_lock_mode</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26ab1c0eec4a9dda28f1d65ba38336b3af8" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>NoLock</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a2e81bbaa7b1aaa83cf79284e66dbad79" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>open</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a69bf1d82b1ca46f97466634d8f9587aa" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>QtLockedFile</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1a8b7a228ae02dca4bb99743219d0cdb7b" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>QtLockedFile</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26a346fb3b17839f4ef7fb6665ff2412158" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>ReadLock</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1abb4d7e6211d9e6e14afaa661818fb2bf" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>unlock</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1ab9a54228983e33cf1fb8dace52141f26a7a2771b63f54da78b0c7bd54bb92101c" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>WriteLock</name></member>
      <member refid="class_qt_l_p___private_1_1_qt_locked_file_1ae22e087171c094da6cfb3282e838c9d4" prot="public" virt="non-virtual"><scope>QtLP_Private::QtLockedFile</scope><name>~QtLockedFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
