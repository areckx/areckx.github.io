<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="portmidi_8c" kind="file" language="C++">
    <compoundname>portmidi.c</compoundname>
    <includes local="yes">stdlib.h</includes>
    <includes local="yes">string.h</includes>
    <includes refid="portmidi_8h" local="yes">portmidi.h</includes>
    <includes refid="porttime_8h" local="yes">porttime.h</includes>
    <includes refid="pmutil_8h" local="yes">pmutil.h</includes>
    <includes refid="pminternal_8h" local="yes">pminternal.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="92920">
        <label>assert.h</label>
      </node>
      <node id="92919">
        <label>pminternal.h</label>
        <link refid="pminternal_8h_source"/>
      </node>
      <node id="92914">
        <label>stdlib.h</label>
      </node>
      <node id="92913">
        <label>thirdparty/portmidi/pm_common/portmidi.c</label>
        <link refid="portmidi_8c"/>
        <childnode refid="92914" relation="include">
        </childnode>
        <childnode refid="92915" relation="include">
        </childnode>
        <childnode refid="92916" relation="include">
        </childnode>
        <childnode refid="92917" relation="include">
        </childnode>
        <childnode refid="92918" relation="include">
        </childnode>
        <childnode refid="92919" relation="include">
        </childnode>
        <childnode refid="92920" relation="include">
        </childnode>
      </node>
      <node id="92916">
        <label>portmidi.h</label>
        <link refid="portmidi_8h_source"/>
      </node>
      <node id="92915">
        <label>string.h</label>
      </node>
      <node id="92918">
        <label>pmutil.h</label>
        <link refid="pmutil_8h_source"/>
      </node>
      <node id="92917">
        <label>porttime.h</label>
        <link refid="porttime_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="portmidi_8c_1afa5e4e295aafd15ab7893344599b3b89" prot="public" static="no">
        <name>MIDI_CLOCK</name>
        <initializer>0xf8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="9" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a6ff6dd452be369b24a8bb05102b2ff76" prot="public" static="no">
        <name>MIDI_ACTIVE</name>
        <initializer>0xfe</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="10" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a1ee2586a063422ec7d18e2abfbafa545" prot="public" static="no">
        <name>MIDI_STATUS_MASK</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="11" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1aa2197f6ca200566c0986e737edd211e4" prot="public" static="no">
        <name>MIDI_SYSEX</name>
        <initializer>0xf0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="12" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a140c8cfa4bbf1a03494abdbd639d49f2" prot="public" static="no">
        <name>MIDI_EOX</name>
        <initializer>0xf7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="13" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a8233631c85823aa546f932ad8975caa4" prot="public" static="no">
        <name>MIDI_START</name>
        <initializer>0xFA</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="14" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a3af9271d4b1f0d22904a0b055f48cf62" prot="public" static="no">
        <name>MIDI_STOP</name>
        <initializer>0xFC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="15" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ab24430f0081e27215b0da84dd0ee745c" prot="public" static="no">
        <name>MIDI_CONTINUE</name>
        <initializer>0xFB</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="16" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ab4ef04d3d15cb2ae88364b639dc29834" prot="public" static="no">
        <name>MIDI_F9</name>
        <initializer>0xF9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="17" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ace178eb4669d53d06c7873596fa27084" prot="public" static="no">
        <name>MIDI_FD</name>
        <initializer>0xFD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="18" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a02947f30ca62dc332fdeb10c5868323b" prot="public" static="no">
        <name>MIDI_RESET</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="19" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1acb743a02e36b618a4bd1990671b3325f" prot="public" static="no">
        <name>MIDI_NOTE_ON</name>
        <initializer>0x90</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="20" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a4259def83bd534a786edb4408fec67f0" prot="public" static="no">
        <name>MIDI_NOTE_OFF</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="21" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ab47c590c8324e5127da43ad0f3e63a26" prot="public" static="no">
        <name>MIDI_CHANNEL_AT</name>
        <initializer>0xD0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="22" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ae11126c99c31285d199b88c12feff9be" prot="public" static="no">
        <name>MIDI_POLY_AT</name>
        <initializer>0xA0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="23" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a8bbe829ae5724352ee1f45f5590e7f84" prot="public" static="no">
        <name>MIDI_PROGRAM</name>
        <initializer>0xC0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="24" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ad618c2530c16b5bdb92ace73f3a1dcb5" prot="public" static="no">
        <name>MIDI_CONTROL</name>
        <initializer>0xB0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="25" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1abcc799504e8064679bca03f232223af4" prot="public" static="no">
        <name>MIDI_PITCHBEND</name>
        <initializer>0xE0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="26" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a8e5430a8f1fcdc14fc227b7ab24bf1cf" prot="public" static="no">
        <name>MIDI_MTC</name>
        <initializer>0xF1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="27" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1aecd1881207e391fdaad13496b84a8ae7" prot="public" static="no">
        <name>MIDI_SONGPOS</name>
        <initializer>0xF2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="28" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1aca755324971f1443459847786a4d4507" prot="public" static="no">
        <name>MIDI_SONGSEL</name>
        <initializer>0xF3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="29" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1adf060c9ba94819a8445a9924ea799fd8" prot="public" static="no">
        <name>MIDI_TUNE</name>
        <initializer>0xF6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="30" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a2d48efb2f9e0ad13211a0ab1c66cabef" prot="public" static="no">
        <name>is_empty</name>
        <param><defname>midi</defname></param>
        <initializer>((midi)-&gt;tail == (midi)-&gt;head)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="32" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a1e3fc08b00e2542c99314d01844afd2c" prot="public" static="no">
        <name>pm_errmsg</name>
        <param><defname>err</defname></param>
        <initializer>err</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="75" column="10" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a366d307d9adc16df4ed72c0c96d56bd0" prot="public" static="no">
        <name>none_abort</name>
        <initializer>pm_fail_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="193" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1aee20ca803d94f91361fe009179095c90" prot="public" static="no">
        <name>none_close</name>
        <initializer>pm_fail_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="194" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ad974fe981249f5e84fbf1683b012c9f8" prot="public" static="no">
        <name>BUFLEN</name>
        <initializer>(PM_DEFAULT_SYSEX_BUFFER_SIZE / sizeof(PmMessage))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="560" column="13"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a5af1caf64b8661a79e54e850e9dbe191" prot="public" static="no">
        <name>pm_channel_filtered</name>
        <param><defname>status</defname></param>
        <param><defname>mask</defname></param>
        <initializer>((((status) &amp; 0xF0) != 0xF0) &amp;&amp; (!(Pm_Channel((status) &amp; 0x0F) &amp; (mask))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="881" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1a814afeefb4df5b95673e3d43c7a26282" prot="public" static="no">
        <name>pm_realtime_filtered</name>
        <param><defname>status</defname></param>
        <param><defname>filters</defname></param>
        <initializer>((((status) &amp; 0xF0) == 0xF0) &amp;&amp; ((1 &lt;&lt; ((status) &amp; 0xF)) &amp; (filters)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="894" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8c_1ac3c153803616975e2fdd1edd45e05398" prot="public" static="no">
        <name>pm_status_filtered</name>
        <param><defname>status</defname></param>
        <param><defname>filters</defname></param>
        <initializer>((1 &lt;&lt; (16 + ((status) &gt;&gt; 4))) &amp; (filters))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="918" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="918" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="portmidi_8c_1ad503ee62c76e6fe2beef957f0fe53488" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_initialized</definition>
        <argsstring></argsstring>
        <name>pm_initialized</name>
        <initializer>= FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="37" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1af455cd83ef19eb07a7996c38dd806ee4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_hosterror</definition>
        <argsstring></argsstring>
        <name>pm_hosterror</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="39" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1ac24a8881f0ef8c3a944349bee479cf05" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char pm_hosterror_text[PM_HOST_ERROR_MSG_LEN]</definition>
        <argsstring>[PM_HOST_ERROR_MSG_LEN]</argsstring>
        <name>pm_hosterror_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="40" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1a9ffc95d4de3ed10d1efcac1d79e39f11" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_descriptor_max</definition>
        <argsstring></argsstring>
        <name>pm_descriptor_max</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="84" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1abf37b57cc544c04b6d27cf33a02b473f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_descriptor_index</definition>
        <argsstring></argsstring>
        <name>pm_descriptor_index</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="85" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1a8a86f0e79d5794e79c94c3f380a7088c" prot="public" static="no" mutable="no">
        <type><ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref></type>
        <definition>descriptor_type descriptors</definition>
        <argsstring></argsstring>
        <name>descriptors</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="86" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="portmidi_8c_1a8b038edc211455d61f88e5f9c7773496" prot="public" static="no" mutable="no">
        <type><ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref></type>
        <definition>pm_fns_node pm_none_dictionary</definition>
        <argsstring></argsstring>
        <name>pm_none_dictionary</name>
        <initializer>= {
    none_write_short,
    none_sysex,
    none_sysex,
    none_write_byte,
    none_write_short,
    none_write_flush,
    none_synchronize,
    none_open,
    none_abort, 
    none_close,
    none_poll,
    none_has_host_error,
    none_get_host_error 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="196" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="portmidi_8c_1a8c66dfe796fb47b3f2a4a195a0529249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_add_device</definition>
        <argsstring>(char *interf, char *name, int input, void *descriptor, pm_fns_type dictionary)</argsstring>
        <name>pm_add_device</name>
        <param>
          <type>char *</type>
          <declname>interf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type><ref refid="structpm__fns__node" kindref="compound">pm_fns_type</ref></type>
          <declname>dictionary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="97" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="97" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1ac26fa03acd656577936afbe02fd852ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_CountDevices</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_CountDevices</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="140" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1abd2eeda58af466e49f25ecd595c07014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref> *</type>
        <definition>const PmDeviceInfo* Pm_GetDeviceInfo</definition>
        <argsstring>(PmDeviceID id)</argsstring>
        <name>Pm_GetDeviceInfo</name>
        <param>
          <type>PmDeviceID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="147" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1afe35490233517557ab6ce2a63008c7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_success_fn</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>pm_success_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="156" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a841d04eb4d4efa3eebfc4e718cf9faa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError none_write_short</definition>
        <argsstring>(PmInternal *midi, PmEvent *buffer)</argsstring>
        <name>none_write_short</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="161" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a36fcdf715926bc285b87c92005c04523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_fail_timestamp_fn</definition>
        <argsstring>(PmInternal *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_fail_timestamp_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="166" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a2181992bfdc1d719bdd96353763965d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError none_write_byte</definition>
        <argsstring>(PmInternal *midi, unsigned char byte, PmTimestamp timestamp)</argsstring>
        <name>none_write_byte</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="170" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1aeeae549047bfcfbbe3eff9f3857ff77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_fail_fn</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>pm_fail_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="176" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1adc0614cf830ce981d1cd63b6c08247fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>static PmError none_open</definition>
        <argsstring>(PmInternal *midi, void *driverInfo)</argsstring>
        <name>none_open</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>driverInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="180" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1ae8675a4d4f166f2071b58a4a401d831b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void none_get_host_error</definition>
        <argsstring>(PmInternal *midi, char *msg, unsigned int len)</argsstring>
        <name>none_get_host_error</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="183" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1aee06619b1b7ed7c21f0381304d69fea9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int none_has_host_error</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>none_has_host_error</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="186" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a9128319a3c3cb967bdde782ae9c5c4ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmTimestamp</type>
        <definition>PmTimestamp none_synchronize</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>none_synchronize</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="189" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1aa037d9d85af5791caea645d6c1f07e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Pm_GetErrorText</definition>
        <argsstring>(PmError errnum)</argsstring>
        <name>Pm_GetErrorText</name>
        <param>
          <type>PmError</type>
          <declname>errnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="213" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="213" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1aee6913b9bd3ade651fb3c8fc00c2446e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Pm_GetHostErrorText</definition>
        <argsstring>(char *msg, unsigned int len)</argsstring>
        <name>Pm_GetHostErrorText</name>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="259" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="259" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a18e624339d87fce4a91735a38afbdeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_HasHostError</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_HasHostError</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="274" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="274" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1adaac16c5c9b218573bc204d1506a4b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Initialize</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_Initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="290" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="290" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a0c592864b369ed8ee6aee6cbab1f995d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Terminate</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_Terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="301" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="301" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1ae88e6c682ee3550defdd0c74bcbdd508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_Read</definition>
        <argsstring>(PortMidiStream *stream, PmEvent *buffer, long length)</argsstring>
        <name>Pm_Read</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="321" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="321" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a344e6ba3edb14d560ccb074d66b56590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Poll</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Poll</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="362" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="362" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a811293321e05be76f64b1a18a0e4c774" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>static PmError pm_end_sysex</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>pm_end_sysex</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="395" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="395" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a9257b8cddc72ae5a1e142dc0ab478ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Write</definition>
        <argsstring>(PortMidiStream *stream, PmEvent *buffer, long length)</argsstring>
        <name>Pm_Write</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="412" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="412" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a481acc0f25daa3cc744ffa5f9f5cacdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_WriteShort</definition>
        <argsstring>(PortMidiStream *stream, long when, long msg)</argsstring>
        <name>Pm_WriteShort</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>long</type>
          <declname>when</declname>
        </param>
        <param>
          <type>long</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="545" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="545" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a825d5174ef7df9e804483a80a846b436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_WriteSysEx</definition>
        <argsstring>(PortMidiStream *stream, PmTimestamp when, unsigned char *msg)</argsstring>
        <name>Pm_WriteSysEx</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>when</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="555" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="555" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a2e778a55f5376c3ae19b943899adc36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_OpenInput</definition>
        <argsstring>(PortMidiStream **stream, PmDeviceID inputDevice, void *inputDriverInfo, long bufferSize, PmTimeProcPtr time_proc, void *time_info)</argsstring>
        <name>Pm_OpenInput</name>
        <param>
          <type>PortMidiStream **</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmDeviceID</type>
          <declname>inputDevice</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>inputDriverInfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>PmTimeProcPtr</type>
          <declname>time_proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="633" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="633" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1adfe8b99bd94eb9ffe383ab2545cd454a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_OpenOutput</definition>
        <argsstring>(PortMidiStream **stream, PmDeviceID outputDevice, void *outputDriverInfo, long bufferSize, PmTimeProcPtr time_proc, void *time_info, long latency)</argsstring>
        <name>Pm_OpenOutput</name>
        <param>
          <type>PortMidiStream **</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmDeviceID</type>
          <declname>outputDevice</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>outputDriverInfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>PmTimeProcPtr</type>
          <declname>time_proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>time_info</declname>
        </param>
        <param>
          <type>long</type>
          <declname>latency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="716" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="716" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a9e8f7dc292b1ebdadec533b843d6d8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_SetChannelMask</definition>
        <argsstring>(PortMidiStream *stream, int mask)</argsstring>
        <name>Pm_SetChannelMask</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="795" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="795" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a908c2e5c214440c243d7449dedbc4b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_SetFilter</definition>
        <argsstring>(PortMidiStream *stream, long filters)</argsstring>
        <name>Pm_SetFilter</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>long</type>
          <declname>filters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="809" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="809" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a1917f3f56a38f5496363c5bd5e0085ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Close</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Close</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="824" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="824" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a3fb1cc76afc7637231a99b06c8849268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Abort</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Abort</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="857" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="857" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a91b4940e34f52e425f2c9f2be02aa042" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pm_flush_sysex</definition>
        <argsstring>(PmInternal *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_flush_sysex</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="933" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="933" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a11a153e33a42b3f20df33394ce241005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_read_short</definition>
        <argsstring>(PmInternal *midi, PmEvent *event)</argsstring>
        <name>pm_read_short</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="966" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="966" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8c_1a5c1f297be147db435e3a524e4d402699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int pm_read_bytes</definition>
        <argsstring>(PmInternal *midi, unsigned char *data, int len, PmTimestamp timestamp)</argsstring>
        <name>pm_read_bytes</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.c" line="1006" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="1006" bodyend="1086"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;portmidi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;porttime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pmutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pminternal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_CLOCK<sp/><sp/><sp/><sp/><sp/><sp/>0xf8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_ACTIVE<sp/><sp/><sp/><sp/><sp/>0xfe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_STATUS_MASK<sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_SYSEX<sp/><sp/><sp/><sp/><sp/><sp/>0xf0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_EOX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_START<sp/><sp/><sp/><sp/><sp/><sp/>0xFA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_CONTINUE<sp/><sp/><sp/>0xFB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_F9<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_FD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_RESET<sp/><sp/><sp/><sp/><sp/><sp/>0xFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_NOTE_ON<sp/><sp/><sp/><sp/>0x90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_NOTE_OFF<sp/><sp/><sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_CHANNEL_AT<sp/>0xD0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_POLY_AT<sp/><sp/><sp/><sp/>0xA0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_PROGRAM<sp/><sp/><sp/><sp/>0xC0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_CONTROL<sp/><sp/><sp/><sp/>0xB0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_PITCHBEND<sp/><sp/>0xE0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_MTC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_SONGPOS<sp/><sp/><sp/><sp/>0xF2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_SONGSEL<sp/><sp/><sp/><sp/>0xF3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_TUNE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_empty(midi)<sp/>((midi)-&gt;tail<sp/>==<sp/>(midi)-&gt;head)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>not<sp/>static<sp/>so<sp/>that<sp/>pm_init<sp/>can<sp/>set<sp/>it<sp/>directly<sp/>if</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(see<sp/>pmmac.c:pm_init())</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_initialized<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_hosterror;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pm_hosterror_text[PM_HOST_ERROR_MSG_LEN];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PM_CHECK_ERRORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRING_MAX<sp/>80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prompt_and_exit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[STRING_MAX];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;type<sp/>ENTER...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>fgets(line,<sp/>STRING_MAX,<sp/>stdin);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>will<sp/>clean<sp/>up<sp/>open<sp/>ports:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PmError<sp/>pm_errmsg(PmError<sp/>err)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>it<sp/>seems<sp/>pointless<sp/>to<sp/>allocate<sp/>memory<sp/>and<sp/>copy<sp/>the<sp/>string,</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>I<sp/>will<sp/>do<sp/>the<sp/>work<sp/>of<sp/>Pm_GetHostErrorText<sp/>directly</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PortMidi<sp/>found<sp/>host<sp/>error...\n<sp/><sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pm_hosterror_text);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror_text[0]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prompt_and_exit();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PortMidi<sp/>call<sp/>failed...\n<sp/><sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Pm_GetErrorText(err));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prompt_and_exit();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pm_errmsg(err)<sp/>err</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment">====================================================================</highlight></codeline>
<codeline lineno="80"><highlight class="comment">system<sp/>implementation<sp/>of<sp/>portmidi<sp/>interface</highlight></codeline>
<codeline lineno="81"><highlight class="comment">====================================================================</highlight></codeline>
<codeline lineno="82"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_descriptor_max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_descriptor_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref><sp/>descriptors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_add_device<sp/>--<sp/>describe<sp/>interface/device<sp/>pair<sp/>to<sp/>library<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>called<sp/>at<sp/>intialization<sp/>time,<sp/>once<sp/>for<sp/>each<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>interface<sp/>(e.g.<sp/>DirectSound)<sp/>and<sp/>device<sp/>(e.g.<sp/>SoundBlaster<sp/>1)</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>The<sp/>strings<sp/>are<sp/>retained<sp/>but<sp/>NOT<sp/>COPIED,<sp/>so<sp/>do<sp/>not<sp/>destroy<sp/>them!</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>returns<sp/>pmInvalidDeviceId<sp/>if<sp/>device<sp/>memory<sp/>is<sp/>exceeded</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>returns<sp/>pmNoError</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">PmError<sp/>pm_add_device(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input,<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*descriptor,<sp/><ref refid="structpm__fns__node" kindref="compound">pm_fns_type</ref><sp/>dictionary)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pm_descriptor_index<sp/>&gt;=<sp/>pm_descriptor_max)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref><sp/>new_descriptors<sp/>=<sp/>(<ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref>)<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdescriptor__node" kindref="compound">descriptor_node</ref>)<sp/>*<sp/>(pm_descriptor_max<sp/>+<sp/>32));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_descriptors)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmInsufficientMemory;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descriptors)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(new_descriptors,<sp/>descriptors,<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdescriptor__node" kindref="compound">descriptor_node</ref>)<sp/>*<sp/>pm_descriptor_max);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(descriptors);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_descriptor_max<sp/>+=<sp/>32;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors<sp/>=<sp/>new_descriptors;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].pub.interf<sp/>=<sp/>interf;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].pub.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].pub.input<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].pub.output<sp/>=<sp/>!input;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>state:<sp/>nothing<sp/>to<sp/>close<sp/>(for<sp/>automatic<sp/>device<sp/>closing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].pub.opened<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ID<sp/>number<sp/>passed<sp/>to<sp/>win32<sp/>multimedia<sp/>API<sp/>open<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].descriptor<sp/>=<sp/>descriptor;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>PmInternal,<sp/>allows<sp/>automatic<sp/>device<sp/>closing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].internalDescriptor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[pm_descriptor_index].dictionary<sp/>=<sp/>dictionary;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_descriptor_index++;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="135"><highlight class="comment">====================================================================</highlight></codeline>
<codeline lineno="136"><highlight class="comment">portmidi<sp/>implementation</highlight></codeline>
<codeline lineno="137"><highlight class="comment">====================================================================</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_CountDevices(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Pm_Initialize();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>error<sp/>checking<sp/>--<sp/>Pm_Initialize()<sp/>does<sp/>not<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_descriptor_index;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref>*<sp/>Pm_GetDeviceInfo(<sp/>PmDeviceID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>Pm_Initialize();<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>error<sp/>check<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>pm_descriptor_index)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;descriptors[id].pub;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_success_fn<sp/>--<sp/>&quot;noop&quot;<sp/>function<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">PmError<sp/>pm_success_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>none_write<sp/>--<sp/>returns<sp/>an<sp/>error<sp/>if<sp/>called<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">PmError<sp/>none_write_short(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_fail_timestamp_fn<sp/>--<sp/>placeholder<sp/>for<sp/>begin_sysex<sp/>and<sp/>flush<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">PmError<sp/>pm_fail_timestamp_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/>PmTimestamp<sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">PmError<sp/>none_write_byte(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte,<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_fail_fn<sp/>--<sp/>generic<sp/>function,<sp/>returns<sp/>error<sp/>if<sp/>called<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">PmError<sp/>pm_fail_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PmError<sp/>none_open(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*driverInfo)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>none_get_host_error(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*<sp/>midi,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>msg,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(msg,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>none_has_host_error(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*<sp/>midi)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">PmTimestamp<sp/>none_synchronize(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>none_abort<sp/>pm_fail_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>none_close<sp/>pm_fail_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref><sp/>pm_none_dictionary<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>none_write_short,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>none_sysex,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>none_sysex,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>none_write_byte,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>none_write_short,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>none_write_flush,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>none_synchronize,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>none_open,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>none_abort,<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>none_close,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>none_poll,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>none_has_host_error,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>none_get_host_error<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pm_GetErrorText(<sp/>PmError<sp/>errnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(errnum)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmNoError:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmHostError:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Host<sp/>error&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmInvalidDeviceId:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Invalid<sp/>device<sp/>ID&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmInsufficientMemory:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Insufficient<sp/>memory&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmBufferTooSmall:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Buffer<sp/>too<sp/>small&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmBadPtr:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Bad<sp/>pointer&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmInternalError:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Internal<sp/>PortMidi<sp/>Error&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmBufferOverflow:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Buffer<sp/>overflow&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmBadData:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Invalid<sp/>MIDI<sp/>message<sp/>Data&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>pmBufferMaxSize:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Buffer<sp/>cannot<sp/>be<sp/>made<sp/>larger&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PortMidi:<sp/>`Illegal<sp/>error<sp/>number&apos;&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>can<sp/>be<sp/>called<sp/>whenever<sp/>you<sp/>get<sp/>a<sp/>pmHostError<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>The<sp/>error<sp/>will<sp/>always<sp/>be<sp/>in<sp/>the<sp/>global<sp/>pm_hosterror_text.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pm_GetHostErrorText(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>msg,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(msg);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(len<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pm_hosterror)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(msg,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>pm_hosterror_text,<sp/>len);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror_text[0]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>message;<sp/>not<sp/>necessary,<sp/>but<sp/>it</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>might<sp/>help<sp/>with<sp/>debugging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[len<sp/>-<sp/>1]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>string<sp/>is<sp/>terminated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[0]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>string<sp/>to<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_HasHostError(PortMidiStream<sp/>*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pm_hosterror)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*<sp/>midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>(*midi-&gt;dictionary-&gt;has_host_error)(midi);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pm_hosterror)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>error<sp/>message<sp/>is<sp/>global<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">PmError<sp/>Pm_Initialize(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pm_initialized)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror_text[0]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>null<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_init();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_initialized<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">PmError<sp/>Pm_Terminate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pm_initialized)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_term();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>no<sp/>devices,<sp/>descriptors<sp/>might<sp/>still<sp/>be<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descriptors<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(descriptors);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_descriptor_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_descriptor_max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_initialized<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pm_Read<sp/>--<sp/>read<sp/>up<sp/>to<sp/>length<sp/>longs<sp/>from<sp/>source<sp/>into<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>returns<sp/>number<sp/>of<sp/>longs<sp/>actually<sp/>read,<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_Read(PortMidiStream<sp/>*stream,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!descriptors[midi-&gt;device_id].pub.input)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>poll<sp/>for<sp/>data<sp/>in<sp/>the<sp/>buffer...</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>either<sp/>simply<sp/>checks<sp/>for<sp/>data,<sp/>or<sp/>attempts<sp/>first<sp/>to<sp/>fill<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>data<sp/>from<sp/>the<sp/>MIDI<sp/>hardware;<sp/>this<sp/>depends<sp/>on<sp/>the<sp/>implementation.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>could<sp/>call<sp/>Pm_Poll<sp/>here,<sp/>but<sp/>that<sp/>would<sp/>redo<sp/>a<sp/>lot<sp/>of<sp/>redundant</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>parameter<sp/>checking,<sp/>so<sp/>I<sp/>copied<sp/>some<sp/>code<sp/>from<sp/>Pm_Poll<sp/>to<sp/>here:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>(*(midi-&gt;dictionary-&gt;poll))(midi);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>Pm_Dequeue(midi-&gt;queue,<sp/>buffer++);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmBufferOverflow)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ignore<sp/>the<sp/>data<sp/>we<sp/>have<sp/>retreived<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(pmBufferOverflow);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">PmError<sp/>Pm_Poll(<sp/>PortMidiStream<sp/>*stream<sp/>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.input)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*(midi-&gt;dictionary-&gt;poll))(midi);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!Pm_QueueEmpty(midi-&gt;queue);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>called<sp/>from<sp/>Pm_Write<sp/>and<sp/>Pm_WriteSysEx<sp/>to<sp/>issue<sp/>a</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>call<sp/>to<sp/>the<sp/>system-dependent<sp/>end_sysex<sp/>function<sp/>and<sp/>handle<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>the<sp/>error<sp/>return</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PmError<sp/>pm_end_sysex(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;end_sysex)(midi,<sp/>0);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>to<sp/>facilitate<sp/>correct<sp/>error-handling,<sp/>Pm_Write,<sp/>Pm_WriteShort,<sp/>and</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/>Pm_WriteSysEx<sp/>all<sp/>operate<sp/>a<sp/>state<sp/>machine<sp/>that<sp/>&quot;outputs&quot;<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/>write_short,<sp/>begin_sysex,<sp/>write_byte,<sp/>end_sysex,<sp/>and<sp/>write_realtime<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">PmError<sp/>Pm_Write(<sp/>PortMidiStream<sp/>*stream,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!descriptors[midi-&gt;device_id].pub.output)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;latency<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;now<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;now<sp/>=<sp/>(*(midi-&gt;time_proc))(midi-&gt;time_info);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;first_message<sp/>||<sp/>midi-&gt;sync_time<sp/>+<sp/>100<sp/></highlight><highlight class="comment">/*ms*/</highlight><highlight class="normal"><sp/>&lt;<sp/>midi-&gt;now)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>time<sp/>to<sp/>resync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;now<sp/>=<sp/>(*midi-&gt;dictionary-&gt;synchronize)(midi);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;first_message<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>recovery:<sp/>when<sp/>a<sp/>sysex<sp/>is<sp/>detected,<sp/>we<sp/>call</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>dictionary-&gt;begin_sysex()<sp/>followed<sp/>by<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>dictionary-&gt;write_byte()<sp/>and<sp/>dictionary-&gt;write_realtime()</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>until<sp/>an<sp/>end-of-sysex<sp/>is<sp/>detected,<sp/>when<sp/>we<sp/>call</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>dictionary-&gt;end_sysex().<sp/>After<sp/>an<sp/>error<sp/>occurs,<sp/></highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Pm_Write()<sp/>continues<sp/>to<sp/>call<sp/>functions.<sp/>For<sp/>example,</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>it<sp/>will<sp/>continue<sp/>to<sp/>call<sp/>write_byte()<sp/>even<sp/>after</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>an<sp/>error<sp/>sending<sp/>a<sp/>sysex<sp/>message,<sp/>and<sp/>end_sysex()<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>called<sp/>when<sp/>an<sp/>EOX<sp/>or<sp/>non-real-time<sp/>status<sp/>is<sp/>found.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>errors<sp/>are<sp/>detected,<sp/>Pm_Write()<sp/>returns<sp/>immediately,<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>so<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>this<sp/>will<sp/>drop<sp/>data<sp/>and<sp/>leave</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>sysex<sp/>messages<sp/>in<sp/>a<sp/>partially<sp/>transmitted<sp/>state.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>buffer[i].message;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>this<sp/>a<sp/>sysex<sp/>message?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pm_MessageStatus(msg)<sp/>==<sp/>MIDI_SYSEX)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_in_progress)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error:<sp/>previous<sp/>sysex<sp/>was<sp/>not<sp/>terminated<sp/>by<sp/>EOX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadData;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;begin_sysex)(midi,<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i].timestamp))<sp/>!=<sp/>pmNoError)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;write_byte)(midi,<sp/>MIDI_SYSEX,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i].timestamp))<sp/>!=<sp/>pmNoError)<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>to<sp/>continue<sp/>sysex<sp/>processing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((msg<sp/>&amp;<sp/>MIDI_STATUS_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Pm_MessageStatus(msg)<sp/>!=<sp/>MIDI_EOX))<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>non-sysex<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_in_progress)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>should<sp/>be<sp/>a<sp/>realtime<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_real_time(msg))<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;write_realtime)(midi,<sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(buffer[i])))<sp/>!=<sp/>pmNoError)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadData;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ignore<sp/>any<sp/>error<sp/>from<sp/>this,<sp/>because<sp/>we<sp/>already<sp/>have<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>0<sp/>as<sp/>timestamp<sp/>--<sp/>it&apos;s<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*midi-&gt;dictionary-&gt;end_sysex)(midi,<sp/>0);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>regular<sp/>short<sp/>midi<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;write_short)(midi,<sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(buffer[i])))<sp/>!=<sp/>pmNoError)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_in_progress)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>send<sp/>sysex<sp/>bytes<sp/>until<sp/>EOX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we<sp/>can<sp/>accelerate<sp/>data<sp/>transfer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>midi-&gt;fill_base<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">/*<sp/>4<sp/>bytes<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*midi-&gt;fill_offset_ptr)<sp/>+<sp/>4<sp/>&lt;=<sp/>midi-&gt;fill_length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(msg<sp/>&amp;<sp/>0x80808080)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>4<sp/>bytes<sp/>from<sp/>msg<sp/>to<sp/>fill_base<sp/>+<sp/>fill_offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>midi-&gt;fill_base<sp/>+<sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(midi-&gt;fill_offset_ptr);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[0]<sp/>=<sp/>msg;<sp/>ptr[1]<sp/>=<sp/>msg<sp/>&gt;&gt;<sp/>8;<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[2]<sp/>=<sp/>msg<sp/>&gt;&gt;<sp/>18;<sp/>ptr[3]<sp/>=<sp/>msg<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*midi-&gt;fill_offset_ptr)<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>acceleration,<sp/>so<sp/>do<sp/>byte-by-byte<sp/>copying<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>midi_byte<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(msg<sp/>&gt;&gt;<sp/>bits);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;write_byte)(midi,<sp/>midi_byte,<sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i].timestamp))<sp/>!=<sp/>pmNoError)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi_byte<sp/>==<sp/>MIDI_EOX)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pm_end_sysex(midi);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_exit;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>from<sp/>while<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>in<sp/>sysex<sp/>mode,<sp/>but<sp/>message<sp/>did<sp/>not<sp/>start<sp/>with<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadData;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>pm_write_error;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>after<sp/>all<sp/>messages<sp/>are<sp/>processed,<sp/>send<sp/>the<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!midi-&gt;sysex_in_progress)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;write_flush)(midi,<sp/>0);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">pm_write_error:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal">error_exit:</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">PmError<sp/>Pm_WriteShort(PortMidiStream<sp/>*stream,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>when,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msg)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>event;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.timestamp<sp/>=<sp/>when;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.message<sp/>=<sp/>msg;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Pm_Write(stream,<sp/>&amp;event,<sp/>1);</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">PmError<sp/>Pm_WriteSysEx(PortMidiStream<sp/>*stream,<sp/>PmTimestamp<sp/>when,<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>buffer<sp/>space<sp/>for<sp/>PM_DEFAULT_SYSEX_BUFFER_SIZE<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>PmEvent<sp/>holds<sp/>sizeof(PmMessage)<sp/>bytes<sp/>of<sp/>sysex<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BUFLEN<sp/>(PM_DEFAULT_SYSEX_BUFFER_SIZE<sp/>/<sp/>sizeof(PmMessage))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>buffer[BUFLEN];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_size<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>first<sp/>time,<sp/>send<sp/>1.<sp/>After<sp/>that,<sp/>it&apos;s<sp/>BUFLEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>next<sp/>byte<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>represented<sp/>by<sp/>an<sp/>index,<sp/>bufx,<sp/>and</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>shift<sp/>in<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0].message<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0].timestamp<sp/>=<sp/>when;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>next<sp/>byte<sp/>into<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[bufx].message<sp/>|=<sp/>((*msg)<sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*msg++<sp/>==<sp/>MIDI_EOX)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufx++;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufx<sp/>==<sp/>buffer_size)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>Pm_Write(stream,<sp/>buffer,<sp/>buffer_size);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note:<sp/>Pm_Write<sp/>has<sp/>already<sp/>called<sp/>errmsg()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prepare<sp/>to<sp/>fill<sp/>another<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>=<sp/>BUFLEN;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optimization:<sp/>maybe<sp/>we<sp/>can<sp/>just<sp/>copy<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;fill_base)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmError<sp/>err;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*(midi-&gt;fill_offset_ptr)<sp/>&lt;<sp/>midi-&gt;fill_length)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;fill_base[(*midi-&gt;fill_offset_ptr)++]<sp/>=<sp/>*msg;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*msg++<sp/>==<sp/>MIDI_EOX)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pm_end_sysex(midi);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end_of_sysex;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>thought<sp/>that<sp/>I<sp/>could<sp/>do<sp/>a<sp/>pm_Write<sp/>here<sp/>and</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>change<sp/>this<sp/>if<sp/>to<sp/>a<sp/>loop,<sp/>avoiding<sp/>calls<sp/>in<sp/>Pm_Write</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>slower<sp/>write_byte,<sp/>but<sp/>since<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sysex_in_progress<sp/>is<sp/>true,<sp/>this<sp/>will<sp/>not<sp/>flush</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>buffer,<sp/>and<sp/>we&apos;ll<sp/>infinite<sp/>loop:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>err<sp/>=<sp/>Pm_Write(stream,<sp/>buffer,<sp/>0);</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>err;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>instead,<sp/>the<sp/>way<sp/>this<sp/>works<sp/>is<sp/>that<sp/>Pm_Write<sp/>calls</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>write_byte<sp/>on<sp/>4<sp/>bytes.<sp/>The<sp/>first,<sp/>since<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>full,<sp/>will<sp/>flush<sp/>the<sp/>buffer<sp/>and<sp/>allocate<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>one.<sp/>This<sp/>primes<sp/>the<sp/>buffer<sp/>so</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>we<sp/>can<sp/>return<sp/>to<sp/>the<sp/>loop<sp/>above<sp/>and<sp/>fill<sp/>it</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>efficiently<sp/>without<sp/>a<sp/>lot<sp/>of<sp/>function<sp/>calls.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>get<sp/>another<sp/>message<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[bufx].message<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[bufx].timestamp<sp/>=<sp/>when;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>inserting<sp/>bytes<sp/>until<sp/>you<sp/>find<sp/>MIDI_EOX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal">end_of_sysex:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;re<sp/>finished<sp/>sending<sp/>full<sp/>buffers,<sp/>but<sp/>there<sp/>may</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>be<sp/>a<sp/>partial<sp/>one<sp/>left.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>0)<sp/>bufx++;<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>partial<sp/>message<sp/>to<sp/>buffer<sp/>len<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufx)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>bufx<sp/>is<sp/>number<sp/>of<sp/>PmEvents<sp/>to<sp/>send<sp/>from<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>Pm_Write(stream,<sp/>buffer,<sp/>bufx);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">PmError<sp/>Pm_OpenInput(PortMidiStream**<sp/>stream,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmDeviceID<sp/>inputDevice,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*inputDriverInfo,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bufferSize,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimeProcPtr<sp/>time_proc,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputDevice<sp/>&lt;<sp/>0<sp/>||<sp/>inputDevice<sp/>&gt;=<sp/>pm_descriptor_index)<sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInvalidDeviceId;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[inputDevice].pub.input)<sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(descriptors[inputDevice].pub.opened)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>portMidi<sp/>internal<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>pm_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref>));<sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>midi;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!midi)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInsufficientMemory;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;device_id<sp/>=<sp/>inputDevice;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;write_flag<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;time_proc<sp/>=<sp/>time_proc;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;time_info<sp/>=<sp/>time_info;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>windows<sp/>adds<sp/>timestamps<sp/>in<sp/>the<sp/>driver<sp/>and<sp/>these<sp/>are<sp/>more<sp/>accurate<sp/>than</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>a<sp/>time_proc,<sp/>so<sp/>do<sp/>not<sp/>automatically<sp/>provide<sp/>a<sp/>time<sp/>proc.<sp/>Non-win</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implementations<sp/>may<sp/>want<sp/>to<sp/>provide<sp/>a<sp/>default<sp/>time_proc<sp/>in<sp/>their</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system-specific<sp/>midi_out_open()<sp/>method.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufferSize<sp/>&lt;=<sp/>0)<sp/>bufferSize<sp/>=<sp/>256;<sp/></highlight><highlight class="comment">/*<sp/>default<sp/>buffer<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;queue<sp/>=<sp/>Pm_QueueCreate(bufferSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_pm_event" kindref="compound">PmEvent</ref>));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!midi-&gt;queue)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>portMidi<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(midi);<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInsufficientMemory;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;buffer_len<sp/>=<sp/>bufferSize;<sp/></highlight><highlight class="comment">/*<sp/>portMidi<sp/>input<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;latency<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message_count<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;filters<sp/>=<sp/>PM_FILT_ACTIVE;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;channel_mask<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sync_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;first_message<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;dictionary<sp/>=<sp/>descriptors[inputDevice].dictionary;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_base<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_offset_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[inputDevice].internalDescriptor<sp/>=<sp/>midi;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>open<sp/>system<sp/>dependent<sp/>input<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;open)(midi,<sp/>inputDriverInfo);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors[inputDevice].internalDescriptor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>portMidi<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pm_QueueDestroy(midi-&gt;queue);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(midi);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>portMidi<sp/>input<sp/>open<sp/>successful<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors[inputDevice].pub.opened<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal">error_return:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note:<sp/>if<sp/>there<sp/>is<sp/>a<sp/>pmHostError,<sp/>it<sp/>is<sp/>the<sp/>responsibility</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>system-dependent<sp/>code<sp/>(*midi-&gt;dictionary-&gt;open)()</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>set<sp/>pm_hosterror<sp/>and<sp/>pm_hosterror_text</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">PmError<sp/>Pm_OpenOutput(PortMidiStream**<sp/>stream,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmDeviceID<sp/>outputDevice,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*outputDriverInfo,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bufferSize,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimeProcPtr<sp/>time_proc,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>latency<sp/>)<sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/><sp/>NULL;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputDevice<sp/>&lt;<sp/>0<sp/>||<sp/>outputDevice<sp/>&gt;=<sp/>pm_descriptor_index)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInvalidDeviceId;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[outputDevice].pub.output)<sp/></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInvalidDeviceId;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descriptors[outputDevice].pub.opened)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInvalidDeviceId;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>portMidi<sp/>internal<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>pm_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref>));<sp/></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>midi;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!midi)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmInsufficientMemory;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;device_id<sp/>=<sp/>outputDevice;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;write_flag<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;time_proc<sp/>=<sp/>time_proc;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>latency<sp/>&gt;<sp/>0,<sp/>we<sp/>need<sp/>a<sp/>time<sp/>reference.<sp/>If<sp/>none<sp/>is<sp/>provided,</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>PortTime<sp/>library<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_proc<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>latency<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Pt_Started())<sp/></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pt_Start(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>time_get<sp/>does<sp/>not<sp/>take<sp/>a<sp/>parameter,<sp/>so<sp/>coerce<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;time_proc<sp/>=<sp/>(PmTimeProcPtr)<sp/>Pt_Time;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;time_info<sp/>=<sp/>time_info;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;buffer_len<sp/>=<sp/>bufferSize;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;queue<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>unused<sp/>by<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>latency<sp/>zero,<sp/>output<sp/>immediate<sp/>(timestamps<sp/>ignored)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>latency<sp/>&lt;<sp/>0,<sp/>use<sp/>0<sp/>but<sp/>don&apos;t<sp/>return<sp/>an<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latency<sp/>&lt;<sp/>0)<sp/>latency<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;latency<sp/>=<sp/>latency;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>unused<sp/>by<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message_count<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>unused<sp/>by<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;filters<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>used<sp/>for<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;channel_mask<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sync_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;first_message<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;dictionary<sp/>=<sp/>descriptors[outputDevice].dictionary;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_base<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_offset_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;fill_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[outputDevice].internalDescriptor<sp/>=<sp/>midi;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>open<sp/>system<sp/>dependent<sp/>output<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;open)(midi,<sp/>outputDriverInfo);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors[outputDevice].internalDescriptor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>portMidi<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(midi);<sp/></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>portMidi<sp/>input<sp/>open<sp/>successful<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptors[outputDevice].pub.opened<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal">error_return:</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note:<sp/>system-dependent<sp/>code<sp/>must<sp/>set<sp/>pm_hosterror<sp/>and</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pm_hosterror_text<sp/>if<sp/>a<sp/>pmHostError<sp/>occurs</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">PmError<sp/>Pm_SetChannelMask(PortMidiStream<sp/>*stream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask)</highlight></codeline>
<codeline lineno="796"><highlight class="normal">{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;channel_mask<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">PmError<sp/>Pm_SetFilter(PortMidiStream<sp/>*stream,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>filters)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;filters<sp/>=<sp/>filters;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal">PmError<sp/>Pm_Close(<sp/>PortMidiStream<sp/>*stream<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err<sp/>=<sp/>pmNoError;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi<sp/>==<sp/>NULL)<sp/></highlight><highlight class="comment">/*<sp/>midi<sp/>must<sp/>point<sp/>to<sp/>something<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>it<sp/>is<sp/>an<sp/>open<sp/>device,<sp/>the<sp/>device_id<sp/>will<sp/>be<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;device_id<sp/>&lt;<sp/>0<sp/>||<sp/>midi-&gt;device_id<sp/>&gt;=<sp/>pm_descriptor_index)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>the<sp/>device<sp/>should<sp/>be<sp/>in<sp/>the<sp/>opened<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>pmNoError)<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_return;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>close<sp/>the<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;close)(midi);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>if<sp/>an<sp/>error<sp/>occurred,<sp/>continue<sp/>with<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[midi-&gt;device_id].internalDescriptor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptors[midi-&gt;device_id].pub.opened<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;queue)<sp/>Pm_QueueDestroy(midi-&gt;queue);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_free(midi);<sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal">error_return:</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>system<sp/>dependent<sp/>code<sp/>must<sp/>set<sp/>pm_hosterror<sp/>and</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pm_hosterror_text<sp/>if<sp/>a<sp/>pmHostError<sp/>occurs.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">PmError<sp/>Pm_Abort(<sp/>PortMidiStream*<sp/>stream<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi<sp/>=<sp/>(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*)<sp/>stream;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>err;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.output)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!descriptors[midi-&gt;device_id].pub.opened)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>(*midi-&gt;dictionary-&gt;abort)(midi);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>pmHostError)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;dictionary-&gt;host_error(midi,<sp/>pm_hosterror_text,<sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PM_HOST_ERROR_MSG_LEN);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_hosterror<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm_errmsg(err);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_channel_filtered<sp/>returns<sp/>non-zero<sp/>if<sp/>the<sp/>channel<sp/>mask<sp/>is<sp/>blocking<sp/>the<sp/>current<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pm_channel_filtered(status,<sp/>mask)<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((status)<sp/>&amp;<sp/>0xF0)<sp/>!=<sp/>0xF0)<sp/>&amp;&amp;<sp/>(!(Pm_Channel((status)<sp/>&amp;<sp/>0x0F)<sp/>&amp;<sp/>(mask))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>will<sp/>checks<sp/>to<sp/>see<sp/>if<sp/>a<sp/>MIDI<sp/>message<sp/>matches</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/>the<sp/>filtering<sp/>criteria.<sp/><sp/>Since<sp/>the<sp/>sysex<sp/>routines<sp/>only<sp/>want<sp/>to<sp/>filter<sp/>realtime<sp/>messages,</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/>we<sp/>need<sp/>to<sp/>have<sp/>separate<sp/>routines.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_realtime_filtered<sp/>returns<sp/>non-zero<sp/>if<sp/>the<sp/>filter<sp/>will<sp/>kill<sp/>the<sp/>current<sp/>message.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>only<sp/>realtime<sp/>messages<sp/>are<sp/>checked<sp/>here.</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pm_realtime_filtered(status,<sp/>filters)<sp/>\</highlight></codeline>
<codeline lineno="895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((status)<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xF0)<sp/>&amp;&amp;<sp/>((1<sp/>&lt;&lt;<sp/>((status)<sp/>&amp;<sp/>0xF))<sp/>&amp;<sp/>(filters)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>((status<sp/>==<sp/>MIDI_ACTIVE)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_ACTIVE))</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_CLOCK)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_CLOCK))</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_START)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_PLAY))</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_STOP)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_PLAY))</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_CONTINUE)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_PLAY))</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_F9)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_F9))</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_FD)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_FD))</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_RESET)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_RESET))</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_MTC)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_MTC))</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_SONGPOS)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_SONG_POSITION))</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_SONGSEL)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_SONG_SELECT))</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_TUNE)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_TUNE));</highlight></codeline>
<codeline lineno="910"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_status_filtered<sp/>returns<sp/>non-zero<sp/>if<sp/>a<sp/>filter<sp/>will<sp/>kill<sp/>the<sp/>current<sp/>message,<sp/>based<sp/>on<sp/>status.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>sysex<sp/>and<sp/>real<sp/>time<sp/>are<sp/>not<sp/>checked.<sp/><sp/>It<sp/>is<sp/>up<sp/>to<sp/>the<sp/>subsystem<sp/>(winmm,<sp/>core<sp/>midi,<sp/>alsa)</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/>to<sp/>filter<sp/>sysex,<sp/>as<sp/>it<sp/>is<sp/>handled<sp/>more<sp/>easily<sp/>and<sp/>efficiently<sp/>at<sp/>that<sp/>level.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/>Realtime<sp/>message<sp/>are<sp/>filtered<sp/>in<sp/>pm_realtime_filtered.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pm_status_filtered(status,<sp/>filters)<sp/>((1<sp/>&lt;&lt;<sp/>(16<sp/>+<sp/>((status)<sp/>&gt;&gt;<sp/>4)))<sp/>&amp;<sp/>(filters))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/><sp/>((status<sp/>==<sp/>MIDI_NOTE_ON)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_NOTE))</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_NOTE_OFF)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_NOTE))</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_CHANNEL_AT)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_CHANNEL_AFTERTOUCH))</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_POLY_AT)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_POLY_AFTERTOUCH))</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_PROGRAM)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_PROGRAM))</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_CONTROL)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_CONTROL))</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>((status<sp/>==<sp/>MIDI_PITCHBEND)<sp/>&amp;&amp;<sp/>(filters<sp/>&amp;<sp/>PM_FILT_PITCHBEND));</highlight></codeline>
<codeline lineno="929"><highlight class="comment"></highlight></codeline>
<codeline lineno="930"><highlight class="comment">}</highlight></codeline>
<codeline lineno="931"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_flush_sysex(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/>PmTimestamp<sp/>timestamp)</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>event;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>may<sp/>be<sp/>nothing<sp/>in<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_message_count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>flush<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.message<sp/>=<sp/>midi-&gt;sysex_message;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.timestamp<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copied<sp/>from<sp/>pm_read_short,<sp/>avoids<sp/>filtering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pm_Enqueue(midi-&gt;queue,<sp/>&amp;event)<sp/>==<sp/>pmBufferOverflow)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>midi-&gt;sysex_message<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_read_short<sp/>and<sp/>pm_read_bytes</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/>are<sp/>the<sp/>interface<sp/>between<sp/>system-dependent<sp/>MIDI<sp/>input<sp/>handlers</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/>and<sp/>the<sp/>system-independent<sp/>PortMIDI<sp/>code.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/>The<sp/>input<sp/>handler<sp/>MUST<sp/>obey<sp/>these<sp/>rules:</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/>1)<sp/>all<sp/>short<sp/>input<sp/>messages<sp/>must<sp/>be<sp/>sent<sp/>to<sp/>pm_read_short,<sp/>which</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>enqueues<sp/>them<sp/>to<sp/>a<sp/>FIFO<sp/>for<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/><sp/>2)<sp/>eash<sp/>buffer<sp/>of<sp/>sysex<sp/>bytes<sp/>should<sp/>be<sp/>reported<sp/>by<sp/>calling<sp/>pm_read_bytes</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(which<sp/>sets<sp/>midi-&gt;sysex_in_progress).<sp/>After<sp/>the<sp/>eox<sp/>byte,<sp/></highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pm_read_bytes<sp/>will<sp/>clear<sp/>sysex_in_progress</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_read_short<sp/>is<sp/>the<sp/>place<sp/>where<sp/>all<sp/>input<sp/>messages<sp/>arrive<sp/>from<sp/></highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/>system-dependent<sp/>code<sp/>such<sp/>as<sp/>pmwinmm.c.<sp/>Here,<sp/>the<sp/>messages</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/><sp/><sp/>are<sp/>entered<sp/>into<sp/>the<sp/>PortMidi<sp/>input<sp/>buffer.<sp/></highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_read_short(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*event)</highlight></codeline>
<codeline lineno="967"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(midi<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>midi<sp/>filtering<sp/>is<sp/>applied<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>Pm_MessageStatus(event-&gt;message);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pm_status_filtered(status,<sp/>midi-&gt;filters)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(!is_real_time(status)<sp/>||<sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pm_realtime_filtered(status,<sp/>midi-&gt;filters))</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!pm_channel_filtered(status,<sp/>midi-&gt;channel_mask))<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>sysex<sp/>is<sp/>in<sp/>progress<sp/>and<sp/>we<sp/>get<sp/>a<sp/>status<sp/>byte,<sp/>it<sp/>had</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>better<sp/>be<sp/>a<sp/>realtime<sp/>message<sp/>or<sp/>the<sp/>starting<sp/>SYSEX<sp/>byte;</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise,<sp/>we<sp/>exit<sp/>the<sp/>sysex_in_progress<sp/>state</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_in_progress<sp/>&amp;&amp;<sp/>(status<sp/>&amp;<sp/>MIDI_STATUS_MASK))<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>choices:<sp/>real-time<sp/>or<sp/>not.<sp/>If<sp/>it&apos;s<sp/>real-time,<sp/>then</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>should<sp/>be<sp/>delivered<sp/>as<sp/>a<sp/>sysex<sp/>byte<sp/>because<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>embedded<sp/>in<sp/>a<sp/>sysex<sp/>message</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_real_time(status))<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_message<sp/>|=<sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(status<sp/>&lt;&lt;<sp/>(8<sp/>*<sp/>midi-&gt;sysex_message_count++));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_message_count<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_flush_sysex(midi,<sp/>event-&gt;timestamp);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>otherwise,<sp/>it&apos;s<sp/>not<sp/>real-time.<sp/>This<sp/>interrupts</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>sysex<sp/>message<sp/>in<sp/>progress<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pm_Enqueue(midi-&gt;queue,<sp/>event)<sp/>==<sp/>pmBufferOverflow)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_read_bytes<sp/>--<sp/>read<sp/>one<sp/>(partial)<sp/>sysex<sp/>msg<sp/>from<sp/>MIDI<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*<sp/>returns<sp/>how<sp/>many<sp/>bytes<sp/>processed</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_read_bytes(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>PmTimestamp<sp/>timestamp)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>index<sp/>into<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>event;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.timestamp<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(midi);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>since<sp/>buffers<sp/>may<sp/>not<sp/>have<sp/>multiples<sp/>of<sp/>4<sp/>bytes,</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pm_read_bytes<sp/>may<sp/>be<sp/>called<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>an<sp/>outgoing</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>4-byte<sp/>PortMidi<sp/>message.<sp/>sysex_in_progress<sp/>indicates<sp/>that</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>sysex<sp/>has<sp/>been<sp/>sent<sp/>but<sp/>no<sp/>eox.</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!midi-&gt;sysex_in_progress)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>len)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>process<sp/>all<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte<sp/>=<sp/>data[i++];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>==<sp/>MIDI_SYSEX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pm_realtime_filtered(byte,<sp/>midi-&gt;filters))<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;<sp/></highlight><highlight class="comment">/*<sp/>back<sp/>up<sp/>so<sp/>code<sp/>below<sp/>will<sp/>get<sp/>SYSEX<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>continue<sp/>looping<sp/>below<sp/>to<sp/>process<sp/>msg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>==<sp/>MIDI_EOX)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;<sp/></highlight><highlight class="comment">/*<sp/>done<sp/>with<sp/>one<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>&amp;<sp/>MIDI_STATUS_MASK)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;re<sp/>getting<sp/>MIDI<sp/>but<sp/>no<sp/>sysex<sp/>in<sp/>progress.</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Either<sp/>the<sp/>SYSEX<sp/>status<sp/>byte<sp/>was<sp/>dropped<sp/>or</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>message<sp/>was<sp/>filtered.<sp/>Drop<sp/>the<sp/>data,<sp/>but</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>send<sp/>any<sp/>embedded<sp/>realtime<sp/>bytes.</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>that<sp/>this<sp/>is<sp/>a<sp/>real-time<sp/>message:</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>is<sp/>an<sp/>error<sp/>to<sp/>pass<sp/>non-real-time<sp/>messages</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>pm_read_bytes</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.message<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_read_short(midi,<sp/>&amp;event);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>bytes<sp/>in<sp/>the<sp/>buffer<sp/>are<sp/>processed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now,<sp/>i&lt;len<sp/>implies<sp/>sysex_in_progress.<sp/>If<sp/>sysex_in_progress</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>becomes<sp/>false<sp/>in<sp/>the<sp/>loop,<sp/>there<sp/>must<sp/>have<sp/>been<sp/>an<sp/>overflow</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>we<sp/>can<sp/>just<sp/>drop<sp/>all<sp/>remaining<sp/>bytes<sp/></highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>midi-&gt;sysex_in_progress)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_message_count<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>len<sp/>-<sp/>4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((event.message<sp/>=<sp/>(((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>data[i])<sp/>|<sp/></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>data[i+1])<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>data[i+2])<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>data[i+3])<sp/>&lt;&lt;<sp/>24)))<sp/>&amp;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80808080)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>data,<sp/>no<sp/>status<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pm_Enqueue(midi-&gt;queue,<sp/>&amp;event)<sp/>==<sp/>pmBufferOverflow)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>one<sp/>byte<sp/>at<sp/>a<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte<sp/>=<sp/>data[i++];</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_real_time(byte)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_realtime_filtered(byte,<sp/>midi-&gt;filters))<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>real-time<sp/>data<sp/>is<sp/>filtered,<sp/>so<sp/>omit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_message<sp/>|=<sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(byte<sp/>&lt;&lt;<sp/>(8<sp/>*<sp/>midi-&gt;sysex_message_count++));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>==<sp/>MIDI_EOX)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>midi-&gt;sysex_in_progress<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_flush_sysex(midi,<sp/>event.timestamp);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(midi-&gt;sysex_message_count<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_flush_sysex(midi,<sp/>event.timestamp);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>after<sp/>handling<sp/>at<sp/>least<sp/>one<sp/>non-data<sp/>byte</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>reaching<sp/>a<sp/>4-byte<sp/>message<sp/>boundary,</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>resume<sp/>trying<sp/>to<sp/>send<sp/>4<sp/>at<sp/>a<sp/>time<sp/>in<sp/>outer<sp/>loop</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_common/portmidi.c"/>
  </compounddef>
</doxygen>
