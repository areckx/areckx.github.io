<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="zconf_8h" kind="file" language="C++">
    <compoundname>zconf.h</compoundname>
    <includedby refid="zlib_8h" local="yes">thirdparty/freetype/src/gzip/zlib.h</includedby>
    <invincdepgraph>
      <node id="80119">
        <label>thirdparty/poppler/poppler/FlateEncoder.h</label>
        <link refid="_flate_encoder_8h_source"/>
        <childnode refid="80120" relation="include">
        </childnode>
      </node>
      <node id="80120">
        <label>thirdparty/poppler/poppler/FlateEncoder.cc</label>
        <link refid="_flate_encoder_8cc_source"/>
      </node>
      <node id="80113">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c_source"/>
      </node>
      <node id="80118">
        <label>thirdparty/freetype/src/gzip/zutil.c</label>
        <link refid="zutil_8c_source"/>
      </node>
      <node id="80112">
        <label>thirdparty/freetype/src/gzip/zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80113" relation="include">
        </childnode>
        <childnode refid="80114" relation="include">
        </childnode>
        <childnode refid="80115" relation="include">
        </childnode>
        <childnode refid="80116" relation="include">
        </childnode>
        <childnode refid="80117" relation="include">
        </childnode>
        <childnode refid="80118" relation="include">
        </childnode>
      </node>
      <node id="80111">
        <label>thirdparty/freetype/src/gzip/adler32.c</label>
        <link refid="adler32_8c_source"/>
      </node>
      <node id="80110">
        <label>thirdparty/freetype/src/gzip/zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80111" relation="include">
        </childnode>
        <childnode refid="80112" relation="include">
        </childnode>
        <childnode refid="80119" relation="include">
        </childnode>
        <childnode refid="80121" relation="include">
        </childnode>
        <childnode refid="80122" relation="include">
        </childnode>
      </node>
      <node id="80117">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c_source"/>
      </node>
      <node id="80122">
        <label>thirdparty/qzip/qzip.cpp</label>
        <link refid="qzip_8cpp_source"/>
      </node>
      <node id="80116">
        <label>thirdparty/freetype/src/gzip/inftrees.c</label>
        <link refid="inftrees_8c_source"/>
      </node>
      <node id="80115">
        <label>thirdparty/freetype/src/gzip/inflate.c</label>
        <link refid="inflate_8c_source"/>
      </node>
      <node id="80109">
        <label>thirdparty/freetype/src/gzip/zconf.h</label>
        <link refid="zconf_8h"/>
        <childnode refid="80110" relation="include">
        </childnode>
      </node>
      <node id="80121">
        <label>thirdparty/poppler/poppler/FlateStream.h</label>
        <link refid="_flate_stream_8h_source"/>
      </node>
      <node id="80114">
        <label>thirdparty/freetype/src/gzip/infcodes.c</label>
        <link refid="infcodes_8c_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="zconf_8h_1a2c212835823e3c54a8ab6d95c652660e" prot="public" static="no">
        <name>const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="91" column="13" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a8e9fefb3d20386851ca693946127ab2e" prot="public" static="no">
        <name>MAX_MEM_LEVEL</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="114" column="16" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1abd2f406ac1f9c49236376115d78ccb5b" prot="public" static="no">
        <name>MAX_WBITS</name>
        <initializer>15 /* 32K LZ77 window */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="124" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1aa6c3c093d0900e1d96d07c91b53c1b5d" prot="public" static="no">
        <name>OF</name>
        <param><defname>args</defname></param>
        <initializer>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="146" column="16" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a536e696d558c5277e07cd1c96577e474" prot="public" static="no">
        <name>ZEXPORT</name>
        <param><defname>x</defname></param>
        <initializer>static x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="202" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1ac939b35f6e640959dbd08c829fcc2f79" prot="public" static="no">
        <name>ZEXPORTVA</name>
        <param><defname>x</defname></param>
        <initializer>static x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="205" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a50fd4afa7bd1ec6adea3c1f71be8afbe" prot="public" static="no">
        <name>ZEXTERN</name>
        <param><defname>x</defname></param>
        <initializer>static x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="208" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a366c670f47ce3c2cfc85a5a1185c8f47" prot="public" static="no">
        <name>ZEXTERNDEF</name>
        <param><defname>x</defname></param>
        <initializer>static x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="211" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1aef060b3456fdcc093a7210a762d5f2ed" prot="public" static="no">
        <name>FAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="215" column="12" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a0d112bae8fd35be772185b6ec6bcbe64" prot="public" static="no">
        <name>SEEK_SET</name>
        <initializer>0       /* Seek from beginning of file.  */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="249" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a4c8d0b76b470ba65a43ca46a88320f39" prot="public" static="no">
        <name>SEEK_CUR</name>
        <initializer>1       /* Seek from current position.  */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="250" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1ad2a2e6c114780c3071efd24f16c7f7d8" prot="public" static="no">
        <name>SEEK_END</name>
        <initializer>2       /* Set file pointer to EOF plus &quot;offset&quot; */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="251" column="11" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="zconf_8h_1a8cf4661a88ec12823d7cbdd3fa629eb0" prot="public" static="no">
        <name>z_off_t</name>
        <initializer>long</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="254" column="12" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="zconf_8h_1ae3a497195d617519e5353ea7b417940f" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char Byte</definition>
        <argsstring></argsstring>
        <name>Byte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="219" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1a87d141052bcd5ec8a80812a565c70369" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uInt</definition>
        <argsstring></argsstring>
        <name>uInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="221" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1acd2a5701a3aecf6700d2c66c606ecb40" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long uLong</definition>
        <argsstring></argsstring>
        <name>uLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="222" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1aeb722a888064be47e12d05f692e0f407" prot="public" static="no">
        <type>Byte FAR</type>
        <definition>typedef Byte FAR Bytef</definition>
        <argsstring></argsstring>
        <name>Bytef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="228" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1a0f3f92a9c02f6f688bf081aabf230212" prot="public" static="no">
        <type>char FAR</type>
        <definition>typedef char FAR charf</definition>
        <argsstring></argsstring>
        <name>charf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="230" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1aa857123283d7630b35e9b1d427dd6438" prot="public" static="no">
        <type>int FAR</type>
        <definition>typedef int FAR intf</definition>
        <argsstring></argsstring>
        <name>intf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="231" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1adddbe74608d318334285e01f8a56fa5a" prot="public" static="no">
        <type>uInt FAR</type>
        <definition>typedef uInt FAR uIntf</definition>
        <argsstring></argsstring>
        <name>uIntf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="232" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1a0426a5a0ed418ec4ae15af8281c64254" prot="public" static="no">
        <type>uLong FAR</type>
        <definition>typedef uLong FAR uLongf</definition>
        <argsstring></argsstring>
        <name>uLongf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="233" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1a04c731495379021454c8e61439dc88ec" prot="public" static="no">
        <type>Byte FAR *</type>
        <definition>typedef Byte FAR* voidpf</definition>
        <argsstring></argsstring>
        <name>voidpf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="239" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="zconf_8h_1aa3397ff439b5e076528b04bc9b8b086a" prot="public" static="no">
        <type>Byte *</type>
        <definition>typedef Byte* voidp</definition>
        <argsstring></argsstring>
        <name>voidp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zconf.h" line="240" column="1" bodyfile="thirdparty/freetype/src/gzip/zconf.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>zconf.h<sp/>--<sp/>configuration<sp/>of<sp/>the<sp/>zlib<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Jean-loup<sp/>Gailly.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ZCONF_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ZCONF_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>*really*<sp/>need<sp/>a<sp/>unique<sp/>prefix<sp/>for<sp/>all<sp/>types<sp/>and<sp/>library<sp/>functions,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>compile<sp/>with<sp/>-DZ_PREFIX.<sp/>The<sp/>&quot;standard&quot;<sp/>zlib<sp/>should<sp/>be<sp/>compiled<sp/>without<sp/>it.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Z_PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateInit_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateInit_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateEnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateInit_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflateInit_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateEnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflateEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateInit2_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateInit2_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateSetDictionary<sp/>z_deflateSetDictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateCopy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateCopy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateReset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateReset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>deflateParams<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_deflateParams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateInit2_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflateInit2_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateSetDictionary<sp/>z_inflateSetDictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateSync<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflateSync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateSyncPoint<sp/><sp/><sp/><sp/><sp/>z_inflateSyncPoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>inflateReset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_inflateReset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>compress<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_compress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>compress2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_compress2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>uncompress<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_uncompress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>adler32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_adler32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>crc32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_crc32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>get_crc_table<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_get_crc_table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Byte<sp/><sp/><sp/>z_Byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>uInt<sp/><sp/><sp/>z_uInt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>uLong<sp/><sp/>z_uLong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Bytef<sp/><sp/>z_Bytef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>charf<sp/><sp/>z_charf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>intf<sp/><sp/><sp/>z_intf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>uIntf<sp/><sp/>z_uIntf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>uLongf<sp/>z_uLongf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>voidpf<sp/>z_voidpf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>voidp<sp/><sp/>z_voidp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(_WIN32)<sp/>||<sp/>defined(__WIN32__))<sp/>&amp;&amp;<sp/>!defined(WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(WIN32)<sp/>||<sp/>defined(__386__)<sp/>||<sp/>defined(i386)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>__32BIT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__32BIT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MSDOS__)<sp/>&amp;&amp;<sp/>!defined(MSDOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MSDOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WinCE<sp/>doesn&apos;t<sp/>have<sp/>errno.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NO_ERRNO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>Compile<sp/>with<sp/>-DMAXSEG_64K<sp/>if<sp/>the<sp/>alloc<sp/>function<sp/>cannot<sp/>allocate<sp/>more</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>than<sp/>64k<sp/>bytes<sp/>at<sp/>a<sp/>time<sp/>(needed<sp/>on<sp/>systems<sp/>with<sp/>16-bit<sp/>int).</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSDOS)<sp/>&amp;&amp;<sp/>!defined(__32BIT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAXSEG_64K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MSDOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>UNALIGNED_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(MSDOS)<sp/>||<sp/>defined(_WINDOWS)<sp/>||<sp/>defined(WIN32))<sp/><sp/>&amp;&amp;<sp/>!defined(STDC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__STDC__)<sp/>||<sp/>defined(__cplusplus)<sp/>||<sp/>defined(__OS2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>const<sp/></highlight><highlight class="comment">/*<sp/>cannot<sp/>use<sp/>!defined(STDC)<sp/>&amp;&amp;<sp/>!defined(const)<sp/>on<sp/>Mac<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>Mac<sp/>compilers<sp/>merge<sp/>all<sp/>.h<sp/>files<sp/>incorrectly:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MWERKS__)<sp/>||<sp/>defined(applec)<sp/>||defined(THINK_C)<sp/>||defined(__SC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NO_DUMMY_DECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Old<sp/>Borland<sp/>C<sp/>and<sp/>LCC<sp/>incorrectly<sp/>complains<sp/>about<sp/>missing<sp/>returns:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)<sp/>&amp;&amp;<sp/>(__BORLANDC__<sp/>&lt;<sp/>0x500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NEED_DUMMY_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__LCC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/><sp/>NEED_DUMMY_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>value<sp/>for<sp/>memLevel<sp/>in<sp/>deflateInit2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_MEM_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>MAXSEG_64K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>MAX_MEM_LEVEL<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>MAX_MEM_LEVEL<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>value<sp/>for<sp/>windowBits<sp/>in<sp/>deflateInit2<sp/>and<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>WARNING:<sp/>reducing<sp/>MAX_WBITS<sp/>makes<sp/>minigzip<sp/>unable<sp/>to<sp/>extract<sp/>.gz<sp/>files</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>created<sp/>by<sp/>gzip.<sp/>(Files<sp/>created<sp/>by<sp/>minigzip<sp/>can<sp/>still<sp/>be<sp/>extracted<sp/>by</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>gzip.)</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_WBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAX_WBITS<sp/><sp/><sp/>15<sp/></highlight><highlight class="comment">/*<sp/>32K<sp/>LZ77<sp/>window<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>requirements<sp/>for<sp/>deflate<sp/>are<sp/>(in<sp/>bytes):</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(windowBits+2))<sp/>+<sp/><sp/>(1<sp/>&lt;&lt;<sp/>(memLevel+9))</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>that<sp/>is:<sp/>128K<sp/>for<sp/>windowBits=15<sp/><sp/>+<sp/><sp/>128K<sp/>for<sp/>memLevel<sp/>=<sp/>8<sp/><sp/>(default<sp/>values)</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>plus<sp/>a<sp/>few<sp/>kilobytes<sp/>for<sp/>small<sp/>objects.<sp/>For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>reduce</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>the<sp/>default<sp/>memory<sp/>requirements<sp/>from<sp/>256K<sp/>to<sp/>128K,<sp/>compile<sp/>with</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>make<sp/>CFLAGS=&quot;-O<sp/>-DMAX_WBITS=14<sp/>-DMAX_MEM_LEVEL=7&quot;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>Of<sp/>course<sp/>this<sp/>will<sp/>generally<sp/>degrade<sp/>compression<sp/>(there&apos;s<sp/>no<sp/>free<sp/>lunch).</highlight></codeline>
<codeline lineno="134"><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>The<sp/>memory<sp/>requirements<sp/>for<sp/>inflate<sp/>are<sp/>(in<sp/>bytes)<sp/>1<sp/>&lt;&lt;<sp/>windowBits</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>that<sp/>is,<sp/>32K<sp/>for<sp/>windowBits=15<sp/>(default<sp/>value)<sp/>plus<sp/>a<sp/>few<sp/>kilobytes</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>for<sp/>small<sp/>objects.</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OF<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>prototypes<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>OF(args)<sp/><sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>OF(args)<sp/><sp/>()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>definitions<sp/>for<sp/>FAR<sp/>are<sp/>needed<sp/>only<sp/>for<sp/>MSDOS<sp/>mixed</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>model<sp/>programming<sp/>(small<sp/>or<sp/>medium<sp/>model<sp/>with<sp/>some<sp/>far<sp/>allocations).</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>This<sp/>was<sp/>tested<sp/>only<sp/>with<sp/>MSC;<sp/>for<sp/>other<sp/>MSDOS<sp/>compilers<sp/>you<sp/>may<sp/>have</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>to<sp/>define<sp/>NO_MEMCPY<sp/>in<sp/>zutil.h.<sp/><sp/>If<sp/>you<sp/>don&apos;t<sp/>need<sp/>the<sp/>mixed<sp/>model,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>just<sp/>define<sp/>FAR<sp/>to<sp/>be<sp/>empty.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(M_I86SM)<sp/>||<sp/>defined(M_I86MM))<sp/>&amp;&amp;<sp/>!defined(__32BIT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSC<sp/>small<sp/>or<sp/>medium<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SMALL_MEDIUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FAR<sp/>_far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FAR<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)<sp/>&amp;&amp;<sp/>(defined(__SMALL__)<sp/>||<sp/>defined(__MEDIUM__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>__32BIT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SMALL_MEDIUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FAR<sp/>_far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compile<sp/>with<sp/>-DZLIB_DLL<sp/>for<sp/>Windows<sp/>DLL<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ZLIB_DLL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_WINDOWS)<sp/>||<sp/>defined(WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>FAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>undef<sp/>FAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>ZEXPORT(x)<sp/><sp/>x<sp/>WINAPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORTVA(x)<sp/><sp/>x<sp/>WINAPIV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORTVA(x)<sp/><sp/>x<sp/>FAR<sp/>_cdecl<sp/>_export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined<sp/>(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>(__BORLANDC__<sp/>&gt;=<sp/>0x0500)<sp/>&amp;&amp;<sp/>defined<sp/>(WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORT(x)<sp/>x<sp/>__declspec(dllexport)<sp/>WINAPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORTRVA(x)<sp/><sp/>x<sp/>__declspec(dllexport)<sp/>WINAPIV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>defined<sp/>(_Windows)<sp/>&amp;&amp;<sp/>defined<sp/>(__DLL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORT(x)<sp/>x<sp/>_export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>ZEXPORTVA(x)<sp/>x<sp/>_export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ZEXPORT(x)<sp/><sp/><sp/>static<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEXPORTVA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ZEXPORTVA(x)<sp/><sp/><sp/>static<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEXTERN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ZEXTERN(x)<sp/>static<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEXTERNDEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ZEXTERNDEF(x)<sp/><sp/>static<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>FAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MACOS)<sp/>&amp;&amp;<sp/>!defined(TARGET_OS_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>Byte;<sp/><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>uInt;<sp/><sp/></highlight><highlight class="comment">/*<sp/>16<sp/>bits<sp/>or<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>uLong;<sp/></highlight><highlight class="comment">/*<sp/>32<sp/>bits<sp/>or<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SMALL_MEDIUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Borland<sp/>C/C++<sp/>and<sp/>some<sp/>old<sp/>MSC<sp/>versions<sp/>ignore<sp/>FAR<sp/>inside<sp/>typedef<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Bytef<sp/>Byte<sp/>FAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Byte<sp/><sp/>FAR<sp/>Bytef;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>FAR<sp/>charf;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>FAR<sp/>intf;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uInt<sp/><sp/>FAR<sp/>uIntf;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uLong<sp/>FAR<sp/>uLongf;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*voidpf;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*voidp;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Byte<sp/>FAR<sp/>*voidpf;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Byte<sp/><sp/><sp/><sp/><sp/>*voidp;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>off_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>SEEK_*<sp/>and<sp/>off_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>z_off_t<sp/><sp/>off_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEEK_SET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Seek<sp/>from<sp/>beginning<sp/>of<sp/>file.<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_CUR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Seek<sp/>from<sp/>current<sp/>position.<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>file<sp/>pointer<sp/>to<sp/>EOF<sp/>plus<sp/>&quot;offset&quot;<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>z_off_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/><sp/>z_off_t<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MVS<sp/>linker<sp/>does<sp/>not<sp/>support<sp/>external<sp/>names<sp/>larger<sp/>than<sp/>8<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MVS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(deflateInit_,&quot;DEIN&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(deflateInit2_,&quot;DEIN2&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(deflateEnd,&quot;DEEND&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflateInit_,&quot;ININ&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflateInit2_,&quot;ININ2&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflateEnd,&quot;INEND&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflateSync,&quot;INSY&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflateSetDictionary,&quot;INSEDI&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_blocks,&quot;INBL&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_blocks_new,&quot;INBLNE&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_blocks_free,&quot;INBLFR&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_blocks_reset,&quot;INBLRE&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_codes_free,&quot;INCOFR&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_codes,&quot;INCO&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_fast,&quot;INFA&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_flush,&quot;INFLU&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_mask,&quot;INMA&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_set_dictionary,&quot;INSEDI2&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_copyright,&quot;INCOPY&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_trees_bits,&quot;INTRBI&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_trees_dynamic,&quot;INTRDY&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_trees_fixed,&quot;INTRFI&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>map(inflate_trees_free,&quot;INTRFR&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ZCONF_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/zconf.h"/>
  </compounddef>
</doxygen>
