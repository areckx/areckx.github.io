<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_global_params_8cc" kind="file" language="C++">
    <compoundname>GlobalParams.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="_goo_list_8h" local="yes">goo/GooList.h</includes>
    <includes refid="_goo_hash_8h" local="yes">goo/GooHash.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_name_to_char_code_8h" local="yes">NameToCharCode.h</includes>
    <includes refid="_char_code_to_unicode_8h" local="yes">CharCodeToUnicode.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_c_map_8h" local="yes">CMap.h</includes>
    <includes refid="_builtin_font_tables_8h" local="yes">BuiltinFontTables.h</includes>
    <includes refid="_font_encoding_tables_8h" local="yes">FontEncodingTables.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes local="no">strings.h</includes>
    <includes refid="_name_to_unicode_table_8h" local="yes">NameToUnicodeTable.h</includes>
    <includes refid="_unicode_map_tables_8h" local="yes">UnicodeMapTables.h</includes>
    <includes refid="_u_t_f8_8h" local="yes">UTF8.h</includes>
    <incdepgraph>
      <node id="87500">
        <label>stdarg.h</label>
      </node>
      <node id="87532">
        <label>UTF8.h</label>
        <link refid="_u_t_f8_8h_source"/>
      </node>
      <node id="87521">
        <label>assert.h</label>
      </node>
      <node id="87505">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87501" relation="include">
        </childnode>
        <childnode refid="87506" relation="include">
        </childnode>
        <childnode refid="87507" relation="include">
        </childnode>
        <childnode refid="87508" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
      </node>
      <node id="87522">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87498" relation="include">
        </childnode>
        <childnode refid="87523" relation="include">
        </childnode>
        <childnode refid="87511" relation="include">
        </childnode>
      </node>
      <node id="87501">
        <label>stdlib.h</label>
      </node>
      <node id="87496">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87497" relation="include">
        </childnode>
      </node>
      <node id="87526">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87523" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87510">
        <label>NameToCharCode.h</label>
        <link refid="_name_to_char_code_8h_source"/>
        <childnode refid="87511" relation="include">
        </childnode>
      </node>
      <node id="87520">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="87521" relation="include">
        </childnode>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87511" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87519">
        <label>FontEncodingTables.h</label>
        <link refid="_font_encoding_tables_8h_source"/>
      </node>
      <node id="87509">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="87500" relation="include">
        </childnode>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87498" relation="include">
        </childnode>
      </node>
      <node id="87503">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="87502" relation="include">
        </childnode>
      </node>
      <node id="87518">
        <label>BuiltinFont.h</label>
        <link refid="_builtin_font_8h_source"/>
        <childnode refid="87502" relation="include">
        </childnode>
      </node>
      <node id="87527">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87523" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87506">
        <label>stddef.h</label>
      </node>
      <node id="87499">
        <label>limits.h</label>
      </node>
      <node id="87497">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="87494" relation="include">
        </childnode>
      </node>
      <node id="87525">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="87528">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87523" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87514">
        <label>pthread.h</label>
      </node>
      <node id="87508">
        <label>sys/types.h</label>
      </node>
      <node id="87493">
        <label>string.h</label>
      </node>
      <node id="87498">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="87499" relation="include">
        </childnode>
        <childnode refid="87500" relation="include">
        </childnode>
        <childnode refid="87501" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
      </node>
      <node id="87523">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="87524" relation="include">
        </childnode>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87493" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87496" relation="include">
        </childnode>
        <childnode refid="87498" relation="include">
        </childnode>
        <childnode refid="87525" relation="include">
        </childnode>
        <childnode refid="87509" relation="include">
        </childnode>
        <childnode refid="87526" relation="include">
        </childnode>
        <childnode refid="87527" relation="include">
        </childnode>
        <childnode refid="87528" relation="include">
        </childnode>
      </node>
      <node id="87507">
        <label>unistd.h</label>
      </node>
      <node id="87513">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="87514" relation="include">
        </childnode>
      </node>
      <node id="87511">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="87529">
        <label>strings.h</label>
      </node>
      <node id="87531">
        <label>UnicodeMapTables.h</label>
        <link refid="_unicode_map_tables_8h_source"/>
      </node>
      <node id="87530">
        <label>NameToUnicodeTable.h</label>
        <link refid="_name_to_unicode_table_8h_source"/>
        <childnode refid="87511" relation="include">
        </childnode>
        <childnode refid="87506" relation="include">
        </childnode>
      </node>
      <node id="87495">
        <label>ctype.h</label>
      </node>
      <node id="87502">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
      </node>
      <node id="87515">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87511" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87491">
        <label>thirdparty/poppler/poppler/GlobalParams.cc</label>
        <link refid="_global_params_8cc"/>
        <childnode refid="87492" relation="include">
        </childnode>
        <childnode refid="87493" relation="include">
        </childnode>
        <childnode refid="87494" relation="include">
        </childnode>
        <childnode refid="87495" relation="include">
        </childnode>
        <childnode refid="87496" relation="include">
        </childnode>
        <childnode refid="87498" relation="include">
        </childnode>
        <childnode refid="87503" relation="include">
        </childnode>
        <childnode refid="87504" relation="include">
        </childnode>
        <childnode refid="87505" relation="include">
        </childnode>
        <childnode refid="87509" relation="include">
        </childnode>
        <childnode refid="87510" relation="include">
        </childnode>
        <childnode refid="87512" relation="include">
        </childnode>
        <childnode refid="87515" relation="include">
        </childnode>
        <childnode refid="87516" relation="include">
        </childnode>
        <childnode refid="87517" relation="include">
        </childnode>
        <childnode refid="87519" relation="include">
        </childnode>
        <childnode refid="87520" relation="include">
        </childnode>
        <childnode refid="87522" relation="include">
        </childnode>
        <childnode refid="87529" relation="include">
        </childnode>
        <childnode refid="87530" relation="include">
        </childnode>
        <childnode refid="87531" relation="include">
        </childnode>
        <childnode refid="87532" relation="include">
        </childnode>
      </node>
      <node id="87524">
        <label>set</label>
      </node>
      <node id="87492">
        <label>config.h</label>
      </node>
      <node id="87517">
        <label>BuiltinFontTables.h</label>
        <link refid="_builtin_font_tables_8h_source"/>
        <childnode refid="87518" relation="include">
        </childnode>
      </node>
      <node id="87516">
        <label>CMap.h</label>
        <link refid="_c_map_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87511" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
      <node id="87494">
        <label>stdio.h</label>
      </node>
      <node id="87504">
        <label>goo/GooHash.h</label>
        <link refid="_goo_hash_8h_source"/>
        <childnode refid="87502" relation="include">
        </childnode>
      </node>
      <node id="87512">
        <label>CharCodeToUnicode.h</label>
        <link refid="_char_code_to_unicode_8h_source"/>
        <childnode refid="87497" relation="include">
        </childnode>
        <childnode refid="87511" relation="include">
        </childnode>
        <childnode refid="87502" relation="include">
        </childnode>
        <childnode refid="87513" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_sys_font_info" prot="public">SysFontInfo</innerclass>
    <innerclass refid="class_sys_font_list" prot="public">SysFontList</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_global_params_8cc_1a2e05b0d1fd3c8145a2a5cc47b0d0dd19" prot="public" static="no">
        <name>lockGlobalParams</name>
        <initializer>gLockMutex(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="91" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1aef43b62c0eb74e99a87e9c08700dc09c" prot="public" static="no">
        <name>lockUnicodeMapCache</name>
        <initializer>gLockMutex(&amp;unicodeMapCacheMutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="92" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a930e03abf55675a78093517a4bf3d49d" prot="public" static="no">
        <name>lockCMapCache</name>
        <initializer>gLockMutex(&amp;cMapCacheMutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="93" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a844f622ac9f0589b17ac261878675356" prot="public" static="no">
        <name>unlockGlobalParams</name>
        <initializer>gUnlockMutex(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="94" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a1bab0bca2d3d70464ffd16f4ca3f1e8b" prot="public" static="no">
        <name>unlockUnicodeMapCache</name>
        <initializer>gUnlockMutex(&amp;unicodeMapCacheMutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="95" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a6b729a9220a6cb2b31ef993f8460c260" prot="public" static="no">
        <name>unlockCMapCache</name>
        <initializer>gUnlockMutex(&amp;cMapCacheMutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="96" column="11" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a3fa6b867a4f4a26fc2993e86e21d7974" prot="public" static="no">
        <name>FC_WEIGHT_BOOK</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="107" column="9" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a199429407a56f8d5092f0608127a23da" prot="public" static="no">
        <name>cidToUnicodeCacheSize</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="122" column="9" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_global_params_8cc_1a8eafd6cf776c1cfb51f217a7cbcb5713" prot="public" static="no">
        <name>unicodeToUnicodeCacheSize</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="123" column="9" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_global_params_8cc_1abf88c3d5d0b6cbd8fe133894057963ad" prot="public" static="no" mutable="no">
        <type><ref refid="class_global_params" kindref="compound">GlobalParams</ref> *</type>
        <definition>GlobalParams* globalParams</definition>
        <argsstring></argsstring>
        <name>globalParams</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="127" column="1" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_params_8cc_1a8f8f80d37794cde9472343e4487ba3eb" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="1336" column="1" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="1336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_params_8cc_1a6cd0b3e9f96de44da8c73a80a118304d" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* t1FileName</definition>
        <argsstring></argsstring>
        <name>t1FileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="1337" column="1" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="1337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_params_8cc_1a1078786697eb546cd9bffc88a5c059cc" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* ttFileName</definition>
        <argsstring></argsstring>
        <name>ttFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="1338" column="1" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="1338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_params_8cc_1a10b1be2e9387c9b42006e8ed4f46a563" prot="public" static="yes" mutable="no">
        <type>struct @123</type>
        <definition>struct @123  displayFontTab[]</definition>
        <argsstring>[]</argsstring>
        <name>displayFontTab</name>
        <initializer>= {
  {&quot;Courier&quot;,               &quot;n022003l.pfb&quot;, &quot;cour.ttf&quot;},
  {&quot;Courier-Bold&quot;,          &quot;n022004l.pfb&quot;, &quot;courbd.ttf&quot;},
  {&quot;Courier-BoldOblique&quot;,   &quot;n022024l.pfb&quot;, &quot;courbi.ttf&quot;},
  {&quot;Courier-Oblique&quot;,       &quot;n022023l.pfb&quot;, &quot;couri.ttf&quot;},
  {&quot;Helvetica&quot;,             &quot;n019003l.pfb&quot;, &quot;arial.ttf&quot;},
  {&quot;Helvetica-Bold&quot;,        &quot;n019004l.pfb&quot;, &quot;arialbd.ttf&quot;},
  {&quot;Helvetica-BoldOblique&quot;, &quot;n019024l.pfb&quot;, &quot;arialbi.ttf&quot;},
  {&quot;Helvetica-Oblique&quot;,     &quot;n019023l.pfb&quot;, &quot;ariali.ttf&quot;},
  {&quot;Symbol&quot;,                &quot;s050000l.pfb&quot;, NULL},
  {&quot;Times-Bold&quot;,            &quot;n021004l.pfb&quot;, &quot;timesbd.ttf&quot;},
  {&quot;Times-BoldItalic&quot;,      &quot;n021024l.pfb&quot;, &quot;timesbi.ttf&quot;},
  {&quot;Times-Italic&quot;,          &quot;n021023l.pfb&quot;, &quot;timesi.ttf&quot;},
  {&quot;Times-Roman&quot;,           &quot;n021003l.pfb&quot;, &quot;times.ttf&quot;},
  {&quot;ZapfDingbats&quot;,          &quot;d050000l.pfb&quot;, NULL},
  {NULL}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="1355" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_params_8cc_1a6fe68fd8bbec42343ba7622d193b5569" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* displayFontDirs[]</definition>
        <argsstring>[]</argsstring>
        <name>displayFontDirs</name>
        <initializer>= {
  &quot;/usr/share/ghostscript/fonts&quot;,
  &quot;/usr/local/share/ghostscript/fonts&quot;,
  &quot;/usr/share/fonts/default/Type1&quot;,
  &quot;/usr/share/fonts/default/ghostscript&quot;,
  &quot;/usr/share/fonts/type1/gsfonts&quot;,
  NULL
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/GlobalParams.cc" line="1357" column="1" bodyfile="thirdparty/poppler/poppler/GlobalParams.cc" bodystart="1357" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GlobalParams.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2001-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Martin<sp/>Kretzschmar<sp/>&lt;martink@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2006<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2007-2010,<sp/>2012,<sp/>2015<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Jonathan<sp/>Blandford<sp/>&lt;jrb@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2007<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Takashi<sp/>Iwai<sp/>&lt;tiwai@suse.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Ed<sp/>Catmur<sp/>&lt;ed@catmur.co.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Krzysztof<sp/>Kowalczyk<sp/>&lt;kkowalczyk@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2009<sp/>Jonathan<sp/>Kew<sp/>&lt;jonathan_kew@sil.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Petr<sp/>Gajdos<sp/>&lt;pgajdos@novell.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2011,<sp/>2012,<sp/>2015<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Kovid<sp/>Goyal<sp/>&lt;kovid@kovidgoyal.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010,<sp/>2012<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Patrick<sp/>Spendrin<sp/>&lt;ps_ml@gmx.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Jakub<sp/>Wilk<sp/>&lt;jwilk@jwilk.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Yi<sp/>Yang<sp/>&lt;ahyangyi@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Peter<sp/>Breitenlohner<sp/>&lt;peb@mppmu.mpg.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013,<sp/>2014<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;shlobj.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;mbstring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooHash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;NameToCharCode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CharCodeToUnicode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BuiltinFontTables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FontEncodingTables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;XpdfPluginAPI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WITH_FONTCONFIGURATION_FONTCONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fontconfig/fontconfig.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>strcasecmp<sp/>stricmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockGlobalParams<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gLockMutex(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockUnicodeMapCache<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gLockMutex(&amp;unicodeMapCacheMutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockCMapCache<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gLockMutex(&amp;cMapCacheMutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockGlobalParams<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gUnlockMutex(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockUnicodeMapCache<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gUnlockMutex(&amp;unicodeMapCacheMutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockCMapCache<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gUnlockMutex(&amp;cMapCacheMutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockGlobalParams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockUnicodeMapCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>lockCMapCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockGlobalParams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockUnicodeMapCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlockCMapCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FC_WEIGHT_BOOK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FC_WEIGHT_BOOK<sp/>75</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;NameToUnicodeTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMapTables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UTF8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_xpdf_plugin_vec_table" kindref="compound">XpdfPluginVecTable</ref><sp/>xpdfPluginVecTable;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cidToUnicodeCacheSize<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unicodeToUnicodeCacheSize<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="class_global_params" kindref="compound">GlobalParams</ref><sp/>*globalParams<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PSFontParam16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">PSFontParam16::PSFontParam16(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wModeA,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psFontNameA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingA)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>nameA;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>wMode<sp/>=<sp/>wModeA;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>psFontName<sp/>=<sp/>psFontNameA;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>encoding<sp/>=<sp/>encodingA;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">PSFontParam16::~PSFontParam16()<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psFontName;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>encoding;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_RELOCATABLE<sp/>&amp;&amp;<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>search<sp/>for<sp/>data<sp/>relative<sp/>to<sp/>where<sp/>we<sp/>are<sp/>installed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HMODULE<sp/>hmodule;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal">BOOL<sp/>WINAPI</highlight></codeline>
<codeline lineno="155"><highlight class="normal">DllMain<sp/>(HINSTANCE<sp/>hinstDLL,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DWORD<sp/><sp/><sp/><sp/><sp/>fdwReason,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>LPVOID<sp/><sp/><sp/><sp/>lpvReserved)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fdwReason)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DLL_PROCESS_ATTACH:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmodule<sp/>=<sp/>hinstDLL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="normal">get_poppler_datadir<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>retval[MAX_PATH];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beenhere<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beenhere)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetModuleFileName<sp/>(hmodule,<sp/>(CHAR<sp/>*)<sp/>retval,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(retval)<sp/>-<sp/>20))</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>POPPLER_DATADIR;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>_mbsrchr<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>retval,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>_mbsrchr<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>retval,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(p+1),<sp/></highlight><highlight class="stringliteral">&quot;bin&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>strcat<sp/>(retval,<sp/></highlight><highlight class="stringliteral">&quot;\\share\\poppler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>beenhere<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>POPPLER_DATADIR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POPPLER_DATADIR<sp/>get_poppler_datadir<sp/>()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SysFontInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_sys_font_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>GBool<sp/>bold;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>GBool<sp/>italic;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>GBool<sp/>oblique;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>GBool<sp/>fixedWidth;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>SysFontType<sp/>type;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontNum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TrueType<sp/>collections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*substituteName;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA,<sp/>GBool<sp/>obliqueA,<sp/>GBool<sp/>fixedWidthA,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*pathA,<sp/>SysFontType<sp/>typeA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontNumA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*substituteNameA);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>~<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>GBool<sp/>match(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*fi);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>GBool<sp/>match(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA,<sp/>GBool<sp/>obliqueA,<sp/>GBool<sp/>fixedWidthA);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>GBool<sp/>match(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">SysFontInfo::SysFontInfo(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA,<sp/>GBool<sp/>obliqueA,<sp/>GBool<sp/>fixedWidthA,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*pathA,<sp/>SysFontType<sp/>typeA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontNumA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*substituteNameA)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>nameA;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>bold<sp/>=<sp/>boldA;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>italic<sp/>=<sp/>italicA;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>oblique<sp/>=<sp/>obliqueA;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>fixedWidth<sp/>=<sp/>fixedWidthA;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>pathA;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>typeA;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>fontNum<sp/>=<sp/>fontNumA;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>substituteName<sp/>=<sp/>substituteNameA;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">SysFontInfo::~SysFontInfo()<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>substituteName;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">GBool<sp/>SysFontInfo::match(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*fi)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!strcasecmp(name-&gt;getCString(),<sp/>fi-&gt;name-&gt;getCString())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bold<sp/>==<sp/>fi-&gt;bold<sp/>&amp;&amp;<sp/>italic<sp/>==<sp/>fi-&gt;italic<sp/>&amp;&amp;<sp/>oblique<sp/>==<sp/>fi-&gt;oblique<sp/>&amp;&amp;<sp/>fixedWidth<sp/>==<sp/>fi-&gt;fixedWidth;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">GBool<sp/>SysFontInfo::match(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA,<sp/>GBool<sp/>obliqueA,<sp/>GBool<sp/>fixedWidthA)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!strcasecmp(name-&gt;getCString(),<sp/>nameA-&gt;getCString())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bold<sp/>==<sp/>boldA<sp/>&amp;&amp;<sp/>italic<sp/>==<sp/>italicA<sp/>&amp;&amp;<sp/>oblique<sp/>==<sp/>obliqueA<sp/>&amp;&amp;<sp/>fixedWidth<sp/>==<sp/>fixedWidthA;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">GBool<sp/>SysFontInfo::match(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/>GBool<sp/>boldA,<sp/>GBool<sp/>italicA)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!strcasecmp(name-&gt;getCString(),<sp/>nameA-&gt;getCString())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bold<sp/>==<sp/>boldA<sp/>&amp;&amp;<sp/>italic<sp/>==<sp/>italicA;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SysFontList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="class_sys_font_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sys_font_list" kindref="compound">SysFontList</ref><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_list" kindref="compound">SysFontList</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>~<ref refid="class_sys_font_list" kindref="compound">SysFontList</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*find(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name,<sp/>GBool<sp/>isFixedWidth,<sp/>GBool<sp/>exact);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scanWindowsFonts(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*winFontDir);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_FONTCONFIGURATION_FONTCONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFcFont(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*si)<sp/>{fonts-&gt;append(si);}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*makeWindowsFont(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontNum,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*fonts;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[SysFontInfo]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">SysFontList::SysFontList()<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>fonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">SysFontList::~SysFontList()<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>deleteGooList(fonts,<sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*SysFontList::find(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name,<sp/>GBool<sp/>fixedWidth,<sp/>GBool<sp/>exact)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name2;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>GBool<sp/>bold,<sp/>italic,<sp/>oblique;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*fi;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>name2<sp/>=<sp/>name-&gt;copy();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>space,<sp/>comma,<sp/>dash<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>name2-&gt;getLength())<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>name2-&gt;getChar(i);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name2-&gt;del(i);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>name2-&gt;getLength();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>trailing<sp/>&quot;MT&quot;<sp/>(Foo-MT,<sp/>Foo-BoldMT,<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;MT&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>&quot;Regular&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>7<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;Regular&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>7,<sp/>7);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>7;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>&quot;Italic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>6<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>6,<sp/></highlight><highlight class="stringliteral">&quot;Italic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>6,<sp/>6);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>italic<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>6;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>italic<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>&quot;Oblique&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>6<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;Oblique&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>7,<sp/>7);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>oblique<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>6;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>oblique<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>&quot;Bold&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>4<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Bold&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>4,<sp/>4);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>bold<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>bold<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>trailing<sp/>&quot;MT&quot;<sp/>(FooMT-Bold,<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;MT&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>trailing<sp/>&quot;PS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;PS&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>trailing<sp/>&quot;IdentityH&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>9<sp/>&amp;&amp;<sp/>!strcmp(name2-&gt;getCString()<sp/>+<sp/>n<sp/>-<sp/>9,<sp/></highlight><highlight class="stringliteral">&quot;IdentityH&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;del(n<sp/>-<sp/>9,<sp/>9);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>9;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>fi<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fonts-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*)fonts-&gt;get(i);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi-&gt;match(name2,<sp/>bold,<sp/>italic,<sp/>oblique,<sp/>fixedWidth))<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi<sp/>&amp;&amp;<sp/>!exact<sp/>&amp;&amp;<sp/>bold)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>ignoring<sp/>the<sp/>bold<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fonts-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*)fonts-&gt;get(i);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi-&gt;match(name2,<sp/>gFalse,<sp/>italic))<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi<sp/>&amp;&amp;<sp/>!exact<sp/>&amp;&amp;<sp/>(bold<sp/>||<sp/>italic))<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>ignoring<sp/>the<sp/>bold<sp/>and<sp/>italic<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fonts-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>(<ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*)fonts-&gt;get(i);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi-&gt;match(name2,<sp/>gFalse,<sp/>gFalse))<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name2;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fi;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Plugin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Plugin<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Plugin<sp/>*load(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>~Plugin();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>Plugin(HMODULE<sp/>libA);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>HMODULE<sp/>lib;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>Plugin(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dlA);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dl;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">Plugin<sp/>*Plugin::load(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>Plugin<sp/>*plugin;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="struct_xpdf_plugin_vec_table" kindref="compound">XpdfPluginVecTable</ref><sp/>*vt;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>XpdfBool<sp/>(*xpdfInitPlugin)(void);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>HMODULE<sp/>libA;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dlA;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(POPPLER_DATADIR);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>appendToPath(path,<sp/></highlight><highlight class="stringliteral">&quot;plugins&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>appendToPath(path,<sp/>type);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>appendToPath(path,<sp/>name);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>path-&gt;append(</highlight><highlight class="stringliteral">&quot;.dll&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(libA<sp/>=<sp/>LoadLibrary(path-&gt;getCString())))<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>plugin<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(vt<sp/>=<sp/>(<ref refid="struct_xpdf_plugin_vec_table" kindref="compound">XpdfPluginVecTable</ref><sp/>*)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetProcAddress(libA,<sp/></highlight><highlight class="stringliteral">&quot;xpdfPluginVecTable&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>xpdfPluginVecTable<sp/>in<sp/>plugin<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>deal<sp/>with<sp/>other<sp/>extensions<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>path-&gt;append(</highlight><highlight class="stringliteral">&quot;.so&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dlA<sp/>=<sp/>dlopen(path-&gt;getCString(),<sp/>RTLD_NOW)))<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>plugin<sp/>&apos;{0:t}&apos;:<sp/>{1:s}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path,<sp/>dlerror());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(vt<sp/>=<sp/>(<ref refid="struct_xpdf_plugin_vec_table" kindref="compound">XpdfPluginVecTable</ref><sp/>*)dlsym(dlA,<sp/></highlight><highlight class="stringliteral">&quot;xpdfPluginVecTable&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>xpdfPluginVecTable<sp/>in<sp/>plugin<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vt-&gt;version<sp/>!=<sp/>xpdfPluginVecTable.version)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Plugin<sp/>&apos;{0:t}&apos;<sp/>is<sp/>wrong<sp/>version&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>memcpy(vt,<sp/>&amp;xpdfPluginVecTable,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(xpdfPluginVecTable));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(xpdfInitPlugin<sp/>=<sp/>(XpdfBool<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetProcAddress(libA,<sp/></highlight><highlight class="stringliteral">&quot;xpdfInitPlugin&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>xpdfInitPlugin<sp/>in<sp/>plugin<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(xpdfInitPlugin<sp/>=<sp/>(XpdfBool<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))dlsym(dlA,<sp/></highlight><highlight class="stringliteral">&quot;xpdfInitPlugin&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>xpdfInitPlugin<sp/>in<sp/>plugin<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*xpdfInitPlugin)())<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Initialization<sp/>of<sp/>plugin<sp/>&apos;{0:t}&apos;<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>plugin<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Plugin(libA);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>plugin<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Plugin(dlA);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plugin;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>FreeLibrary(libA);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>dlclose(dlA);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">Plugin::Plugin(HMODULE<sp/>libA)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>lib<sp/>=<sp/>libA;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">Plugin::Plugin(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dlA)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>dl<sp/>=<sp/>dlA;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">Plugin::~Plugin()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>void<sp/>(*xpdfFreePlugin)(void);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xpdfFreePlugin<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetProcAddress(lib,<sp/></highlight><highlight class="stringliteral">&quot;xpdfFreePlugin&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>(*xpdfFreePlugin)();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>FreeLibrary(lib);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xpdfFreePlugin<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))dlsym(dl,<sp/></highlight><highlight class="stringliteral">&quot;xpdfFreePlugin&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>(*xpdfFreePlugin)();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>dlclose(dl);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">GlobalParams::GlobalParams(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*customPopplerDataDir)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>:<sp/>popplerDataDir(customPopplerDataDir)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*map;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;unicodeMapCacheMutex);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;cMapCacheMutex);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>initBuiltinFontTables();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>the<sp/>encoding<sp/>in<sp/>reverse<sp/>because<sp/>we<sp/>want<sp/>the<sp/>lowest-numbered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>for<sp/>each<sp/>char<sp/>name<sp/>(&apos;space&apos;<sp/>is<sp/>encoded<sp/>twice)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>macRomanReverseMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_name_to_char_code" kindref="compound">NameToCharCode</ref>();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>255;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(macRomanEncoding[i])<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>macRomanReverseMap-&gt;add(macRomanEncoding[i],<sp/>(CharCode)i);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>substFiles<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>nameToUnicodeZapfDingbats<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_name_to_char_code" kindref="compound">NameToCharCode</ref>();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>nameToUnicodeText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_name_to_char_code" kindref="compound">NameToCharCode</ref>();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>cidToUnicodes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>unicodeToUnicodes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>residentUnicodeMaps<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>unicodeMaps<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>cMapDirs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>toUnicodeDirs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>fontFiles<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>fontDirs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>ccFontFiles<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>sysFonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sys_font_list" kindref="compound">SysFontList</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>psExpandSmaller<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>psShrinkLarger<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>psCenter<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>psLevel<sp/>=<sp/>psLevel2;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>psFile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>psResidentFonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>psResidentFonts16<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>psResidentFontsCC<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>textEncoding<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>textEOL<sp/>=<sp/>eolDOS;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MACOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>textEOL<sp/>=<sp/>eolMac;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>textEOL<sp/>=<sp/>eolUnix;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>textPageBreaks<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>textKeepTinyChars<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>enableFreeType<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>strokeAdjust<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>screenType<sp/>=<sp/>screenUnset;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>screenSize<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>screenDotRadius<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>screenGamma<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>screenBlackThreshold<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>screenWhiteThreshold<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>minLineWidth<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>overprintPreview<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>mapNumericCharNames<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>mapUnknownCharNames<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>printCommands<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>profileCommands<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>errQuiet<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>cidToUnicodeCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_char_code_to_unicode_cache" kindref="compound">CharCodeToUnicodeCache</ref>(cidToUnicodeCacheSize);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>unicodeToUnicodeCache<sp/>=</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_char_code_to_unicode_cache" kindref="compound">CharCodeToUnicodeCache</ref>(unicodeToUnicodeCacheSize);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>unicodeMapCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map_cache" kindref="compound">UnicodeMapCache</ref>();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>cMapCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_map_cache" kindref="compound">CMapCache</ref>();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>baseFontsInitialized<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>plugins<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>securityHandlers<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>initial<sp/>nameToUnicode<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>nameToUnicodeZapfDingbatsTab[i].name;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>nameToUnicodeZapfDingbats-&gt;add(nameToUnicodeZapfDingbatsTab[i].name,<sp/>nameToUnicodeZapfDingbatsTab[i].u);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>nameToUnicodeTextTab[i].name;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>nameToUnicodeText-&gt;add(nameToUnicodeTextTab[i].name,<sp/>nameToUnicodeTextTab[i].u);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>residentUnicodeMaps<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;Latin1&quot;</highlight><highlight class="normal">,<sp/>gFalse,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>latin1UnicodeMapRanges,<sp/>latin1UnicodeMapLen);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;ASCII7&quot;</highlight><highlight class="normal">,<sp/>gFalse,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ascii7UnicodeMapRanges,<sp/>ascii7UnicodeMapLen);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;Symbol&quot;</highlight><highlight class="normal">,<sp/>gFalse,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbolUnicodeMapRanges,<sp/>symbolUnicodeMapLen);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;ZapfDingbats&quot;</highlight><highlight class="normal">,<sp/>gFalse,<sp/>zapfDingbatsUnicodeMapRanges,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zapfDingbatsUnicodeMapLen);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">,<sp/>gTrue,<sp/>&amp;mapUTF8);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>(</highlight><highlight class="stringliteral">&quot;UCS-2&quot;</highlight><highlight class="normal">,<sp/>gTrue,<sp/>&amp;mapUCS2);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;add(map-&gt;getEncodingName(),<sp/>map);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>scanEncodingDirs();</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::scanEncodingDirs()<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="class_g_dir" kindref="compound">GDir</ref><sp/>*dir;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="class_g_dir_entry" kindref="compound">GDirEntry</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dataRoot<sp/>=<sp/>popplerDataDir<sp/>?<sp/>popplerDataDir<sp/>:<sp/>POPPLER_DATADIR;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>buffer<sp/>large<sp/>enough<sp/>to<sp/>append<sp/>&quot;/nameToUnicode&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufSize<sp/>=<sp/>strlen(dataRoot)<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;/nameToUnicode&quot;</highlight><highlight class="normal">)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dataPathBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[bufSize];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>snprintf(dataPathBuffer,<sp/>bufSize,<sp/></highlight><highlight class="stringliteral">&quot;%s/nameToUnicode&quot;</highlight><highlight class="normal">,<sp/>dataRoot);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_g_dir" kindref="compound">GDir</ref>(dataPathBuffer,<sp/>gTrue);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>=<sp/>dir-&gt;getNextEntry(),<sp/>entry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entry-&gt;isDir())<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parseNameToUnicode(entry-&gt;getFullPath());</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>snprintf(dataPathBuffer,<sp/>bufSize,<sp/></highlight><highlight class="stringliteral">&quot;%s/cidToUnicode&quot;</highlight><highlight class="normal">,<sp/>dataRoot);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_g_dir" kindref="compound">GDir</ref>(dataPathBuffer,<sp/>gFalse);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>=<sp/>dir-&gt;getNextEntry(),<sp/>entry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>addCIDToUnicode(entry-&gt;getName(),<sp/>entry-&gt;getFullPath());</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>snprintf(dataPathBuffer,<sp/>bufSize,<sp/></highlight><highlight class="stringliteral">&quot;%s/unicodeMap&quot;</highlight><highlight class="normal">,<sp/>dataRoot);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_g_dir" kindref="compound">GDir</ref>(dataPathBuffer,<sp/>gFalse);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>=<sp/>dir-&gt;getNextEntry(),<sp/>entry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>addUnicodeMap(entry-&gt;getName(),<sp/>entry-&gt;getFullPath());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>snprintf(dataPathBuffer,<sp/>bufSize,<sp/></highlight><highlight class="stringliteral">&quot;%s/cMap&quot;</highlight><highlight class="normal">,<sp/>dataRoot);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_g_dir" kindref="compound">GDir</ref>(dataPathBuffer,<sp/>gFalse);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>=<sp/>dir-&gt;getNextEntry(),<sp/>entry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>addCMapDir(entry-&gt;getName(),<sp/>entry-&gt;getFullPath());</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>toUnicodeDirs-&gt;append(entry-&gt;getFullPath()-&gt;copy());</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dataPathBuffer;</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::parseNameToUnicode(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tok1,<sp/>*tok2;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>Unicode<sp/>u;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tokptr;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>openFile(name-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>&apos;nameToUnicode&apos;<sp/>file<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getLine(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>f))<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>tok1<sp/>=<sp/>strtok_r(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\r\n&quot;</highlight><highlight class="normal">,<sp/>&amp;tokptr);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>tok2<sp/>=<sp/>strtok_r(NULL,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\r\n&quot;</highlight><highlight class="normal">,<sp/>&amp;tokptr);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tok1<sp/>&amp;&amp;<sp/>tok2)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(tok1,<sp/></highlight><highlight class="stringliteral">&quot;%x&quot;</highlight><highlight class="normal">,<sp/>&amp;u);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nameToUnicodeText-&gt;add(tok2,<sp/>u);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errConfig,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>line<sp/>in<sp/>&apos;nameToUnicode&apos;<sp/>file<sp/>({0:t}:{1:d})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>line);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::addCIDToUnicode(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*old;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((old<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)cidToUnicodes-&gt;remove(collection)))<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>cidToUnicodes-&gt;add(collection-&gt;copy(),<sp/>fileName-&gt;copy());</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::addUnicodeMap(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingName,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*old;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((old<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)unicodeMaps-&gt;remove(encodingName)))<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>unicodeMaps-&gt;add(encodingName-&gt;copy(),<sp/>fileName-&gt;copy());</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::addCMapDir(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*dir)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*list;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(list<sp/>=<sp/>(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*)cMapDirs-&gt;lookup(collection)))<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>cMapDirs-&gt;add(collection-&gt;copy(),<sp/>list);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>list-&gt;append(dir-&gt;copy());</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">GBool<sp/>GlobalParams::parseYesNo2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>GBool<sp/>*flag)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>*flag<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>*flag<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">GlobalParams::~GlobalParams()<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>freeBuiltinFontTables();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>macRomanReverseMap;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>nameToUnicodeZapfDingbats;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>nameToUnicodeText;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>deleteGooHash(cidToUnicodes,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>deleteGooHash(unicodeToUnicodes,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>deleteGooHash(residentUnicodeMaps,<sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>deleteGooHash(unicodeMaps,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>deleteGooList(toUnicodeDirs,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>deleteGooHash(fontFiles,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>deleteGooList(fontDirs,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>deleteGooHash(ccFontFiles,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>deleteGooHash(substFiles,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sysFonts;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psFile)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psFile;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>deleteGooHash(psResidentFonts,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>deleteGooList(psResidentFonts16,<sp/><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>deleteGooList(psResidentFontsCC,<sp/><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>textEncoding;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="struct_goo_hash_iter" kindref="compound">GooHashIter</ref><sp/>*iter;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*key;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>cMapDirs-&gt;startIter(&amp;iter);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cMapDirs-&gt;getNext(&amp;iter,<sp/>&amp;key,<sp/>&amp;val))<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>*<sp/>list<sp/>=<sp/>(<ref refid="class_goo_list" kindref="compound">GooList</ref>*)val;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteGooList(list,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cMapDirs;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cidToUnicodeCache;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>unicodeToUnicodeCache;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>unicodeMapCache;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cMapCache;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>securityHandlers;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>deleteGooList(plugins,<sp/>Plugin);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;unicodeMapCacheMutex);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;cMapCacheMutex);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">CharCode<sp/>GlobalParams::getMacRomanCharCode(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charName)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>lock<sp/>-<sp/>macRomanReverseMap<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>macRomanReverseMap-&gt;lookup(charName);</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">Unicode<sp/>GlobalParams::mapNameToUnicodeAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charName)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>lock<sp/>-<sp/>nameToUnicodeZapfDingbats<sp/>and<sp/>nameToUnicodeText<sp/>are<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>Unicode<sp/>u<sp/>=<sp/>nameToUnicodeZapfDingbats-&gt;lookup(charName);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!u)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>nameToUnicodeText-&gt;lookup(charName);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">Unicode<sp/>GlobalParams::mapNameToUnicodeText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charName)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>lock<sp/>-<sp/>nameToUnicodeText<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nameToUnicodeText-&gt;lookup(charName);</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*GlobalParams::getResidentUnicodeMap(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingName)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*map;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/>(<ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*)residentUnicodeMaps-&gt;lookup(encodingName);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>map-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">FILE<sp/>*GlobalParams::getUnicodeMapFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingName)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fileName<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)unicodeMaps-&gt;lookup(encodingName)))<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>openFile(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">FILE<sp/>*GlobalParams::findCMapFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*cMapName)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*list;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*dir;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(list<sp/>=<sp/>(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*)cMapDirs-&gt;lookup(collection)))<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)list-&gt;get(i);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>appendToPath(dir-&gt;copy(),<sp/>cMapName-&gt;getCString());</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>openFile(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fileName;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal">FILE<sp/>*GlobalParams::findToUnicodeFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*dir,<sp/>*fileName;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>toUnicodeDirs-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)toUnicodeDirs-&gt;get(i);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>appendToPath(dir-&gt;copy(),<sp/>name-&gt;getCString());</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>openFile(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fileName;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WITH_FONTCONFIGURATION_FONTCONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>findModifier(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modifier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**start)</highlight></codeline>
<codeline lineno="935"><highlight class="normal">{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*match;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>match<sp/>=<sp/>strstr(name,<sp/>modifier);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*start<sp/>==<sp/>NULL<sp/>||<sp/>match<sp/>&lt;<sp/>*start)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*start<sp/>=<sp/>match;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getFontLang(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lang;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>language<sp/>we<sp/>want<sp/>the<sp/>font<sp/>to<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isCIDFont())</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCollection();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collection)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-GB1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zh-cn&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Simplified<sp/>Chinese</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-CNS1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zh-tw&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Traditional<sp/>Chinese</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-Japan1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ja&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Japanese</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-Japan2&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ja&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Japanese</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-Korea1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ko&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Korean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-UCS&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(collection-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;Adobe-Identity&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errUnimplemented,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>CID<sp/>font<sp/>collection,<sp/>please<sp/>report<sp/>to<sp/>poppler<sp/>bugzilla.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>lang<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lang;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FcPattern<sp/>*buildFcPattern(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*base14Name)</highlight></codeline>
<codeline lineno="989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slant<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spacing<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deleteFamily<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*family,<sp/>*name,<sp/>*modifiers;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>FcPattern<sp/>*p;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>all<sp/>heuristics<sp/>will<sp/>be<sp/>overwritten<sp/>if<sp/>font<sp/>had<sp/>proper<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>(base14Name<sp/>==<sp/>NULL)<sp/>?<sp/>font-&gt;getName()-&gt;getCString()<sp/>:<sp/>base14Name-&gt;getCString();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>modifiers<sp/>=<sp/>strchr<sp/>(name,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modifiers<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>modifiers<sp/>=<sp/>strchr<sp/>(name,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>-<sp/>from<sp/>the<sp/>names,<sp/>for<sp/>some<sp/>reason,<sp/>Fontconfig<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>understand<sp/>&quot;MS-Mincho&quot;<sp/>but<sp/>does<sp/>with<sp/>&quot;MS<sp/>Mincho&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(name);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>name[i]<sp/>=<sp/>(name[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>?<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>:<sp/>name[i]);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Regular&quot;</highlight><highlight class="normal">,<sp/>&amp;start);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Roman&quot;</highlight><highlight class="normal">,<sp/>&amp;start);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Oblique&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>slant<sp/>=<sp/>FC_SLANT_OBLIQUE;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Italic&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>slant<sp/>=<sp/>FC_SLANT_ITALIC;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Bold&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>FC_WEIGHT_BOLD;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>FC_WEIGHT_LIGHT;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Medium&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>FC_WEIGHT_MEDIUM;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(findModifier(modifiers,<sp/></highlight><highlight class="stringliteral">&quot;Condensed&quot;</highlight><highlight class="normal">,<sp/>&amp;start))</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>FC_WIDTH_CONDENSED;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>have<sp/>been<sp/>&quot;modifiers&quot;<sp/>in<sp/>the<sp/>name,<sp/>crop<sp/>them<sp/>to<sp/>obtain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>family<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>family<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[len+1];</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(family,<sp/>name);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>(modifiers<sp/>-<sp/>name);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>family[pos]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteFamily<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>family<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>font<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isFixedWidth())</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>spacing<sp/>=<sp/>FC_MONO;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isBold())</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>FC_WEIGHT_BOLD;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isItalic())</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>slant<sp/>=<sp/>FC_SLANT_ITALIC;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>FontDescriptor<sp/>specified<sp/>a<sp/>family<sp/>name<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getFamily())<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deleteFamily)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>family;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deleteFamily<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>family<sp/>=<sp/>font-&gt;getFamily()-&gt;getCString();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>FontDescriptor<sp/>specified<sp/>a<sp/>weight<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(font<sp/>-&gt;<sp/>getWeight())</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W100:<sp/>weight<sp/>=<sp/>FC_WEIGHT_EXTRALIGHT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W200:<sp/>weight<sp/>=<sp/>FC_WEIGHT_LIGHT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W300:<sp/>weight<sp/>=<sp/>FC_WEIGHT_BOOK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W400:<sp/>weight<sp/>=<sp/>FC_WEIGHT_NORMAL;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W500:<sp/>weight<sp/>=<sp/>FC_WEIGHT_MEDIUM;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W600:<sp/>weight<sp/>=<sp/>FC_WEIGHT_DEMIBOLD;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W700:<sp/>weight<sp/>=<sp/>FC_WEIGHT_BOLD;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W800:<sp/>weight<sp/>=<sp/>FC_WEIGHT_EXTRABOLD;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::W900:<sp/>weight<sp/>=<sp/>FC_WEIGHT_BLACK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>FontDescriptor<sp/>specified<sp/>a<sp/>width<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(font<sp/>-&gt;<sp/>getStretch())</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::UltraCondensed:<sp/>width<sp/>=<sp/>FC_WIDTH_ULTRACONDENSED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::ExtraCondensed:<sp/>width<sp/>=<sp/>FC_WIDTH_EXTRACONDENSED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::Condensed:<sp/>width<sp/>=<sp/>FC_WIDTH_CONDENSED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::SemiCondensed:<sp/>width<sp/>=<sp/>FC_WIDTH_SEMICONDENSED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::Normal:<sp/>width<sp/>=<sp/>FC_WIDTH_NORMAL;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::SemiExpanded:<sp/>width<sp/>=<sp/>FC_WIDTH_SEMIEXPANDED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::Expanded:<sp/>width<sp/>=<sp/>FC_WIDTH_EXPANDED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::ExtraExpanded:<sp/>width<sp/>=<sp/>FC_WIDTH_EXTRAEXPANDED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GfxFont::UltraExpanded:<sp/>width<sp/>=<sp/>FC_WIDTH_ULTRAEXPANDED;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lang<sp/>=<sp/>getFontLang(font);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>FcPatternBuild(NULL,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FC_FAMILY,<sp/>FcTypeString,<sp/>family,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FC_LANG,<sp/>FcTypeString,<sp/>lang,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slant<sp/>!=<sp/>-1)<sp/>FcPatternAddInteger(p,<sp/>FC_SLANT,<sp/>slant);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight<sp/>!=<sp/>-1)<sp/>FcPatternAddInteger(p,<sp/>FC_WEIGHT,<sp/>weight);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>-1)<sp/>FcPatternAddInteger(p,<sp/>FC_WIDTH,<sp/>width);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spacing<sp/>!=<sp/>-1)<sp/>FcPatternAddInteger(p,<sp/>FC_SPACING,<sp/>spacing);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deleteFamily)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>family;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findFontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exts[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;.pfa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.ttf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.ttc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.otf&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path,<sp/>*dir;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontNameU;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>setupBaseFonts(NULL);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((path<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)fontFiles-&gt;lookup(fontName)))<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>path-&gt;copy();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fontDirs-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)fontDirs-&gt;get(i);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(exts)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(exts[0]));<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>=<sp/>exts[j];</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontNameU<sp/>=<sp/>fileNameToUTF8(fontName-&gt;getCString());</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>appendToPath(dir-&gt;copy(),<sp/>fontNameU-&gt;getCString());</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontNameU;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>appendToPath(dir-&gt;copy(),<sp/>fontName-&gt;getCString());</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;append(ext);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>openFile(path-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>if<sp/>you<sp/>can&apos;t<sp/>or<sp/>don&apos;t<sp/>want<sp/>to<sp/>use<sp/>Fontconfig,<sp/>you<sp/>need<sp/>to<sp/>implement</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/>this<sp/>function<sp/>for<sp/>your<sp/>platform.<sp/>For<sp/>Windows,<sp/>it&apos;s<sp/>in<sp/>GlobalParamsWin.cc</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WITH_FONTCONFIGURATION_FONTCONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>needed<sp/>for<sp/>fontconfig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setupBaseFonts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findBase14FontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*base14Name,<sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>SysFontType<sp/>type;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontNum;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findSystemFontFile(font,<sp/>&amp;type,<sp/>&amp;fontNum,<sp/>NULL,<sp/>base14Name);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findSystemFontFile(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SysFontType<sp/>*type,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fontNum,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*substituteFontName,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*base14Name)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*fi<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>FcPattern<sp/>*p=0;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName<sp/>=<sp/>font-&gt;getName();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>substituteName;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontName)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fi<sp/>=<sp/>sysFonts-&gt;find(fontName,<sp/>font-&gt;isFixedWidth(),<sp/>gTrue)))<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>fi-&gt;path-&gt;copy();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>fi-&gt;type;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>*fontNum<sp/>=<sp/>fi-&gt;fontNum;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>substituteName.Set(fi-&gt;substituteName-&gt;getCString());</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>FcChar8*<sp/>s;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ext;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>FcResult<sp/>res;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>FcFontSet<sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>FcLangSet<sp/>*lb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buildFcPattern(font,<sp/>base14Name);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fin;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>FcConfigSubstitute(NULL,<sp/>p,<sp/>FcMatchPattern);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>FcDefaultSubstitute(p);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal"><sp/>=<sp/>FcFontSort(NULL,<sp/>p,<sp/>FcFalse,<sp/>NULL,<sp/>&amp;res);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fin;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>language<sp/>we<sp/>want<sp/>the<sp/>font<sp/>to<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lang<sp/>=<sp/>getFontLang(font);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(lang,</highlight><highlight class="stringliteral">&quot;xx&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lb<sp/>=<sp/>FcLangSetCreate();</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcLangSetAdd(lb,(FcChar8<sp/>*)lang);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scan<sp/>twice.</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>first:<sp/>fonts<sp/>support<sp/>the<sp/>language</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>second:<sp/>all<sp/>fonts<sp/>(fall<sp/>back)</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">-&gt;nfont;<sp/>++i)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>FcPatternGetString(set-&gt;fonts[i],<sp/>FC_FILE,<sp/>0,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>FcResultMatch<sp/>||<sp/>!s)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcLangSet<sp/>*l;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>FcPatternGetLangSet(set-&gt;fonts[i],<sp/>FC_LANG,<sp/>0,<sp/>&amp;l);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>FcResultMatch<sp/>||<sp/>!FcLangSetContains(l,lb))<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>FcChar8*<sp/>s2;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>FcPatternGetString(set-&gt;fonts[i],<sp/>FC_FULLNAME,<sp/>0,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>FcResultMatch<sp/>&amp;&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteName.Set((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s2);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fontconfig<sp/>does<sp/>not<sp/>extract<sp/>fullname<sp/>for<sp/>some<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>fullname<sp/>from<sp/>family<sp/>and<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>FcPatternGetString(set-&gt;fonts[i],<sp/>FC_FAMILY,<sp/>0,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>FcResultMatch<sp/>&amp;&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteName.Set((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s2);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>FcPatternGetString(set-&gt;fonts[i],<sp/>FC_STYLE,<sp/>0,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>FcResultMatch<sp/>&amp;&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*style<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s2);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Regular&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteName.append(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteName.append(style);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>style;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>ext<sp/>=<sp/>strrchr((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s,</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ext)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncasecmp(ext,</highlight><highlight class="stringliteral">&quot;.ttf&quot;</highlight><highlight class="normal">,4)<sp/>||<sp/>!strncasecmp(ext,<sp/></highlight><highlight class="stringliteral">&quot;.ttc&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>||<sp/>!strncasecmp(ext,<sp/></highlight><highlight class="stringliteral">&quot;.otf&quot;</highlight><highlight class="normal">,<sp/>4))</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight,<sp/>slant;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>bold<sp/>=<sp/>font-&gt;isBold();</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>italic<sp/>=<sp/>font-&gt;isItalic();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>oblique<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_WEIGHT,<sp/>0,<sp/>&amp;weight);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_SLANT,<sp/>0,<sp/>&amp;slant);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight<sp/>==<sp/>FC_WEIGHT_DEMIBOLD<sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_BOLD<sp/></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_EXTRABOLD<sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_BLACK)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bold<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slant<sp/>==<sp/>FC_SLANT_ITALIC)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>italic<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slant<sp/>==<sp/>FC_SLANT_OBLIQUE)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oblique<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*fontNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>(!strncasecmp(ext,</highlight><highlight class="stringliteral">&quot;.ttc&quot;</highlight><highlight class="normal">,4))<sp/>?<sp/>sysFontTTC<sp/>:<sp/>sysFontTTF;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_INDEX,<sp/>0,<sp/>fontNum);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref>(fontName-&gt;copy(),<sp/>bold,<sp/>italic,<sp/>oblique,<sp/>font-&gt;isFixedWidth(),</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s),<sp/>*type,<sp/>*fontNum,<sp/>substituteName.copy());</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sysFonts-&gt;addFcFont(fi);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncasecmp(ext,</highlight><highlight class="stringliteral">&quot;.pfa&quot;</highlight><highlight class="normal">,4)<sp/>||<sp/>!strncasecmp(ext,</highlight><highlight class="stringliteral">&quot;.pfb&quot;</highlight><highlight class="normal">,4))<sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight,<sp/>slant;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>bold<sp/>=<sp/>font-&gt;isBold();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>italic<sp/>=<sp/>font-&gt;isItalic();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>oblique<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_WEIGHT,<sp/>0,<sp/>&amp;weight);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_SLANT,<sp/>0,<sp/>&amp;slant);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight<sp/>==<sp/>FC_WEIGHT_DEMIBOLD<sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_BOLD<sp/></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_EXTRABOLD<sp/>||<sp/>weight<sp/>==<sp/>FC_WEIGHT_BLACK)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bold<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slant<sp/>==<sp/>FC_SLANT_ITALIC)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>italic<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slant<sp/>==<sp/>FC_SLANT_OBLIQUE)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oblique<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*fontNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>(!strncasecmp(ext,</highlight><highlight class="stringliteral">&quot;.pfa&quot;</highlight><highlight class="normal">,4))<sp/>?<sp/>sysFontPFA<sp/>:<sp/>sysFontPFB;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FcPatternGetInteger(set-&gt;fonts[i],<sp/>FC_INDEX,<sp/>0,<sp/>fontNum);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref>(fontName-&gt;copy(),<sp/>bold,<sp/>italic,<sp/>oblique,<sp/>font-&gt;isFixedWidth(),</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s),<sp/>*type,<sp/>*fontNum,<sp/>substituteName.copy());</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sysFonts-&gt;addFcFont(fi);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FcLangSetDestroy(lb);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scan<sp/>all<sp/>fonts<sp/>of<sp/>the<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>FcFontSetDestroy(</highlight><highlight class="keyword">set</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>(fi<sp/>=<sp/>sysFonts-&gt;find(fontName,<sp/>font-&gt;isFixedWidth(),<sp/>gFalse)))<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>fi-&gt;path-&gt;copy();</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>fi-&gt;type;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>*fontNum<sp/>=<sp/>fi-&gt;fontNum;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(substituteFontName)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>substituteFontName-&gt;Set(substituteName.getCString());</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">fin:</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>FcPatternDestroy(p);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>WITH_FONTCONFIGURATION_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParamsWin.cc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findBase14FontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*base14Name,<sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findFontFile(base14Name);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findBase14FontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*base14Name,<sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findFontFile(base14Name);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t1FileName;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ttFileName;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}<sp/>displayFontTab[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n022003l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cour.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n022004l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;courbd.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-BoldOblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n022024l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;courbi.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-Oblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n022023l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;couri.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n019003l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;arial.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n019004l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;arialbd.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-BoldOblique&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;n019024l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;arialbi.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-Oblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n019023l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ariali.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Symbol&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;s050000l.pfb&quot;</highlight><highlight class="normal">,<sp/>NULL},</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n021004l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;timesbd.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-BoldItalic&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n021024l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;timesbi.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Italic&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n021023l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;timesi.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Roman&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n021003l.pfb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;times.ttf&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ZapfDingbats&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;d050000l.pfb&quot;</highlight><highlight class="normal">,<sp/>NULL},</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>{NULL}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*displayFontDirs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/usr/share/ghostscript/fonts&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/usr/local/share/ghostscript/fonts&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/usr/share/fonts/default/Type1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/usr/share/fonts/default/ghostscript&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/usr/share/fonts/type1/gsfonts&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>NULL</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setupBaseFonts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>displayFontTab[i].name;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontFiles-&gt;lookup(displayFontTab[i].name))<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>fontName<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(displayFontTab[i].name);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>appendToPath(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(dir),<sp/>displayFontTab[i].t1FileName);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>fopen(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fileName;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>!fileName<sp/>&amp;&amp;<sp/>displayFontDirs[j];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>appendToPath(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(displayFontDirs[j]),</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayFontTab[i].t1FileName);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>fopen(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fileName;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileName)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errConfig,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>display<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayFontTab[i].name);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontName;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>addFontFile(fontName,<sp/>fileName);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findSystemFontFile(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SysFontType<sp/>*type,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fontNum,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*<sp/></highlight><highlight class="comment">/*substituteFontName*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*<sp/></highlight><highlight class="comment">/*base14Name*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><ref refid="class_sys_font_info" kindref="compound">SysFontInfo</ref><sp/>*fi;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fi<sp/>=<sp/>sysFonts-&gt;find(font-&gt;getName(),<sp/>font-&gt;isFixedWidth(),<sp/>gFalse)))<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>fi-&gt;path-&gt;copy();</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>fi-&gt;type;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>*fontNum<sp/>=<sp/>fi-&gt;fontNum;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>unlockGlobalParams;<sp/></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::findCCFontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((path<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)ccFontFiles-&gt;lookup(collection)))<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>path-&gt;copy();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">GBool<sp/>GlobalParams::getPSExpandSmaller()<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>GBool<sp/>f;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>psExpandSmaller;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">GBool<sp/>GlobalParams::getPSShrinkLarger()<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>GBool<sp/>f;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>psShrinkLarger;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal">GBool<sp/>GlobalParams::getPSCenter()<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>GBool<sp/>f;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>psCenter;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal">PSLevel<sp/>GlobalParams::getPSLevel()<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>PSLevel<sp/>level;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>level<sp/>=<sp/>psLevel;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::getPSResidentFont(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>psName<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)psResidentFonts-&gt;lookup(fontName);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*GlobalParams::getPSResidentFonts()<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*names;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><ref refid="struct_goo_hash_iter" kindref="compound">GooHashIter</ref><sp/>*iter;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>names<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>psResidentFonts-&gt;startIter(&amp;iter);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(psResidentFonts-&gt;getNext(&amp;iter,<sp/>&amp;name,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;psName))<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>names-&gt;append(psName-&gt;copy());</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*GlobalParams::getPSResidentFont16(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName,</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>psResidentFonts16-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*)psResidentFonts16-&gt;get(i);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p-&gt;name-&gt;cmp(fontName))<sp/>&amp;&amp;<sp/>p-&gt;wMode<sp/>==<sp/>wMode)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*GlobalParams::getPSResidentFontCC(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection,</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>psResidentFontsCC-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<ref refid="class_p_s_font_param16" kindref="compound">PSFontParam16</ref><sp/>*)psResidentFontsCC-&gt;get(i);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p-&gt;name-&gt;cmp(collection))<sp/>&amp;&amp;<sp/>p-&gt;wMode<sp/>==<sp/>wMode)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*GlobalParams::getTextEncodingName()<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>textEncoding-&gt;copy();</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal">EndOfLineKind<sp/>GlobalParams::getTextEOL()<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>EndOfLineKind<sp/>eol;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>eol<sp/>=<sp/>textEOL;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eol;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal">GBool<sp/>GlobalParams::getTextPageBreaks()<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>GBool<sp/>pageBreaks;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>pageBreaks<sp/>=<sp/>textPageBreaks;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageBreaks;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal">GBool<sp/>GlobalParams::getTextKeepTinyChars()<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>GBool<sp/>tiny;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>tiny<sp/>=<sp/>textKeepTinyChars;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tiny;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal">GBool<sp/>GlobalParams::getEnableFreeType()<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>GBool<sp/>f;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>enableFreeType;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal">GBool<sp/>GlobalParams::getStrokeAdjust()<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>GBool<sp/>f;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>strokeAdjust;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal">ScreenType<sp/>GlobalParams::getScreenType()<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>ScreenType<sp/>t;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>screenType;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GlobalParams::getScreenSize()<sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>screenSize;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GlobalParams::getScreenDotRadius()<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>screenDotRadius;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GlobalParams::getScreenGamma()<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>gamma<sp/>=<sp/>screenGamma;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gamma;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GlobalParams::getScreenBlackThreshold()<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thresh;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>thresh<sp/>=<sp/>screenBlackThreshold;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thresh;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GlobalParams::getScreenWhiteThreshold()<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thresh;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>thresh<sp/>=<sp/>screenWhiteThreshold;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thresh;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GlobalParams::getMinLineWidth()<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minLineWidthA;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>minLineWidthA<sp/>=<sp/>minLineWidth;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minLineWidthA;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal">GBool<sp/>GlobalParams::getMapNumericCharNames()<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>GBool<sp/>map;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/>mapNumericCharNames;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal">GBool<sp/>GlobalParams::getMapUnknownCharNames()<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>GBool<sp/>map;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/>mapUnknownCharNames;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal">GBool<sp/>GlobalParams::getPrintCommands()<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>GBool<sp/>p;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>printCommands;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal">GBool<sp/>GlobalParams::getProfileCommands()<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>GBool<sp/>p;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>profileCommands;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">GBool<sp/>GlobalParams::getErrQuiet()<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>locking<sp/>--<sp/>this<sp/>function<sp/>may<sp/>get<sp/>called<sp/>from<sp/>inside<sp/>a<sp/>locked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errQuiet;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><ref refid="class_char_code_to_unicode" kindref="compound">CharCodeToUnicode</ref><sp/>*GlobalParams::getCIDToUnicode(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><ref refid="class_char_code_to_unicode" kindref="compound">CharCodeToUnicode</ref><sp/>*ctu;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ctu<sp/>=<sp/>cidToUnicodeCache-&gt;getCharCodeToUnicode(collection)))<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fileName<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)cidToUnicodes-&gt;lookup(collection))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>(ctu<sp/>=<sp/>CharCodeToUnicode::parseCIDToUnicode(fileName,<sp/>collection)))<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cidToUnicodeCache-&gt;add(ctu);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctu;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><ref refid="class_char_code_to_unicode" kindref="compound">CharCodeToUnicode</ref><sp/>*GlobalParams::getUnicodeToUnicode(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><ref refid="struct_goo_hash_iter" kindref="compound">GooHashIter</ref><sp/>*iter;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>unicodeToUnicodes-&gt;startIter(&amp;iter);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontPattern;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!fileName<sp/>&amp;&amp;<sp/>unicodeToUnicodes-&gt;getNext(&amp;iter,<sp/>&amp;fontPattern,<sp/>&amp;val))<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(fontName-&gt;getCString(),<sp/>fontPattern-&gt;getCString()))<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicodeToUnicodes-&gt;killIter(&amp;iter);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref>*)val;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><ref refid="class_char_code_to_unicode" kindref="compound">CharCodeToUnicode</ref><sp/>*ctu<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>ctu<sp/>=<sp/>unicodeToUnicodeCache-&gt;getCharCodeToUnicode(fileName);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctu)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctu<sp/>=<sp/>CharCodeToUnicode::parseUnicodeToUnicode(fileName);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctu)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicodeToUnicodeCache-&gt;add(ctu);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctu;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*GlobalParams::getUnicodeMap(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingName)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getUnicodeMap2(encodingName);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*GlobalParams::getUnicodeMap2(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodingName)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*map;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(map<sp/>=<sp/>getResidentUnicodeMap(encodingName)))<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>lockUnicodeMapCache;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>map<sp/>=<sp/>unicodeMapCache-&gt;getUnicodeMap(encodingName);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockUnicodeMapCache;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><ref refid="class_c_map" kindref="compound">CMap</ref><sp/>*GlobalParams::getCMap(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*collection,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*cMapName,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*stream)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><ref refid="class_c_map" kindref="compound">CMap</ref><sp/>*cMap;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>lockCMapCache;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>cMap<sp/>=<sp/>cMapCache-&gt;getCMap(collection,<sp/>cMapName,<sp/>stream);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>unlockCMapCache;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cMap;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*GlobalParams::getTextEncoding()<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getUnicodeMap2(textEncoding);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*GlobalParams::getEncodingNames()</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><ref refid="struct_goo_hash_iter" kindref="compound">GooHashIter</ref><sp/>*iter;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*key;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;startIter(&amp;iter);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(residentUnicodeMaps-&gt;getNext(&amp;iter,<sp/>&amp;key,<sp/>&amp;val))<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;append(key);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>residentUnicodeMaps-&gt;killIter(&amp;iter);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>unicodeMaps-&gt;startIter(&amp;iter);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(unicodeMaps-&gt;getNext(&amp;iter,<sp/>&amp;key,<sp/>&amp;val))<sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;append(key);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>unicodeMaps-&gt;killIter(&amp;iter);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>to<sp/>set<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::addFontFile(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fontName,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>fontFiles-&gt;add(fontName,<sp/>path);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPSFile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psFile)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psFile;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>psFile<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(file);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPSExpandSmaller(GBool<sp/>expand)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>psExpandSmaller<sp/>=<sp/>expand;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPSShrinkLarger(GBool<sp/>shrink)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>psShrinkLarger<sp/>=<sp/>shrink;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPSCenter(GBool<sp/>center)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>psCenter<sp/>=<sp/>center;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPSLevel(PSLevel<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>psLevel<sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setTextEncoding(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encodingName)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>textEncoding;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>textEncoding<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(encodingName);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal">GBool<sp/>GlobalParams::setTextEOL(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;unix&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>textEOL<sp/>=<sp/>eolUnix;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;dos&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>textEOL<sp/>=<sp/>eolDOS;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>textEOL<sp/>=<sp/>eolMac;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setTextPageBreaks(GBool<sp/>pageBreaks)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>textPageBreaks<sp/>=<sp/>pageBreaks;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setTextKeepTinyChars(GBool<sp/>keep)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>textKeepTinyChars<sp/>=<sp/>keep;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">GBool<sp/>GlobalParams::setEnableFreeType(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>GBool<sp/>ok;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>parseYesNo2(s,<sp/>&amp;enableFreeType);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal">GBool<sp/>GlobalParams::setDisableFreeTypeHinting(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>GBool<sp/>ok;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>parseYesNo2(s,<sp/>&amp;disableFreeTypeHinting);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setStrokeAdjust(GBool<sp/>adjust)</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>strokeAdjust<sp/>=<sp/>adjust;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenType(ScreenType<sp/>st)</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>screenType<sp/>=<sp/>st;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>screenSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenDotRadius(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>screenDotRadius<sp/>=<sp/>radius;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenGamma(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>screenGamma<sp/>=<sp/>gamma;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenBlackThreshold(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>blackThreshold)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>screenBlackThreshold<sp/>=<sp/>blackThreshold;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setScreenWhiteThreshold(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>whiteThreshold)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>screenWhiteThreshold<sp/>=<sp/>whiteThreshold;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setMinLineWidth(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minLineWidthA)</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>minLineWidth<sp/>=<sp/>minLineWidthA;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setOverprintPreview(GBool<sp/>overprintPreviewA)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>overprintPreview<sp/>=<sp/>overprintPreviewA;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setMapNumericCharNames(GBool<sp/>map)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/>mapNumericCharNames<sp/>=<sp/>map;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setMapUnknownCharNames(GBool<sp/>map)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>mapUnknownCharNames<sp/>=<sp/>map;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setPrintCommands(GBool<sp/>printCommandsA)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>printCommands<sp/>=<sp/>printCommandsA;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setProfileCommands(GBool<sp/>profileCommandsA)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>profileCommands<sp/>=<sp/>profileCommandsA;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::setErrQuiet(GBool<sp/>errQuietA)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>errQuiet<sp/>=<sp/>errQuietA;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalParams::addSecurityHandler(<ref refid="struct_xpdf_security_handler" kindref="compound">XpdfSecurityHandler</ref><sp/>*handler)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>securityHandlers-&gt;append(handler);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><ref refid="struct_xpdf_security_handler" kindref="compound">XpdfSecurityHandler</ref><sp/>*GlobalParams::getSecurityHandler(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><ref refid="struct_xpdf_security_handler" kindref="compound">XpdfSecurityHandler</ref><sp/>*hdlr;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>securityHandlers-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>hdlr<sp/>=<sp/>(<ref refid="struct_xpdf_security_handler" kindref="compound">XpdfSecurityHandler</ref><sp/>*)securityHandlers-&gt;get(i);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(hdlr-&gt;name,<sp/>name))<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdlr;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!loadPlugin(</highlight><highlight class="stringliteral">&quot;security&quot;</highlight><highlight class="normal">,<sp/>name))<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>securityHandlers-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>hdlr<sp/>=<sp/>(<ref refid="struct_xpdf_security_handler" kindref="compound">XpdfSecurityHandler</ref><sp/>*)securityHandlers-&gt;get(i);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(hdlr-&gt;name,<sp/>name))<sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdlr;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>(void)name;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_PLUGINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>plugins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal">GBool<sp/>GlobalParams::loadPlugin(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/>Plugin<sp/>*plugin;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(plugin<sp/>=<sp/>Plugin::load(type,<sp/>name)))<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>lockGlobalParams;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/>plugins-&gt;append(plugin);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/>unlockGlobalParams;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ENABLE_PLUGINS</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/GlobalParams.cc"/>
  </compounddef>
</doxygen>
