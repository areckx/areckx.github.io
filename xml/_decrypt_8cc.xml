<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_decrypt_8cc" kind="file" language="C++">
    <compoundname>Decrypt.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="grandom_8h" local="yes">goo/grandom.h</includes>
    <includes refid="gtypes__p_8h" local="yes">goo/gtypes_p.h</includes>
    <includes refid="_decrypt_8h" local="yes">Decrypt.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <incdepgraph>
      <node id="86323">
        <label>stdarg.h</label>
      </node>
      <node id="86324">
        <label>stdlib.h</label>
      </node>
      <node id="86314">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="86315" relation="include">
        </childnode>
        <childnode refid="86316" relation="include">
        </childnode>
      </node>
      <node id="86329">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="86316" relation="include">
        </childnode>
        <childnode refid="86325" relation="include">
        </childnode>
        <childnode refid="86330" relation="include">
        </childnode>
      </node>
      <node id="86328">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="86323" relation="include">
        </childnode>
        <childnode refid="86316" relation="include">
        </childnode>
        <childnode refid="86318" relation="include">
        </childnode>
        <childnode refid="86321" relation="include">
        </childnode>
      </node>
      <node id="86320">
        <label>Decrypt.h</label>
        <link refid="_decrypt_8h_source"/>
        <childnode refid="86318" relation="include">
        </childnode>
        <childnode refid="86321" relation="include">
        </childnode>
        <childnode refid="86325" relation="include">
        </childnode>
        <childnode refid="86333" relation="include">
        </childnode>
      </node>
      <node id="86332">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="86316" relation="include">
        </childnode>
        <childnode refid="86325" relation="include">
        </childnode>
        <childnode refid="86330" relation="include">
        </childnode>
      </node>
      <node id="86311">
        <label>thirdparty/poppler/poppler/Decrypt.cc</label>
        <link refid="_decrypt_8cc"/>
        <childnode refid="86312" relation="include">
        </childnode>
        <childnode refid="86313" relation="include">
        </childnode>
        <childnode refid="86314" relation="include">
        </childnode>
        <childnode refid="86317" relation="include">
        </childnode>
        <childnode refid="86319" relation="include">
        </childnode>
        <childnode refid="86320" relation="include">
        </childnode>
        <childnode refid="86328" relation="include">
        </childnode>
      </node>
      <node id="86322">
        <label>limits.h</label>
      </node>
      <node id="86316">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="86315" relation="include">
        </childnode>
      </node>
      <node id="86327">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="86333">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="86316" relation="include">
        </childnode>
        <childnode refid="86315" relation="include">
        </childnode>
        <childnode refid="86318" relation="include">
        </childnode>
        <childnode refid="86325" relation="include">
        </childnode>
        <childnode refid="86330" relation="include">
        </childnode>
      </node>
      <node id="86331">
        <label>pthread.h</label>
      </node>
      <node id="86317">
        <label>goo/grandom.h</label>
        <link refid="grandom_8h_source"/>
        <childnode refid="86318" relation="include">
        </childnode>
      </node>
      <node id="86313">
        <label>string.h</label>
      </node>
      <node id="86321">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="86322" relation="include">
        </childnode>
        <childnode refid="86323" relation="include">
        </childnode>
        <childnode refid="86324" relation="include">
        </childnode>
        <childnode refid="86318" relation="include">
        </childnode>
      </node>
      <node id="86325">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="86326" relation="include">
        </childnode>
        <childnode refid="86315" relation="include">
        </childnode>
        <childnode refid="86313" relation="include">
        </childnode>
        <childnode refid="86318" relation="include">
        </childnode>
        <childnode refid="86314" relation="include">
        </childnode>
        <childnode refid="86321" relation="include">
        </childnode>
        <childnode refid="86327" relation="include">
        </childnode>
        <childnode refid="86328" relation="include">
        </childnode>
        <childnode refid="86329" relation="include">
        </childnode>
        <childnode refid="86332" relation="include">
        </childnode>
        <childnode refid="86333" relation="include">
        </childnode>
      </node>
      <node id="86330">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="86331" relation="include">
        </childnode>
      </node>
      <node id="86318">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="86316" relation="include">
        </childnode>
      </node>
      <node id="86319">
        <label>goo/gtypes_p.h</label>
        <link refid="gtypes__p_8h_source"/>
        <childnode refid="86312" relation="include">
        </childnode>
      </node>
      <node id="86326">
        <label>set</label>
      </node>
      <node id="86312">
        <label>config.h</label>
      </node>
      <node id="86315">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_decrypt_8cc_1a16882a7849a789051a7d1167116a929b" prot="public" static="yes" mutable="no">
        <type>const Guchar</type>
        <definition>const Guchar passwordPad[32]</definition>
        <argsstring>[32]</argsstring>
        <name>passwordPad</name>
        <initializer>= {
  0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41,
  0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08,
  0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80,
  0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="62" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_decrypt_8cc_1ada923e07d6b99f8481b3698998d613d4" prot="public" static="yes" mutable="no">
        <type>const Guchar</type>
        <definition>const Guchar sbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>sbox</name>
        <initializer>= {
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="628" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_decrypt_8cc_1af4dc78e49bf194190c603cdd5b9187e7" prot="public" static="yes" mutable="no">
        <type>const Guchar</type>
        <definition>const Guchar invSbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>invSbox</name>
        <initializer>= {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="647" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_decrypt_8cc_1a8b7aae5526e91b30cf0d3945e22d27ca" prot="public" static="yes" mutable="no">
        <type>const Guint</type>
        <definition>const Guint rcon[11]</definition>
        <argsstring>[11]</argsstring>
        <name>rcon</name>
        <initializer>= {
  0x00000000, 
  0x01000000,
  0x02000000,
  0x04000000,
  0x08000000,
  0x10000000,
  0x20000000,
  0x40000000,
  0x80000000,
  0x1b000000,
  0x36000000
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="666" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_decrypt_8cc_1ad33bcbab0339824cc39182017cb92fec" prot="public" static="yes" mutable="no">
        <type>Guint</type>
        <definition>Guint sha256K[64]</definition>
        <argsstring>[64]</argsstring>
        <name>sha256K</name>
        <initializer>= {
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1291" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_decrypt_8cc_1ac69b6c21c56ac7b34828ba2145b59709" prot="public" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t K[80]</definition>
        <argsstring>[80]</argsstring>
        <name>K</name>
        <initializer>= {
  0x428a2f98d728ae22ull, 0x7137449123ef65cdull, 0xb5c0fbcfec4d3b2full, 0xe9b5dba58189dbbcull, 0x3956c25bf348b538ull,
  0x59f111f1b605d019ull, 0x923f82a4af194f9bull, 0xab1c5ed5da6d8118ull, 0xd807aa98a3030242ull, 0x12835b0145706fbeull,
  0x243185be4ee4b28cull, 0x550c7dc3d5ffb4e2ull, 0x72be5d74f27b896full, 0x80deb1fe3b1696b1ull, 0x9bdc06a725c71235ull,
  0xc19bf174cf692694ull, 0xe49b69c19ef14ad2ull, 0xefbe4786384f25e3ull, 0x0fc19dc68b8cd5b5ull, 0x240ca1cc77ac9c65ull,
  0x2de92c6f592b0275ull, 0x4a7484aa6ea6e483ull, 0x5cb0a9dcbd41fbd4ull, 0x76f988da831153b5ull, 0x983e5152ee66dfabull,
  0xa831c66d2db43210ull, 0xb00327c898fb213full, 0xbf597fc7beef0ee4ull, 0xc6e00bf33da88fc2ull, 0xd5a79147930aa725ull,
  0x06ca6351e003826full, 0x142929670a0e6e70ull, 0x27b70a8546d22ffcull, 0x2e1b21385c26c926ull, 0x4d2c6dfc5ac42aedull,
  0x53380d139d95b3dfull, 0x650a73548baf63deull, 0x766a0abb3c77b2a8ull, 0x81c2c92e47edaee6ull, 0x92722c851482353bull,
  0xa2bfe8a14cf10364ull, 0xa81a664bbc423001ull, 0xc24b8b70d0f89791ull, 0xc76c51a30654be30ull, 0xd192e819d6ef5218ull,
  0xd69906245565a910ull, 0xf40e35855771202aull, 0x106aa07032bbd1b8ull, 0x19a4c116b8d2d0c8ull, 0x1e376c085141ab53ull,
  0x2748774cdf8eeb99ull, 0x34b0bcb5e19b48a8ull, 0x391c0cb3c5c95a63ull, 0x4ed8aa4ae3418acbull, 0x5b9cca4f7763e373ull,
  0x682e6ff3d6b2b8a3ull, 0x748f82ee5defb2fcull, 0x78a5636f43172f60ull, 0x84c87814a1f0ab72ull, 0x8cc702081a6439ecull,
  0x90befffa23631e28ull, 0xa4506cebde82bde9ull, 0xbef9a3f7b2c67915ull, 0xc67178f2e372532bull, 0xca273eceea26619cull,
  0xd186b8c721c0c207ull, 0xeada7dd6cde0eb1eull, 0xf57d4f7fee6ed178ull, 0x06f067aa72176fbaull, 0x0a637dc5a2c898a6ull,
  0x113f9804bef90daeull, 0x1b710b35131c471bull, 0x28db77f523047d84ull, 0x32caab7b40c72493ull, 0x3c9ebe0a15c9bebcull,
  0x431d67c49c100d4cull, 0x4cc5d4becb3e42b6ull, 0x597f299cfc657e2aull, 0x5fcb6fab3ad6faecull, 0x6c44198c4a475817ull
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1447" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1447" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_decrypt_8cc_1ab747c49eaa396717464f33a6610b1ee2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rc4InitKey</definition>
        <argsstring>(Guchar *key, int keyLen, Guchar *state)</argsstring>
        <name>rc4InitKey</name>
        <param>
          <type>Guchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keyLen</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="43" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="565" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aa705d2309ea9fc7e8d36e94c699305b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar rc4DecryptByte</definition>
        <argsstring>(Guchar *state, Guchar *x, Guchar *y, Guchar c)</argsstring>
        <name>rc4DecryptByte</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Guchar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="44" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="586" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aae34675a8283a421c4ea10ae374c0086" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool aesReadBlock</definition>
        <argsstring>(Stream *str, Guchar *in, GBool addPadding)</argsstring>
        <name>aesReadBlock</name>
        <param>
          <type><ref refid="class_stream" kindref="compound">Stream</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>addPadding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="46" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="603" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a803b574280906a5b3c11cbe660b268ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aesKeyExpansion</definition>
        <argsstring>(DecryptAESState *s, Guchar *objKey, int objKeyLen, GBool decrypt)</argsstring>
        <name>aesKeyExpansion</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>objKey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>objKeyLen</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>decrypt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="48" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="863" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a384443967180170aad6d27082d294522" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aesEncryptBlock</definition>
        <argsstring>(DecryptAESState *s, Guchar *in)</argsstring>
        <name>aesEncryptBlock</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="49" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="890" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a177cdd36b29ecc3cfc8024d23156b12d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aesDecryptBlock</definition>
        <argsstring>(DecryptAESState *s, Guchar *in, GBool last)</argsstring>
        <name>aesDecryptBlock</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="50" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="927" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a2db3b7724da56702708483320393777d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aes256KeyExpansion</definition>
        <argsstring>(DecryptAES256State *s, Guchar *objKey, int objKeyLen, GBool decrypt)</argsstring>
        <name>aes256KeyExpansion</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>objKey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>objKeyLen</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>decrypt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="52" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="985" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ac9e07b1651565b5969a60069bebc591e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aes256EncryptBlock</definition>
        <argsstring>(DecryptAES256State *s, Guchar *in)</argsstring>
        <name>aes256EncryptBlock</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="53" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1014" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a6f482ff1347059b9fde8bdcc821f57cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void aes256DecryptBlock</definition>
        <argsstring>(DecryptAES256State *s, Guchar *in, GBool last)</argsstring>
        <name>aes256DecryptBlock</name>
        <param>
          <type><ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="54" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1051" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aee7b0e68d4eff547fb0883a28a810d49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sha256</definition>
        <argsstring>(Guchar *msg, int msgLen, Guchar *hash)</argsstring>
        <name>sha256</name>
        <param>
          <type>Guchar *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msgLen</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="56" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1390" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a86dd8ddae8e8053294d986d0b86f5968" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sha384</definition>
        <argsstring>(Guchar *msg, int msgLen, Guchar *hash)</argsstring>
        <name>sha384</name>
        <param>
          <type>Guchar *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msgLen</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="57" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1619" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a914ff5e42967412e5be1bdc2e06aa61b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sha512</definition>
        <argsstring>(Guchar *msg, int msgLen, Guchar *hash)</argsstring>
        <name>sha512</name>
        <param>
          <type>Guchar *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msgLen</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="58" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1547" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1adc313db4415d41bc0be16512a1a474c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void revision6Hash</definition>
        <argsstring>(GooString *inputPassword, Guchar *K, char *userKey)</argsstring>
        <name>revision6Hash</name>
        <param>
          <type><ref refid="class_goo_string" kindref="compound">GooString</ref> *</type>
          <declname>inputPassword</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>K</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>userKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="60" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1691" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a7349105799455f909c06f5aca5159ef8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint subWord</definition>
        <argsstring>(Guint x)</argsstring>
        <name>subWord</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="680" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="680" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ad8d0eac584ae80548a24cec39b1e3dda" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint rotWord</definition>
        <argsstring>(Guint x)</argsstring>
        <name>rotWord</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="687" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="687" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ae57ca71514d66ee0aff6ddbc6f45d1cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void subBytes</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>subBytes</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="691" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="691" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aac72708467ccdc687b595597eb33d5ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void invSubBytes</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>invSubBytes</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="699" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="699" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a9b8437f78cd8f26e034de718e067a028" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void shiftRows</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>shiftRows</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="707" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="707" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a049e0ab204fed4182c6cf00d35c09e84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void invShiftRows</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>invShiftRows</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="730" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="730" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a7294e6aa5b7913a1ed5d618a252dbebe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul02</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul02</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="754" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="754" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ae7154d79634cd592ae2184ad690dfe61" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul03</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul03</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="759" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="759" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a39ce352a8eec4fe5849124489e3d6d25" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul09</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul09</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="765" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="765" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aaea18e3e9a60531ec5194062826196fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul0b</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul0b</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="775" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="775" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ace9923efb480729e5f0ade217e7bd77c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul0d</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul0d</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="785" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="785" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aae89856f4e6267f2d1b94f795a08a800" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar mul0e</definition>
        <argsstring>(Guchar s)</argsstring>
        <name>mul0e</name>
        <param>
          <type>Guchar</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="795" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="795" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ae80fd636558beda9a689667ed6c97d65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mixColumns</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>mixColumns</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="804" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="804" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1add0908a2840c221d4ed484814bb44b84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void invMixColumns</definition>
        <argsstring>(Guchar *state)</argsstring>
        <name>invMixColumns</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="820" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="820" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ac7db493a9cf43926c47e48158da5a0b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void invMixColumnsW</definition>
        <argsstring>(Guint *w)</argsstring>
        <name>invMixColumnsW</name>
        <param>
          <type>Guint *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="836" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="836" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a5364f70d24c2e0cd4b7911822f7ee259" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void addRoundKey</definition>
        <argsstring>(Guchar *state, Guint *w)</argsstring>
        <name>addRoundKey</name>
        <param>
          <type>Guchar *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>Guint *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="852" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="852" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a8b6c56b9056a6b41b6349fe0f776a27f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Gulong</type>
        <definition>static Gulong rotateLeft</definition>
        <argsstring>(Gulong x, int r)</argsstring>
        <name>rotateLeft</name>
        <param>
          <type>Gulong</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1115" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1115" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a68f11a3a8a1e935519a4a41b256c9a5c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Gulong</type>
        <definition>static Gulong md5Round1</definition>
        <argsstring>(Gulong a, Gulong b, Gulong c, Gulong d, Gulong Xk, Gulong s, Gulong Ti)</argsstring>
        <name>md5Round1</name>
        <param>
          <type>Gulong</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Xk</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1120" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1120" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ae156050391181d8b5295cd77775cbbfc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Gulong</type>
        <definition>static Gulong md5Round2</definition>
        <argsstring>(Gulong a, Gulong b, Gulong c, Gulong d, Gulong Xk, Gulong s, Gulong Ti)</argsstring>
        <name>md5Round2</name>
        <param>
          <type>Gulong</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Xk</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1125" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1125" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a98a9a19a99bea7ffae4f598dc0f6401e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Gulong</type>
        <definition>static Gulong md5Round3</definition>
        <argsstring>(Gulong a, Gulong b, Gulong c, Gulong d, Gulong Xk, Gulong s, Gulong Ti)</argsstring>
        <name>md5Round3</name>
        <param>
          <type>Gulong</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Xk</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1130" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1130" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ac555b22e3f2cea1b87ff4670dc4a5b86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Gulong</type>
        <definition>static Gulong md5Round4</definition>
        <argsstring>(Gulong a, Gulong b, Gulong c, Gulong d, Gulong Xk, Gulong s, Gulong Ti)</argsstring>
        <name>md5Round4</name>
        <param>
          <type>Gulong</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Xk</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Gulong</type>
          <declname>Ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1135" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1135" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a0ace92dd29c4c015f4cb5d142cae03ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md5</definition>
        <argsstring>(Guchar *msg, int msgLen, Guchar *digest)</argsstring>
        <name>md5</name>
        <param>
          <type>Guchar *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msgLen</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1140" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1140" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a317bc7fa3ac0fd8e398d6ee6c6e042d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint rotr</definition>
        <argsstring>(Guint x, Guint n)</argsstring>
        <name>rotr</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1310" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1310" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a696f41f930969f9ed751ba8f25599997" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256Ch</definition>
        <argsstring>(Guint x, Guint y, Guint z)</argsstring>
        <name>sha256Ch</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1314" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1314" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ad29f318124a24678b9307581e7edc8e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256Maj</definition>
        <argsstring>(Guint x, Guint y, Guint z)</argsstring>
        <name>sha256Maj</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1318" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1318" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a7a8bb9dba98a7338c1df93c41a1c8f9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256Sigma0</definition>
        <argsstring>(Guint x)</argsstring>
        <name>sha256Sigma0</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1322" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1322" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1af222327006a322cac88591061f7fc85e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256Sigma1</definition>
        <argsstring>(Guint x)</argsstring>
        <name>sha256Sigma1</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1326" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1326" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ad97ebb1257b2b3f84a414690b83709d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256sigma0</definition>
        <argsstring>(Guint x)</argsstring>
        <name>sha256sigma0</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1330" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1330" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a65e1f81ae96fe35ba8d1cae4b234bb6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guint</type>
        <definition>static Guint sha256sigma1</definition>
        <argsstring>(Guint x)</argsstring>
        <name>sha256sigma1</name>
        <param>
          <type>Guint</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1334" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1334" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a2b1fd5657f81027002f4716b4b774d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sha256HashBlock</definition>
        <argsstring>(Guchar *blk, Guint *H)</argsstring>
        <name>sha256HashBlock</name>
        <param>
          <type>Guchar *</type>
          <declname>blk</declname>
        </param>
        <param>
          <type>Guint *</type>
          <declname>H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1338" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1338" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a924f4cbb6d8ff84da399c8cdbefa53ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t rotr</definition>
        <argsstring>(uint64_t x, uint64_t n)</argsstring>
        <name>rotr</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1466" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1466" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1abbacffd04643efd588f9ae7fcd1cdb22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512Ch</definition>
        <argsstring>(uint64_t x, uint64_t y, uint64_t z)</argsstring>
        <name>sha512Ch</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1472" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1472" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a9e73f72f5b87823bce8a5b00190826ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512Maj</definition>
        <argsstring>(uint64_t x, uint64_t y, uint64_t z)</argsstring>
        <name>sha512Maj</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1475" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1475" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1aeb30b45a430fffd20274c8f050db70c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512Sigma0</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>sha512Sigma0</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1478" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1478" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1ae8812c64d6284a136691949c87120d65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512Sigma1</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>sha512Sigma1</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1481" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1481" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a4c454975bf39aa11647fbf00e1cb0195" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512sigma0</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>sha512sigma0</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1484" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1484" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a98d1142774eb96938337891e28c33cca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t sha512sigma1</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>sha512sigma1</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1487" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1487" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="_decrypt_8cc_1a76fee21ebe255029448ad2034ad164e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sha512HashBlock</definition>
        <argsstring>(Guchar *blk, uint64_t *H)</argsstring>
        <name>sha512HashBlock</name>
        <param>
          <type>Guchar *</type>
          <declname>blk</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Decrypt.cc" line="1491" column="1" bodyfile="thirdparty/poppler/poppler/Decrypt.cc" bodystart="1491" bodyend="1545"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decrypt.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Julien<sp/>Rebetez<sp/>&lt;julien@fhtagn.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Matthias<sp/>Franz<sp/>&lt;matthias@ktug.or.kr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>David<sp/>Benjamin<sp/>&lt;davidben@mit.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2016<sp/>Alok<sp/>Anand<sp/>&lt;alok4nand@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/grandom.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gtypes_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Decrypt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rc4InitKey(Guchar<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLen,<sp/>Guchar<sp/>*state);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Guchar<sp/>rc4DecryptByte(Guchar<sp/>*state,<sp/>Guchar<sp/>*x,<sp/>Guchar<sp/>*y,<sp/>Guchar<sp/>c);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>aesReadBlock(<ref refid="class_stream" kindref="compound">Stream</ref><sp/><sp/>*str,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>addPadding);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesKeyExpansion(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,<sp/>Guchar<sp/>*objKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objKeyLen,<sp/>GBool<sp/>decrypt);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesEncryptBlock(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,<sp/>Guchar<sp/>*in);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesDecryptBlock(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>last);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256KeyExpansion(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,<sp/>Guchar<sp/>*objKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objKeyLen,<sp/>GBool<sp/>decrypt);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256EncryptBlock(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,<sp/>Guchar<sp/>*in);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256DecryptBlock(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>last);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha256(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha384(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha512(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>revision6Hash(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*inputPassword,<sp/>Guchar<sp/>*K,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*userKey);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Guchar<sp/>passwordPad[32]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>0x28,<sp/>0xbf,<sp/>0x4e,<sp/>0x5e,<sp/>0x4e,<sp/>0x75,<sp/>0x8a,<sp/>0x41,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>0x64,<sp/>0x00,<sp/>0x4e,<sp/>0x56,<sp/>0xff,<sp/>0xfa,<sp/>0x01,<sp/>0x08,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>0x2e,<sp/>0x2e,<sp/>0x00,<sp/>0xb6,<sp/>0xd0,<sp/>0x68,<sp/>0x3e,<sp/>0x80,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>0x2f,<sp/>0x0c,<sp/>0xa9,<sp/>0xfe,<sp/>0x64,<sp/>0x53,<sp/>0x69,<sp/>0x7a</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decrypt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">GBool<sp/>Decrypt::makeFileKey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encVersion,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encRevision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerKey,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userKey,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerEnc,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userEnc,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>permissions,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileID,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*fileKey,<sp/>GBool<sp/>encryptMetadata,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>*ownerPasswordOk)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>state;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>Guchar<sp/>test[127<sp/>+<sp/>56],<sp/>test2[32];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword2;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>Guchar<sp/>fState[256];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>Guchar<sp/>tmpKey[16];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>Guchar<sp/>fx,<sp/>fy;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>*ownerPasswordOk<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>5<sp/>||<sp/>encRevision<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>owner<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ownerPassword)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>is<sp/>supposed<sp/>to<sp/>convert<sp/>the<sp/>password<sp/>to<sp/>UTF-8<sp/>using<sp/>&quot;SASLprep&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ownerPassword-&gt;getLength();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test,<sp/>ownerPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len,<sp/>ownerKey-&gt;getCString()<sp/>+<sp/>32,<sp/>8);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len<sp/>+<sp/>8,<sp/>userKey-&gt;getCString(),<sp/>48);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha256(test,<sp/>len<sp/>+<sp/>56,<sp/>test);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>contains<sp/>the<sp/>initial<sp/>SHA-256<sp/>hash<sp/>as<sp/>input<sp/>K.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>revision6Hash(ownerPassword,<sp/>test,<sp/>userKey-&gt;getCString());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(test,<sp/>ownerKey-&gt;getCString(),<sp/>32))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>file<sp/>key<sp/>from<sp/>the<sp/>owner<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test,<sp/>ownerPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len,<sp/>ownerKey-&gt;getCString()<sp/>+<sp/>40,<sp/>8);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len<sp/>+<sp/>8,<sp/>userKey-&gt;getCString(),<sp/>48);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>sha256(test,<sp/>len<sp/>+<sp/>56,<sp/>test);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>contains<sp/>the<sp/>initial<sp/>SHA-256<sp/>hash<sp/>input<sp/>K.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>revision6Hash(ownerPassword,<sp/>test,<sp/>userKey-&gt;getCString());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256KeyExpansion(&amp;state,<sp/>test,<sp/>32,<sp/>gTrue);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.cbc[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256DecryptBlock(&amp;state,<sp/>(Guchar<sp/>*)ownerEnc-&gt;getCString(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(fileKey,<sp/>state.buf,<sp/>16);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256DecryptBlock(&amp;state,<sp/>(Guchar<sp/>*)ownerEnc-&gt;getCString()<sp/>+<sp/>16,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(fileKey<sp/>+<sp/>16,<sp/>state.buf,<sp/>16);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>*ownerPasswordOk<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>user<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userPassword)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>is<sp/>supposed<sp/>to<sp/>convert<sp/>the<sp/>password<sp/>to<sp/>UTF-8<sp/>using<sp/>&quot;SASLprep&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>userPassword-&gt;getLength();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test,<sp/>userPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len,<sp/>userKey-&gt;getCString()<sp/>+<sp/>32,<sp/>8);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha256(test,<sp/>len<sp/>+<sp/>8,<sp/>test);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(encRevision<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>contains<sp/>the<sp/>initial<sp/>SHA-256<sp/>hash<sp/>input<sp/>K.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>key<sp/>is<sp/>not<sp/>used<sp/>in<sp/>checking<sp/>user<sp/>password.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>revision6Hash(userPassword,<sp/>test,<sp/>NULL);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(test,<sp/>userKey-&gt;getCString(),<sp/>32))<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>file<sp/>key<sp/>from<sp/>the<sp/>user<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test,<sp/>userPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len,<sp/>userKey-&gt;getCString()<sp/>+<sp/>40,<sp/>8);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>sha256(test,<sp/>len<sp/>+<sp/>8,<sp/>test);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(encRevision<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>contains<sp/>the<sp/>initial<sp/>SHA-256<sp/>hash<sp/>input<sp/>K.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//user<sp/>key<sp/>is<sp/>not<sp/>used<sp/>in<sp/>computing<sp/>intermediate<sp/>user<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>revision6Hash(userPassword,<sp/>test,<sp/>NULL);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256KeyExpansion(&amp;state,<sp/>test,<sp/>32,<sp/>gTrue);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.cbc[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256DecryptBlock(&amp;state,<sp/>(Guchar<sp/>*)userEnc-&gt;getCString(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(fileKey,<sp/>state.buf,<sp/>16);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256DecryptBlock(&amp;state,<sp/>(Guchar<sp/>*)userEnc-&gt;getCString()<sp/>+<sp/>16,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(fileKey<sp/>+<sp/>16,<sp/>state.buf,<sp/>16);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>using<sp/>the<sp/>supplied<sp/>owner<sp/>password<sp/>to<sp/>generate<sp/>the<sp/>user<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ownerPassword)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ownerPassword-&gt;getLength();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test,<sp/>ownerPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test<sp/>+<sp/>len,<sp/>passwordPad,<sp/>32<sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test,<sp/>ownerPassword-&gt;getCString(),<sp/>32);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md5(test,<sp/>32,<sp/>test);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md5(test,<sp/>keyLength,<sp/>test);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>rc4InitKey(test,<sp/>keyLength,<sp/>fState);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>fy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test2[i]<sp/>=<sp/>rc4DecryptByte(fState,<sp/>&amp;fx,<sp/>&amp;fy,<sp/>ownerKey-&gt;getChar(i));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test2,<sp/>ownerKey-&gt;getCString(),<sp/>32);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>19;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>keyLength;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpKey[j]<sp/>=<sp/>test[j]<sp/>^<sp/>i;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rc4InitKey(tmpKey,<sp/>keyLength,<sp/>fState);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>fy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test2[j]<sp/>=<sp/>rc4DecryptByte(fState,<sp/>&amp;fx,<sp/>&amp;fy,<sp/>test2[j]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>userPassword2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)test2,<sp/>32);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(makeFileKey2(encVersion,<sp/>encRevision,<sp/>keyLength,<sp/>ownerKey,<sp/>userKey,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions,<sp/>fileID,<sp/>userPassword2,<sp/>fileKey,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encryptMetadata))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>*ownerPasswordOk<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>userPassword2;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>userPassword2;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>using<sp/>the<sp/>supplied<sp/>user<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>makeFileKey2(encVersion,<sp/>encRevision,<sp/>keyLength,<sp/>ownerKey,<sp/>userKey,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions,<sp/>fileID,<sp/>userPassword,<sp/>fileKey,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encryptMetadata);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">GBool<sp/>Decrypt::makeFileKey2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encVersion,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encRevision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerKey,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userKey,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>permissions,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileID,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword,<sp/>Guchar<sp/>*fileKey,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>encryptMetadata)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>Guchar<sp/>*buf;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>Guchar<sp/>test[32];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>Guchar<sp/>fState[256];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>Guchar<sp/>tmpKey[16];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>Guchar<sp/>fx,<sp/>fy;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>GBool<sp/>ok;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>file<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>(Guchar<sp/>*)gmalloc(72<sp/>+<sp/>fileID-&gt;getLength());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userPassword)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>userPassword-&gt;getLength();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>userPassword-&gt;getCString(),<sp/>len);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf<sp/>+<sp/>len,<sp/>passwordPad,<sp/>32<sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>userPassword-&gt;getCString(),<sp/>32);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>passwordPad,<sp/>32);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>memcpy(buf<sp/>+<sp/>32,<sp/>ownerKey-&gt;getCString(),<sp/>32);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>buf[64]<sp/>=<sp/>permissions<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>buf[65]<sp/>=<sp/>(permissions<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>buf[66]<sp/>=<sp/>(permissions<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>buf[67]<sp/>=<sp/>(permissions<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>memcpy(buf<sp/>+<sp/>68,<sp/>fileID-&gt;getCString(),<sp/>fileID-&gt;getLength());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>68<sp/>+<sp/>fileID-&gt;getLength();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encryptMetadata)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[len++]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[len++]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[len++]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[len++]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>md5(buf,<sp/>len,<sp/>fileKey);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md5(fileKey,<sp/>keyLength,<sp/>fileKey);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>user<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>rc4InitKey(fileKey,<sp/>keyLength,<sp/>fState);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>fy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test[i]<sp/>=<sp/>rc4DecryptByte(fState,<sp/>&amp;fx,<sp/>&amp;fy,<sp/>userKey-&gt;getChar(i));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>memcmp(test,<sp/>passwordPad,<sp/>32)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(test,<sp/>userKey-&gt;getCString(),<sp/>32);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>19;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>keyLength;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpKey[j]<sp/>=<sp/>fileKey[j]<sp/>^<sp/>i;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rc4InitKey(tmpKey,<sp/>keyLength,<sp/>fState);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>fy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>test[j]<sp/>=<sp/>rc4DecryptByte(fState,<sp/>&amp;fx,<sp/>&amp;fy,<sp/>test[j]);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>passwordPad,<sp/>32);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf<sp/>+<sp/>32,<sp/>fileID-&gt;getCString(),<sp/>fileID-&gt;getLength());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>md5(buf,<sp/>32<sp/>+<sp/>fileID-&gt;getLength(),<sp/>buf);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>memcmp(test,<sp/>buf,<sp/>16)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>gfree(buf);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BaseCryptStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">BaseCryptStream::BaseCryptStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/>Guchar<sp/>*fileKey,<sp/>CryptAlgorithm<sp/>algoA,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen):</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>algo<sp/>=<sp/>algoA;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>object<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyLength;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[i]<sp/>=<sp/>fileKey[i];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptRC4:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength]<sp/>=<sp/>objNum<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>1]<sp/>=<sp/>(objNum<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>2]<sp/>=<sp/>(objNum<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>3]<sp/>=<sp/>objGen<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>4]<sp/>=<sp/>(objGen<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>md5(objKey,<sp/>keyLength<sp/>+<sp/>5,<sp/>objKey);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((objKeyLength<sp/>=<sp/>keyLength<sp/>+<sp/>5)<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objKeyLength<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength]<sp/>=<sp/>objNum<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>1]<sp/>=<sp/>(objNum<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>2]<sp/>=<sp/>(objNum<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>3]<sp/>=<sp/>objGen<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>4]<sp/>=<sp/>(objGen<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>5]<sp/>=<sp/>0x73;<sp/></highlight><highlight class="comment">//<sp/>&apos;s&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>6]<sp/>=<sp/>0x41;<sp/></highlight><highlight class="comment">//<sp/>&apos;A&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>7]<sp/>=<sp/>0x6c;<sp/></highlight><highlight class="comment">//<sp/>&apos;l&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>objKey[keyLength<sp/>+<sp/>8]<sp/>=<sp/>0x54;<sp/></highlight><highlight class="comment">//<sp/>&apos;T&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>md5(objKey,<sp/>keyLength<sp/>+<sp/>9,<sp/>objKey);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((objKeyLength<sp/>=<sp/>keyLength<sp/>+<sp/>5)<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objKeyLength<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>objKeyLength<sp/>=<sp/>keyLength;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>charactersRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>autoDelete<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">BaseCryptStream::~BaseCryptStream()<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(autoDelete)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BaseCryptStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>charactersRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>nextCharBuff<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">Goffset<sp/>BaseCryptStream::getPos()<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charactersRead;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BaseCryptStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>next<sp/>character<sp/>and<sp/>empty<sp/>the<sp/>buffer,<sp/>so<sp/>that<sp/>a<sp/>new<sp/>character<sp/>will<sp/>be<sp/>read<sp/>next<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lookChar();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>nextCharBuff<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>charactersRead++;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">GBool<sp/>BaseCryptStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(last);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BaseCryptStream::setAutoDelete(GBool<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>autoDelete<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EncryptStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">EncryptStream::EncryptStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/>Guchar<sp/>*fileKey,<sp/>CryptAlgorithm<sp/>algoA,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen):</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="class_base_crypt_stream" kindref="compound">BaseCryptStream</ref>(strA,<sp/>fileKey,<sp/>algoA,<sp/>keyLength,<sp/>objNum,<sp/>objGen)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>CBC<sp/>initialization<sp/>vector<sp/>for<sp/>AES<sp/>and<sp/>AES-256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>grandom_fill(state.aes.cbc,<sp/>16);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>grandom_fill(state.aes256.cbc,<sp/>16);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">EncryptStream::~EncryptStream()<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EncryptStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>BaseCryptStream::reset();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptRC4:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>state.rc4.x<sp/>=<sp/>state.rc4.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>rc4InitKey(objKey,<sp/>objKeyLength,<sp/>state.rc4.state);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>aesKeyExpansion(&amp;state.aes,<sp/>objKey,<sp/>objKeyLength,<sp/>gFalse);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state.aes.buf,<sp/>state.aes.cbc,<sp/>16);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>CBC<sp/>IV<sp/>to<sp/>buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes.bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes.paddingReached<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256KeyExpansion(&amp;state.aes256,<sp/>objKey,<sp/>objKeyLength,<sp/>gFalse);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state.aes256.buf,<sp/>state.aes256.cbc,<sp/>16);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>CBC<sp/>IV<sp/>to<sp/>buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes256.bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes256.paddingReached<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EncryptStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>Guchar<sp/>in[16];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCharBuff<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextCharBuff;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>EOF;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptRC4:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RC4<sp/>is<sp/>XOR-based:<sp/>the<sp/>decryption<sp/>algorithm<sp/>works<sp/>for<sp/>encryption<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>rc4DecryptByte(state.rc4.state,<sp/>&amp;state.rc4.x,<sp/>&amp;state.rc4.y,<sp/>(Guchar)c);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes.bufIdx<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>!state.aes.paddingReached)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.aes.paddingReached<sp/>=<sp/>!aesReadBlock(str,<sp/>in,<sp/>gTrue);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aesEncryptBlock(&amp;state.aes,<sp/>in);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>state.aes.buf[state.aes.bufIdx++];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes256.bufIdx<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>!state.aes256.paddingReached)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.aes256.paddingReached<sp/>=<sp/>!aesReadBlock(str,<sp/>in,<sp/>gTrue);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aes256EncryptBlock(&amp;state.aes256,<sp/>in);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes256.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>state.aes256.buf[state.aes256.bufIdx++];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nextCharBuff<sp/>=<sp/>c);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DecryptStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">DecryptStream::DecryptStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/>Guchar<sp/>*fileKey,<sp/>CryptAlgorithm<sp/>algoA,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen):</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="class_base_crypt_stream" kindref="compound">BaseCryptStream</ref>(strA,<sp/>fileKey,<sp/>algoA,<sp/>keyLength,<sp/>objNum,<sp/>objGen)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">DecryptStream::~DecryptStream()<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DecryptStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>BaseCryptStream::reset();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptRC4:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>state.rc4.x<sp/>=<sp/>state.rc4.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>rc4InitKey(objKey,<sp/>objKeyLength,<sp/>state.rc4.state);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>aesKeyExpansion(&amp;state.aes,<sp/>objKey,<sp/>objKeyLength,<sp/>gTrue);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.aes.cbc[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes.bufIdx<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>aes256KeyExpansion(&amp;state.aes256,<sp/>objKey,<sp/>objKeyLength,<sp/>gTrue);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state.aes256.cbc[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>state.aes256.bufIdx<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DecryptStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>Guchar<sp/>in[16];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCharBuff<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextCharBuff;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>EOF;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(algo)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptRC4:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>rc4DecryptByte(state.rc4.state,<sp/>&amp;state.rc4.x,<sp/>&amp;state.rc4.y,<sp/>(Guchar)c);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aesReadBlock(str,<sp/>in,<sp/>gFalse))<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aesDecryptBlock(&amp;state.aes,<sp/>in,<sp/>str-&gt;lookChar()<sp/>==<sp/>EOF);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>state.aes.buf[state.aes.bufIdx++];</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cryptAES256:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes256.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aesReadBlock(str,<sp/>in,<sp/>gFalse))<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aes256DecryptBlock(&amp;state.aes256,<sp/>in,<sp/>str-&gt;lookChar()<sp/>==<sp/>EOF);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.aes256.bufIdx<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>state.aes256.buf[state.aes256.bufIdx++];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nextCharBuff<sp/>=<sp/>c);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RC4-compatible<sp/>decryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rc4InitKey(Guchar<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLen,<sp/>Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>Guchar<sp/>index1,<sp/>index2;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>Guchar<sp/>t;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(keyLen<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>index1<sp/>=<sp/>index2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>(key[index1]<sp/>+<sp/>state[i]<sp/>+<sp/>index2)<sp/>%<sp/>256;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>state[i];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>state[index2];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>state[index2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>(index1<sp/>+<sp/>1)<sp/>%<sp/>keyLen;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Guchar<sp/>rc4DecryptByte(Guchar<sp/>*state,<sp/>Guchar<sp/>*x,<sp/>Guchar<sp/>*y,<sp/>Guchar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>Guchar<sp/>x1,<sp/>y1,<sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>*x<sp/>=<sp/>(*x<sp/>+<sp/>1)<sp/>%<sp/>256;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>*y<sp/>=<sp/>(state[*x]<sp/>+<sp/>*y)<sp/>%<sp/>256;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state[x1];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>state[y1];</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>state[x1]<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>state[y1]<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>^<sp/>state[(tx<sp/>+<sp/>ty)<sp/>%<sp/>256];</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AES<sp/>decryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>gFalse<sp/>if<sp/>EOF<sp/>was<sp/>reached,<sp/>gTrue<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>aesReadBlock(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>addPadding)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>i;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addPadding)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>16<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[i++]<sp/>=<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Guchar<sp/>sbox[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>0x63,<sp/>0x7c,<sp/>0x77,<sp/>0x7b,<sp/>0xf2,<sp/>0x6b,<sp/>0x6f,<sp/>0xc5,<sp/>0x30,<sp/>0x01,<sp/>0x67,<sp/>0x2b,<sp/>0xfe,<sp/>0xd7,<sp/>0xab,<sp/>0x76,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>0xca,<sp/>0x82,<sp/>0xc9,<sp/>0x7d,<sp/>0xfa,<sp/>0x59,<sp/>0x47,<sp/>0xf0,<sp/>0xad,<sp/>0xd4,<sp/>0xa2,<sp/>0xaf,<sp/>0x9c,<sp/>0xa4,<sp/>0x72,<sp/>0xc0,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>0xb7,<sp/>0xfd,<sp/>0x93,<sp/>0x26,<sp/>0x36,<sp/>0x3f,<sp/>0xf7,<sp/>0xcc,<sp/>0x34,<sp/>0xa5,<sp/>0xe5,<sp/>0xf1,<sp/>0x71,<sp/>0xd8,<sp/>0x31,<sp/>0x15,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>0x04,<sp/>0xc7,<sp/>0x23,<sp/>0xc3,<sp/>0x18,<sp/>0x96,<sp/>0x05,<sp/>0x9a,<sp/>0x07,<sp/>0x12,<sp/>0x80,<sp/>0xe2,<sp/>0xeb,<sp/>0x27,<sp/>0xb2,<sp/>0x75,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>0x09,<sp/>0x83,<sp/>0x2c,<sp/>0x1a,<sp/>0x1b,<sp/>0x6e,<sp/>0x5a,<sp/>0xa0,<sp/>0x52,<sp/>0x3b,<sp/>0xd6,<sp/>0xb3,<sp/>0x29,<sp/>0xe3,<sp/>0x2f,<sp/>0x84,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>0x53,<sp/>0xd1,<sp/>0x00,<sp/>0xed,<sp/>0x20,<sp/>0xfc,<sp/>0xb1,<sp/>0x5b,<sp/>0x6a,<sp/>0xcb,<sp/>0xbe,<sp/>0x39,<sp/>0x4a,<sp/>0x4c,<sp/>0x58,<sp/>0xcf,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>0xd0,<sp/>0xef,<sp/>0xaa,<sp/>0xfb,<sp/>0x43,<sp/>0x4d,<sp/>0x33,<sp/>0x85,<sp/>0x45,<sp/>0xf9,<sp/>0x02,<sp/>0x7f,<sp/>0x50,<sp/>0x3c,<sp/>0x9f,<sp/>0xa8,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>0x51,<sp/>0xa3,<sp/>0x40,<sp/>0x8f,<sp/>0x92,<sp/>0x9d,<sp/>0x38,<sp/>0xf5,<sp/>0xbc,<sp/>0xb6,<sp/>0xda,<sp/>0x21,<sp/>0x10,<sp/>0xff,<sp/>0xf3,<sp/>0xd2,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>0xcd,<sp/>0x0c,<sp/>0x13,<sp/>0xec,<sp/>0x5f,<sp/>0x97,<sp/>0x44,<sp/>0x17,<sp/>0xc4,<sp/>0xa7,<sp/>0x7e,<sp/>0x3d,<sp/>0x64,<sp/>0x5d,<sp/>0x19,<sp/>0x73,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>0x60,<sp/>0x81,<sp/>0x4f,<sp/>0xdc,<sp/>0x22,<sp/>0x2a,<sp/>0x90,<sp/>0x88,<sp/>0x46,<sp/>0xee,<sp/>0xb8,<sp/>0x14,<sp/>0xde,<sp/>0x5e,<sp/>0x0b,<sp/>0xdb,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>0xe0,<sp/>0x32,<sp/>0x3a,<sp/>0x0a,<sp/>0x49,<sp/>0x06,<sp/>0x24,<sp/>0x5c,<sp/>0xc2,<sp/>0xd3,<sp/>0xac,<sp/>0x62,<sp/>0x91,<sp/>0x95,<sp/>0xe4,<sp/>0x79,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>0xe7,<sp/>0xc8,<sp/>0x37,<sp/>0x6d,<sp/>0x8d,<sp/>0xd5,<sp/>0x4e,<sp/>0xa9,<sp/>0x6c,<sp/>0x56,<sp/>0xf4,<sp/>0xea,<sp/>0x65,<sp/>0x7a,<sp/>0xae,<sp/>0x08,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>0xba,<sp/>0x78,<sp/>0x25,<sp/>0x2e,<sp/>0x1c,<sp/>0xa6,<sp/>0xb4,<sp/>0xc6,<sp/>0xe8,<sp/>0xdd,<sp/>0x74,<sp/>0x1f,<sp/>0x4b,<sp/>0xbd,<sp/>0x8b,<sp/>0x8a,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>0x70,<sp/>0x3e,<sp/>0xb5,<sp/>0x66,<sp/>0x48,<sp/>0x03,<sp/>0xf6,<sp/>0x0e,<sp/>0x61,<sp/>0x35,<sp/>0x57,<sp/>0xb9,<sp/>0x86,<sp/>0xc1,<sp/>0x1d,<sp/>0x9e,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>0xe1,<sp/>0xf8,<sp/>0x98,<sp/>0x11,<sp/>0x69,<sp/>0xd9,<sp/>0x8e,<sp/>0x94,<sp/>0x9b,<sp/>0x1e,<sp/>0x87,<sp/>0xe9,<sp/>0xce,<sp/>0x55,<sp/>0x28,<sp/>0xdf,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>0x8c,<sp/>0xa1,<sp/>0x89,<sp/>0x0d,<sp/>0xbf,<sp/>0xe6,<sp/>0x42,<sp/>0x68,<sp/>0x41,<sp/>0x99,<sp/>0x2d,<sp/>0x0f,<sp/>0xb0,<sp/>0x54,<sp/>0xbb,<sp/>0x16</highlight></codeline>
<codeline lineno="645"><highlight class="normal">};</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Guchar<sp/>invSbox[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>0x52,<sp/>0x09,<sp/>0x6a,<sp/>0xd5,<sp/>0x30,<sp/>0x36,<sp/>0xa5,<sp/>0x38,<sp/>0xbf,<sp/>0x40,<sp/>0xa3,<sp/>0x9e,<sp/>0x81,<sp/>0xf3,<sp/>0xd7,<sp/>0xfb,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>0x7c,<sp/>0xe3,<sp/>0x39,<sp/>0x82,<sp/>0x9b,<sp/>0x2f,<sp/>0xff,<sp/>0x87,<sp/>0x34,<sp/>0x8e,<sp/>0x43,<sp/>0x44,<sp/>0xc4,<sp/>0xde,<sp/>0xe9,<sp/>0xcb,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>0x54,<sp/>0x7b,<sp/>0x94,<sp/>0x32,<sp/>0xa6,<sp/>0xc2,<sp/>0x23,<sp/>0x3d,<sp/>0xee,<sp/>0x4c,<sp/>0x95,<sp/>0x0b,<sp/>0x42,<sp/>0xfa,<sp/>0xc3,<sp/>0x4e,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>0x08,<sp/>0x2e,<sp/>0xa1,<sp/>0x66,<sp/>0x28,<sp/>0xd9,<sp/>0x24,<sp/>0xb2,<sp/>0x76,<sp/>0x5b,<sp/>0xa2,<sp/>0x49,<sp/>0x6d,<sp/>0x8b,<sp/>0xd1,<sp/>0x25,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>0x72,<sp/>0xf8,<sp/>0xf6,<sp/>0x64,<sp/>0x86,<sp/>0x68,<sp/>0x98,<sp/>0x16,<sp/>0xd4,<sp/>0xa4,<sp/>0x5c,<sp/>0xcc,<sp/>0x5d,<sp/>0x65,<sp/>0xb6,<sp/>0x92,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>0x6c,<sp/>0x70,<sp/>0x48,<sp/>0x50,<sp/>0xfd,<sp/>0xed,<sp/>0xb9,<sp/>0xda,<sp/>0x5e,<sp/>0x15,<sp/>0x46,<sp/>0x57,<sp/>0xa7,<sp/>0x8d,<sp/>0x9d,<sp/>0x84,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>0x90,<sp/>0xd8,<sp/>0xab,<sp/>0x00,<sp/>0x8c,<sp/>0xbc,<sp/>0xd3,<sp/>0x0a,<sp/>0xf7,<sp/>0xe4,<sp/>0x58,<sp/>0x05,<sp/>0xb8,<sp/>0xb3,<sp/>0x45,<sp/>0x06,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>0xd0,<sp/>0x2c,<sp/>0x1e,<sp/>0x8f,<sp/>0xca,<sp/>0x3f,<sp/>0x0f,<sp/>0x02,<sp/>0xc1,<sp/>0xaf,<sp/>0xbd,<sp/>0x03,<sp/>0x01,<sp/>0x13,<sp/>0x8a,<sp/>0x6b,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>0x3a,<sp/>0x91,<sp/>0x11,<sp/>0x41,<sp/>0x4f,<sp/>0x67,<sp/>0xdc,<sp/>0xea,<sp/>0x97,<sp/>0xf2,<sp/>0xcf,<sp/>0xce,<sp/>0xf0,<sp/>0xb4,<sp/>0xe6,<sp/>0x73,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>0x96,<sp/>0xac,<sp/>0x74,<sp/>0x22,<sp/>0xe7,<sp/>0xad,<sp/>0x35,<sp/>0x85,<sp/>0xe2,<sp/>0xf9,<sp/>0x37,<sp/>0xe8,<sp/>0x1c,<sp/>0x75,<sp/>0xdf,<sp/>0x6e,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>0x47,<sp/>0xf1,<sp/>0x1a,<sp/>0x71,<sp/>0x1d,<sp/>0x29,<sp/>0xc5,<sp/>0x89,<sp/>0x6f,<sp/>0xb7,<sp/>0x62,<sp/>0x0e,<sp/>0xaa,<sp/>0x18,<sp/>0xbe,<sp/>0x1b,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>0xfc,<sp/>0x56,<sp/>0x3e,<sp/>0x4b,<sp/>0xc6,<sp/>0xd2,<sp/>0x79,<sp/>0x20,<sp/>0x9a,<sp/>0xdb,<sp/>0xc0,<sp/>0xfe,<sp/>0x78,<sp/>0xcd,<sp/>0x5a,<sp/>0xf4,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>0x1f,<sp/>0xdd,<sp/>0xa8,<sp/>0x33,<sp/>0x88,<sp/>0x07,<sp/>0xc7,<sp/>0x31,<sp/>0xb1,<sp/>0x12,<sp/>0x10,<sp/>0x59,<sp/>0x27,<sp/>0x80,<sp/>0xec,<sp/>0x5f,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>0x60,<sp/>0x51,<sp/>0x7f,<sp/>0xa9,<sp/>0x19,<sp/>0xb5,<sp/>0x4a,<sp/>0x0d,<sp/>0x2d,<sp/>0xe5,<sp/>0x7a,<sp/>0x9f,<sp/>0x93,<sp/>0xc9,<sp/>0x9c,<sp/>0xef,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>0xa0,<sp/>0xe0,<sp/>0x3b,<sp/>0x4d,<sp/>0xae,<sp/>0x2a,<sp/>0xf5,<sp/>0xb0,<sp/>0xc8,<sp/>0xeb,<sp/>0xbb,<sp/>0x3c,<sp/>0x83,<sp/>0x53,<sp/>0x99,<sp/>0x61,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>0x17,<sp/>0x2b,<sp/>0x04,<sp/>0x7e,<sp/>0xba,<sp/>0x77,<sp/>0xd6,<sp/>0x26,<sp/>0xe1,<sp/>0x69,<sp/>0x14,<sp/>0x63,<sp/>0x55,<sp/>0x21,<sp/>0x0c,<sp/>0x7d</highlight></codeline>
<codeline lineno="664"><highlight class="normal">};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Guint<sp/>rcon[11]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>0x00000000,<sp/></highlight><highlight class="comment">//<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>0x01000000,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>0x02000000,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>0x04000000,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>0x08000000,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>0x10000000,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>0x20000000,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>0x40000000,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>0x80000000,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>0x1b000000,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>0x36000000</highlight></codeline>
<codeline lineno="678"><highlight class="normal">};</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>subWord(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sbox[x<sp/>&gt;&gt;<sp/>24]<sp/>&lt;&lt;<sp/>24)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(sbox[(x<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff]<sp/>&lt;&lt;<sp/>16)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(sbox[(x<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff]<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>sbox[x<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>rotWord(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((x<sp/>&lt;&lt;<sp/>8)<sp/>&amp;<sp/>0xffffffff)<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subBytes(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>sbox[state[i]];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invSubBytes(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>invSbox[state[i]];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shiftRows(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>Guchar<sp/>t;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[4];</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>state[4]<sp/>=<sp/>state[5];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>state[5]<sp/>=<sp/>state[6];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>state[6]<sp/>=<sp/>state[7];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>state[7]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[8];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>state[8]<sp/>=<sp/>state[10];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>state[10]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[9];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>state[9]<sp/>=<sp/>state[11];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>state[11]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[15];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>state[15]<sp/>=<sp/>state[14];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>state[14]<sp/>=<sp/>state[13];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>state[13]<sp/>=<sp/>state[12];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>state[12]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invShiftRows(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>Guchar<sp/>t;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[7];</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>state[7]<sp/>=<sp/>state[6];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>state[6]<sp/>=<sp/>state[5];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>state[5]<sp/>=<sp/>state[4];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>state[4]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[8];</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>state[8]<sp/>=<sp/>state[10];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>state[10]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[9];</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>state[9]<sp/>=<sp/>state[11];</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>state[11]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>state[12];</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>state[12]<sp/>=<sp/>state[13];</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>state[13]<sp/>=<sp/>state[14];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>state[14]<sp/>=<sp/>state[15];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>state[15]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{02}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul02(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{03}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul03(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>Guchar<sp/>s2<sp/>=<sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>^<sp/>s2;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{09}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul09(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>Guchar<sp/>s2,<sp/>s4,<sp/>s8;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>s4<sp/>=<sp/>(s2<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s2<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>s8<sp/>=<sp/>(s4<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s4<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s4<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>^<sp/>s8;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{0b}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul0b(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>Guchar<sp/>s2,<sp/>s4,<sp/>s8;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>s4<sp/>=<sp/>(s2<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s2<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>s8<sp/>=<sp/>(s4<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s4<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s4<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>^<sp/>s2<sp/>^<sp/>s8;</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{0d}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul0d(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>Guchar<sp/>s2,<sp/>s4,<sp/>s8;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>s4<sp/>=<sp/>(s2<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s2<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>s8<sp/>=<sp/>(s4<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s4<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s4<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>^<sp/>s4<sp/>^<sp/>s8;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{0e}<sp/>\cdot<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>mul0e(Guchar<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>Guchar<sp/>s2,<sp/>s4,<sp/>s8;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/>(s<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>s4<sp/>=<sp/>(s2<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s2<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>s8<sp/>=<sp/>(s4<sp/>&amp;<sp/>0x80)<sp/>?<sp/>((s4<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>0x1b)<sp/>:<sp/>(s4<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s2<sp/>^<sp/>s4<sp/>^<sp/>s8;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mixColumns(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>Guchar<sp/>s0,<sp/>s1,<sp/>s2,<sp/>s3;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>state[c];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>state[4+c];</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>state[8+c];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>s3<sp/>=<sp/>state[12+c];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>state[c]<sp/>=<sp/><sp/><sp/><sp/>mul02(s0)<sp/>^<sp/>mul03(s1)<sp/>^<sp/>s2<sp/>^<sp/>s3;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>state[4+c]<sp/>=<sp/><sp/>s0<sp/>^<sp/>mul02(s1)<sp/>^<sp/>mul03(s2)<sp/>^<sp/>s3;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>state[8+c]<sp/>=<sp/><sp/>s0<sp/>^<sp/>s1<sp/>^<sp/>mul02(s2)<sp/>^<sp/>mul03(s3);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>state[12+c]<sp/>=<sp/>mul03(s0)<sp/>^<sp/>s1<sp/>^<sp/>s2<sp/>^<sp/>mul02(s3);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invMixColumns(Guchar<sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>Guchar<sp/>s0,<sp/>s1,<sp/>s2,<sp/>s3;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>state[c];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>state[4+c];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>state[8+c];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>s3<sp/>=<sp/>state[12+c];</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>state[c]<sp/>=<sp/><sp/><sp/><sp/>mul0e(s0)<sp/>^<sp/>mul0b(s1)<sp/>^<sp/>mul0d(s2)<sp/>^<sp/>mul09(s3);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>state[4+c]<sp/>=<sp/><sp/>mul09(s0)<sp/>^<sp/>mul0e(s1)<sp/>^<sp/>mul0b(s2)<sp/>^<sp/>mul0d(s3);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>state[8+c]<sp/>=<sp/><sp/>mul0d(s0)<sp/>^<sp/>mul09(s1)<sp/>^<sp/>mul0e(s2)<sp/>^<sp/>mul0b(s3);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>state[12+c]<sp/>=<sp/>mul0b(s0)<sp/>^<sp/>mul0d(s1)<sp/>^<sp/>mul09(s2)<sp/>^<sp/>mul0e(s3);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invMixColumnsW(Guint<sp/>*w)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>Guchar<sp/>s0,<sp/>s1,<sp/>s2,<sp/>s3;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>w[c]<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>w[c]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>w[c]<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>s3<sp/>=<sp/>w[c];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>w[c]<sp/>=<sp/>((mul0e(s0)<sp/>^<sp/>mul0b(s1)<sp/>^<sp/>mul0d(s2)<sp/>^<sp/>mul09(s3))<sp/>&lt;&lt;<sp/>24)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((mul09(s0)<sp/>^<sp/>mul0e(s1)<sp/>^<sp/>mul0b(s2)<sp/>^<sp/>mul0d(s3))<sp/>&lt;&lt;<sp/>16)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((mul0d(s0)<sp/>^<sp/>mul09(s1)<sp/>^<sp/>mul0e(s2)<sp/>^<sp/>mul0b(s3))<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(mul0b(s0)<sp/>^<sp/>mul0d(s1)<sp/>^<sp/>mul09(s2)<sp/>^<sp/>mul0e(s3));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addRoundKey(Guchar<sp/>*state,<sp/>Guint<sp/>*w)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>state[c]<sp/>^=<sp/>w[c]<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>state[4+c]<sp/>^=<sp/>w[c]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>state[8+c]<sp/>^=<sp/>w[c]<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>state[12+c]<sp/>^=<sp/>w[c];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesKeyExpansion(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*objKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*objKeyLen*/</highlight><highlight class="normal">,<sp/>GBool<sp/>decrypt)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>Guint<sp/>temp;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>round;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>assumes<sp/>objKeyLen<sp/>==<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;w[i]<sp/>=<sp/>(objKey[4*i]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(objKey[4*i+1]<sp/>&lt;&lt;<sp/>16)<sp/>+</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(objKey[4*i+2]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>objKey[4*i+3];</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&lt;<sp/>44;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>s-&gt;w[i-1];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(i<sp/>&amp;<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>subWord(rotWord(temp))<sp/>^<sp/>rcon[i/4];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;w[i]<sp/>=<sp/>s-&gt;w[i-4]<sp/>^<sp/>temp;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>decryption,<sp/>adjust<sp/>the<sp/>key<sp/>schedule<sp/>for<sp/>the<sp/>equivalent<sp/>inverse<sp/>cipher<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypt)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>1;<sp/>round<sp/>&lt;=<sp/>9;<sp/>++round)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invMixColumnsW(&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesEncryptBlock(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,<sp/>Guchar<sp/>*in)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>round;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>state<sp/>(input<sp/>is<sp/>xor&apos;d<sp/>with<sp/>previous<sp/>output<sp/>because<sp/>of<sp/>CBC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[c]<sp/>=<sp/>in[4*c]<sp/>^<sp/>s-&gt;buf[4*c];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[4+c]<sp/>=<sp/>in[4*c+1]<sp/>^<sp/>s-&gt;buf[4*c+1];</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[8+c]<sp/>=<sp/>in[4*c+2]<sp/>^<sp/>s-&gt;buf[4*c+2];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[12+c]<sp/>=<sp/>in[4*c+3]<sp/>^<sp/>s-&gt;buf[4*c+3];</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[0]);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rounds<sp/>1-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>1;<sp/>round<sp/>&lt;=<sp/>9;<sp/>++round)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>subBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>shiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>mixColumns(s-&gt;state);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>subBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>shiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[10<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c]<sp/>=<sp/>s-&gt;state[c];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+1]<sp/>=<sp/>s-&gt;state[4+c];</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+2]<sp/>=<sp/>s-&gt;state[8+c];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+3]<sp/>=<sp/>s-&gt;state[12+c];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aesDecryptBlock(<ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>*s,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>round,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[c]<sp/>=<sp/>in[4*c];</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[4+c]<sp/>=<sp/>in[4*c+1];</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[8+c]<sp/>=<sp/>in[4*c+2];</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[12+c]<sp/>=<sp/>in[4*c+3];</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[10<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rounds<sp/>1-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>9;<sp/>round<sp/>&gt;=<sp/>1;<sp/>--round)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>invSubBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>invShiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>invMixColumns(s-&gt;state);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>invSubBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>invShiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[0]);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CBC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c]<sp/>=<sp/>s-&gt;state[c]<sp/>^<sp/>s-&gt;cbc[4*c];</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+1]<sp/>=<sp/>s-&gt;state[4+c]<sp/>^<sp/>s-&gt;cbc[4*c+1];</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+2]<sp/>=<sp/>s-&gt;state[8+c]<sp/>^<sp/>s-&gt;cbc[4*c+2];</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+3]<sp/>=<sp/>s-&gt;state[12+c]<sp/>^<sp/>s-&gt;cbc[4*c+3];</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>input<sp/>block<sp/>for<sp/>the<sp/>next<sp/>CBC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;cbc[i]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;buf[15];</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1<sp/>||<sp/>n<sp/>&gt;<sp/>16)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>15;<sp/>i<sp/>&gt;=<sp/>n;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;buf[i]<sp/>=<sp/>s-&gt;buf[i-n];</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AES-256<sp/>decryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256KeyExpansion(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*objKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objKeyLen,<sp/>GBool<sp/>decrypt)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>Guint<sp/>temp;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>round;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>assumes<sp/>objKeyLen<sp/>==<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;w[i]<sp/>=<sp/>(objKey[4*i]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(objKey[4*i+1]<sp/>&lt;&lt;<sp/>16)<sp/>+</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(objKey[4*i+2]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>objKey[4*i+3];</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>8;<sp/>i<sp/>&lt;<sp/>60;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>s-&gt;w[i-1];</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>7)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>subWord(rotWord(temp))<sp/>^<sp/>rcon[i/8];</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>7)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>subWord(temp);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;w[i]<sp/>=<sp/>s-&gt;w[i-8]<sp/>^<sp/>temp;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>decryption,<sp/>adjust<sp/>the<sp/>key<sp/>schedule<sp/>for<sp/>the<sp/>equivalent<sp/>inverse<sp/>cipher<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypt)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>1;<sp/>round<sp/>&lt;=<sp/>13;<sp/>++round)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invMixColumnsW(&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256EncryptBlock(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,<sp/>Guchar<sp/>*in)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>round;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>state<sp/>(input<sp/>is<sp/>xor&apos;d<sp/>with<sp/>previous<sp/>output<sp/>because<sp/>of<sp/>CBC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[c]<sp/>=<sp/>in[4*c]<sp/>^<sp/>s-&gt;buf[4*c];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[4+c]<sp/>=<sp/>in[4*c+1]<sp/>^<sp/>s-&gt;buf[4*c+1];</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[8+c]<sp/>=<sp/>in[4*c+2]<sp/>^<sp/>s-&gt;buf[4*c+2];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[12+c]<sp/>=<sp/>in[4*c+3]<sp/>^<sp/>s-&gt;buf[4*c+3];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[0]);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rounds<sp/>1-13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>1;<sp/>round<sp/>&lt;=<sp/>13;<sp/>++round)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>subBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>shiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>mixColumns(s-&gt;state);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>subBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>shiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[14<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c]<sp/>=<sp/>s-&gt;state[c];</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+1]<sp/>=<sp/>s-&gt;state[4+c];</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+2]<sp/>=<sp/>s-&gt;state[8+c];</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+3]<sp/>=<sp/>s-&gt;state[12+c];</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aes256DecryptBlock(<ref refid="struct_decrypt_a_e_s256_state" kindref="compound">DecryptAES256State</ref><sp/>*s,<sp/>Guchar<sp/>*in,<sp/>GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>round,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[c]<sp/>=<sp/>in[4*c];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[4+c]<sp/>=<sp/>in[4*c+1];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[8+c]<sp/>=<sp/>in[4*c+2];</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;state[12+c]<sp/>=<sp/>in[4*c+3];</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[14<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rounds<sp/>13-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>13;<sp/>round<sp/>&gt;=<sp/>1;<sp/>--round)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>invSubBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>invShiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>invMixColumns(s-&gt;state);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[round<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>invSubBytes(s-&gt;state);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>invShiftRows(s-&gt;state);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>addRoundKey(s-&gt;state,<sp/>&amp;s-&gt;w[0]);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CBC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c]<sp/>=<sp/>s-&gt;state[c]<sp/>^<sp/>s-&gt;cbc[4*c];</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+1]<sp/>=<sp/>s-&gt;state[4+c]<sp/>^<sp/>s-&gt;cbc[4*c+1];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+2]<sp/>=<sp/>s-&gt;state[8+c]<sp/>^<sp/>s-&gt;cbc[4*c+2];</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;buf[4*c+3]<sp/>=<sp/>s-&gt;state[12+c]<sp/>^<sp/>s-&gt;cbc[4*c+3];</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>input<sp/>block<sp/>for<sp/>the<sp/>next<sp/>CBC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;cbc[i]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;buf[15];</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1<sp/>||<sp/>n<sp/>&gt;<sp/>16)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>15;<sp/>i<sp/>&gt;=<sp/>n;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;buf[i]<sp/>=<sp/>s-&gt;buf[i-n];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>16)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Reducing<sp/>bufIdx<sp/>from<sp/>{0:d}<sp/>to<sp/>16<sp/>to<sp/>not<sp/>crash&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;bufIdx<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MD5<sp/>message<sp/>digest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>works<sp/>around<sp/>a<sp/>bug<sp/>in<sp/>older<sp/>Sun<sp/>compilers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Gulong<sp/>rotateLeft(Gulong<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>x<sp/>&amp;=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((x<sp/>&lt;&lt;<sp/>r)<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>r)))<sp/>&amp;<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Gulong<sp/>md5Round1(Gulong<sp/>a,<sp/>Gulong<sp/>b,<sp/>Gulong<sp/>c,<sp/>Gulong<sp/>d,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gulong<sp/>Xk,<sp/><sp/>Gulong<sp/>s,<sp/>Gulong<sp/>Ti)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>rotateLeft((a<sp/>+<sp/>((b<sp/>&amp;<sp/>c)<sp/>|<sp/>(~b<sp/>&amp;<sp/>d))<sp/>+<sp/>Xk<sp/>+<sp/>Ti),<sp/>s);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Gulong<sp/>md5Round2(Gulong<sp/>a,<sp/>Gulong<sp/>b,<sp/>Gulong<sp/>c,<sp/>Gulong<sp/>d,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gulong<sp/>Xk,<sp/><sp/>Gulong<sp/>s,<sp/>Gulong<sp/>Ti)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>rotateLeft((a<sp/>+<sp/>((b<sp/>&amp;<sp/>d)<sp/>|<sp/>(c<sp/>&amp;<sp/>~d))<sp/>+<sp/>Xk<sp/>+<sp/>Ti),<sp/>s);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Gulong<sp/>md5Round3(Gulong<sp/>a,<sp/>Gulong<sp/>b,<sp/>Gulong<sp/>c,<sp/>Gulong<sp/>d,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gulong<sp/>Xk,<sp/><sp/>Gulong<sp/>s,<sp/>Gulong<sp/>Ti)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>rotateLeft((a<sp/>+<sp/>(b<sp/>^<sp/>c<sp/>^<sp/>d)<sp/>+<sp/>Xk<sp/>+<sp/>Ti),<sp/>s);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Gulong<sp/>md5Round4(Gulong<sp/>a,<sp/>Gulong<sp/>b,<sp/>Gulong<sp/>c,<sp/>Gulong<sp/>d,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gulong<sp/>Xk,<sp/><sp/>Gulong<sp/>s,<sp/>Gulong<sp/>Ti)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>rotateLeft((a<sp/>+<sp/>(c<sp/>^<sp/>(b<sp/>|<sp/>~d))<sp/>+<sp/>Xk<sp/>+<sp/>Ti),<sp/>s);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>md5(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*digest)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>Gulong<sp/>x[16];</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>Gulong<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>aa,<sp/>bb,<sp/>cc,<sp/>dd;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n64;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgLen<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>number<sp/>of<sp/>64-byte<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(length<sp/>+<sp/>pad<sp/>byte<sp/>(0x80)<sp/>+<sp/>8<sp/>bytes<sp/>for<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>n64<sp/>=<sp/>(msgLen<sp/>+<sp/>1<sp/>+<sp/>8<sp/>+<sp/>63)<sp/>/<sp/>64;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>a,<sp/>b,<sp/>c,<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>0x67452301;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>0xefcdab89;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>0x98badcfe;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>0x10325476;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>grab<sp/>a<sp/>64-byte<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>16<sp/>&amp;&amp;<sp/>k<sp/>&lt;<sp/>msgLen<sp/>-<sp/>3;<sp/>++j,<sp/>k<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>(((((msg[k+3]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k+2])<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k+1])<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k];</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>n64<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>msgLen<sp/>-<sp/>3)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>0x80000000<sp/>+<sp/>(((msg[k+2]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k+1])<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k];</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>msgLen<sp/>-<sp/>2)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>0x800000<sp/>+<sp/>(msg[k+1]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>msg[k];</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>msgLen<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>0x8000<sp/>+<sp/>msg[k];</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>x[j++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[14]<sp/>=<sp/>msgLen<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>a,<sp/>b,<sp/>c,<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>aa<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>bb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>dd<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round1(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[0],<sp/><sp/><sp/>7,<sp/>0xd76aa478);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round1(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[1],<sp/><sp/>12,<sp/>0xe8c7b756);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round1(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[2],<sp/><sp/>17,<sp/>0x242070db);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round1(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[3],<sp/><sp/>22,<sp/>0xc1bdceee);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round1(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[4],<sp/><sp/><sp/>7,<sp/>0xf57c0faf);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round1(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[5],<sp/><sp/>12,<sp/>0x4787c62a);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round1(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[6],<sp/><sp/>17,<sp/>0xa8304613);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round1(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[7],<sp/><sp/>22,<sp/>0xfd469501);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round1(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[8],<sp/><sp/><sp/>7,<sp/>0x698098d8);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round1(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[9],<sp/><sp/>12,<sp/>0x8b44f7af);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round1(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[10],<sp/>17,<sp/>0xffff5bb1);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round1(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[11],<sp/>22,<sp/>0x895cd7be);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round1(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[12],<sp/><sp/>7,<sp/>0x6b901122);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round1(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[13],<sp/>12,<sp/>0xfd987193);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round1(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[14],<sp/>17,<sp/>0xa679438e);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round1(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[15],<sp/>22,<sp/>0x49b40821);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round2(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[1],<sp/><sp/><sp/>5,<sp/>0xf61e2562);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round2(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[6],<sp/><sp/><sp/>9,<sp/>0xc040b340);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round2(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[11],<sp/>14,<sp/>0x265e5a51);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round2(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[0],<sp/><sp/>20,<sp/>0xe9b6c7aa);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round2(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[5],<sp/><sp/><sp/>5,<sp/>0xd62f105d);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round2(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[10],<sp/><sp/>9,<sp/>0x02441453);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round2(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[15],<sp/>14,<sp/>0xd8a1e681);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round2(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[4],<sp/><sp/>20,<sp/>0xe7d3fbc8);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round2(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[9],<sp/><sp/><sp/>5,<sp/>0x21e1cde6);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round2(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[14],<sp/><sp/>9,<sp/>0xc33707d6);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round2(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[3],<sp/><sp/>14,<sp/>0xf4d50d87);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round2(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[8],<sp/><sp/>20,<sp/>0x455a14ed);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round2(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[13],<sp/><sp/>5,<sp/>0xa9e3e905);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round2(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[2],<sp/><sp/><sp/>9,<sp/>0xfcefa3f8);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round2(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[7],<sp/><sp/>14,<sp/>0x676f02d9);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round2(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[12],<sp/>20,<sp/>0x8d2a4c8a);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round3(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[5],<sp/><sp/><sp/>4,<sp/>0xfffa3942);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round3(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[8],<sp/><sp/>11,<sp/>0x8771f681);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round3(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[11],<sp/>16,<sp/>0x6d9d6122);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round3(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[14],<sp/>23,<sp/>0xfde5380c);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round3(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[1],<sp/><sp/><sp/>4,<sp/>0xa4beea44);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round3(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[4],<sp/><sp/>11,<sp/>0x4bdecfa9);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round3(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[7],<sp/><sp/>16,<sp/>0xf6bb4b60);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round3(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[10],<sp/>23,<sp/>0xbebfbc70);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round3(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[13],<sp/><sp/>4,<sp/>0x289b7ec6);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round3(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[0],<sp/><sp/>11,<sp/>0xeaa127fa);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round3(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[3],<sp/><sp/>16,<sp/>0xd4ef3085);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round3(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[6],<sp/><sp/>23,<sp/>0x04881d05);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round3(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[9],<sp/><sp/><sp/>4,<sp/>0xd9d4d039);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round3(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[12],<sp/>11,<sp/>0xe6db99e5);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round3(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[15],<sp/>16,<sp/>0x1fa27cf8);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round3(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[2],<sp/><sp/>23,<sp/>0xc4ac5665);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round4(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[0],<sp/><sp/><sp/>6,<sp/>0xf4292244);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round4(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[7],<sp/><sp/>10,<sp/>0x432aff97);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round4(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[14],<sp/>15,<sp/>0xab9423a7);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round4(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[5],<sp/><sp/>21,<sp/>0xfc93a039);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round4(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[12],<sp/><sp/>6,<sp/>0x655b59c3);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round4(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[3],<sp/><sp/>10,<sp/>0x8f0ccc92);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round4(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[10],<sp/>15,<sp/>0xffeff47d);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round4(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[1],<sp/><sp/>21,<sp/>0x85845dd1);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round4(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[8],<sp/><sp/><sp/>6,<sp/>0x6fa87e4f);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round4(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[15],<sp/>10,<sp/>0xfe2ce6e0);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round4(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[6],<sp/><sp/>15,<sp/>0xa3014314);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round4(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[13],<sp/>21,<sp/>0x4e0811a1);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>md5Round4(a,<sp/>b,<sp/>c,<sp/>d,<sp/>x[4],<sp/><sp/><sp/>6,<sp/>0xf7537e82);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>md5Round4(d,<sp/>a,<sp/>b,<sp/>c,<sp/>x[11],<sp/>10,<sp/>0xbd3af235);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>md5Round4(c,<sp/>d,<sp/>a,<sp/>b,<sp/>x[2],<sp/><sp/>15,<sp/>0x2ad7d2bb);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>md5Round4(b,<sp/>c,<sp/>d,<sp/>a,<sp/>x[9],<sp/><sp/>21,<sp/>0xeb86d391);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>a,<sp/>b,<sp/>c,<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>aa;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>bb;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>cc;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>dd;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>break<sp/>digest<sp/>into<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>digest[0]<sp/>=<sp/>(Guchar)(a<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>digest[1]<sp/>=<sp/>(Guchar)((a<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>digest[2]<sp/>=<sp/>(Guchar)((a<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>digest[3]<sp/>=<sp/>(Guchar)((a<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>digest[4]<sp/>=<sp/>(Guchar)(b<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>digest[5]<sp/>=<sp/>(Guchar)((b<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>digest[6]<sp/>=<sp/>(Guchar)((b<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>digest[7]<sp/>=<sp/>(Guchar)((b<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>digest[8]<sp/>=<sp/>(Guchar)(c<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>digest[9]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>digest[10]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>digest[11]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>digest[12]<sp/>=<sp/>(Guchar)(d<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>digest[13]<sp/>=<sp/>(Guchar)((d<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>digest[14]<sp/>=<sp/>(Guchar)((d<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>digest[15]<sp/>=<sp/>(Guchar)((d<sp/>&gt;&gt;=<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SHA-256<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Guint<sp/>sha256K[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>0x428a2f98,<sp/>0x71374491,<sp/>0xb5c0fbcf,<sp/>0xe9b5dba5,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>0x3956c25b,<sp/>0x59f111f1,<sp/>0x923f82a4,<sp/>0xab1c5ed5,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>0xd807aa98,<sp/>0x12835b01,<sp/>0x243185be,<sp/>0x550c7dc3,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>0x72be5d74,<sp/>0x80deb1fe,<sp/>0x9bdc06a7,<sp/>0xc19bf174,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>0xe49b69c1,<sp/>0xefbe4786,<sp/>0x0fc19dc6,<sp/>0x240ca1cc,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>0x2de92c6f,<sp/>0x4a7484aa,<sp/>0x5cb0a9dc,<sp/>0x76f988da,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>0x983e5152,<sp/>0xa831c66d,<sp/>0xb00327c8,<sp/>0xbf597fc7,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>0xc6e00bf3,<sp/>0xd5a79147,<sp/>0x06ca6351,<sp/>0x14292967,</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>0x27b70a85,<sp/>0x2e1b2138,<sp/>0x4d2c6dfc,<sp/>0x53380d13,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>0x650a7354,<sp/>0x766a0abb,<sp/>0x81c2c92e,<sp/>0x92722c85,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>0xa2bfe8a1,<sp/>0xa81a664b,<sp/>0xc24b8b70,<sp/>0xc76c51a3,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>0xd192e819,<sp/>0xd6990624,<sp/>0xf40e3585,<sp/>0x106aa070,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>0x19a4c116,<sp/>0x1e376c08,<sp/>0x2748774c,<sp/>0x34b0bcb5,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>0x391c0cb3,<sp/>0x4ed8aa4a,<sp/>0x5b9cca4f,<sp/>0x682e6ff3,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>0x748f82ee,<sp/>0x78a5636f,<sp/>0x84c87814,<sp/>0x8cc70208,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>0x90befffa,<sp/>0xa4506ceb,<sp/>0xbef9a3f7,<sp/>0xc67178f2</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>rotr(Guint<sp/>x,<sp/>Guint<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;&gt;<sp/>n)<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256Ch(Guint<sp/>x,<sp/>Guint<sp/>y,<sp/>Guint<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&amp;<sp/>y)<sp/>^<sp/>(~x<sp/>&amp;<sp/>z);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256Maj(Guint<sp/>x,<sp/>Guint<sp/>y,<sp/>Guint<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&amp;<sp/>y)<sp/>^<sp/>(x<sp/>&amp;<sp/>z)<sp/>^<sp/>(y<sp/>&amp;<sp/>z);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256Sigma0(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>2)<sp/>^<sp/>rotr(x,<sp/>13)<sp/>^<sp/>rotr(x,<sp/>22);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256Sigma1(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>6)<sp/>^<sp/>rotr(x,<sp/>11)<sp/>^<sp/>rotr(x,<sp/>25);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256sigma0(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>7)<sp/>^<sp/>rotr(x,<sp/>18)<sp/>^<sp/>(x<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guint<sp/>sha256sigma1(Guint<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>17)<sp/>^<sp/>rotr(x,<sp/>19)<sp/>^<sp/>(x<sp/>&gt;&gt;<sp/>10);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha256HashBlock(Guchar<sp/>*blk,<sp/>Guint<sp/>*H)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>Guint<sp/>W[64];</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>Guint<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>Guint<sp/>T1,<sp/>T2;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>Guint<sp/>t;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>prepare<sp/>the<sp/>message<sp/>schedule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>16;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>W[t]<sp/>=<sp/>(blk[t*4]<sp/>&lt;&lt;<sp/>24)<sp/>|</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk[t*4<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk[t*4<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk[t*4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>16;<sp/>t<sp/>&lt;<sp/>64;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>W[t]<sp/>=<sp/>sha256sigma1(W[t-2])<sp/>+<sp/>W[t-7]<sp/>+<sp/>sha256sigma0(W[t-15])<sp/>+<sp/>W[t-16];</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>initialize<sp/>the<sp/>eight<sp/>working<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>H[0];</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>H[1];</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>H[2];</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>H[3];</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>e<sp/>=<sp/>H[4];</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>H[5];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>H[6];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>H[7];</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>64;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/>=<sp/>h<sp/>+<sp/>sha256Sigma1(e)<sp/>+<sp/>sha256Ch(e,f,g)<sp/>+<sp/>sha256K[t]<sp/>+<sp/>W[t];</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>sha256Sigma0(a)<sp/>+<sp/>sha256Maj(a,b,c);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>d<sp/>+<sp/>T1;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>T1<sp/>+<sp/>T2;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>compute<sp/>the<sp/>intermediate<sp/>hash<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>H[0]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>H[1]<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>H[2]<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>H[3]<sp/>+=<sp/>d;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>H[4]<sp/>+=<sp/>e;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>H[5]<sp/>+=<sp/>f;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>H[6]<sp/>+=<sp/>g;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>H[7]<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha256(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>Guchar<sp/>blk[64];</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>Guint<sp/>H[8];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkLen,<sp/>i;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>H[0]<sp/>=<sp/>0x6a09e667;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>H[1]<sp/>=<sp/>0xbb67ae85;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>H[2]<sp/>=<sp/>0x3c6ef372;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>H[3]<sp/>=<sp/>0xa54ff53a;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>H[4]<sp/>=<sp/>0x510e527f;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>H[5]<sp/>=<sp/>0x9b05688c;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>H[6]<sp/>=<sp/>0x1f83d9ab;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>H[7]<sp/>=<sp/>0x5be0cd19;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>blkLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>64<sp/>&lt;=<sp/>msgLen;<sp/>i<sp/>+=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>sha256HashBlock(msg<sp/>+<sp/>i,<sp/>H);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>blkLen<sp/>=<sp/>msgLen<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(blk,<sp/>msg<sp/>+<sp/>i,<sp/>blkLen);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>56)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>sha256HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>blkLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>56)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>blk[56]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>blk[57]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>blk[58]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>blk[59]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>blk[60]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>blk[61]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>13);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>blk[62]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>5);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>blk[63]<sp/>=<sp/>(Guchar)(msgLen<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>sha256HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>output<sp/>into<sp/>the<sp/>buffer<sp/>(convert<sp/>words<sp/>to<sp/>bytes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*4]<sp/><sp/><sp/><sp/><sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*4<sp/>+<sp/>1]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*4<sp/>+<sp/>2]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*4<sp/>+<sp/>3]<sp/>=<sp/>(Guchar)H[i];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SHA-512<sp/>hash<sp/>(see<sp/>FIPS<sp/>180-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SHA<sp/>384<sp/>and<sp/>SHA<sp/>512<sp/>use<sp/>the<sp/>same<sp/>sequence<sp/>of<sp/>eighty<sp/>constant<sp/>64<sp/>bit<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>K[80]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>0x428a2f98d728ae22ull,<sp/>0x7137449123ef65cdull,<sp/>0xb5c0fbcfec4d3b2full,<sp/>0xe9b5dba58189dbbcull,<sp/>0x3956c25bf348b538ull,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>0x59f111f1b605d019ull,<sp/>0x923f82a4af194f9bull,<sp/>0xab1c5ed5da6d8118ull,<sp/>0xd807aa98a3030242ull,<sp/>0x12835b0145706fbeull,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>0x243185be4ee4b28cull,<sp/>0x550c7dc3d5ffb4e2ull,<sp/>0x72be5d74f27b896full,<sp/>0x80deb1fe3b1696b1ull,<sp/>0x9bdc06a725c71235ull,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>0xc19bf174cf692694ull,<sp/>0xe49b69c19ef14ad2ull,<sp/>0xefbe4786384f25e3ull,<sp/>0x0fc19dc68b8cd5b5ull,<sp/>0x240ca1cc77ac9c65ull,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>0x2de92c6f592b0275ull,<sp/>0x4a7484aa6ea6e483ull,<sp/>0x5cb0a9dcbd41fbd4ull,<sp/>0x76f988da831153b5ull,<sp/>0x983e5152ee66dfabull,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>0xa831c66d2db43210ull,<sp/>0xb00327c898fb213full,<sp/>0xbf597fc7beef0ee4ull,<sp/>0xc6e00bf33da88fc2ull,<sp/>0xd5a79147930aa725ull,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>0x06ca6351e003826full,<sp/>0x142929670a0e6e70ull,<sp/>0x27b70a8546d22ffcull,<sp/>0x2e1b21385c26c926ull,<sp/>0x4d2c6dfc5ac42aedull,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>0x53380d139d95b3dfull,<sp/>0x650a73548baf63deull,<sp/>0x766a0abb3c77b2a8ull,<sp/>0x81c2c92e47edaee6ull,<sp/>0x92722c851482353bull,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>0xa2bfe8a14cf10364ull,<sp/>0xa81a664bbc423001ull,<sp/>0xc24b8b70d0f89791ull,<sp/>0xc76c51a30654be30ull,<sp/>0xd192e819d6ef5218ull,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>0xd69906245565a910ull,<sp/>0xf40e35855771202aull,<sp/>0x106aa07032bbd1b8ull,<sp/>0x19a4c116b8d2d0c8ull,<sp/>0x1e376c085141ab53ull,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>0x2748774cdf8eeb99ull,<sp/>0x34b0bcb5e19b48a8ull,<sp/>0x391c0cb3c5c95a63ull,<sp/>0x4ed8aa4ae3418acbull,<sp/>0x5b9cca4f7763e373ull,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>0x682e6ff3d6b2b8a3ull,<sp/>0x748f82ee5defb2fcull,<sp/>0x78a5636f43172f60ull,<sp/>0x84c87814a1f0ab72ull,<sp/>0x8cc702081a6439ecull,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>0x90befffa23631e28ull,<sp/>0xa4506cebde82bde9ull,<sp/>0xbef9a3f7b2c67915ull,<sp/>0xc67178f2e372532bull,<sp/>0xca273eceea26619cull,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>0xd186b8c721c0c207ull,<sp/>0xeada7dd6cde0eb1eull,<sp/>0xf57d4f7fee6ed178ull,<sp/>0x06f067aa72176fbaull,<sp/>0x0a637dc5a2c898a6ull,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>0x113f9804bef90daeull,<sp/>0x1b710b35131c471bull,<sp/>0x28db77f523047d84ull,<sp/>0x32caab7b40c72493ull,<sp/>0x3c9ebe0a15c9bebcull,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>0x431d67c49c100d4cull,<sp/>0x4cc5d4becb3e42b6ull,<sp/>0x597f299cfc657e2aull,<sp/>0x5fcb6fab3ad6faecull,<sp/>0x6c44198c4a475817ull</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>rotr(uint64_t<sp/>x,<sp/>uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;&gt;<sp/>n)<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>(64<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">/*static<sp/>inline<sp/>uint64_t<sp/>rotl(uint64_t<sp/>x,<sp/>uint64_t<sp/>n){</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/><sp/>return<sp/>(x<sp/>&lt;&lt;<sp/>n)<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="1471"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512Ch(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&amp;<sp/>y)<sp/>^<sp/>(~x<sp/>&amp;<sp/>z);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512Maj(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&amp;<sp/>y)<sp/>^<sp/>(x<sp/>&amp;<sp/>z)<sp/>^<sp/>(y<sp/>&amp;<sp/>z);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512Sigma0(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>28)<sp/>^<sp/>rotr(x,<sp/>34)<sp/>^<sp/>rotr(x,<sp/>39);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512Sigma1(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>14)<sp/>^<sp/>rotr(x,<sp/>18)<sp/>^<sp/>rotr(x,<sp/>41);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512sigma0(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>1)<sp/>^<sp/>rotr(x,<sp/>8)<sp/>^<sp/>(x<sp/>&gt;&gt;<sp/>7);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>sha512sigma1(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotr(x,<sp/>19)<sp/>^<sp/>rotr(x,<sp/>61)<sp/>^<sp/>(x<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha512HashBlock(Guchar<sp/>*blk,<sp/>uint64_t<sp/>*H)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>uint64_t<sp/>W[80];</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>uint64_t<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>uint64_t<sp/>T1,<sp/>T2;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>Guint<sp/>t;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>prepare<sp/>the<sp/>message<sp/>schedule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>16;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>W[t]<sp/>=<sp/>(((uint64_t)blk[t*8]<sp/>&lt;&lt;<sp/>56)<sp/>|</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>48)<sp/>|</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/>40)<sp/>|</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>3]<sp/>&lt;&lt;<sp/>32)<sp/>|</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>4]<sp/>&lt;&lt;<sp/>24)<sp/>|</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>5]<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>6]<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint64_t)blk[t*8<sp/>+<sp/>7]));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>16;<sp/>t<sp/>&lt;<sp/>80;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>W[t]<sp/>=<sp/>sha512sigma1(W[t-2])<sp/>+<sp/>W[t-7]<sp/>+<sp/>sha512sigma0(W[t-15])<sp/>+<sp/>W[t-16];</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>initialize<sp/>the<sp/>eight<sp/>working<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>H[0];</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>H[1];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>H[2];</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>H[3];</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>e<sp/>=<sp/>H[4];</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>H[5];</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>H[6];</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>H[7];</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>80;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/>=<sp/>h<sp/>+<sp/>sha512Sigma1(e)<sp/>+<sp/>sha512Ch(e,f,g)<sp/>+<sp/>K[t]<sp/>+<sp/>W[t];</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>sha512Sigma0(a)<sp/>+<sp/>sha512Maj(a,b,c);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>d<sp/>+<sp/>T1;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>T1<sp/>+<sp/>T2;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>compute<sp/>the<sp/>intermediate<sp/>hash<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>H[0]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>H[1]<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>H[2]<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>H[3]<sp/>+=<sp/>d;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>H[4]<sp/>+=<sp/>e;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>H[5]<sp/>+=<sp/>f;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>H[6]<sp/>+=<sp/>g;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>H[7]<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha512(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>Guchar<sp/>blk[128];</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>uint64_t<sp/>H[8];</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkLen<sp/>=<sp/>0,<sp/>i;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>the<sp/>initial<sp/>hash<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>H[0]<sp/>=<sp/>0x6a09e667f3bcc908ull;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>H[1]<sp/>=<sp/>0xbb67ae8584caa73bull;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>H[2]<sp/>=<sp/>0x3c6ef372fe94f82bull;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>H[3]<sp/>=<sp/>0xa54ff53a5f1d36f1ull;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>H[4]<sp/>=<sp/>0x510e527fade682d1ull;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>H[5]<sp/>=<sp/>0x9b05688c2b3e6c1full;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>H[6]<sp/>=<sp/>0x1f83d9abfb41bd6bull;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>H[7]<sp/>=<sp/>0x5be0cd19137e2179ull;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>128<sp/>&lt;=<sp/>msgLen;<sp/>i<sp/>+=<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>sha512HashBlock(msg<sp/>+<sp/>i,<sp/>H);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>blkLen<sp/>=<sp/>msgLen<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(blk,<sp/>msg<sp/>+<sp/>i,<sp/>blkLen);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>112)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>sha512HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>blkLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>112)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>blk[112]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>blk[113]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>blk[114]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>blk[115]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>blk[116]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>blk[117]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>blk[118]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>blk[119]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>blk[120]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>blk[121]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>blk[122]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>blk[123]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>blk[124]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>blk[125]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>13);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>blk[126]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>5);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>blk[127]<sp/>=<sp/>(Guchar)(msgLen<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>sha512HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>output<sp/>into<sp/>the<sp/>buffer<sp/>(convert<sp/>words<sp/>to<sp/>bytes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8]<sp/><sp/><sp/><sp/><sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>56);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>1]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>48);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>2]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>40);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>3]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>4]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>5]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>6]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>7]<sp/>=<sp/>(Guchar)H[i];</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SHA-384<sp/>(see<sp/>FIPS<sp/>180-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>algorithm<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>exact<sp/>same<sp/>manner<sp/>as<sp/>SHA<sp/>512<sp/>with<sp/>2<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">//1.Initial<sp/>hash<sp/>value<sp/>is<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">//2.A<sp/>384<sp/>bit<sp/>message<sp/>digest<sp/>is<sp/>obtained<sp/>by<sp/>truncating<sp/>the<sp/>final<sp/>hash<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sha384(Guchar<sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgLen,<sp/>Guchar<sp/>*hash)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>Guchar<sp/>blk[128];</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>uint64_t<sp/>H[8];</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkLen,<sp/>i;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">//setting<sp/>initial<sp/>hash<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>H[0]<sp/>=<sp/>0xcbbb9d5dc1059ed8ull;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>H[1]<sp/>=<sp/>0x629a292a367cd507ull;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>H[2]<sp/>=<sp/>0x9159015a3070dd17ull;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>H[3]<sp/>=<sp/>0x152fecd8f70e5939ull;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>H[4]<sp/>=<sp/>0x67332667ffc00b31ull;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>H[5]<sp/>=<sp/>0x8eb44a8768581511ull;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>H[6]<sp/>=<sp/>0xdb0c2e0d64f98fa7ull;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>H[7]<sp/>=<sp/>0x47b5481dbefa4fa4ull;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//SHA<sp/>384<sp/>will<sp/>use<sp/>the<sp/>same<sp/>sha512HashBlock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>blkLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>128<sp/>&lt;=<sp/>msgLen;<sp/>i<sp/>+=<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>sha512HashBlock(msg<sp/>+<sp/>i,<sp/>H);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>blkLen<sp/>=<sp/>msgLen<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(blk,<sp/>msg<sp/>+<sp/>i,<sp/>blkLen);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkLen<sp/>&gt;<sp/>112)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>sha512HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>blkLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blkLen<sp/>&lt;<sp/>112)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>blk[blkLen++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>blk[112]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>blk[113]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>blk[114]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>blk[115]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>blk[116]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>blk[117]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>blk[118]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>blk[119]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>blk[120]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>blk[121]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/>blk[122]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>blk[123]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>blk[124]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>blk[125]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>13);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>blk[126]<sp/>=<sp/>(Guchar)(msgLen<sp/>&gt;&gt;<sp/>5);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>blk[127]<sp/>=<sp/>(Guchar)(msgLen<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>sha512HashBlock(blk,<sp/>H);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>output<sp/>into<sp/>the<sp/>buffer<sp/>(convert<sp/>words<sp/>to<sp/>bytes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>hash<sp/>is<sp/>truncated<sp/>to<sp/>384<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8]<sp/><sp/><sp/><sp/><sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>56);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>1]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>48);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>2]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>40);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>3]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>4]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>5]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>6]<sp/>=<sp/>(Guchar)(H[i]<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[i*8<sp/>+<sp/>7]<sp/>=<sp/>(Guchar)H[i];</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>7.6.3.3<sp/>(Encryption<sp/>Key<sp/>algorithm)<sp/>of<sp/>ISO/DIS<sp/>32000-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Algorithm<sp/>2.B:Computing<sp/>a<sp/>hash<sp/>(for<sp/>revision<sp/>6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>revision6Hash(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*inputPassword,<sp/>Guchar<sp/>*K,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*userKey)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>Guchar<sp/>K1[64*(127+64+48)];</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>Guchar<sp/><sp/>E[64*(127+64+48)];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><ref refid="struct_decrypt_a_e_s_state" kindref="compound">DecryptAESState</ref><sp/>state;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>Guchar<sp/>aesKey[16];</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>Guchar<sp/>BE16byteNumber[16];</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputPasswordLength<sp/>=<sp/>inputPassword-&gt;getLength();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>KLength<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>userKeyLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userKey)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>userKeyLength<sp/>=<sp/>48;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequenceLength;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalLength;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rounds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(rounds<sp/>&lt;<sp/>64<sp/>||<sp/>rounds<sp/>&lt;<sp/>E[totalLength-1]<sp/>+<sp/>32<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>sequenceLength<sp/>=<sp/>inputPasswordLength<sp/>+<sp/>KLength<sp/>+<sp/>userKeyLength;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>totalLength<sp/>=<sp/>64<sp/>*<sp/>sequenceLength;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//a.make<sp/>the<sp/>string<sp/>K1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(K1,<sp/>inputPassword,<sp/>inputPasswordLength);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(K1<sp/>+<sp/>inputPasswordLength,<sp/>K<sp/>,<sp/>KLength);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(K1<sp/>+<sp/>inputPasswordLength<sp/>+<sp/>KLength,<sp/>userKey,<sp/>userKeyLength);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>64<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(K1<sp/>+<sp/>(i<sp/>*<sp/>sequenceLength),K1,sequenceLength);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//b.Encrypt<sp/>K1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(aesKey,K,16);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state.cbc,K<sp/>+<sp/>16,16);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state.buf,<sp/>state.cbc,<sp/>16);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>CBC<sp/>IV<sp/>to<sp/>buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>state.bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>state.paddingReached<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>aesKeyExpansion(&amp;state,aesKey,16,gFalse);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(4<sp/>*<sp/>sequenceLength);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aesEncryptBlock(&amp;state,K1<sp/>+<sp/>(16<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(E<sp/>+(16<sp/>*<sp/>i),state.buf,16);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(BE16byteNumber,E,16);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//c.Taking<sp/>the<sp/>first<sp/>16<sp/>Bytes<sp/>of<sp/>E<sp/>as<sp/>unsigned<sp/>big-endian<sp/>integer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>remainder,modulo<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>N1<sp/>=<sp/>0,N2<sp/>=<sp/>0,N3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N1<sp/>contains<sp/>first<sp/>8<sp/>bytes<sp/>of<sp/>BE16byteNumber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>N1<sp/>=<sp/>((uint64_t)BE16byteNumber[0]<sp/>&lt;&lt;<sp/>56<sp/>|<sp/>(uint64_t)BE16byteNumber[1]<sp/>&lt;&lt;<sp/>48</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(uint64_t)BE16byteNumber[2]<sp/>&lt;&lt;<sp/>40<sp/>|<sp/>(uint64_t)BE16byteNumber[3]<sp/>&lt;&lt;<sp/>32</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(uint64_t)BE16byteNumber[4]<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>(uint64_t)BE16byteNumber[5]<sp/>&lt;&lt;<sp/>16</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(uint64_t)BE16byteNumber[6]<sp/>&lt;&lt;<sp/>8<sp/><sp/>|<sp/>(uint64_t)BE16byteNumber[7]<sp/>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>rem<sp/>=<sp/>N1<sp/>%<sp/>3<sp/>;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N2<sp/>conatains<sp/>0s<sp/>in<sp/>higer<sp/>4<sp/>bytes<sp/>and<sp/>9th<sp/>to<sp/>12<sp/>th<sp/>bytes<sp/>of<sp/>BE16byteNumber<sp/>in<sp/>lower<sp/>4<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>N2<sp/>=<sp/>((uint64_t)BE16byteNumber[8]<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>(uint64_t)BE16byteNumber[9]<sp/>&lt;&lt;<sp/>16</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(uint64_t)BE16byteNumber[10]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(uint64_t)BE16byteNumber[11]<sp/>);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem<sp/>=<sp/>((rem<sp/>&lt;&lt;<sp/>32<sp/>)<sp/>|<sp/>N2)<sp/>%<sp/>3<sp/>;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N3<sp/>conatains<sp/>0s<sp/>in<sp/>higer<sp/>4<sp/>bytes<sp/>and<sp/>13th<sp/>to<sp/>16th<sp/>bytes<sp/>of<sp/>BE16byteNumber<sp/>in<sp/>lower<sp/>4<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>N3<sp/>=<sp/>((uint64_t)BE16byteNumber[12]<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>(uint64_t)BE16byteNumber[13]<sp/>&lt;&lt;<sp/>16</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(uint64_t)BE16byteNumber[14]<sp/>&lt;&lt;<sp/>8<sp/><sp/>|<sp/>(uint64_t)BE16byteNumber[15]<sp/>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem<sp/>=<sp/>((rem<sp/>&lt;&lt;<sp/>32<sp/>)<sp/>|<sp/>N3)<sp/>%<sp/>3<sp/>;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//d.If<sp/>remainder<sp/>is<sp/>0<sp/>perform<sp/>SHA-256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rem<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KLength<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha256(E,<sp/>totalLength,<sp/>K);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remainder<sp/>is<sp/>1<sp/>perform<sp/>SHA-384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rem<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KLength<sp/>=<sp/>48;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha384(E,<sp/>totalLength,<sp/>K);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remainder<sp/>is<sp/>2<sp/>perform<sp/>SHA-512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rem<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KLength<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha512(E,<sp/>totalLength,<sp/>K);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>rounds++;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>32<sp/>bytes<sp/>of<sp/>the<sp/>final<sp/>K<sp/>are<sp/>the<sp/>output<sp/>of<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/Decrypt.cc"/>
  </compounddef>
</doxygen>
