<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pmwin_8c" kind="file" language="C++">
    <compoundname>pmwin.c</compoundname>
    <includes local="yes">stdlib.h</includes>
    <includes refid="portmidi_8h" local="yes">portmidi.h</includes>
    <includes refid="pmutil_8h" local="yes">pmutil.h</includes>
    <includes refid="pminternal_8h" local="yes">pminternal.h</includes>
    <includes refid="pmwinmm_8h" local="yes">pmwinmm.h</includes>
    <includes local="yes">stdio.h</includes>
    <incdepgraph>
      <node id="93053">
        <label>pminternal.h</label>
        <link refid="pminternal_8h_source"/>
      </node>
      <node id="93050">
        <label>stdlib.h</label>
      </node>
      <node id="93049">
        <label>thirdparty/portmidi/pm_win/pmwin.c</label>
        <link refid="pmwin_8c"/>
        <childnode refid="93050" relation="include">
        </childnode>
        <childnode refid="93051" relation="include">
        </childnode>
        <childnode refid="93052" relation="include">
        </childnode>
        <childnode refid="93053" relation="include">
        </childnode>
        <childnode refid="93054" relation="include">
        </childnode>
        <childnode refid="93055" relation="include">
        </childnode>
      </node>
      <node id="93051">
        <label>portmidi.h</label>
        <link refid="portmidi_8h_source"/>
      </node>
      <node id="93052">
        <label>pmutil.h</label>
        <link refid="pmutil_8h_source"/>
      </node>
      <node id="93055">
        <label>stdio.h</label>
      </node>
      <node id="93054">
        <label>pmwinmm.h</label>
        <link refid="pmwinmm_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pmwin_8c_1a5d0e78c6f69ecbe1a87f4a18b87f6f75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pm_exit</definition>
        <argsstring>(void)</argsstring>
        <name>pm_exit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="27" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="27" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1a2f05280c58e66ae51481d75ed4f7c97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_init</definition>
        <argsstring>(void)</argsstring>
        <name>pm_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="43" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="43" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1ae37207f7de0c907cc3eb8f837e91b9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_term</definition>
        <argsstring>(void)</argsstring>
        <name>pm_term</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="62" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1ad9b3fe7ad347b841b3922829c8319a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmDeviceID</type>
        <definition>PmDeviceID Pm_GetDefaultInputDeviceID</definition>
        <argsstring>()</argsstring>
        <name>Pm_GetDefaultInputDeviceID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="67" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="67" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1a8dc29cd97077bbfd5d81b0c7b52555e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmDeviceID</type>
        <definition>PmDeviceID Pm_GetDefaultOutputDeviceID</definition>
        <argsstring>()</argsstring>
        <name>Pm_GetDefaultOutputDeviceID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="82" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1a5e0011f472e9c71efa58816f628eed08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* pm_alloc</definition>
        <argsstring>(size_t s)</argsstring>
        <name>pm_alloc</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="100" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="pmwin_8c_1a9ce0079220419af65fc4a78af8d422f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>pm_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_win/pmwin.c" line="105" column="1" bodyfile="thirdparty/portmidi/pm_win/pmwin.c" bodystart="105" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>pmwin.c<sp/>--<sp/>PortMidi<sp/>os-dependent<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>file<sp/>only<sp/>needs<sp/>to<sp/>implement:</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_init(),<sp/>which<sp/>calls<sp/>various<sp/>routines<sp/>to<sp/>register<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>available<sp/>midi<sp/>devices,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pm_GetDefaultInputDeviceID(),<sp/>and</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pm_GetDefaultOutputDeviceID().</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>This<sp/>file<sp/>must</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>be<sp/>separate<sp/>from<sp/>the<sp/>main<sp/>portmidi.c<sp/>file<sp/>because<sp/>it<sp/>is<sp/>system</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>dependent,<sp/>and<sp/>it<sp/>is<sp/>separate<sp/>from,<sp/>say,<sp/>pmwinmm.c,<sp/>because<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>might<sp/>need<sp/>to<sp/>register<sp/>devices<sp/>for<sp/>winmm,<sp/>directx,<sp/>and<sp/>others.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;portmidi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pmutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pminternal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pmwinmm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_exit<sp/>is<sp/>called<sp/>when<sp/>the<sp/>program<sp/>exits.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>It<sp/>calls<sp/>pm_term<sp/>to<sp/>make<sp/>sure<sp/>PortMidi<sp/>is<sp/>properly<sp/>closed.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>If<sp/>DEBUG<sp/>is<sp/>on,<sp/>we<sp/>prompt<sp/>for<sp/>input<sp/>to<sp/>avoid<sp/>losing<sp/>error<sp/>messages.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_exit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_term();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRING_MAX<sp/>80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[STRING_MAX];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>ENTER...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note,<sp/>w/o<sp/>this<sp/>prompting,<sp/>client<sp/>console<sp/>application<sp/>can<sp/>not<sp/>see<sp/>one</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>its<sp/>errors<sp/>before<sp/>closing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fgets(line,<sp/>STRING_MAX,<sp/>stdin);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_init<sp/>is<sp/>the<sp/>windows-dependent<sp/>initialization.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;registered<sp/>pm_term<sp/>with<sp/>cleanup<sp/>DLL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>??WS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>atexit(pm_exit);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;registered<sp/>pm_exit<sp/>with<sp/>atexit()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_winmm_init();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>other<sp/>APIs<sp/>(DirectX?)<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_term(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_winmm_term();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">PmDeviceID<sp/>Pm_GetDefaultInputDeviceID()<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>routine<sp/>should<sp/>check<sp/>the<sp/>environment<sp/>and<sp/>the<sp/>registry</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>specified<sp/>in<sp/>portmidi.h,<sp/>but<sp/>for<sp/>now,<sp/>it<sp/>just<sp/>returns</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>first<sp/>device<sp/>of<sp/>the<sp/>proper<sp/>input/output<sp/>flavor.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Pm_Initialize();<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>descriptors<sp/>exist!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pm_descriptor_index;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descriptors[i].pub.input)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoDevice;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">PmDeviceID<sp/>Pm_GetDefaultOutputDeviceID()<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>routine<sp/>should<sp/>check<sp/>the<sp/>environment<sp/>and<sp/>the<sp/>registry</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>specified<sp/>in<sp/>portmidi.h,<sp/>but<sp/>for<sp/>now,<sp/>it<sp/>just<sp/>returns</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>first<sp/>device<sp/>of<sp/>the<sp/>proper<sp/>input/output<sp/>flavor.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Pm_Initialize();<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>descriptors<sp/>exist!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pm_descriptor_index;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descriptors[i].pub.output)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoDevice;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pm_alloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(s);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_win/pmwin.c"/>
  </compounddef>
</doxygen>
