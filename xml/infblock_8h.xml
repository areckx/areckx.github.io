<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="infblock_8h" kind="file" language="C++">
    <compoundname>infblock.h</compoundname>
    <includedby refid="infblock_8c" local="yes">thirdparty/freetype/src/gzip/infblock.c</includedby>
    <includedby refid="infcodes_8c" local="yes">thirdparty/freetype/src/gzip/infcodes.c</includedby>
    <includedby refid="inflate_8c" local="yes">thirdparty/freetype/src/gzip/inflate.c</includedby>
    <includedby refid="infutil_8c" local="yes">thirdparty/freetype/src/gzip/infutil.c</includedby>
    <invincdepgraph>
      <node id="80052">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c_source"/>
      </node>
      <node id="80051">
        <label>thirdparty/freetype/src/gzip/infblock.h</label>
        <link refid="infblock_8h"/>
        <childnode refid="80052" relation="include">
        </childnode>
        <childnode refid="80053" relation="include">
        </childnode>
        <childnode refid="80054" relation="include">
        </childnode>
        <childnode refid="80055" relation="include">
        </childnode>
      </node>
      <node id="80055">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c_source"/>
      </node>
      <node id="80054">
        <label>thirdparty/freetype/src/gzip/inflate.c</label>
        <link refid="inflate_8c_source"/>
      </node>
      <node id="80053">
        <label>thirdparty/freetype/src/gzip/infcodes.c</label>
        <link refid="infcodes_8c_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="infblock_8h_1a177afbaf64cdc92f24d5396685d0c22e" prot="public" static="no">
        <type>struct <ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref> FAR</type>
        <definition>typedef struct inflate_blocks_state FAR inflate_blocks_statef</definition>
        <argsstring></argsstring>
        <name>inflate_blocks_statef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.h" line="375" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infblock_8h_1ab23ac45a54f4136ed3616f34f546c152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local inflate_blocks_statef *inflate_blocks_new</type>
        <definition>local inflate_blocks_statef* inflate_blocks_new OF</definition>
        <argsstring>((z_streamp z, check_func c, uInt w))</argsstring>
        <name>OF</name>
        <param>
          <type>(z_streamp z, check_func c, uInt w)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8h_1a347a6971c5f0728cac19d708f5004cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int inflate_blocks</type>
        <definition>local int inflate_blocks OF</definition>
        <argsstring>((inflate_blocks_statef *, z_streamp, int))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_blocks_statef *, z_streamp, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8h_1a1e33cdddc528c5f55e8429b7916291e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local void inflate_blocks_reset</type>
        <definition>local void inflate_blocks_reset OF</definition>
        <argsstring>((inflate_blocks_statef *, z_streamp, uLongf *))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_blocks_statef *, z_streamp, uLongf *)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8h_1a7d57092e02b427c53526176374e7b372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int inflate_blocks_free</type>
        <definition>local int inflate_blocks_free OF</definition>
        <argsstring>((inflate_blocks_statef *, z_streamp))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_blocks_statef *, z_streamp)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.h" line="32" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>infblock.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>infblock.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_INFBLOCK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INFBLOCK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref><sp/>FAR<sp/>inflate_blocks_statef;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">local<sp/><sp/>inflate_blocks_statef<sp/>*<sp/>inflate_blocks_new<sp/>OF((</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>z,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>check_func<sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>w));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">local<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks<sp/>OF((</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_statef<sp/>*,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>return<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">local<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_blocks_reset<sp/>OF((</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_statef<sp/>*,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>uLongf<sp/>*));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>value<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">local<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_free<sp/>OF((</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_statef<sp/>*,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_INFBLOCK_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/infblock.h"/>
  </compounddef>
</doxygen>
