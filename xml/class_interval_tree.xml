<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_interval_tree" kind="class" language="C++" prot="public">
    <compoundname>IntervalTree</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>K</declname>
        <defname>K</defname>
        <defval>int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_interval_tree_1adec8bc7b9cac07dae3fbaa9c6cd0ed24" prot="public" static="no">
        <type><ref refid="class_interval" kindref="compound">Interval</ref>&lt; T, K &gt;</type>
        <definition>typedef Interval&lt;T,K&gt; IntervalTree&lt; T, K &gt;::interval</definition>
        <argsstring></argsstring>
        <name>interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="52" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_interval_tree_1a4b0030e4cb75e59e2f13b78700c0eccb" prot="public" static="no">
        <type>vector&lt; <ref refid="class_interval" kindref="compound">interval</ref> &gt;</type>
        <definition>typedef vector&lt;interval&gt; IntervalTree&lt; T, K &gt;::intervalVector</definition>
        <argsstring></argsstring>
        <name>intervalVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="53" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_interval_tree_1a04e97a1d4fafe4678bfcfcc4fdfe82d4" prot="public" static="no">
        <type><ref refid="class_interval_tree" kindref="compound">IntervalTree</ref>&lt; T, K &gt;</type>
        <definition>typedef IntervalTree&lt;T,K&gt; IntervalTree&lt; T, K &gt;::intervalTree</definition>
        <argsstring></argsstring>
        <name>intervalTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="54" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_interval_tree_1a6fa7ea51dd9a1782415bb47b79e6a731" prot="public" static="no" mutable="no">
        <type>intervalVector</type>
        <definition>intervalVector IntervalTree&lt; T, K &gt;::intervals</definition>
        <argsstring></argsstring>
        <name>intervals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="56" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_interval_tree_1a4db5860384fe192a005b196a2391e6ca" prot="public" static="no" mutable="no">
        <type><ref refid="class_interval_tree" kindref="compound">intervalTree</ref> *</type>
        <definition>intervalTree* IntervalTree&lt; T, K &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="57" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_interval_tree_1a3f543306e95275999a81c62f752fa8fe" prot="public" static="no" mutable="no">
        <type><ref refid="class_interval_tree" kindref="compound">intervalTree</ref> *</type>
        <definition>intervalTree* IntervalTree&lt; T, K &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="58" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_interval_tree_1abe996f63533dc8b07aefb3a309d6f67b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int IntervalTree&lt; T, K &gt;::center</definition>
        <argsstring></argsstring>
        <name>center</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="59" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_interval_tree_1a76c39c63f99f77c06792e6fcd90d4e88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntervalTree&lt; T, K &gt;::IntervalTree</definition>
        <argsstring>(void)</argsstring>
        <name>IntervalTree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="59" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a91f223d02854a54a887c9e67064e6cfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntervalTree&lt; T, K &gt;::IntervalTree</definition>
        <argsstring>(const intervalTree &amp;other)</argsstring>
        <name>IntervalTree</name>
        <param>
          <type>const <ref refid="class_interval_tree" kindref="compound">intervalTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="59" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a02be541cbb6107e3b4d869497cfe3192" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_interval_tree" kindref="compound">IntervalTree</ref>&lt; T, K &gt; &amp;</type>
        <definition>IntervalTree&lt;T,K&gt;&amp; IntervalTree&lt; T, K &gt;::operator=</definition>
        <argsstring>(const intervalTree &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_interval_tree" kindref="compound">intervalTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="84" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="84" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a1ae0dab1deba6f1802f256566c7df11c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntervalTree&lt; T, K &gt;::IntervalTree</definition>
        <argsstring>(intervalVector &amp;ivals, unsigned int depth=16, unsigned int minbucket=64, int leftextent=0, int rightextent=0, unsigned int maxbucket=512)</argsstring>
        <name>IntervalTree</name>
        <param>
          <type>intervalVector &amp;</type>
          <declname>ivals</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>minbucket</declname>
          <defval>64</defval>
        </param>
        <param>
          <type>int</type>
          <declname>leftextent</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rightextent</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxbucket</declname>
          <defval>512</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="84" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="102" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a12cd2eabb681caa32b29a9e9c9c74b95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void IntervalTree&lt; T, K &gt;::findOverlapping</definition>
        <argsstring>(K start, K stop, intervalVector &amp;overlapping)</argsstring>
        <name>findOverlapping</name>
        <param>
          <type>K</type>
          <declname>start</declname>
        </param>
        <param>
          <type>K</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>intervalVector &amp;</type>
          <declname>overlapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="167" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="167" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a9c5c426d500b5cd9d98a2d6f4ce9bd10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void IntervalTree&lt; T, K &gt;::findContained</definition>
        <argsstring>(K start, K stop, intervalVector &amp;contained)</argsstring>
        <name>findContained</name>
        <param>
          <type>K</type>
          <declname>start</declname>
        </param>
        <param>
          <type>K</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>intervalVector &amp;</type>
          <declname>contained</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="187" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="187" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_tree_1a45bec3c1734654bb5432b9edede79b5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntervalTree&lt; T, K &gt;::~IntervalTree</definition>
        <argsstring>(void)</argsstring>
        <name>~IntervalTree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/IntervalTree.h" line="207" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="207" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="9105">
        <label>IntervalTree&lt; T, K &gt;</label>
        <link refid="class_interval_tree"/>
        <childnode refid="9105" relation="usage">
          <edgelabel>right</edgelabel>
          <edgelabel>left</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="thirdparty/intervaltree/IntervalTree.h" line="49" column="1" bodyfile="thirdparty/intervaltree/IntervalTree.h" bodystart="49" bodyend="218"/>
    <listofallmembers>
      <member refid="class_interval_tree_1abe996f63533dc8b07aefb3a309d6f67b" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>center</name></member>
      <member refid="class_interval_tree_1a9c5c426d500b5cd9d98a2d6f4ce9bd10" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>findContained</name></member>
      <member refid="class_interval_tree_1a12cd2eabb681caa32b29a9e9c9c74b95" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>findOverlapping</name></member>
      <member refid="class_interval_tree_1adec8bc7b9cac07dae3fbaa9c6cd0ed24" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>interval</name></member>
      <member refid="class_interval_tree_1a6fa7ea51dd9a1782415bb47b79e6a731" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>intervals</name></member>
      <member refid="class_interval_tree_1a76c39c63f99f77c06792e6fcd90d4e88" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalTree</name></member>
      <member refid="class_interval_tree_1a91f223d02854a54a887c9e67064e6cfe" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalTree</name></member>
      <member refid="class_interval_tree_1a1ae0dab1deba6f1802f256566c7df11c" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalTree</name></member>
      <member refid="class_interval_tree_1a04e97a1d4fafe4678bfcfcc4fdfe82d4" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>intervalTree</name></member>
      <member refid="class_interval_tree_1a4b0030e4cb75e59e2f13b78700c0eccb" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>intervalVector</name></member>
      <member refid="class_interval_tree_1a4db5860384fe192a005b196a2391e6ca" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>left</name></member>
      <member refid="class_interval_tree_1a02be541cbb6107e3b4d869497cfe3192" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>operator=</name></member>
      <member refid="class_interval_tree_1a3f543306e95275999a81c62f752fa8fe" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>right</name></member>
      <member refid="class_interval_tree_1a45bec3c1734654bb5432b9edede79b5d" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>~IntervalTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
