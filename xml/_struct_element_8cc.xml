<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_struct_element_8cc" kind="file" language="C++">
    <compoundname>StructElement.cc</compoundname>
    <includes refid="_struct_element_8h" local="yes">StructElement.h</includes>
    <includes refid="_struct_tree_root_8h" local="yes">StructTreeRoot.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <includes refid="_dict_8h" local="yes">Dict.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="90215">
        <label>stdarg.h</label>
      </node>
      <node id="90233">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90222" relation="include">
        </childnode>
      </node>
      <node id="90234">
        <label>assert.h</label>
      </node>
      <node id="90242">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90230" relation="include">
        </childnode>
        <childnode refid="90237" relation="include">
        </childnode>
      </node>
      <node id="90232">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90233" relation="include">
        </childnode>
        <childnode refid="90234" relation="include">
        </childnode>
        <childnode refid="90235" relation="include">
        </childnode>
      </node>
      <node id="90236">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90213" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90220" relation="include">
        </childnode>
      </node>
      <node id="90209">
        <label>StructElement.h</label>
        <link refid="_struct_element_8h_source"/>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90213" relation="include">
        </childnode>
        <childnode refid="90217" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90237" relation="include">
        </childnode>
        <childnode refid="90222" relation="include">
        </childnode>
      </node>
      <node id="90216">
        <label>stdlib.h</label>
      </node>
      <node id="90218">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90212" relation="include">
        </childnode>
        <childnode refid="90211" relation="include">
        </childnode>
      </node>
      <node id="90241">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90212" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
        <childnode refid="90242" relation="include">
        </childnode>
        <childnode refid="90243" relation="include">
        </childnode>
        <childnode refid="90244" relation="include">
        </childnode>
        <childnode refid="90245" relation="include">
        </childnode>
        <childnode refid="90246" relation="include">
        </childnode>
        <childnode refid="90247" relation="include">
        </childnode>
        <childnode refid="90230" relation="include">
        </childnode>
      </node>
      <node id="90226">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90243">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
        <childnode refid="90237" relation="include">
        </childnode>
      </node>
      <node id="90217">
        <label>MarkedContentOutputDev.h</label>
        <link refid="_marked_content_output_dev_8h_source"/>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90218" relation="include">
        </childnode>
        <childnode refid="90219" relation="include">
        </childnode>
        <childnode refid="90232" relation="include">
        </childnode>
        <childnode refid="90236" relation="include">
        </childnode>
        <childnode refid="90237" relation="include">
        </childnode>
      </node>
      <node id="90239">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="90234" relation="include">
        </childnode>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90212" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90220" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90208">
        <label>thirdparty/poppler/poppler/StructElement.cc</label>
        <link refid="_struct_element_8cc"/>
        <childnode refid="90209" relation="include">
        </childnode>
        <childnode refid="90238" relation="include">
        </childnode>
        <childnode refid="90239" relation="include">
        </childnode>
        <childnode refid="90240" relation="include">
        </childnode>
        <childnode refid="90241" relation="include">
        </childnode>
        <childnode refid="90229" relation="include">
        </childnode>
        <childnode refid="90234" relation="include">
        </childnode>
      </node>
      <node id="90235">
        <label>map</label>
      </node>
      <node id="90225">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90215" relation="include">
        </childnode>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90213" relation="include">
        </childnode>
      </node>
      <node id="90229">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90245">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="90221" relation="include">
        </childnode>
      </node>
      <node id="90244">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90214">
        <label>limits.h</label>
      </node>
      <node id="90211">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90212" relation="include">
        </childnode>
      </node>
      <node id="90224">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90230">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90212" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90228">
        <label>pthread.h</label>
      </node>
      <node id="90231">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="90221" relation="include">
        </childnode>
      </node>
      <node id="90223">
        <label>string.h</label>
      </node>
      <node id="90213">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90214" relation="include">
        </childnode>
        <childnode refid="90215" relation="include">
        </childnode>
        <childnode refid="90216" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
      </node>
      <node id="90246">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90245" relation="include">
        </childnode>
        <childnode refid="90222" relation="include">
        </childnode>
      </node>
      <node id="90221">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90222" relation="include">
        </childnode>
        <childnode refid="90212" relation="include">
        </childnode>
        <childnode refid="90223" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90218" relation="include">
        </childnode>
        <childnode refid="90213" relation="include">
        </childnode>
        <childnode refid="90224" relation="include">
        </childnode>
        <childnode refid="90225" relation="include">
        </childnode>
        <childnode refid="90226" relation="include">
        </childnode>
        <childnode refid="90229" relation="include">
        </childnode>
        <childnode refid="90230" relation="include">
        </childnode>
      </node>
      <node id="90237">
        <label>vector</label>
      </node>
      <node id="90219">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90220" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90231" relation="include">
        </childnode>
      </node>
      <node id="90227">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90228" relation="include">
        </childnode>
      </node>
      <node id="90220">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="90210">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
      </node>
      <node id="90240">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="90211" relation="include">
        </childnode>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90220" relation="include">
        </childnode>
        <childnode refid="90227" relation="include">
        </childnode>
      </node>
      <node id="90222">
        <label>set</label>
      </node>
      <node id="90238">
        <label>StructTreeRoot.h</label>
        <link refid="_struct_tree_root_8h_source"/>
        <childnode refid="90210" relation="include">
        </childnode>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90209" relation="include">
        </childnode>
        <childnode refid="90237" relation="include">
        </childnode>
      </node>
      <node id="90247">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="90221" relation="include">
        </childnode>
        <childnode refid="90220" relation="include">
        </childnode>
      </node>
      <node id="90212">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_attribute_map_entry" prot="public">AttributeMapEntry</innerclass>
    <innerclass refid="struct_attribute_defaults" prot="public">AttributeDefaults</innerclass>
    <innerclass refid="struct_owner_map_entry" prot="public">OwnerMapEntry</innerclass>
    <innerclass refid="struct_type_map_entry" prot="public">TypeMapEntry</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_struct_element_8cc_1a4cb1fd6d56baf6b2f6fe765ab07c6ed2" prot="public" static="no">
        <name>ARRAY_CHECKER</name>
        <param><defname>name</defname></param>
        <param><defname>checkItem</defname></param>
        <param><defname>length</defname></param>
        <param><defname>allowSingle</defname></param>
        <param><defname>allowNulls</defname></param>
        <initializer>static GBool name(<ref refid="class_object" kindref="compound">Object</ref> *value) {                                  \
      if (!value-&gt;isArray())                                            \
        return allowSingle ? checkItem(value) : gFalse;                 \
                                                                        \
      if (length &amp;&amp; value-&gt;arrayGetLength() != length)                  \
        return gFalse;                                                  \
                                                                        \
      GBool okay = gTrue;                                               \
      for (int i = 0; i &lt; value-&gt;arrayGetLength(); i++) {               \
        <ref refid="class_object" kindref="compound">Object</ref> obj;                                                     \
        value-&gt;arrayGet(i, &amp;obj);                                       \
        if ((!allowNulls &amp;&amp; obj.isNull()) || !checkItem(&amp;obj)) {        \
          okay = gFalse;                                                \
          obj.free();                                                   \
          break;                                                        \
        }                                                               \
        obj.free();                                                     \
      }                                                                 \
      return okay;                                                      \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="213" column="9" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_struct_element_8cc_1adf1238ae9e92439213331cb9359d691b" prot="public" static="no">
        <name>ATTR_LIST_END</name>
        <initializer>{ Attribute::Unknown, NULL, NULL, gFalse, NULL }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="302" column="9" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_struct_element_8cc_1a8f3b50ee264e906a32fc7439cc7df5b1" prot="public" static="no">
        <name>ATTR_WITH_DEFAULT</name>
        <param><defname>name</defname></param>
        <param><defname>inherit</defname></param>
        <param><defname>check</defname></param>
        <param><defname>defval</defname></param>
        <initializer>{ Attribute::name,           \
    #name,                     \
    &amp;attributeDefaults.defval, \
    inherit,                   \
    check }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="305" column="9" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_struct_element_8cc_1a1df8940a63f6312529374aed7acc8940" prot="public" static="no">
        <name>ATTR</name>
        <param><defname>name</defname></param>
        <param><defname>inherit</defname></param>
        <param><defname>check</defname></param>
        <initializer>{ Attribute::name,           \
    #name,                     \
    NULL,                      \
    inherit,                   \
    check }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="312" column="9" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_struct_element_8cc_1a16b11be27a8e9362dd122c4d879e01ae" prot="public" static="no">
        <name>ElementType</name>
        <enumvalue id="_struct_element_8cc_1a16b11be27a8e9362dd122c4d879e01aea854460c823ae913203c5da5a9f96a7b9" prot="public">
          <name>elementTypeUndefined</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_struct_element_8cc_1a16b11be27a8e9362dd122c4d879e01aeaa1c3c7bdfea949008ec88d99a584096d" prot="public">
          <name>elementTypeGrouping</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_struct_element_8cc_1a16b11be27a8e9362dd122c4d879e01aea76338269a02e8aae488f03550c08ca35" prot="public">
          <name>elementTypeInline</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_struct_element_8cc_1a16b11be27a8e9362dd122c4d879e01aea1725ecb97f84d5a30d91d10441248939" prot="public">
          <name>elementTypeBlock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="524" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="524" bodyend="529"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_struct_element_8cc_1a4a15fccd67b615a6032e5e128b175a74" prot="public" static="no">
        <type>GBool(*</type>
        <definition>typedef GBool(* AttributeCheckFunc) (Object *)</definition>
        <argsstring>)(Object *)</argsstring>
        <name>AttributeCheckFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="245" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_struct_element_8cc_1aaa72d6bbec256c9c3ba500eabbb55abf" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_defaults" kindref="compound">AttributeDefaults</ref></type>
        <definition>const AttributeDefaults attributeDefaults</definition>
        <argsstring></argsstring>
        <name>attributeDefaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="299" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a07d28ed85954fb88f48ddec7b2667867" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonShared[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonShared</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(Placement,       gFalse, isPlacementName, Inline),
  ATTR_WITH_DEFAULT(WritingMode,     gTrue,  isWritingModeName, LrTb),
  ATTR             (BackgroundColor, gFalse, isRGBColor),
  ATTR             (BorderColor,     gTrue,  isRGBColorOrOptionalArray4),
  ATTR_WITH_DEFAULT(BorderStyle,     gFalse, isBorderStyle, None),
  ATTR             (BorderThickness, gTrue,  isPositiveOrOptionalArray4),
  ATTR_WITH_DEFAULT(Padding,         gFalse, isPositiveOrArray4, Zero),
  ATTR             (Color,           gTrue,  isRGBColor),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="319" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1ab93f6550eb827ed06d7dcd33d247a7b1" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonBlock[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonBlock</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(SpaceBefore, gFalse, isPositive, Zero),
  ATTR_WITH_DEFAULT(SpaceAfter,  gFalse, isPositive, Zero),
  ATTR_WITH_DEFAULT(StartIndent, gTrue,  isNumber,   Zero),
  ATTR_WITH_DEFAULT(EndIndent,   gTrue,  isNumber,   Zero),
  ATTR_WITH_DEFAULT(TextIndent,  gTrue,  isNumber,   Zero),
  ATTR_WITH_DEFAULT(TextAlign,   gTrue,  isTextAlignName, Start),
  ATTR             (BBox,        gFalse, isNumberArray4),
  ATTR_WITH_DEFAULT(Width,       gFalse, isNumberOrAuto, Auto),
  ATTR_WITH_DEFAULT(Height,      gFalse, isNumberOrAuto, Auto),
  ATTR_WITH_DEFAULT(BlockAlign,  gTrue,  isBlockAlignName, Before),
  ATTR_WITH_DEFAULT(InlineAlign, gTrue,  isInlineAlignName, Start),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="332" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1abd8e6a5a4e70b4a53efa27948daba101" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonInline[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonInline</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(BaselineShift,            gFalse, isNumber, Zero),
  ATTR_WITH_DEFAULT(LineHeight,               gTrue,  isLineHeight, Normal),
  ATTR             (TextDecorationColor,      gTrue,  isRGBColor),
  ATTR             (TextDecorationThickness,  gTrue,  isPositive),
  ATTR_WITH_DEFAULT(TextDecorationType,       gFalse, isTextDecorationName, None),
  ATTR_WITH_DEFAULT(GlyphOrientationVertical, gTrue,  isGlyphOrientationName, Auto),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="348" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a267176231926cc9244df0343e066eb09" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonRubyText[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonRubyText</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(RubyPosition, gTrue, isRubyPositionName, Before),
  ATTR_WITH_DEFAULT(RubyAlign,    gTrue, isRubyAlignName, Distribute),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="359" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a2a8168ab490a0b4b64342431b5d6384b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonColumns[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonColumns</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(ColumnCount,  gFalse, isNatural, Nat1),
  ATTR             (ColumnGap,    gFalse, isNumberOrArrayN),
  ATTR             (ColumnWidths, gFalse, isNumberOrArrayN),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="366" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a0e6f1af6a48b9bab876cf01a8ec611cb" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonList[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonList</name>
        <initializer>= {
  ATTR_WITH_DEFAULT(ListNumbering, gTrue, isListNumberingName, None),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="374" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a4fdd0d6bd5ddfe861da3b3b5a5bb2d65" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonPrintField[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonPrintField</name>
        <initializer>=
{
  ATTR             (Role,    gFalse, isFieldRoleName),
  ATTR_WITH_DEFAULT(checked, gFalse, isFieldCheckedName, off),
  ATTR             (Desc,    gFalse, isTextString),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="379" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1ab88388bf0ac3535f6957a254f22c3c21" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonTable[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonTable</name>
        <initializer>=
{
  ATTR(Headers, gFalse, isTableHeaders),
  ATTR(Scope,   gFalse, isTableScopeName),
  ATTR(Summary, gFalse, isTextString),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="387" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a66d601f1ca853507d2cae4517d5d6467" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref></type>
        <definition>const AttributeMapEntry attributeMapCommonTableCell[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapCommonTableCell</name>
        <initializer>=
{
  ATTR_WITH_DEFAULT(RowSpan,      gFalse, isNatural, Nat1),
  ATTR_WITH_DEFAULT(ColSpan,      gFalse, isNatural, Nat1),
  ATTR_WITH_DEFAULT(TBorderStyle, gTrue,  isBorderStyle, None),
  ATTR_WITH_DEFAULT(TPadding,     gTrue,  isPositiveOrArray4, Zero),
  ATTR_LIST_END
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="395" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a95f183308912dc3da715ebaad9668d4f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapAll[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapAll</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonBlock,
  attributeMapCommonInline,
  attributeMapCommonRubyText,
  attributeMapCommonColumns,
  attributeMapCommonList,
  attributeMapCommonPrintField,
  attributeMapCommonTable,
  attributeMapCommonTableCell,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="408" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a191aa5519a3f56532c3a827deb449bf4" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapShared[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapShared</name>
        <initializer>= {
  attributeMapCommonShared,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="421" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1aa1cc8d3834b81f3ff3b01500089bb69c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapBlock[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapBlock</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonBlock,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="426" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1ab0e086ff64d7c588ab5b0fc4fbd7dab9" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapInline[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapInline</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonInline,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="432" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a82a353293119e05702b3deedc08b7d1c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapTableCell[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapTableCell</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonBlock,
  attributeMapCommonTable,
  attributeMapCommonTableCell,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="438" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a7d02ff57d25ff9f768fa67d9e8152113" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapRubyText[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapRubyText</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonInline,
  attributeMapCommonRubyText,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="446" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1abce21571489ef94a7f7d3e8bfb35c99e" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapColumns[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapColumns</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonInline,
  attributeMapCommonColumns,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="453" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a730f7ac9c3a862056dcad5cc03238f29" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapList[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapList</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonList,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="460" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a2f7c945501e15aac32d355e683d3d5f5" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapTable[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapTable</name>
        <initializer>= {
  attributeMapCommonShared,
  attributeMapCommonBlock,
  attributeMapCommonTable,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="466" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1abee3545271f3f6346eee41022084d0c3" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>const AttributeMapEntry* attributeMapIllustration[]</definition>
        <argsstring>[]</argsstring>
        <name>attributeMapIllustration</name>
        <initializer>= {
  
  
  
  attributeMapCommonShared,
  attributeMapCommonBlock,
  attributeMapCommonInline,
  NULL,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="473" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a8ae5d6ab07a98292c0b96627383cf62d" prot="public" static="yes" mutable="no">
        <type>const struct OwnerMapEntry</type>
        <definition>const struct OwnerMapEntry  ownerMap[]</definition>
        <argsstring>[]</argsstring>
        <name>ownerMap</name>
        <initializer>= {
  
  
  
  { Attribute::XML_1_00,       &quot;XML-1.00&quot;       },
  { Attribute::HTML_3_20,      &quot;HTML-3.20&quot;      },
  { Attribute::HTML_4_01,      &quot;HTML-4.01&quot;      },
  { Attribute::OEB_1_00,       &quot;OEB-1.00&quot;       },
  { Attribute::RTF_1_05,       &quot;RTF-1.05&quot;       },
  { Attribute::CSS_1_00,       &quot;CSS-1.00&quot;       },
  { Attribute::CSS_2_00,       &quot;CSS-2.00&quot;       },
  { Attribute::Layout,         &quot;Layout&quot;         },
  { Attribute::PrintField,     &quot;PrintField&quot;     },
  { Attribute::Table,          &quot;Table&quot;          },
  { Attribute::List,           &quot;List&quot;           },
  { Attribute::UserProperties, &quot;UserProperties&quot; },
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="503" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_struct_element_8cc_1a25ad62f39af9c56239a770472d1a1c51" prot="public" static="yes" mutable="no">
        <type>const struct TypeMapEntry</type>
        <definition>const struct TypeMapEntry  typeMap[]</definition>
        <argsstring>[]</argsstring>
        <name>typeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="586" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_struct_element_8cc_1a5007b7454b26d802a88bf0a80f87e916" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isPlacementName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isPlacementName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="30" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a5c36b6a3e69415dc4e2665581d8ef371" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isWritingModeName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isWritingModeName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="39" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a3dd99579097e4ffe03a7f0a4aab84670" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isBorderStyleName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isBorderStyleName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="46" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="46" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a1297c58200285187df5142ca6fd8639f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isTextAlignName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isTextAlignName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="60" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1aa5c19d9d7d0f5543b3713654a62dfc21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isBlockAlignName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isBlockAlignName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="68" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ac52eaaf1c3f1f324d3b40abcd4efc2ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isInlineAlignName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isInlineAlignName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="76" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a14b7159bacc7560d132687eb05457280" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isNumber</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isNumber</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="83" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a2ed576b9fb756d02608874ffc4f3e859" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isLineHeight</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isLineHeight</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="88" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a729a53ed47dce8522fafa1ab424e9f8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isTextDecorationName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isTextDecorationName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="95" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a27ee95afb5ff86c657a9a3dc6eb2dfa4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isRubyAlignName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isRubyAlignName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="103" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1aeeb1f0e03a6e278ff063ca1655a26c85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isRubyPositionName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isRubyPositionName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="112" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="112" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a1e1f639b6464599098e881f47c58c6c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isGlyphOrientationName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isGlyphOrientationName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="120" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ab8672706d523250a84aafa978ae5dde0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isListNumberingName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isListNumberingName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="131" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="131" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a6d8ed7d84403f94fd062eb3d8c1276e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isFieldRoleName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isFieldRoleName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="144" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ace797eeed8d95668bbff44eb0d96034b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isFieldCheckedName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isFieldCheckedName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="152" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a12bb1db86118d9ba55ceeb45f9acdaac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isTableScopeName</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isTableScopeName</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="159" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a12213a2f8d5474fa485660e3c0e84b6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isRGBColor</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isRGBColor</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="166" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="166" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a783bf60fa5b8feed0a3fcd82323ee1ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isNatural</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isNatural</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="190" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a038cda965b3ccb2085c0ac580b6330ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isPositive</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isPositive</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="196" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1aed44f0db5933012b6517d70f71ab09da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isNumberOrAuto</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isNumberOrAuto</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="201" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1abb05d3bc0e796cd136c795c69c46c224" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isTextString</definition>
        <argsstring>(Object *value)</argsstring>
        <name>isTextString</name>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="206" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ade3694f6180d684c82a036db4124f836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isRGBColorOrOptionalArray4, isRGBColor, 4, gTrue, gTrue)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isRGBColorOrOptionalArray4</type>
        </param>
        <param>
          <type>isRGBColor</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1aeda48ce3f1d68a68b16acc57ecce17ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isPositiveOrOptionalArray4, isPositive, 4, gTrue, gTrue)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isPositiveOrOptionalArray4</type>
        </param>
        <param>
          <type>isPositive</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a94b0567a447a6218009cd107763f5ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isPositiveOrArray4, isPositive, 4, gTrue, gFalse)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isPositiveOrArray4</type>
        </param>
        <param>
          <type>isPositive</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a2acf4cb62f6a668eafbb517bb017e822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isBorderStyle, isBorderStyleName, 4, gTrue, gTrue)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isBorderStyle</type>
        </param>
        <param>
          <type>isBorderStyleName</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1aab51e1922d216d04b1c35d7a78864377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isNumberArray4, isNumber, 4, gFalse, gFalse)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isNumberArray4</type>
        </param>
        <param>
          <type>isNumber</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1af1b1340f392b0ae3832f8752cc760a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isNumberOrArrayN, isNumber, 0, gTrue, gFalse)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isNumberOrArrayN</type>
        </param>
        <param>
          <type>isNumber</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>gTrue</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a278de5c151fc765c0042839564514b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_CHECKER</definition>
        <argsstring>(isTableHeaders, isTextString, 0, gFalse, gFalse)</argsstring>
        <name>ARRAY_CHECKER</name>
        <param>
          <type>isTableHeaders</type>
        </param>
        <param>
          <type>isTextString</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <param>
          <type>gFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1af847f123d01441722c1d513adb67e80c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool ownerHasMorePriority</definition>
        <argsstring>(Attribute::Owner a, Attribute::Owner b)</argsstring>
        <name>ownerHasMorePriority</name>
        <param>
          <type>Attribute::Owner</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Attribute::Owner</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="506" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="506" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a3de95b3e2af85ddac7ff98c911fc8e70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>static const AttributeMapEntry* getAttributeMapEntry</definition>
        <argsstring>(const AttributeMapEntry **entryList, Attribute::Type type)</argsstring>
        <name>getAttributeMapEntry</name>
        <param>
          <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> **</type>
          <declname>entryList</declname>
        </param>
        <param>
          <type>Attribute::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="594" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="594" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a5b2936e0b5259ca3d7b7d5c68c4a6fac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> *</type>
        <definition>static const AttributeMapEntry* getAttributeMapEntry</definition>
        <argsstring>(const AttributeMapEntry **entryList, const char *name)</argsstring>
        <name>getAttributeMapEntry</name>
        <param>
          <type>const <ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref> **</type>
          <declname>entryList</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="611" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="611" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ab095c2ac3a547aa033b59ca49a063f50" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const OwnerMapEntry *</type>
        <definition>static const OwnerMapEntry* getOwnerMapEntry</definition>
        <argsstring>(Attribute::Owner owner)</argsstring>
        <name>getOwnerMapEntry</name>
        <param>
          <type>Attribute::Owner</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="627" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="627" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a84bed69f19673813b1ac2314c1f66489" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const OwnerMapEntry *</type>
        <definition>static const OwnerMapEntry* getOwnerMapEntry</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getOwnerMapEntry</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="636" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="636" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ae68ac67371dacd8a7c4b29f53dc310eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* ownerToName</definition>
        <argsstring>(Attribute::Owner owner)</argsstring>
        <name>ownerToName</name>
        <param>
          <type>Attribute::Owner</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="645" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="645" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ada161fcabdfdbbfcc73981ebb9a46241" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Attribute::Owner</type>
        <definition>static Attribute::Owner nameToOwner</definition>
        <argsstring>(const char *name)</argsstring>
        <name>nameToOwner</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="651" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="651" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a3afac993a2255b88b79008e68e88f1af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const TypeMapEntry *</type>
        <definition>static const TypeMapEntry* getTypeMapEntry</definition>
        <argsstring>(StructElement::Type type)</argsstring>
        <name>getTypeMapEntry</name>
        <param>
          <type>StructElement::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="657" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="657" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a6cf10693249ba86ac3bac7dc7158f293" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const TypeMapEntry *</type>
        <definition>static const TypeMapEntry* getTypeMapEntry</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getTypeMapEntry</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="666" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="666" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1ac1fb5859d8c6dc166557224a77f426f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* typeToName</definition>
        <argsstring>(StructElement::Type type)</argsstring>
        <name>typeToName</name>
        <param>
          <type>StructElement::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="675" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="675" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a56c1c662aeb91e9515c1a18cbedf4fcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>StructElement::Type</type>
        <definition>static StructElement::Type nameToType</definition>
        <argsstring>(const char *name)</argsstring>
        <name>nameToType</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="686" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="686" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="_struct_element_8cc_1a35af9a62ec084480194a78252dc1f5d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>StructElement::Type</type>
        <definition>static StructElement::Type roleMapResolve</definition>
        <argsstring>(Dict *roleMap, const char *name, const char *curName, Object *resolved)</argsstring>
        <name>roleMapResolve</name>
        <param>
          <type><ref refid="class_dict" kindref="compound">Dict</ref> *</type>
          <declname>roleMap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>curName</declname>
        </param>
        <param>
          <type><ref refid="class_object" kindref="compound">Object</ref> *</type>
          <declname>resolved</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/StructElement.cc" line="1061" column="1" bodyfile="thirdparty/poppler/poppler/StructElement.cc" bodystart="1061" bodyend="1077"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StructElement.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2013,<sp/>2014<sp/>Igalia<sp/>S.L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Luigi<sp/>Scarso<sp/>&lt;luigi.scarso@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2015<sp/>Dmytro<sp/>Morgun<sp/>&lt;lztoad@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StructElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StructTreeRoot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Dict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gfx_state" kindref="compound">GfxState</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isPlacementName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Block&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Inline&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Before&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isWritingModeName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;LrTb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;RlTb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;TbRl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isBorderStyleName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Hidden&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Dotted&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Dashed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Solid&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Double&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Groove&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Ridge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Inset&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Outset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isTextAlignName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Center&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Justify&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isBlockAlignName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Before&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Middle&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;After&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Justify&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isInlineAlignName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Center&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isNumber(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isNum();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isLineHeight(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Auto&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isNumber(value);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isTextDecorationName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Underline&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Overline&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;LineThrough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isRubyAlignName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Center&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Justify&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Distribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isRubyPositionName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Before&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;After&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Warichu&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Inline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isGlyphOrientationName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Auto&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;90&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;180&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;270&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;360&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;-90&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;-180&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isListNumberingName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Disc&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Circle&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Square&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Decimal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;UpperRoman&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;LowerRoman&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;UpperAlpha&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;LowerAlpha&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isFieldRoleName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;cb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;pb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;tv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isFieldCheckedName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;neutral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isTableScopeName(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Row&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Column&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Both&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isRGBColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(value-&gt;isArray()<sp/>&amp;&amp;<sp/>value-&gt;arrayGetLength()<sp/>==<sp/>3))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>GBool<sp/>okay<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value-&gt;arrayGet(i,<sp/>&amp;obj)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>okay<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.getNum()<sp/>&lt;<sp/>0.0<sp/>||<sp/>obj.getNum()<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>okay<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>okay;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isNatural(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value-&gt;isInt()<sp/><sp/><sp/>&amp;&amp;<sp/>value-&gt;getInt()<sp/><sp/><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(value-&gt;isInt64()<sp/>&amp;&amp;<sp/>value-&gt;getInt64()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isPositive(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isNum()<sp/>&amp;&amp;<sp/>value-&gt;getNum()<sp/>&gt;=<sp/>0.0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isNumberOrAuto(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isNumber(value)<sp/>||<sp/>value-&gt;isName(</highlight><highlight class="stringliteral">&quot;Auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>isTextString(<ref refid="class_object" kindref="compound">Object</ref><sp/>*value)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>Shall<sp/>isName()<sp/>also<sp/>be<sp/>checked?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;isString();</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_CHECKER(name,<sp/>checkItem,<sp/>length,<sp/>allowSingle,<sp/>allowNulls)<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>GBool<sp/>name(Object<sp/>*value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!value-&gt;isArray())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>allowSingle<sp/>?<sp/>checkItem(value)<sp/>:<sp/>gFalse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(length<sp/>&amp;&amp;<sp/>value-&gt;arrayGetLength()<sp/>!=<sp/>length)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>gFalse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>okay<sp/>=<sp/>gTrue;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>value-&gt;arrayGetLength();<sp/>i++)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object<sp/>obj;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value-&gt;arrayGet(i,<sp/>&amp;obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((!allowNulls<sp/>&amp;&amp;<sp/>obj.isNull())<sp/>||<sp/>!checkItem(&amp;obj))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>okay<sp/>=<sp/>gFalse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>okay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">ARRAY_CHECKER(isRGBColorOrOptionalArray4,<sp/>isRGBColor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/>gTrue,<sp/><sp/>gTrue<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">ARRAY_CHECKER(isPositiveOrOptionalArray4,<sp/>isPositive,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/>gTrue,<sp/><sp/>gTrue<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">ARRAY_CHECKER(isPositiveOrArray4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isPositive,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/>gTrue,<sp/><sp/>gFalse);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">ARRAY_CHECKER(isBorderStyle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isBorderStyleName,<sp/>4,<sp/>gTrue,<sp/><sp/>gTrue<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">ARRAY_CHECKER(isNumberArray4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">ARRAY_CHECKER(isNumberOrArrayN,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>gTrue,<sp/><sp/>gFalse);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">ARRAY_CHECKER(isTableHeaders,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isTextString,<sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>functions<sp/>used<sp/>to<sp/>do<sp/>type-checking<sp/>on<sp/>attribute<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GBool<sp/>(*AttributeCheckFunc)(<ref refid="class_object" kindref="compound">Object</ref>*);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>attributes<sp/>to<sp/>their<sp/>names<sp/>and<sp/>whether<sp/>the<sp/>attribute<sp/>can<sp/>be<sp/>inherited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="struct_attribute_map_entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>Attribute::Type<sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*name;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/><sp/><sp/><sp/><sp/><sp/>*defval;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>GBool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inherit;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>AttributeCheckFunc<sp/>check;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="struct_attribute_defaults" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_attribute_defaults" kindref="compound">AttributeDefaults</ref><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Inline;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>LrTb;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Normal;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Distribute;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>off;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Zero;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Auto;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Start;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>None;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Before;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>Nat1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="struct_attribute_defaults" kindref="compound">AttributeDefaults</ref>()<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>Inline.initName(</highlight><highlight class="stringliteral">&quot;Inline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>LrTb.initName(</highlight><highlight class="stringliteral">&quot;LrTb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Normal.initName(</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>Distribute.initName(</highlight><highlight class="stringliteral">&quot;Distribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>off.initName(</highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Zero.initReal(0.0);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>Auto.initName(</highlight><highlight class="stringliteral">&quot;Auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>Start.initName(</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>None.initName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>Before.initName(</highlight><highlight class="stringliteral">&quot;Before&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>Nat1.initInt(1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>~<ref refid="struct_attribute_defaults" kindref="compound">AttributeDefaults</ref>()<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>Inline.free();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>LrTb.free();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Normal.free();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Distribute.free();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>off.free();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Zero.free();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Auto.free();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Start.free();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>None.free();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>Before.free();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>Nat1.free();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_defaults" kindref="compound">AttributeDefaults</ref><sp/>attributeDefaults;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATTR_LIST_END<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/>{<sp/>Attribute::Unknown,<sp/>NULL,<sp/>NULL,<sp/>gFalse,<sp/>NULL<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATTR_WITH_DEFAULT(name,<sp/>inherit,<sp/>check,<sp/>defval)<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/>{<sp/>Attribute::name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;attributeDefaults.defval,<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inherit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>check<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATTR(name,<sp/>inherit,<sp/>check)<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/>{<sp/>Attribute::name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inherit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>check<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonShared[]<sp/>=</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(Placement,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isPlacementName,<sp/>Inline),</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(WritingMode,<sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isWritingModeName,<sp/>LrTb),</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BackgroundColor,<sp/>gFalse,<sp/>isRGBColor),</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BorderColor,<sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isRGBColorOrOptionalArray4),</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(BorderStyle,<sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isBorderStyle,<sp/>None),</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BorderThickness,<sp/>gTrue,<sp/><sp/>isPositiveOrOptionalArray4),</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(Padding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isPositiveOrArray4,<sp/>Zero),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Color,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isRGBColor),</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="330"><highlight class="normal">};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonBlock[]<sp/>=</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(SpaceBefore,<sp/>gFalse,<sp/>isPositive,<sp/>Zero),</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(SpaceAfter,<sp/><sp/>gFalse,<sp/>isPositive,<sp/>Zero),</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(StartIndent,<sp/>gTrue,<sp/><sp/>isNumber,<sp/><sp/><sp/>Zero),</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(EndIndent,<sp/><sp/><sp/>gTrue,<sp/><sp/>isNumber,<sp/><sp/><sp/>Zero),</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(TextIndent,<sp/><sp/>gTrue,<sp/><sp/>isNumber,<sp/><sp/><sp/>Zero),</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(TextAlign,<sp/><sp/><sp/>gTrue,<sp/><sp/>isTextAlignName,<sp/>Start),</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BBox,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNumberArray4),</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(Width,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNumberOrAuto,<sp/>Auto),</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(Height,<sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNumberOrAuto,<sp/>Auto),</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(BlockAlign,<sp/><sp/>gTrue,<sp/><sp/>isBlockAlignName,<sp/>Before),</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(InlineAlign,<sp/>gTrue,<sp/><sp/>isInlineAlignName,<sp/>Start),</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="346"><highlight class="normal">};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonInline[]<sp/>=</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(BaselineShift,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNumber,<sp/>Zero),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(LineHeight,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isLineHeight,<sp/>Normal),</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TextDecorationColor,<sp/><sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isRGBColor),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TextDecorationThickness,<sp/><sp/>gTrue,<sp/><sp/>isPositive),</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(TextDecorationType,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isTextDecorationName,<sp/>None),</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(GlyphOrientationVertical,<sp/>gTrue,<sp/><sp/>isGlyphOrientationName,<sp/>Auto),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonRubyText[]<sp/>=</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(RubyPosition,<sp/>gTrue,<sp/>isRubyPositionName,<sp/>Before),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(RubyAlign,<sp/><sp/><sp/><sp/>gTrue,<sp/>isRubyAlignName,<sp/>Distribute),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonColumns[]<sp/>=</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(ColumnCount,<sp/><sp/>gFalse,<sp/>isNatural,<sp/>Nat1),</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ColumnGap,<sp/><sp/><sp/><sp/>gFalse,<sp/>isNumberOrArrayN),</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ColumnWidths,<sp/>gFalse,<sp/>isNumberOrArrayN),</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonList[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(ListNumbering,<sp/>gTrue,<sp/>isListNumberingName,<sp/>None),</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="377"><highlight class="normal">};</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonPrintField[]<sp/>=</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Role,<sp/><sp/><sp/><sp/>gFalse,<sp/>isFieldRoleName),</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(checked,<sp/>gFalse,<sp/>isFieldCheckedName,<sp/>off),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>ATTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Desc,<sp/><sp/><sp/><sp/>gFalse,<sp/>isTextString),</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="385"><highlight class="normal">};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonTable[]<sp/>=</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>ATTR(Headers,<sp/>gFalse,<sp/>isTableHeaders),</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>ATTR(Scope,<sp/><sp/><sp/>gFalse,<sp/>isTableScopeName),</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>ATTR(Summary,<sp/>gFalse,<sp/>isTextString),</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="393"><highlight class="normal">};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>attributeMapCommonTableCell[]<sp/>=</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(RowSpan,<sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNatural,<sp/>Nat1),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(ColSpan,<sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>isNatural,<sp/>Nat1),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(TBorderStyle,<sp/>gTrue,<sp/><sp/>isBorderStyle,<sp/>None),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>ATTR_WITH_DEFAULT(TPadding,<sp/><sp/><sp/><sp/><sp/>gTrue,<sp/><sp/>isPositiveOrArray4,<sp/>Zero),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>ATTR_LIST_END</highlight></codeline>
<codeline lineno="402"><highlight class="normal">};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ATTR_WITH_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ATTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapAll[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>attributeMapCommonBlock,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>attributeMapCommonInline,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>attributeMapCommonRubyText,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>attributeMapCommonColumns,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>attributeMapCommonList,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>attributeMapCommonPrintField,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>attributeMapCommonTable,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>attributeMapCommonTableCell,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapShared[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="424"><highlight class="normal">};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapBlock[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>attributeMapCommonBlock,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="430"><highlight class="normal">};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapInline[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>attributeMapCommonInline,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapTableCell[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>attributeMapCommonBlock,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>attributeMapCommonTable,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>attributeMapCommonTableCell,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapRubyText[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>attributeMapCommonInline,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>attributeMapCommonRubyText,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapColumns[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>attributeMapCommonInline,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>attributeMapCommonColumns,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="458"><highlight class="normal">};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapList[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>attributeMapCommonList,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="464"><highlight class="normal">};</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapTable[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>attributeMapCommonBlock,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>attributeMapCommonTable,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="471"><highlight class="normal">};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*attributeMapIllustration[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>Illustrations<sp/>may<sp/>have<sp/>some<sp/>attributes<sp/>from<sp/>the<sp/>&quot;shared&quot;,<sp/>&quot;inline&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>&quot;block&quot;<sp/>sets.<sp/>This<sp/>is<sp/>a<sp/>loose<sp/>specification;<sp/>making<sp/>it<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>means<sp/>duplicating<sp/>entries<sp/>from<sp/>the<sp/>sets.<sp/>This<sp/>seems<sp/>good<sp/>enough...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>attributeMapCommonShared,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>attributeMapCommonBlock,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>attributeMapCommonInline,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="481"><highlight class="normal">};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>mapping<sp/>owners<sp/>of<sp/>attributes<sp/>to<sp/>their<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OwnerMapEntry<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>Attribute::Owner<sp/>owner;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*name;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/>ownerMap[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>Those<sp/>are<sp/>sorted<sp/>in<sp/>the<sp/>owner<sp/>priority<sp/>resolution<sp/>order.<sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>attribute<sp/>is<sp/>defined<sp/>with<sp/>two<sp/>owners,<sp/>the<sp/>order<sp/>in<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>to<sp/>know<sp/>which<sp/>one<sp/>has<sp/>more<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::XML_1_00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;XML-1.00&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::HTML_3_20,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;HTML-3.20&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::HTML_4_01,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;HTML-4.01&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::OEB_1_00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OEB-1.00&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::RTF_1_05,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RTF-1.05&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::CSS_1_00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CSS-1.00&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::CSS_2_00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CSS-2.00&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::Layout,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Layout&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::PrintField,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PrintField&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::Table,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Table&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::List,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;List&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>{<sp/>Attribute::UserProperties,<sp/></highlight><highlight class="stringliteral">&quot;UserProperties&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="503"><highlight class="normal">};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>ownerHasMorePriority(Attribute::Owner<sp/>a,<sp/>Attribute::Owner<sp/>b)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>aIndex,<sp/>bIndex;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>aIndex<sp/>=<sp/>bIndex<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ownerMap[i].owner<sp/>==<sp/>a)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ownerMap[i].owner<sp/>==<sp/>b)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aIndex<sp/>&lt;<sp/>bIndex;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>element<sp/>types<sp/>to<sp/>their<sp/>names<sp/>and<sp/>also<sp/>serves<sp/>as<sp/>lookup<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>additional<sp/>element<sp/>type<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ElementType<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>elementTypeUndefined,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>elementTypeGrouping,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>elementTypeInline,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>elementTypeBlock,</highlight></codeline>
<codeline lineno="529"><highlight class="normal">};</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeMapEntry<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>StructElement::Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*name;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>ElementType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementType;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>**attributes;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}<sp/>typeMap[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Document,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Document&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Part,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Part&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Art,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Art&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapColumns<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Sect,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sect&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapColumns<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Div,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Div&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapColumns<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::BlockQuote,<sp/></highlight><highlight class="stringliteral">&quot;BlockQuote&quot;</highlight><highlight class="normal">,<sp/>elementTypeGrouping,<sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Caption,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Caption&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::NonStruct,<sp/><sp/></highlight><highlight class="stringliteral">&quot;NonStruct&quot;</highlight><highlight class="normal">,<sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Index,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Index&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Private,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Private&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Span,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Span&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Quote,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Quote&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Note,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Reference,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Reference&quot;</highlight><highlight class="normal">,<sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::BibEntry,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BibEntry&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Code&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Link,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Link&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Annot,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Annot&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapInline<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Ruby,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ruby&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapRubyText<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::RB,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RB&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapRubyText<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::RT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RT&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapRubyText<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::RP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RP&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Warichu,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Warichu&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>elementTypeInline,<sp/><sp/><sp/><sp/>attributeMapRubyText<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::WT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WT&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::WP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WP&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::P,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H1&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H2&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H3&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H4&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H5&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::H6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;H6&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::L,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapList<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::LI,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LI&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Lbl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lbl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::LBody,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LBody&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapBlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Table,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Table&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeBlock,<sp/><sp/><sp/><sp/><sp/>attributeMapTable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TR,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TR&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TH&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapTableCell<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TD&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapTableCell<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::THead,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;THead&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TFoot,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TFoot&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TBody,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TBody&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Figure,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Figure&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapIllustration<sp/>},</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Formula,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Formula&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapIllustration<sp/>},</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::Form,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Form&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeUndefined,<sp/>attributeMapIllustration<sp/>},</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TOC,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TOC&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>{<sp/>StructElement::TOCI,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TOCI&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementTypeGrouping,<sp/><sp/>attributeMapShared<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>the<sp/>attribute<sp/>and<sp/>structure<sp/>type<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*</highlight></codeline>
<codeline lineno="594"><highlight class="normal">getAttributeMapEntry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>**entryList,<sp/>Attribute::Type<sp/>type)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>assert(entryList);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*entryList)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>*entryList;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry-&gt;type<sp/>!=<sp/>Attribute::Unknown)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(entry-&gt;name);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>entry-&gt;type)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry++;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>entryList++;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="normal">getAttributeMapEntry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>**entryList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>assert(entryList);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*entryList)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>*entryList;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry-&gt;type<sp/>!=<sp/>Attribute::Unknown)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(entry-&gt;name);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/>entry-&gt;name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry++;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>entryList++;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OwnerMapEntry<sp/>*getOwnerMapEntry(Attribute::Owner<sp/>owner)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(owner<sp/>==<sp/>ownerMap[i].owner)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ownerMap[i];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OwnerMapEntry<sp/>*getOwnerMapEntry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ownerMap[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/>ownerMap[i].name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ownerMap[i];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ownerToName(Attribute::Owner<sp/>owner)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OwnerMapEntry<sp/>*entry<sp/>=<sp/>getOwnerMapEntry(owner);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>entry-&gt;name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;UnknownOwner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Attribute::Owner<sp/>nameToOwner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OwnerMapEntry<sp/>*entry<sp/>=<sp/>getOwnerMapEntry(name);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>entry-&gt;owner<sp/>:<sp/>Attribute::UnknownOwner;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*getTypeMapEntry(StructElement::Type<sp/>type)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(typeMap)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(typeMap[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>typeMap[i].type)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;typeMap[i];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*getTypeMapEntry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(typeMap)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(typeMap[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/>typeMap[i].name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;typeMap[i];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*typeToName(StructElement::Type<sp/>type)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>StructElement::MCID)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MarkedContent&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>StructElement::OBJR)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ObjectReference&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*entry<sp/>=<sp/>getTypeMapEntry(type);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>entry-&gt;name<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>StructElement::Type<sp/>nameToType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*entry<sp/>=<sp/>getTypeMapEntry(name);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>entry-&gt;type<sp/>:<sp/>StructElement::Unknown;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">Attribute::Attribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameLenA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*valueA):</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>type(UserProperty),</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>owner(UserProperties),</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>revision(0),</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>name(nameA,<sp/>nameLenA),</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>value(),</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>hidden(gFalse),</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>formatted(NULL)</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>assert(valueA);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>valueA-&gt;copy(&amp;value);</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">Attribute::Attribute(Type<sp/>type,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*valueA):</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>type(type),</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>owner(UserProperties),<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Determine<sp/>corresponding<sp/>owner<sp/>from<sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>revision(0),</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>name(),</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>value(),</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>hidden(gFalse),</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>formatted(NULL)</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>assert(valueA);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>valueA-&gt;copy(&amp;value);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!checkType())</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>Unknown;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal">Attribute::~Attribute()</highlight></codeline>
<codeline lineno="728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>formatted;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Attribute::getTypeName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="734"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>UserProperty)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name.getCString();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>getAttributeMapEntry(attributeMapAll,<sp/>type);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry-&gt;name;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Attribute::getOwnerName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="746"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ownerToName(owner);</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*Attribute::getDefaultValue(Attribute::Type<sp/>type)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>getAttributeMapEntry(attributeMapAll,<sp/>type);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(entry-&gt;defval)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Attribute::setFormattedValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*formattedA)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formattedA)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formatted)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formatted-&gt;Set(formattedA);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formatted<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(formattedA);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>formatted;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>formatted<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal">GBool<sp/>Attribute::checkType(<ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>element<sp/>is<sp/>passed,<sp/>tighther<sp/>type-checking<sp/>can<sp/>be<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!element)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*elementTypeEntry<sp/>=<sp/>getTypeMapEntry(element-&gt;getType());</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementTypeEntry<sp/>&amp;&amp;<sp/>elementTypeEntry-&gt;attributes)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>getAttributeMapEntry(elementTypeEntry-&gt;attributes,<sp/>type);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;check<sp/>&amp;&amp;<sp/>!((*entry-&gt;check)(&amp;value)))<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>entry:<sp/>the<sp/>attribute<sp/>is<sp/>not<sp/>valid<sp/>for<sp/>the<sp/>containing<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">Attribute::Type<sp/>Attribute::getTypeForName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>**attributes<sp/>=<sp/>attributeMapAll;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*elementTypeEntry<sp/>=<sp/>getTypeMapEntry(element-&gt;getType());</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementTypeEntry<sp/>&amp;&amp;<sp/>elementTypeEntry-&gt;attributes)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attributes<sp/>=<sp/>elementTypeEntry-&gt;attributes;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>getAttributeMapEntry(attributes,<sp/>name);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>entry-&gt;type<sp/>:<sp/>Unknown;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*Attribute::parseUserProperty(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*property)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>value;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameLen<sp/>=<sp/>GooString::CALC_STRING_LEN;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property-&gt;lookup(</highlight><highlight class="stringliteral">&quot;N&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s<sp/>=<sp/>obj.getString();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>nameLen<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isName())</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>obj.getName();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;N<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property-&gt;lookup(</highlight><highlight class="stringliteral">&quot;V&quot;</highlight><highlight class="normal">,<sp/>&amp;value)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;V<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>value.getTypeName());</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attribute<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref>(name,<sp/>nameLen,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property-&gt;lookup(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute-&gt;setFormattedValue(obj.getString()-&gt;getCString());</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;F<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property-&gt;lookup(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute-&gt;setHidden(obj.getBool());</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;H<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attribute;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StructElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">StructElement::StructData::StructData():</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>altText(0),</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>actualText(0),</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>id(0),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>title(0),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>expandedAbbr(0),</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>language(0),</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>revision(0)</highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">StructElement::StructData::~StructData()</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>altText;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>title;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>language;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>parentRef.free();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ElemPtrArray::iterator<sp/>i<sp/>=<sp/>elements.begin();<sp/>i<sp/>!=<sp/>elements.end();<sp/>++i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(AttrPtrArray::iterator<sp/>i<sp/>=<sp/>attributes.begin();<sp/>i<sp/>!=<sp/>attributes.end();<sp/>++i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">StructElement::StructElement(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*element,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;seen):</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>type(Unknown),</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>treeRoot(treeRootA),</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>parent(parentA),</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>s(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StructData())</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>assert(treeRoot);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>assert(element);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>parse(element);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>parseChildren(element,<sp/>seen);</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal">StructElement::StructElement(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcid,<sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA):</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>type(MCID),</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>treeRoot(treeRootA),</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>parent(parentA),</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>c(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ContentData(mcid))</highlight></codeline>
<codeline lineno="901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>assert(treeRoot);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>assert(parent);</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">StructElement::StructElement(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref>&amp;<sp/>ref,<sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA):</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>type(OBJR),</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>treeRoot(treeRootA),</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>parent(parentA),</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>c(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ContentData(ref))</highlight></codeline>
<codeline lineno="911"><highlight class="normal">{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>assert(treeRoot);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>assert(parent);</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal">StructElement::~StructElement()</highlight></codeline>
<codeline lineno="917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isContent())</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>pageRef.free();</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">GBool<sp/>StructElement::isBlock()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="926"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*entry<sp/>=<sp/>getTypeMapEntry(type);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>(entry-&gt;elementType<sp/>==<sp/>elementTypeBlock)<sp/>:<sp/>gFalse;</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">GBool<sp/>StructElement::isInline()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="932"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*entry<sp/>=<sp/>getTypeMapEntry(type);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>(entry-&gt;elementType<sp/>==<sp/>elementTypeInline)<sp/>:<sp/>gFalse;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal">GBool<sp/>StructElement::isGrouping()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="938"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeMapEntry<sp/>*entry<sp/>=<sp/>getTypeMapEntry(type);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry<sp/>?<sp/>(entry-&gt;elementType<sp/>==<sp/>elementTypeGrouping)<sp/>:<sp/>gFalse;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal">GBool<sp/>StructElement::hasPageRef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="944"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageRef.isRef()<sp/>||<sp/>(parent<sp/>&amp;&amp;<sp/>parent-&gt;hasPageRef());</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StructElement::getPageRef(<ref refid="struct_ref" kindref="compound">Ref</ref>&amp;<sp/>ref)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="949"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageRef.isRef())<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>pageRef.getRef();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent-&gt;getPageRef(ref);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StructElement::getTypeName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="962"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typeToName(type);</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*StructElement::findAttribute(Attribute::Type<sp/>attributeType,<sp/>GBool<sp/>inherit,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attribute::Owner<sp/>attributeOwner)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="968"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isContent())</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent-&gt;findAttribute(attributeType,<sp/>inherit,<sp/>attributeOwner);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributeType<sp/>==<sp/>Attribute::Unknown<sp/>||<sp/>attributeType<sp/>==<sp/>Attribute::UserProperty)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributeOwner<sp/>==<sp/>Attribute::UnknownOwner)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>the<sp/>attribute,<sp/>no<sp/>matter<sp/>who<sp/>the<sp/>owner<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNumAttributes();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attr<sp/>=<sp/>getAttribute(i);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributeType<sp/>==<sp/>attr-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result<sp/>||<sp/>ownerHasMorePriority(attr-&gt;getOwner(),<sp/>result-&gt;getOwner()))</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>attr;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>the<sp/>attribute,<sp/>with<sp/>a<sp/>specific<sp/>owner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNumAttributes();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attr<sp/>=<sp/>getAttribute(i);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributeType<sp/>==<sp/>attr-&gt;getType()<sp/>&amp;&amp;<sp/>attributeOwner<sp/>==<sp/>attr-&gt;getOwner())<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>attr;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inherit<sp/>&amp;&amp;<sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_attribute_map_entry" kindref="compound">AttributeMapEntry</ref><sp/>*entry<sp/>=<sp/>getAttributeMapEntry(attributeMapAll,<sp/>attributeType);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(entry);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Take<sp/>into<sp/>account<sp/>special<sp/>inheritance<sp/>cases,<sp/>for<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>elements<sp/>which<sp/>have<sp/>been<sp/>changed<sp/>to<sp/>be<sp/>block<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;/Placement/Block&quot;<sp/>have<sp/>slightly<sp/>different<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;inherit)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent-&gt;findAttribute(attributeType,<sp/>inherit,<sp/>attributeOwner);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref>*<sp/>StructElement::appendSubTreeText(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>GBool<sp/>recursive)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1014"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isContent()<sp/>&amp;&amp;<sp/>!isObjectRef())<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_marked_content_output_dev" kindref="compound">MarkedContentOutputDev</ref><sp/>mcdev(getMCID());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextSpanArray&amp;<sp/>spans(getTextSpansInternal(mcdev));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TextSpanArray::const_iterator<sp/>i<sp/>=<sp/>spans.begin();<sp/>i<sp/>!=<sp/>spans.end();<sp/>++i)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string-&gt;append(i-&gt;getText());</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!recursive)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>a<sp/>depth-first<sp/>traversal,<sp/>to<sp/>get<sp/>elements<sp/>in<sp/>logical<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNumChildren();<sp/>i++)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>getChild(i)-&gt;appendSubTreeText(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>recursive);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextSpanArray&amp;<sp/>StructElement::getTextSpansInternal(<ref refid="class_marked_content_output_dev" kindref="compound">MarkedContentOutputDev</ref>&amp;<sp/>mcdev)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1042"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>assert(isContent());</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPage<sp/>=<sp/>0,<sp/>endPage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getPageRef(ref))<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>startPage<sp/>=<sp/>endPage<sp/>=<sp/>treeRoot-&gt;getDoc()-&gt;findPage(ref.num,<sp/>ref.gen);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(startPage<sp/>&amp;&amp;<sp/>endPage))<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>startPage<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>endPage<sp/>=<sp/>treeRoot-&gt;getDoc()-&gt;getNumPages();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>treeRoot-&gt;getDoc()-&gt;displayPages(&amp;mcdev,<sp/>startPage,<sp/>endPage,<sp/>72.0,<sp/>72.0,<sp/>0,<sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mcdev.getTextSpans();</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>StructElement::Type<sp/>roleMapResolve(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*roleMap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*curName,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*resolved)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Circular<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curName<sp/>&amp;&amp;<sp/>!strcmp(name,<sp/>curName))</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StructElement::Unknown;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(roleMap-&gt;lookup(curName<sp/>?<sp/>curName<sp/>:<sp/>name,<sp/>resolved)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>StructElement::Type<sp/>type<sp/>=<sp/>nameToType(resolved-&gt;getName());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type<sp/>==<sp/>StructElement::Unknown</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>roleMapResolve(roleMap,<sp/>name,<sp/>resolved-&gt;getName(),<sp/>resolved)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resolved-&gt;isNull())</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;RoleMap<sp/>entry<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>resolved-&gt;getTypeName());</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StructElement::Unknown;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StructElement::parse(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*element)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>is<sp/>optional,<sp/>but<sp/>if<sp/>present<sp/>must<sp/>be<sp/>StructElem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isNull()<sp/>&amp;&amp;<sp/>!obj.isName(</highlight><highlight class="stringliteral">&quot;StructElem&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>StructElem<sp/>object<sp/>is<sp/>wrong&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parent<sp/>object<sp/>reference<sp/>(required).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!element-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/>&amp;s-&gt;parentRef)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;P<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>S-type<sp/>is<sp/>valid<sp/>for<sp/>the<sp/>top<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>and<sp/>create<sp/>a<sp/>node<sp/>of<sp/>the<sp/>appropriate<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;S<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>name<sp/>may<sp/>not<sp/>be<sp/>standard,<sp/>resolve<sp/>through<sp/>RoleMap<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treeRoot-&gt;getRoleMap())<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>resolvedName;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>roleMapResolve(treeRoot-&gt;getRoleMap(),<sp/>obj.getName(),<sp/>NULL,<sp/>&amp;resolvedName);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Resolving<sp/>through<sp/>RoleMap<sp/>may<sp/>leave<sp/>type<sp/>as<sp/>Unknown,<sp/>e.g.<sp/>for<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>are<sp/>not<sp/>present<sp/>in<sp/>it,<sp/>yet<sp/>they<sp/>are<sp/>standard<sp/>element<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>Unknown)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>nameToType(obj.getName());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point<sp/>either<sp/>the<sp/>type<sp/>name<sp/>must<sp/>have<sp/>been<sp/>resolved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>Unknown)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;StructElem<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getName());</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Object<sp/>ID<sp/>(optional),<sp/>to<sp/>be<sp/>looked<sp/>at<sp/>the<sp/>IDTree<sp/>in<sp/>the<sp/>tree<sp/>root.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;id<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Page<sp/>reference<sp/>(optional)<sp/>in<sp/>which<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>child<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>be<sp/>rendered<sp/>in.<sp/>Note:<sp/>each<sp/>element<sp/>stores<sp/>only<sp/>the<sp/>/Pg<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contained<sp/>by<sp/>it,<sp/>and<sp/>StructElement::getPageRef()<sp/>may<sp/>look<sp/>in<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>to<sp/>find<sp/>the<sp/>page<sp/>where<sp/>an<sp/>element<sp/>belongs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>element-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Pg&quot;</highlight><highlight class="normal">,<sp/>&amp;pageRef);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Revision<sp/>number<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;revision<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>title<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;title<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Language<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Lang&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;language<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alternative<sp/>text<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Alt&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;altText<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expanded<sp/>form<sp/>of<sp/>an<sp/>abbreviation<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;expandedAbbr<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>text<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ActualText&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;actualText<sp/>=<sp/>obj.takeString();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attributes<sp/>directly<sp/>attached<sp/>to<sp/>the<sp/>element<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>parseAttributes(obj.getDict());</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>iobj;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>attrIndex<sp/>=<sp/>getNumAttributes();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.arrayGet(i,<sp/>&amp;iobj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrIndex<sp/>=<sp/>getNumAttributes();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseAttributes(iobj.getDict());</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iobj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>revision<sp/>=<sp/>iobj.getInt();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>revision<sp/>numbers<sp/>for<sp/>the<sp/>elements<sp/>previously<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>attrIndex;<sp/>j<sp/>&lt;<sp/>getNumAttributes();<sp/>j++)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getAttribute(j)-&gt;setRevision(revision);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>item<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>iobj.getTypeName());</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iobj.free();</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attributes<sp/>referenced<sp/>indirectly<sp/>through<sp/>the<sp/>ClassMap<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treeRoot-&gt;getClassMap())<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>classes;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,<sp/>&amp;classes)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>attr;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treeRoot-&gt;getClassMap()-&gt;lookup(classes.getName(),<sp/>&amp;attr)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseAttributes(attr.getDict(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attr.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>attr.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>iobj;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>attrIndex<sp/>=<sp/>getNumAttributes();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attr.arrayGet(i,<sp/>&amp;iobj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrIndex<sp/>=<sp/>getNumAttributes();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseAttributes(iobj.getDict(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iobj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>revision<sp/>numbers<sp/>for<sp/>the<sp/>elements<sp/>previously<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>revision<sp/>=<sp/>iobj.getInt();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>attrIndex;<sp/>j<sp/>&lt;<sp/>getNumAttributes();<sp/>j++)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getAttribute(j)-&gt;setRevision(revision);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;C<sp/>item<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>iobj.getTypeName());</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iobj.free();</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!attr.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;C<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>classes.getTypeName());</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classes.free();</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attr.free();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*StructElement::parseChild(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*childObj,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;seen)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>assert(childObj);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>assert(ref);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(childObj-&gt;getInt(),<sp/>treeRoot,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;isDict(</highlight><highlight class="stringliteral">&quot;MCR&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>The<sp/>optional<sp/>Stm/StwOwn<sp/>attributes<sp/>are<sp/>not<sp/>handled,<sp/>so<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>page<sp/>will<sp/>be<sp/>always<sp/>scanned<sp/>when<sp/>calling<sp/>StructElement::getText().</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>mcidObj;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>pageRefObj;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!childObj-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;MCID&quot;</highlight><highlight class="normal">,<sp/>&amp;mcidObj)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;MCID<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>mcidObj.getTypeName());</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcidObj.free();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(mcidObj.getInt(),<sp/>treeRoot,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>mcidObj.free();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;dictLookupNF(</highlight><highlight class="stringliteral">&quot;Pg&quot;</highlight><highlight class="normal">,<sp/>&amp;pageRefObj)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;pageRef<sp/>=<sp/>pageRefObj;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pageRefObj.free();</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;isDict(</highlight><highlight class="stringliteral">&quot;OBJR&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>refObj;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;dictLookupNF(</highlight><highlight class="stringliteral">&quot;Obj&quot;</highlight><highlight class="normal">,<sp/>&amp;refObj)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>pageRefObj;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(refObj.getRef(),<sp/>treeRoot,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;dictLookupNF(</highlight><highlight class="stringliteral">&quot;Pg&quot;</highlight><highlight class="normal">,<sp/>&amp;pageRefObj)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;pageRef<sp/>=<sp/>pageRefObj;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pageRefObj.free();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Obj<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>refObj.getTypeName());</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>refObj.free();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childObj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Structure<sp/>element<sp/>dictionary<sp/>is<sp/>not<sp/>an<sp/>indirect<sp/>reference<sp/>({0:s})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref-&gt;getTypeName());</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seen.find(ref-&gt;getRefNum())<sp/>==<sp/>seen.end())<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seen.insert(ref-&gt;getRefNum());</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(childObj-&gt;getDict(),<sp/>treeRoot,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>seen);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Loop<sp/>detected<sp/>in<sp/>structure<sp/>tree,<sp/>skipping<sp/>subtree<sp/>at<sp/>object<sp/>{0:d}:{1:d}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref-&gt;getRefNum(),<sp/>ref-&gt;getRefGen());</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;K<sp/>has<sp/>a<sp/>child<sp/>of<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>childObj-&gt;getTypeName());</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appendChild(child);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref-&gt;isRef())</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>treeRoot-&gt;parentTreeAdd(ref-&gt;getRef(),<sp/>child);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StructElement::parseChildren(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*element,<sp/>std::set&lt;int&gt;<sp/>&amp;seen)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>kids;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;lookup(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;kids)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kids.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>ref;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parseChild(kids.arrayGetNF(i,<sp/>&amp;ref),<sp/>kids.arrayGet(i,<sp/>&amp;obj),<sp/>seen);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.free();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kids.isDict()<sp/>||<sp/>kids.isInt())<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>ref;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>parseChild(element-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;ref),<sp/>&amp;kids,<sp/>seen);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>ref.free();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>kids.free();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StructElement::parseAttributes(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*attributes,<sp/>GBool<sp/>keepExisting)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>owner;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributes-&gt;lookup(</highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal">,<sp/>&amp;owner)-&gt;isName(</highlight><highlight class="stringliteral">&quot;UserProperties&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>/P<sp/>is<sp/>an<sp/>array<sp/>of<sp/>UserProperty<sp/>dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>userProperties;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributes-&gt;lookup(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/>&amp;userProperties)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>userProperties.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>property;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userProperties.arrayGet(i,<sp/>&amp;property)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attribute<sp/>=<sp/>Attribute::parseUserProperty(property.getDict());</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attribute<sp/>&amp;&amp;<sp/>attribute-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendAttribute(attribute);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Item<sp/>in<sp/>P<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>attribute;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Item<sp/>in<sp/>P<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>property.getTypeName());</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.free();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>userProperties.free();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(owner.isName())<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>/P<sp/>contains<sp/>standard<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>first<sp/>if<sp/>the<sp/>owner<sp/>is<sp/>a<sp/>valid<sp/>standard<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>Attribute::Owner<sp/>ownerValue<sp/>=<sp/>nameToOwner(owner.getName());</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ownerValue<sp/>!=<sp/>Attribute::UnknownOwner)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>entries<sp/>of<sp/>the<sp/>&quot;attributes&quot;<sp/>dictionary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>/O<sp/>entry<sp/>(owner)<sp/>is<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>attributes-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>attributes-&gt;getKey(i);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attribute::Type<sp/>type<sp/>=<sp/>Attribute::getTypeForName(key,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>attribute<sp/>is<sp/>already<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keepExisting)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>exists<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>getNumAttributes();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getAttribute(j)-&gt;getType()<sp/>==<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exists<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exists)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/>Attribute::Unknown)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>value;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>typeCheckOk<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attribute<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref>(type,<sp/>attributes-&gt;getVal(i,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attribute-&gt;isOk()<sp/>&amp;&amp;<sp/>(typeCheckOk<sp/>=<sp/>attribute-&gt;checkType(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendAttribute(attribute);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>not<sp/>needed<sp/>to<sp/>free<sp/>&quot;value&quot;,<sp/>the<sp/>Attribute<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>owns<sp/>the<sp/>contents,<sp/>so<sp/>deleting<sp/>&quot;attribute&quot;<sp/>is<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!typeCheckOk)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>{0:s}<sp/>value<sp/>is<sp/>of<sp/>wrong<sp/>type<sp/>({1:s})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribute-&gt;getTypeName(),<sp/>attribute-&gt;getValue()-&gt;getTypeName());</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>attribute;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>Attribute<sp/>&apos;{0:s}&apos;<sp/>in<sp/>element<sp/>{1:s}&quot;</highlight><highlight class="normal">,<sp/>key,<sp/>getTypeName());</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;O<sp/>object<sp/>is<sp/>invalid<sp/>value<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>owner.getName());</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!owner.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;O<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>owner.getTypeName());</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>owner.free();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/StructElement.cc"/>
  </compounddef>
</doxygen>
