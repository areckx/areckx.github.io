<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="interval__tree__test_8cpp" kind="file" language="C++">
    <compoundname>interval_tree_test.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <includes local="no">random</includes>
    <includes local="no">time.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="_interval_tree_8h" local="yes">IntervalTree.h</includes>
    <incdepgraph>
      <node id="81447">
        <label>assert.h</label>
      </node>
      <node id="81445">
        <label>random</label>
      </node>
      <node id="81448">
        <label>IntervalTree.h</label>
        <link refid="_interval_tree_8h_source"/>
        <childnode refid="81449" relation="include">
        </childnode>
        <childnode refid="81450" relation="include">
        </childnode>
        <childnode refid="81442" relation="include">
        </childnode>
      </node>
      <node id="81441">
        <label>thirdparty/intervaltree/interval_tree_test.cpp</label>
        <link refid="interval__tree__test_8cpp"/>
        <childnode refid="81442" relation="include">
        </childnode>
        <childnode refid="81443" relation="include">
        </childnode>
        <childnode refid="81444" relation="include">
        </childnode>
        <childnode refid="81445" relation="include">
        </childnode>
        <childnode refid="81446" relation="include">
        </childnode>
        <childnode refid="81447" relation="include">
        </childnode>
        <childnode refid="81448" relation="include">
        </childnode>
      </node>
      <node id="81449">
        <label>vector</label>
      </node>
      <node id="81446">
        <label>time.h</label>
      </node>
      <node id="81442">
        <label>iostream</label>
      </node>
      <node id="81444">
        <label>chrono</label>
      </node>
      <node id="81443">
        <label>thread</label>
      </node>
      <node id="81450">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="interval__tree__test_8cpp_1aecc34dd2628d2410899a3aa996593340" prot="public" static="no">
        <type><ref refid="class_interval" kindref="compound">Interval</ref>&lt; bool &gt;</type>
        <definition>typedef Interval&lt;bool&gt; interval</definition>
        <argsstring></argsstring>
        <name>interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="11" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="interval__tree__test_8cpp_1aead68ded1cb90e37693e18fb8900f463" prot="public" static="no">
        <type>vector&lt; <ref refid="class_interval" kindref="compound">interval</ref> &gt;</type>
        <definition>typedef vector&lt;interval&gt; intervalVector</definition>
        <argsstring></argsstring>
        <name>intervalVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="12" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="interval__tree__test_8cpp_1a69f1ac315e0665b2d531cf203f2b208a" prot="public" static="no">
        <type><ref refid="class_interval_tree" kindref="compound">IntervalTree</ref>&lt; bool &gt;</type>
        <definition>typedef IntervalTree&lt;bool&gt; intervalTree</definition>
        <argsstring></argsstring>
        <name>intervalTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="13" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="interval__tree__test_8cpp_1a3e61661dff288a53feac2bd465fbd2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K randKey</definition>
        <argsstring>(K floor, K ceiling)</argsstring>
        <name>randKey</name>
        <param>
          <type>K</type>
          <declname>floor</declname>
        </param>
        <param>
          <type>K</type>
          <declname>ceiling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="16" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="interval__tree__test_8cpp_1a6f255e6971679589f22efc918e5d88cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_interval" kindref="compound">Interval</ref>&lt; T, K &gt;</type>
        <definition>Interval&lt;T,K&gt; randomInterval</definition>
        <argsstring>(K maxStart, K maxLength, K maxStop, const T &amp;value)</argsstring>
        <name>randomInterval</name>
        <param>
          <type>K</type>
          <declname>maxStart</declname>
        </param>
        <param>
          <type>K</type>
          <declname>maxLength</declname>
        </param>
        <param>
          <type>K</type>
          <declname>maxStop</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="22" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="interval__tree__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/intervaltree/interval_tree_test.cpp" line="28" column="1" bodyfile="thirdparty/intervaltree/interval_tree_test.cpp" bodystart="28" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IntervalTree.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_interval" kindref="compound">Interval&lt;bool&gt;</ref><sp/><ref refid="class_interval" kindref="compound">interval</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>vector&lt;interval&gt;<sp/>intervalVector;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_interval_tree" kindref="compound">IntervalTree&lt;bool&gt;</ref><sp/><ref refid="class_interval_tree" kindref="compound">intervalTree</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">K<sp/>randKey(K<sp/>floor,<sp/>K<sp/>ceiling)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>range<sp/>=<sp/>ceiling<sp/>-<sp/>floor;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>floor<sp/>+<sp/>range<sp/>*<sp/>((double)<sp/>rand()<sp/>/<sp/>(double)<sp/>(RAND_MAX<sp/>+<sp/>1.0));</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="class_interval" kindref="compound">Interval&lt;T,K&gt;</ref><sp/>randomInterval(K<sp/>maxStart,<sp/>K<sp/>maxLength,<sp/>K<sp/>maxStop,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>start<sp/>=<sp/>randKey&lt;K&gt;(0,<sp/>maxStart);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>stop<sp/>=<sp/>min&lt;K&gt;(randKey&lt;K&gt;(start,<sp/>start<sp/>+<sp/>maxLength),<sp/>maxStop);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_interval" kindref="compound">Interval&lt;T,K&gt;</ref>(start,<sp/>stop,<sp/>value);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>vector&lt;std::size_t&gt;<sp/>countsVector;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>srand((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)time(NULL));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalVector<sp/>intervals;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalVector<sp/>queries;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>test<sp/>set<sp/>of<sp/>target<sp/>intervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervals.push_back(randomInterval&lt;bool&gt;(100000,<sp/>1000,<sp/>100000<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queries.push_back(randomInterval&lt;bool&gt;(100000,<sp/>1000,<sp/>100000<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>chrono::high_resolution_clock<sp/>Clock;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>chrono::milliseconds<sp/>milliseconds;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>brute-force<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>countsVector<sp/>bruteforcecounts;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock::time_point<sp/>t0<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(intervalVector::iterator<sp/>q<sp/>=<sp/>queries.begin();<sp/>q<sp/>!=<sp/>queries.end();<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervalVector<sp/>results;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(intervalVector::iterator<sp/>i<sp/>=<sp/>intervals.begin();<sp/>i<sp/>!=<sp/>intervals.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i-&gt;start<sp/>&gt;=<sp/>q-&gt;start<sp/>&amp;&amp;<sp/>i-&gt;stop<sp/>&lt;=<sp/>q-&gt;stop)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(*i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bruteforcecounts.push_back(results.size());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock::time_point<sp/>t1<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>milliseconds<sp/>ms<sp/>=<sp/>chrono::duration_cast&lt;milliseconds&gt;(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;brute<sp/>force:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ms.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>interval<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_interval_tree" kindref="compound">intervalTree</ref><sp/>tree<sp/>=<sp/><ref refid="class_interval_tree" kindref="compound">intervalTree</ref>(intervals);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>countsVector<sp/>treecounts;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(intervalVector::iterator<sp/>q<sp/>=<sp/>queries.begin();<sp/>q<sp/>!=<sp/>queries.end();<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervalVector<sp/>results;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree.findContained(q-&gt;start,<sp/>q-&gt;stop,<sp/>results);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>treecounts.push_back(results.size());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>ms<sp/>=<sp/>std::chrono::duration_cast&lt;milliseconds&gt;(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;interval<sp/>tree:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ms.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>the<sp/>same<sp/>number<sp/>of<sp/>results<sp/>are<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>countsVector::iterator<sp/>b<sp/>=<sp/>bruteforcecounts.begin();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(countsVector::iterator<sp/>t<sp/>=<sp/>treecounts.begin();<sp/>t<sp/>!=<sp/>treecounts.end();<sp/>++t,<sp/>++b)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*b<sp/>==<sp/>*t);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/intervaltree/interval_tree_test.cpp"/>
  </compounddef>
</doxygen>
