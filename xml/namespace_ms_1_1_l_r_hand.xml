<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_ms_1_1_l_r_hand" kind="namespace" language="C++">
    <compoundname>Ms::LRHand</compoundname>
    <innerclass refid="struct_ms_1_1_l_r_hand_1_1_chord_split_data" prot="public">Ms::LRHand::ChordSplitData</innerclass>
    <innerclass refid="struct_ms_1_1_l_r_hand_1_1_split_try" prot="public">Ms::LRHand::SplitTry</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a54bc0e64bbb00d994baccbef5b4f89f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::LRHand::needToSplit</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, int midiProgram, bool isDrumTrack)</argsstring>
        <name>needToSplit</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>int</type>
          <declname>midiProgram</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isDrumTrack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="15" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="15" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1ae8b96f2ac35f03b8b5e11f48a95d24e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findLastSplitPoint</definition>
        <argsstring>(const std::vector&lt; ChordSplitData &gt; &amp;splits)</argsstring>
        <name>findLastSplitPoint</name>
        <param>
          <type>const std::vector&lt; <ref refid="struct_ms_1_1_l_r_hand_1_1_chord_split_data" kindref="compound">ChordSplitData</ref> &gt; &amp;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="68" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="68" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a6a7c5cc4b32856b1f47e596c2d775b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::LRHand::splitChords</definition>
        <argsstring>(const std::vector&lt; ChordSplitData &gt; &amp;splits, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;leftHandChords, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>splitChords</name>
        <param>
          <type>const std::vector&lt; <ref refid="struct_ms_1_1_l_r_hand_1_1_chord_split_data" kindref="compound">ChordSplitData</ref> &gt; &amp;</type>
          <declname>splits</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>leftHandChords</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="89" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="89" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a4a7a4976fadc8febc1b876f7fc174f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findPitchWidthPenalty</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint)</argsstring>
        <name>findPitchWidthPenalty</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="128" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="128" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1ad453db64011a921fd890e38f66d8ba3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::LRHand::isOctave</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int beg, int end)</argsstring>
        <name>isOctave</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="159" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1af5d3f3a737aa48596fcc34219aca3553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findSimilarityPenalty</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, const QList&lt; MidiNote &gt; &amp;prevNotes, int splitPoint, int prevSplitPoint)</argsstring>
        <name>findSimilarityPenalty</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>prevNotes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prevSplitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="167" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="167" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a1b5bdde824fd126781ade15a2cec1fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::LRHand::areOffTimesEqual</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int beg, int end)</argsstring>
        <name>areOffTimesEqual</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="202" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="202" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1afbf3107905e21e35cdc51e1f2a6e82b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findDurationPenalty</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint)</argsstring>
        <name>findDurationPenalty</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="218" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="218" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1aef04bb433555cc38bd4756b8879856f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findNoteCountPenalty</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint)</argsstring>
        <name>findNoteCountPenalty</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="228" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="228" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a2c1bd4dba25432034b9cd496b0c3d90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::LRHand::findIntersectionPenalty</definition>
        <argsstring>(const ReducedFraction &amp;currentOnTime, int prevPos, int prevSplitPoint, const ReducedFraction &amp;maxChordLen, const std::vector&lt; ChordSplitData &gt; &amp;splits, bool hasLowNotes, bool hasHighNotes)</argsstring>
        <name>findIntersectionPenalty</name>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>currentOnTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prevPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prevSplitPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLen</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_ms_1_1_l_r_hand_1_1_chord_split_data" kindref="compound">ChordSplitData</ref> &gt; &amp;</type>
          <declname>splits</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasLowNotes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasHighNotes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="239" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="239" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1aaad1026e37a919f88bc6e927483079c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="struct_ms_1_1_l_r_hand_1_1_chord_split_data" kindref="compound">ChordSplitData</ref> &gt;</type>
        <definition>std::vector&lt;ChordSplitData&gt; Ms::LRHand::findSplits</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>findSplits</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="284" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="284" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a12a72db0c2b1c3c83dd5e0181e035876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::LRHand::insertNewLeftHandTrack</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks, std::multimap&lt; int, MTrack &gt;::iterator &amp;it, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;leftHandChords)</argsstring>
        <name>insertNewLeftHandTrack</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt;::iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>leftHandChords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="353" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="353" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1ab842ec714e9b8d83d04868ad7229b74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::LRHand::splitStaff</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks, std::multimap&lt; int, MTrack &gt;::iterator &amp;it)</argsstring>
        <name>splitStaff</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt;::iterator &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="365" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="365" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a3756f43567b7fc1b25ea7fe82a3b93e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::LRHand::addNewLeftHandChord</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;leftHandChords, const QList&lt; MidiNote &gt; &amp;leftHandNotes, const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;it)</argsstring>
        <name>addNewLeftHandChord</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>leftHandChords</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>leftHandNotes</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="382" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__lrhand_8cpp_1a3e6921d4d1d96e0fe2ef6032aa1fcbce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::LRHand::splitIntoLeftRightHands</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks)</argsstring>
        <name>splitIntoLeftRightHands</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_lrhand.cpp" line="391" column="1" bodyfile="mscore/importmidi/importmidi_lrhand.cpp" bodystart="391" bodyend="405"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="mscore/importmidi/importmidi_lrhand.cpp" line="13" column="1"/>
  </compounddef>
</doxygen>
