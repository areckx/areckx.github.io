<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_ms_1_1_midi_voice" kind="namespace" language="C++">
    <compoundname>Ms::MidiVoice</compoundname>
    <innerclass refid="struct_ms_1_1_midi_voice_1_1_voice_split" prot="public">Ms::MidiVoice::VoiceSplit</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="importmidi__voice_8cpp_1a98b1b943972fbd1940857855f863b7be" prot="public" static="no">
        <name>MovedVoiceGroup</name>
        <enumvalue id="dummy_1a98b1b943972fbd1940857855f863b7bea41bc94cbd8eebea13ce0491b2ac11b88" prot="public">
          <name>LOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1a98b1b943972fbd1940857855f863b7beab89de3b4b81c4facfac906edf29aec8c" prot="public">
          <name>HIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="256" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="importmidi__voice_8cpp_1add0432d3a94f27c7a0b1310db81aa36d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Ms::MidiVoice::MAX_PITCH_DIST</definition>
        <argsstring></argsstring>
        <name>MAX_PITCH_DIST</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="408" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="importmidi__voice_8cpp_1af3f1aacdf8162ab7d34a5bc14e758dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::toIntVoiceCount</definition>
        <argsstring>(MidiOperations::VoiceCount value)</argsstring>
        <name>toIntVoiceCount</name>
        <param>
          <type>MidiOperations::VoiceCount</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="19" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="19" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a478974ca664d9670b8c19d39ff1f609a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::voiceLimit</definition>
        <argsstring>()</argsstring>
        <name>voiceLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="34" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a5b50fec661a2ea7a9996203864794dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::allNotesHaveEqualLength</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes)</argsstring>
        <name>allNotesHaveEqualLength</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="103" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a8c027ff2064bbcfd7d0364d430df05b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findDurationCountInGroup</definition>
        <argsstring>(const ReducedFraction &amp;chordOnTime, const QList&lt; MidiNote &gt; &amp;notes, int voice, const std::vector&lt; int &gt; &amp;groupOfIndexes, const TimeSigMap *sigmap, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets)</argsstring>
        <name>findDurationCountInGroup</name>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>chordOnTime</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>groupOfIndexes</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="113" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="113" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1aa8409387e6ba37ca4c2482c04bff78ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findDurationCount</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int voice, int splitPoint, const ReducedFraction &amp;chordOnTime, const TimeSigMap *sigmap, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets)</argsstring>
        <name>findDurationCount</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>chordOnTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="177" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="177" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a02017d45ceb9a9812761b52c85584d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findOptimalSplitPoint</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const TimeSigMap *sigmap, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>findOptimalSplitPoint</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="202" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="202" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1afbbec36a9b1211149e7280ea589a439f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt;::const_iterator</type>
        <definition>std::multimap&lt;ReducedFraction, std::multimap&lt;ReducedFraction, MidiTuplet::TupletData&gt;::iterator&gt;::const_iterator Ms::MidiVoice::findInsertedTuplet</definition>
        <argsstring>(const ReducedFraction &amp;onTime, int voice, const std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets)</argsstring>
        <name>findInsertedTuplet</name>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>onTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="268" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="268" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a7309d1e026023f8523a2345472791759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::hasIntersectionWithTuplets</definition>
        <argsstring>(int voice, const ReducedFraction &amp;onTime, const ReducedFraction &amp;offTime, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, const ReducedFraction &amp;tupletOnTime)</argsstring>
        <name>hasIntersectionWithTuplets</name>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>onTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>offTime</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>tupletOnTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="285" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="285" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1ac44bd090ab986cf8a8cba27579fa8b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiVoice::addGroupSplits</definition>
        <argsstring>(std::vector&lt; VoiceSplit &gt; &amp;splits, const ReducedFraction &amp;maxChordLength, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, const ReducedFraction &amp;tupletOnTime, const ReducedFraction &amp;onTime, const ReducedFraction &amp;groupOffTime, int origVoice, MovedVoiceGroup groupType, int maxOccupiedVoice)</argsstring>
        <name>addGroupSplits</name>
        <param>
          <type>std::vector&lt; <ref refid="struct_ms_1_1_midi_voice_1_1_voice_split" kindref="compound">VoiceSplit</ref> &gt; &amp;</type>
          <declname>splits</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLength</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>tupletOnTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>onTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>groupOffTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>origVoice</declname>
        </param>
        <param>
          <type>MovedVoiceGroup</type>
          <declname>groupType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxOccupiedVoice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="307" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="307" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a20372a4d35fbae84666c8f5e543ff4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref></type>
        <definition>ReducedFraction Ms::MidiVoice::maximizeOffTime</definition>
        <argsstring>(const MidiNote &amp;note, const ReducedFraction &amp;offTime)</argsstring>
        <name>maximizeOffTime</name>
        <param>
          <type>const <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &amp;</type>
          <declname>note</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>offTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="345" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="345" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a90bf3b3e2da5940c6f6af87e89edbd2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="struct_ms_1_1_midi_voice_1_1_voice_split" kindref="compound">VoiceSplit</ref> &gt;</type>
        <definition>std::vector&lt;VoiceSplit&gt; Ms::MidiVoice::findPossibleVoiceSplits</definition>
        <argsstring>(int origVoice, const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, int splitPoint, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, int maxOccupiedVoice)</argsstring>
        <name>findPossibleVoiceSplits</name>
        <param>
          <type>int</type>
          <declname>origVoice</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxOccupiedVoice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="358" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="358" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1aa95ca123c2e295de161cde437683a082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findPrevPitchDist</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, int averagePitch, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, int voice)</argsstring>
        <name>findPrevPitchDist</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>averagePitch</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="410" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="410" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a9361cadaad6cb85cfba1f4f65cce509c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findNextPitchDist</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, int averagePitch, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, int voice)</argsstring>
        <name>findNextPitchDist</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>averagePitch</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>int</type>
          <declname>voice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="426" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="426" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a193287b1cbe6f0d2e273b4d398ddc6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findMinPitchDist</definition>
        <argsstring>(int averagePitch, const int voice, const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>findMinPitchDist</name>
        <param>
          <type>int</type>
          <declname>averagePitch</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="442" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="442" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a26ad82c9c5ac32b11346cce464a01416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findAverageLowPitch</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint)</argsstring>
        <name>findAverageLowPitch</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="462" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="462" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1ac179d4eb3897d125a134a174d5e97bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findAverageHighPitch</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint)</argsstring>
        <name>findAverageHighPitch</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="472" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="472" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a8510a0da074c2f9dc5bfdfbb01675aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ms_1_1_midi_voice_1_1_voice_split" kindref="compound">VoiceSplit</ref></type>
        <definition>VoiceSplit Ms::MidiVoice::findBestSplit</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const std::vector&lt; VoiceSplit &gt; &amp;possibleSplits, int splitPoint)</argsstring>
        <name>findBestSplit</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_ms_1_1_midi_voice_1_1_voice_split" kindref="compound">VoiceSplit</ref> &gt; &amp;</type>
          <declname>possibleSplits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="482" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="482" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a094864a04b7cd3032f967bb38520e4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiVoice::insertNewTuplet</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &amp;tuplet, const ReducedFraction &amp;tupletOnTime, int newVoice, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets)</argsstring>
        <name>insertNewTuplet</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &amp;</type>
          <declname>tuplet</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>tupletOnTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newVoice</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="525" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="525" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a75643640b01337568090358dae7758e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::canSplitTuplet</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &amp;tuplet, int newVoice, const ReducedFraction &amp;chordOnTime, const QList&lt; MidiNote &gt; &amp;notes, const std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const ReducedFraction &amp;maxChordLength)</argsstring>
        <name>canSplitTuplet</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &amp;</type>
          <declname>tuplet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newVoice</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>chordOnTime</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="556" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="556" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a1fd5d7e65644b7738d24b8a62fd102ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiVoice::splitTuplet</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &amp;tuplet, int newVoice, const ReducedFraction &amp;chordOnTime, const QList&lt; MidiNote &gt; &amp;notes, bool &amp;isInTuplet, std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const ReducedFraction &amp;maxChordLength, bool allowParallelTuplets, bool isThisAChord)</argsstring>
        <name>splitTuplet</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &amp;</type>
          <declname>tuplet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newVoice</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>chordOnTime</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isInTuplet</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLength</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowParallelTuplets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isThisAChord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="589" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="589" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a837c2c1339c226af86f1f5c7049f8479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::updateChordTuplets</definition>
        <argsstring>(MidiChord &amp;chord, const ReducedFraction &amp;onTime, std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, const ReducedFraction &amp;maxChordLength, bool allowParallelTuplets)</argsstring>
        <name>updateChordTuplets</name>
        <param>
          <type><ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &amp;</type>
          <declname>chord</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>onTime</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLength</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowParallelTuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="655" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="655" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1ab8c97dd7c74a94661c5aecd55be167aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findMaxOccupiedVoiceInBar</definition>
        <argsstring>(const std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>findMaxOccupiedVoiceInBar</name>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="704" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="704" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a52975b50d35235309eb75b9a1c804739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::splitChordToVoice</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const QSet&lt; int &gt; &amp;notesToMove, int newVoice, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets, std::multimap&lt; ReducedFraction, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt;::iterator &gt; &amp;insertedTuplets, const ReducedFraction &amp;maxChordLength, bool allowParallelTuplets)</argsstring>
        <name>splitChordToVoice</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const QSet&lt; int &gt; &amp;</type>
          <declname>notesToMove</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newVoice</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt;::iterator &gt; &amp;</type>
          <declname>insertedTuplets</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>maxChordLength</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowParallelTuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="733" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="733" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a81d8698151703cedff2cb24afb0c77a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSet&lt; int &gt;</type>
        <definition>QSet&lt;int&gt; Ms::MidiVoice::findNotesToMove</definition>
        <argsstring>(const QList&lt; MidiNote &gt; &amp;notes, int splitPoint, MovedVoiceGroup splitGroup)</argsstring>
        <name>findNotesToMove</name>
        <param>
          <type>const QList&lt; <ref refid="class_ms_1_1_midi_note" kindref="compound">MidiNote</ref> &gt; &amp;</type>
          <declname>notes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>splitPoint</declname>
        </param>
        <param>
          <type>MovedVoiceGroup</type>
          <declname>splitGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="814" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="814" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a88608502c3adcb68e615b3727f186c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::doVoiceSeparation</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const TimeSigMap *sigmap, std::multimap&lt; ReducedFraction, MidiTuplet::TupletData &gt; &amp;tuplets)</argsstring>
        <name>doVoiceSeparation</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="struct_ms_1_1_midi_tuplet_1_1_tuplet_data" kindref="compound">MidiTuplet::TupletData</ref> &gt; &amp;</type>
          <declname>tuplets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="839" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="839" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1abb4f22a414dc48715af27e74301be91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::findBarIndexForOffTime</definition>
        <argsstring>(const ReducedFraction &amp;offTime, const TimeSigMap *sigmap)</argsstring>
        <name>findBarIndexForOffTime</name>
        <param>
          <type>const <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref> &amp;</type>
          <declname>offTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="896" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="896" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a3dea84ea959ed75fe5d4f03ed6777c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MidiVoice::averagePitchOfChords</definition>
        <argsstring>(const std::vector&lt; std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &gt; &amp;chords)</argsstring>
        <name>averagePitchOfChords</name>
        <param>
          <type>const std::vector&lt; std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="905" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="905" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a822a7099995a937294afe4824e04838c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiVoice::sortVoicesByPitch</definition>
        <argsstring>(const std::map&lt; int, std::vector&lt; std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &gt;&gt; &amp;voiceChords)</argsstring>
        <name>sortVoicesByPitch</name>
        <param>
          <type>const std::map&lt; int, std::vector&lt; std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &gt;&gt; &amp;</type>
          <declname>voiceChords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="924" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="924" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a95f2244b389b07bdcf770b01c8360150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiVoice::sortVoices</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords, const TimeSigMap *sigmap)</argsstring>
        <name>sortVoices</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="965" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="965" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__voice_8cpp_1a6da1f9595969f0c5dd567018f6d9e64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::MidiVoice::separateVoices</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks, const TimeSigMap *sigmap)</argsstring>
        <name>separateVoices</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_time_sig_map" kindref="compound">TimeSigMap</ref> *</type>
          <declname>sigmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_voice.cpp" line="998" column="1" bodyfile="mscore/importmidi/importmidi_voice.cpp" bodystart="998" bodyend="1050"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="mscore/importmidi/importmidi_voice.cpp" line="15" column="1"/>
  </compounddef>
</doxygen>
