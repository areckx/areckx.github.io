<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="xmlutils_8cpp" kind="file" language="C++">
    <compoundname>xmlutils.cpp</compoundname>
    <includes local="no">qregexp.h</includes>
    <includes local="no">qstring.h</includes>
    <includes refid="xmlutils__p_8h" local="yes">xmlutils_p.h</includes>
    <incdepgraph>
      <node id="93404">
        <label>qregexp.h</label>
      </node>
      <node id="93406">
        <label>xmlutils_p.h</label>
        <link refid="xmlutils__p_8h_source"/>
        <childnode refid="93407" relation="include">
        </childnode>
      </node>
      <node id="93405">
        <label>qstring.h</label>
      </node>
      <node id="93403">
        <label>thirdparty/xmlstream/xmlutils.cpp</label>
        <link refid="xmlutils_8cpp"/>
        <childnode refid="93404" relation="include">
        </childnode>
        <childnode refid="93405" relation="include">
        </childnode>
        <childnode refid="93406" relation="include">
        </childnode>
      </node>
      <node id="93407">
        <label>QtCore/qstring.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_q_xml_char_range" prot="public">QXmlCharRange</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="xmlutils_8cpp_1a72d07f766a46f1b9c5d7be121dc0555f" prot="public" static="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref> *</type>
        <definition>typedef const QXmlCharRange* RangeIter</definition>
        <argsstring></argsstring>
        <name>RangeIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="61" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="xmlutils_8cpp_1aa2639cbebc57dac34c6ed7d8668aa299" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></type>
        <definition>const QXmlCharRange g_base_begin[]</definition>
        <argsstring>[]</argsstring>
        <name>g_base_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="105" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1a8feec63a2c029752395f715e05b573ab" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref></type>
        <definition>const RangeIter g_base_end</definition>
        <argsstring></argsstring>
        <name>g_base_end</name>
        <initializer>= g_base_begin + sizeof(g_base_begin) / sizeof(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="149" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1ad1c49144980fc17e8b9fa513401d239d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></type>
        <definition>const QXmlCharRange g_ideographic_begin[]</definition>
        <argsstring>[]</argsstring>
        <name>g_ideographic_begin</name>
        <initializer>=
{
    {0x3007, 0x3007}, {0x3021, 0x3029}, {0x4E00, 0x9FA5}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="151" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1aa4d93ea760357c8d4eddd85f384b0d75" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref></type>
        <definition>const RangeIter g_ideographic_end</definition>
        <argsstring></argsstring>
        <name>g_ideographic_end</name>
        <initializer>= g_ideographic_begin + sizeof(g_ideographic_begin) / sizeof(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="155" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1a76a9fb7c94918bd9d2209fb91a9dceca" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></type>
        <definition>const QXmlCharRange g_combining_begin[]</definition>
        <argsstring>[]</argsstring>
        <name>g_combining_begin</name>
        <initializer>=
{
    {0x0300, 0x0345}, {0x0360, 0x0361}, {0x0483, 0x0486}, {0x0591, 0x05A1}, {0x05A3, 0x05B9},
    {0x05BB, 0x05BD}, {0x05BF, 0x05BF}, {0x05C1, 0x05C2}, {0x05C4, 0x05C4}, {0x064B, 0x0652},
    {0x0670, 0x0670}, {0x06D6, 0x06DC}, {0x06DD, 0x06DF}, {0x06E0, 0x06E4}, {0x06E7, 0x06E8},
    {0x06EA, 0x06ED}, {0x0901, 0x0903}, {0x093C, 0x093C}, {0x093E, 0x094C}, {0x094D, 0x094D},
    {0x0951, 0x0954}, {0x0962, 0x0963}, {0x0981, 0x0983}, {0x09BC, 0x09BC}, {0x09BE, 0x09BE},
    {0x09BF, 0x09BF}, {0x09C0, 0x09C4}, {0x09C7, 0x09C8}, {0x09CB, 0x09CD}, {0x09D7, 0x09D7},
    {0x09E2, 0x09E3}, {0x0A02, 0x0A02}, {0x0A3C, 0x0A3C}, {0x0A3E, 0x0A3E}, {0x0A3F, 0x0A3F},
    {0x0A40, 0x0A42}, {0x0A47, 0x0A48}, {0x0A4B, 0x0A4D}, {0x0A70, 0x0A71}, {0x0A81, 0x0A83},
    {0x0ABC, 0x0ABC}, {0x0ABE, 0x0AC5}, {0x0AC7, 0x0AC9}, {0x0ACB, 0x0ACD}, {0x0B01, 0x0B03},
    {0x0B3C, 0x0B3C}, {0x0B3E, 0x0B43}, {0x0B47, 0x0B48}, {0x0B4B, 0x0B4D}, {0x0B56, 0x0B57},
    {0x0B82, 0x0B83}, {0x0BBE, 0x0BC2}, {0x0BC6, 0x0BC8}, {0x0BCA, 0x0BCD}, {0x0BD7, 0x0BD7},
    {0x0C01, 0x0C03}, {0x0C3E, 0x0C44}, {0x0C46, 0x0C48}, {0x0C4A, 0x0C4D}, {0x0C55, 0x0C56},
    {0x0C82, 0x0C83}, {0x0CBE, 0x0CC4}, {0x0CC6, 0x0CC8}, {0x0CCA, 0x0CCD}, {0x0CD5, 0x0CD6},
    {0x0D02, 0x0D03}, {0x0D3E, 0x0D43}, {0x0D46, 0x0D48}, {0x0D4A, 0x0D4D}, {0x0D57, 0x0D57},
    {0x0E31, 0x0E31}, {0x0E34, 0x0E3A}, {0x0E47, 0x0E4E}, {0x0EB1, 0x0EB1}, {0x0EB4, 0x0EB9},
    {0x0EBB, 0x0EBC}, {0x0EC8, 0x0ECD}, {0x0F18, 0x0F19}, {0x0F35, 0x0F35}, {0x0F37, 0x0F37},
    {0x0F39, 0x0F39}, {0x0F3E, 0x0F3E}, {0x0F3F, 0x0F3F}, {0x0F71, 0x0F84}, {0x0F86, 0x0F8B},
    {0x0F90, 0x0F95}, {0x0F97, 0x0F97}, {0x0F99, 0x0FAD}, {0x0FB1, 0x0FB7}, {0x0FB9, 0x0FB9},
    {0x20D0, 0x20DC}, {0x20E1, 0x20E1}, {0x302A, 0x302F}, {0x3099, 0x3099}, {0x309A, 0x309A}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="162" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1aceb289bdb7543a48907c72cd5c7b0094" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref></type>
        <definition>const RangeIter g_combining_end</definition>
        <argsstring></argsstring>
        <name>g_combining_end</name>
        <initializer>= g_combining_begin + sizeof(g_combining_begin) / sizeof(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="184" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1ae5cb76deaa2f51c3b02fbf70b5524c0b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></type>
        <definition>const QXmlCharRange g_digit_begin[]</definition>
        <argsstring>[]</argsstring>
        <name>g_digit_begin</name>
        <initializer>=
{
    {0x0030, 0x0039}, {0x0660, 0x0669}, {0x06F0, 0x06F9}, {0x0966, 0x096F}, {0x09E6, 0x09EF},
    {0x0A66, 0x0A6F}, {0x0AE6, 0x0AEF}, {0x0B66, 0x0B6F}, {0x0BE7, 0x0BEF}, {0x0C66, 0x0C6F},
    {0x0CE6, 0x0CEF}, {0x0D66, 0x0D6F}, {0x0E50, 0x0E59}, {0x0ED0, 0x0ED9}, {0x0F20, 0x0F29}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="192" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1aef9c02abe03ab9e2ec13c2886e984925" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref></type>
        <definition>const RangeIter g_digit_end</definition>
        <argsstring></argsstring>
        <name>g_digit_end</name>
        <initializer>= g_digit_begin + sizeof(g_digit_begin) / sizeof(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="198" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1ab1617061ecf8f686103dfb2967882da4" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></type>
        <definition>const QXmlCharRange g_extender_begin[]</definition>
        <argsstring>[]</argsstring>
        <name>g_extender_begin</name>
        <initializer>=
{
    {0x00B7, 0x00B7}, {0x02D0, 0x02D0}, {0x02D1, 0x02D1}, {0x0387, 0x0387}, {0x0640, 0x0640},
    {0x0E46, 0x0E46}, {0x0EC6, 0x0EC6}, {0x3005, 0x3005}, {0x3031, 0x3035}, {0x309D, 0x309E},
    {0x30FC, 0x30FE}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="206" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmlutils_8cpp_1ab15006b2b32014b21b9d7fe2f365415a" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref></type>
        <definition>const RangeIter g_extender_end</definition>
        <argsstring></argsstring>
        <name>g_extender_end</name>
        <initializer>= g_extender_begin + sizeof(g_extender_begin) / sizeof(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlutils.cpp" line="212" column="1" bodyfile="thirdparty/xmlstream/xmlutils.cpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/****************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Digia<sp/>Plc<sp/>and/or<sp/>its<sp/>subsidiary(-ies).</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>Contact:<sp/>http://www.qt-project.org/legal</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>QtCore<sp/>module<sp/>of<sp/>the<sp/>Qt<sp/>Toolkit.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**<sp/>$QT_BEGIN_LICENSE:LGPL$</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**<sp/>Commercial<sp/>License<sp/>Usage</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**<sp/>Licensees<sp/>holding<sp/>valid<sp/>commercial<sp/>Qt<sp/>licenses<sp/>may<sp/>use<sp/>this<sp/>file<sp/>in</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**<sp/>accordance<sp/>with<sp/>the<sp/>commercial<sp/>license<sp/>agreement<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment">**<sp/>Software<sp/>or,<sp/>alternatively,<sp/>in<sp/>accordance<sp/>with<sp/>the<sp/>terms<sp/>contained<sp/>in</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**<sp/>a<sp/>written<sp/>agreement<sp/>between<sp/>you<sp/>and<sp/>Digia.<sp/><sp/>For<sp/>licensing<sp/>terms<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/>conditions<sp/>see<sp/>http://qt.digia.com/licensing.<sp/><sp/>For<sp/>further<sp/>information</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/>use<sp/>the<sp/>contact<sp/>form<sp/>at<sp/>http://qt.digia.com/contact-us.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">**</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>Usage</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**<sp/>Alternatively,<sp/>this<sp/>file<sp/>may<sp/>be<sp/>used<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser</highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>General<sp/>Public<sp/>License<sp/>version<sp/>2.1<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/>Foundation<sp/>and<sp/>appearing<sp/>in<sp/>the<sp/>file<sp/>LICENSE.LGPL<sp/>included<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>packaging<sp/>of<sp/>this<sp/>file.<sp/><sp/>Please<sp/>review<sp/>the<sp/>following<sp/>information<sp/>to</highlight></codeline>
<codeline lineno="22"><highlight class="comment">**<sp/>ensure<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>version<sp/>2.1<sp/>requirements</highlight></codeline>
<codeline lineno="23"><highlight class="comment">**<sp/>will<sp/>be<sp/>met:<sp/>http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">**</highlight></codeline>
<codeline lineno="25"><highlight class="comment">**<sp/>In<sp/>addition,<sp/>as<sp/>a<sp/>special<sp/>exception,<sp/>Digia<sp/>gives<sp/>you<sp/>certain<sp/>additional</highlight></codeline>
<codeline lineno="26"><highlight class="comment">**<sp/>rights.<sp/><sp/>These<sp/>rights<sp/>are<sp/>described<sp/>in<sp/>the<sp/>Digia<sp/>Qt<sp/>LGPL<sp/>Exception</highlight></codeline>
<codeline lineno="27"><highlight class="comment">**<sp/>version<sp/>1.1,<sp/>included<sp/>in<sp/>the<sp/>file<sp/>LGPL_EXCEPTION.txt<sp/>in<sp/>this<sp/>package.</highlight></codeline>
<codeline lineno="28"><highlight class="comment">**</highlight></codeline>
<codeline lineno="29"><highlight class="comment">**<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>Usage</highlight></codeline>
<codeline lineno="30"><highlight class="comment">**<sp/>Alternatively,<sp/>this<sp/>file<sp/>may<sp/>be<sp/>used<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="31"><highlight class="comment">**<sp/>General<sp/>Public<sp/>License<sp/>version<sp/>3.0<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="32"><highlight class="comment">**<sp/>Foundation<sp/>and<sp/>appearing<sp/>in<sp/>the<sp/>file<sp/>LICENSE.GPL<sp/>included<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="33"><highlight class="comment">**<sp/>packaging<sp/>of<sp/>this<sp/>file.<sp/><sp/>Please<sp/>review<sp/>the<sp/>following<sp/>information<sp/>to</highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/>ensure<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>version<sp/>3.0<sp/>requirements<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/>met:<sp/>http://www.gnu.org/copyleft/gpl.html.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">**</highlight></codeline>
<codeline lineno="37"><highlight class="comment">**</highlight></codeline>
<codeline lineno="38"><highlight class="comment">**<sp/>$QT_END_LICENSE$</highlight></codeline>
<codeline lineno="39"><highlight class="comment">**</highlight></codeline>
<codeline lineno="40"><highlight class="comment">****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qregexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qstring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmlutils_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">QT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>-<sp/>isNameChar()<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be<sp/>public,<sp/>it&apos;s<sp/>only<sp/>needed<sp/>in</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/>qdom.cpp<sp/>--<sp/>refactor<sp/>fixedXmlName()<sp/>to<sp/>use<sp/>isNCName()</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>-<sp/>A<sp/>lot<sp/>of<sp/>functions<sp/>can<sp/>be<sp/>inlined.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_q_xml_char_range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>ushort<sp/>min;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ushort<sp/>max;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>*<ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::rangeContains(<ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>begin,<sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ushort<sp/>cp(c.unicode());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>first<sp/>two<sp/>ranges<sp/>&quot;manually&quot;<sp/>as<sp/>characters<sp/>in<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>are<sp/>checked<sp/>very<sp/>often<sp/>and<sp/>we<sp/>avoid<sp/>the<sp/>binary<sp/>search<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>begin-&gt;max)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp<sp/>&gt;=<sp/>begin-&gt;min;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>begin-&gt;max)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp<sp/>&gt;=<sp/>begin-&gt;min;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>(end<sp/>-<sp/>begin)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>mid<sp/>=<sp/>begin<sp/>+<sp/>delta;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid-&gt;min<sp/>&gt;<sp/>cp)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid-&gt;max<sp/>&lt;<sp/>cp)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[85]<sp/>BaseChar<sp/>::=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>g_base_begin[]<sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0041,<sp/>0x005A},<sp/>{0x0061,<sp/>0x007A},<sp/>{0x00C0,<sp/>0x00D6},<sp/>{0x00D8,<sp/>0x00F6},<sp/>{0x00F8,<sp/>0x00FF},</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0100,<sp/>0x0131},<sp/>{0x0134,<sp/>0x013E},<sp/>{0x0141,<sp/>0x0148},<sp/>{0x014A,<sp/>0x017E},<sp/>{0x0180,<sp/>0x01C3},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x01CD,<sp/>0x01F0},<sp/>{0x01F4,<sp/>0x01F5},<sp/>{0x01FA,<sp/>0x0217},<sp/>{0x0250,<sp/>0x02A8},<sp/>{0x02BB,<sp/>0x02C1},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0386,<sp/>0x0386},<sp/>{0x0388,<sp/>0x038A},<sp/>{0x038C,<sp/>0x038C},<sp/>{0x038E,<sp/>0x03A1},<sp/>{0x03A3,<sp/>0x03CE},</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x03D0,<sp/>0x03D6},<sp/>{0x03DA,<sp/>0x03DA},<sp/>{0x03DC,<sp/>0x03DC},<sp/>{0x03DE,<sp/>0x03DE},<sp/>{0x03E0,<sp/>0x03E0},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x03E2,<sp/>0x03F3},<sp/>{0x0401,<sp/>0x040C},<sp/>{0x040E,<sp/>0x044F},<sp/>{0x0451,<sp/>0x045C},<sp/>{0x045E,<sp/>0x0481},</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0490,<sp/>0x04C4},<sp/>{0x04C7,<sp/>0x04C8},<sp/>{0x04CB,<sp/>0x04CC},<sp/>{0x04D0,<sp/>0x04EB},<sp/>{0x04EE,<sp/>0x04F5},</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x04F8,<sp/>0x04F9},<sp/>{0x0531,<sp/>0x0556},<sp/>{0x0559,<sp/>0x0559},<sp/>{0x0561,<sp/>0x0586},<sp/>{0x05D0,<sp/>0x05EA},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x05F0,<sp/>0x05F2},<sp/>{0x0621,<sp/>0x063A},<sp/>{0x0641,<sp/>0x064A},<sp/>{0x0671,<sp/>0x06B7},<sp/>{0x06BA,<sp/>0x06BE},</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x06C0,<sp/>0x06CE},<sp/>{0x06D0,<sp/>0x06D3},<sp/>{0x06D5,<sp/>0x06D5},<sp/>{0x06E5,<sp/>0x06E6},<sp/>{0x0905,<sp/>0x0939},</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x093D,<sp/>0x093D},<sp/>{0x0958,<sp/>0x0961},<sp/>{0x0985,<sp/>0x098C},<sp/>{0x098F,<sp/>0x0990},<sp/>{0x0993,<sp/>0x09A8},</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x09AA,<sp/>0x09B0},<sp/>{0x09B2,<sp/>0x09B2},<sp/>{0x09B6,<sp/>0x09B9},<sp/>{0x09DC,<sp/>0x09DD},<sp/>{0x09DF,<sp/>0x09E1},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x09F0,<sp/>0x09F1},<sp/>{0x0A05,<sp/>0x0A0A},<sp/>{0x0A0F,<sp/>0x0A10},<sp/>{0x0A13,<sp/>0x0A28},<sp/>{0x0A2A,<sp/>0x0A30},</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0A32,<sp/>0x0A33},<sp/>{0x0A35,<sp/>0x0A36},<sp/>{0x0A38,<sp/>0x0A39},<sp/>{0x0A59,<sp/>0x0A5C},<sp/>{0x0A5E,<sp/>0x0A5E},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0A72,<sp/>0x0A74},<sp/>{0x0A85,<sp/>0x0A8B},<sp/>{0x0A8D,<sp/>0x0A8D},<sp/>{0x0A8F,<sp/>0x0A91},<sp/>{0x0A93,<sp/>0x0AA8},</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0AAA,<sp/>0x0AB0},<sp/>{0x0AB2,<sp/>0x0AB3},<sp/>{0x0AB5,<sp/>0x0AB9},<sp/>{0x0ABD,<sp/>0x0ABD},<sp/>{0x0AE0,<sp/>0x0AE0},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0B05,<sp/>0x0B0C},<sp/>{0x0B0F,<sp/>0x0B10},<sp/>{0x0B13,<sp/>0x0B28},<sp/>{0x0B2A,<sp/>0x0B30},<sp/>{0x0B32,<sp/>0x0B33},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0B36,<sp/>0x0B39},<sp/>{0x0B3D,<sp/>0x0B3D},<sp/>{0x0B5C,<sp/>0x0B5D},<sp/>{0x0B5F,<sp/>0x0B61},<sp/>{0x0B85,<sp/>0x0B8A},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0B8E,<sp/>0x0B90},<sp/>{0x0B92,<sp/>0x0B95},<sp/>{0x0B99,<sp/>0x0B9A},<sp/>{0x0B9C,<sp/>0x0B9C},<sp/>{0x0B9E,<sp/>0x0B9F},</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0BA3,<sp/>0x0BA4},<sp/>{0x0BA8,<sp/>0x0BAA},<sp/>{0x0BAE,<sp/>0x0BB5},<sp/>{0x0BB7,<sp/>0x0BB9},<sp/>{0x0C05,<sp/>0x0C0C},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0C0E,<sp/>0x0C10},<sp/>{0x0C12,<sp/>0x0C28},<sp/>{0x0C2A,<sp/>0x0C33},<sp/>{0x0C35,<sp/>0x0C39},<sp/>{0x0C60,<sp/>0x0C61},</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0C85,<sp/>0x0C8C},<sp/>{0x0C8E,<sp/>0x0C90},<sp/>{0x0C92,<sp/>0x0CA8},<sp/>{0x0CAA,<sp/>0x0CB3},<sp/>{0x0CB5,<sp/>0x0CB9},</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0CDE,<sp/>0x0CDE},<sp/>{0x0CE0,<sp/>0x0CE1},<sp/>{0x0D05,<sp/>0x0D0C},<sp/>{0x0D0E,<sp/>0x0D10},<sp/>{0x0D12,<sp/>0x0D28},</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0D2A,<sp/>0x0D39},<sp/>{0x0D60,<sp/>0x0D61},<sp/>{0x0E01,<sp/>0x0E2E},<sp/>{0x0E30,<sp/>0x0E30},<sp/>{0x0E32,<sp/>0x0E33},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0E40,<sp/>0x0E45},<sp/>{0x0E81,<sp/>0x0E82},<sp/>{0x0E84,<sp/>0x0E84},<sp/>{0x0E87,<sp/>0x0E88},<sp/>{0x0E8A,<sp/>0x0E8A},</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0E8D,<sp/>0x0E8D},<sp/>{0x0E94,<sp/>0x0E97},<sp/>{0x0E99,<sp/>0x0E9F},<sp/>{0x0EA1,<sp/>0x0EA3},<sp/>{0x0EA5,<sp/>0x0EA5},</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0EA7,<sp/>0x0EA7},<sp/>{0x0EAA,<sp/>0x0EAB},<sp/>{0x0EAD,<sp/>0x0EAE},<sp/>{0x0EB0,<sp/>0x0EB0},<sp/>{0x0EB2,<sp/>0x0EB3},</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0EBD,<sp/>0x0EBD},<sp/>{0x0EC0,<sp/>0x0EC4},<sp/>{0x0F40,<sp/>0x0F47},<sp/>{0x0F49,<sp/>0x0F69},<sp/>{0x10A0,<sp/>0x10C5},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x10D0,<sp/>0x10F6},<sp/>{0x1100,<sp/>0x1100},<sp/>{0x1102,<sp/>0x1103},<sp/>{0x1105,<sp/>0x1107},<sp/>{0x1109,<sp/>0x1109},</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x110B,<sp/>0x110C},<sp/>{0x110E,<sp/>0x1112},<sp/>{0x113C,<sp/>0x113C},<sp/>{0x113E,<sp/>0x113E},<sp/>{0x1140,<sp/>0x1140},</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x114C,<sp/>0x114C},<sp/>{0x114E,<sp/>0x114E},<sp/>{0x1150,<sp/>0x1150},<sp/>{0x1154,<sp/>0x1155},<sp/>{0x1159,<sp/>0x1159},</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x115F,<sp/>0x1161},<sp/>{0x1163,<sp/>0x1163},<sp/>{0x1165,<sp/>0x1165},<sp/>{0x1167,<sp/>0x1167},<sp/>{0x1169,<sp/>0x1169},</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x116D,<sp/>0x116E},<sp/>{0x1172,<sp/>0x1173},<sp/>{0x1175,<sp/>0x1175},<sp/>{0x119E,<sp/>0x119E},<sp/>{0x11A8,<sp/>0x11A8},</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x11AB,<sp/>0x11AB},<sp/>{0x11AE,<sp/>0x11AF},<sp/>{0x11B7,<sp/>0x11B8},<sp/>{0x11BA,<sp/>0x11BA},<sp/>{0x11BC,<sp/>0x11C2},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x11EB,<sp/>0x11EB},<sp/>{0x11F0,<sp/>0x11F0},<sp/>{0x11F9,<sp/>0x11F9},<sp/>{0x1E00,<sp/>0x1E9B},<sp/>{0x1EA0,<sp/>0x1EF9},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x1F00,<sp/>0x1F15},<sp/>{0x1F18,<sp/>0x1F1D},<sp/>{0x1F20,<sp/>0x1F45},<sp/>{0x1F48,<sp/>0x1F4D},<sp/>{0x1F50,<sp/>0x1F57},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x1F59,<sp/>0x1F59},<sp/>{0x1F5B,<sp/>0x1F5B},<sp/>{0x1F5D,<sp/>0x1F5D},<sp/>{0x1F5F,<sp/>0x1F7D},<sp/>{0x1F80,<sp/>0x1FB4},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x1FB6,<sp/>0x1FBC},<sp/>{0x1FBE,<sp/>0x1FBE},<sp/>{0x1FC2,<sp/>0x1FC4},<sp/>{0x1FC6,<sp/>0x1FCC},<sp/>{0x1FD0,<sp/>0x1FD3},</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x1FD6,<sp/>0x1FDB},<sp/>{0x1FE0,<sp/>0x1FEC},<sp/>{0x1FF2,<sp/>0x1FF4},<sp/>{0x1FF6,<sp/>0x1FFC},<sp/>{0x2126,<sp/>0x2126},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x212A,<sp/>0x212B},<sp/>{0x212E,<sp/>0x212E},<sp/>{0x2180,<sp/>0x2182},<sp/>{0x3041,<sp/>0x3094},<sp/>{0x30A1,<sp/>0x30FA},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x3105,<sp/>0x312C},<sp/>{0xAC00,<sp/>0xD7A3}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>g_base_end<sp/>=<sp/>g_base_begin<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_base_begin)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>g_ideographic_begin[]<sp/>=</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x3007,<sp/>0x3007},<sp/>{0x3021,<sp/>0x3029},<sp/>{0x4E00,<sp/>0x9FA5}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>g_ideographic_end<sp/>=<sp/>g_ideographic_begin<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_ideographic_begin)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isIdeographic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeContains(g_ideographic_begin,<sp/>g_ideographic_end,<sp/>c);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>g_combining_begin[]<sp/>=</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0300,<sp/>0x0345},<sp/>{0x0360,<sp/>0x0361},<sp/>{0x0483,<sp/>0x0486},<sp/>{0x0591,<sp/>0x05A1},<sp/>{0x05A3,<sp/>0x05B9},</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x05BB,<sp/>0x05BD},<sp/>{0x05BF,<sp/>0x05BF},<sp/>{0x05C1,<sp/>0x05C2},<sp/>{0x05C4,<sp/>0x05C4},<sp/>{0x064B,<sp/>0x0652},</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0670,<sp/>0x0670},<sp/>{0x06D6,<sp/>0x06DC},<sp/>{0x06DD,<sp/>0x06DF},<sp/>{0x06E0,<sp/>0x06E4},<sp/>{0x06E7,<sp/>0x06E8},</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x06EA,<sp/>0x06ED},<sp/>{0x0901,<sp/>0x0903},<sp/>{0x093C,<sp/>0x093C},<sp/>{0x093E,<sp/>0x094C},<sp/>{0x094D,<sp/>0x094D},</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0951,<sp/>0x0954},<sp/>{0x0962,<sp/>0x0963},<sp/>{0x0981,<sp/>0x0983},<sp/>{0x09BC,<sp/>0x09BC},<sp/>{0x09BE,<sp/>0x09BE},</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x09BF,<sp/>0x09BF},<sp/>{0x09C0,<sp/>0x09C4},<sp/>{0x09C7,<sp/>0x09C8},<sp/>{0x09CB,<sp/>0x09CD},<sp/>{0x09D7,<sp/>0x09D7},</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x09E2,<sp/>0x09E3},<sp/>{0x0A02,<sp/>0x0A02},<sp/>{0x0A3C,<sp/>0x0A3C},<sp/>{0x0A3E,<sp/>0x0A3E},<sp/>{0x0A3F,<sp/>0x0A3F},</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0A40,<sp/>0x0A42},<sp/>{0x0A47,<sp/>0x0A48},<sp/>{0x0A4B,<sp/>0x0A4D},<sp/>{0x0A70,<sp/>0x0A71},<sp/>{0x0A81,<sp/>0x0A83},</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0ABC,<sp/>0x0ABC},<sp/>{0x0ABE,<sp/>0x0AC5},<sp/>{0x0AC7,<sp/>0x0AC9},<sp/>{0x0ACB,<sp/>0x0ACD},<sp/>{0x0B01,<sp/>0x0B03},</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0B3C,<sp/>0x0B3C},<sp/>{0x0B3E,<sp/>0x0B43},<sp/>{0x0B47,<sp/>0x0B48},<sp/>{0x0B4B,<sp/>0x0B4D},<sp/>{0x0B56,<sp/>0x0B57},</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0B82,<sp/>0x0B83},<sp/>{0x0BBE,<sp/>0x0BC2},<sp/>{0x0BC6,<sp/>0x0BC8},<sp/>{0x0BCA,<sp/>0x0BCD},<sp/>{0x0BD7,<sp/>0x0BD7},</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0C01,<sp/>0x0C03},<sp/>{0x0C3E,<sp/>0x0C44},<sp/>{0x0C46,<sp/>0x0C48},<sp/>{0x0C4A,<sp/>0x0C4D},<sp/>{0x0C55,<sp/>0x0C56},</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0C82,<sp/>0x0C83},<sp/>{0x0CBE,<sp/>0x0CC4},<sp/>{0x0CC6,<sp/>0x0CC8},<sp/>{0x0CCA,<sp/>0x0CCD},<sp/>{0x0CD5,<sp/>0x0CD6},</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0D02,<sp/>0x0D03},<sp/>{0x0D3E,<sp/>0x0D43},<sp/>{0x0D46,<sp/>0x0D48},<sp/>{0x0D4A,<sp/>0x0D4D},<sp/>{0x0D57,<sp/>0x0D57},</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0E31,<sp/>0x0E31},<sp/>{0x0E34,<sp/>0x0E3A},<sp/>{0x0E47,<sp/>0x0E4E},<sp/>{0x0EB1,<sp/>0x0EB1},<sp/>{0x0EB4,<sp/>0x0EB9},</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0EBB,<sp/>0x0EBC},<sp/>{0x0EC8,<sp/>0x0ECD},<sp/>{0x0F18,<sp/>0x0F19},<sp/>{0x0F35,<sp/>0x0F35},<sp/>{0x0F37,<sp/>0x0F37},</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0F39,<sp/>0x0F39},<sp/>{0x0F3E,<sp/>0x0F3E},<sp/>{0x0F3F,<sp/>0x0F3F},<sp/>{0x0F71,<sp/>0x0F84},<sp/>{0x0F86,<sp/>0x0F8B},</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0F90,<sp/>0x0F95},<sp/>{0x0F97,<sp/>0x0F97},<sp/>{0x0F99,<sp/>0x0FAD},<sp/>{0x0FB1,<sp/>0x0FB7},<sp/>{0x0FB9,<sp/>0x0FB9},</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x20D0,<sp/>0x20DC},<sp/>{0x20E1,<sp/>0x20E1},<sp/>{0x302A,<sp/>0x302F},<sp/>{0x3099,<sp/>0x3099},<sp/>{0x309A,<sp/>0x309A}</highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>g_combining_end<sp/>=<sp/>g_combining_begin<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_combining_begin)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isCombiningChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeContains(g_combining_begin,<sp/>g_combining_end,<sp/>c);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[88]<sp/>Digit<sp/>::=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>g_digit_begin[]<sp/>=</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0030,<sp/>0x0039},<sp/>{0x0660,<sp/>0x0669},<sp/>{0x06F0,<sp/>0x06F9},<sp/>{0x0966,<sp/>0x096F},<sp/>{0x09E6,<sp/>0x09EF},</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0A66,<sp/>0x0A6F},<sp/>{0x0AE6,<sp/>0x0AEF},<sp/>{0x0B66,<sp/>0x0B6F},<sp/>{0x0BE7,<sp/>0x0BEF},<sp/>{0x0C66,<sp/>0x0C6F},</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0CE6,<sp/>0x0CEF},<sp/>{0x0D66,<sp/>0x0D6F},<sp/>{0x0E50,<sp/>0x0E59},<sp/>{0x0ED0,<sp/>0x0ED9},<sp/>{0x0F20,<sp/>0x0F29}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>g_digit_end<sp/>=<sp/>g_digit_begin<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_digit_begin)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isDigit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeContains(g_digit_begin,<sp/>g_digit_end,<sp/>c);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[89]<sp/>Extender<sp/>::=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref><sp/>g_extender_begin[]<sp/>=</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x00B7,<sp/>0x00B7},<sp/>{0x02D0,<sp/>0x02D0},<sp/>{0x02D1,<sp/>0x02D1},<sp/>{0x0387,<sp/>0x0387},<sp/>{0x0640,<sp/>0x0640},</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x0E46,<sp/>0x0E46},<sp/>{0x0EC6,<sp/>0x0EC6},<sp/>{0x3005,<sp/>0x3005},<sp/>{0x3031,<sp/>0x3035},<sp/>{0x309D,<sp/>0x309E},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{0x30FC,<sp/>0x30FE}</highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_q_xml_char_range" kindref="compound">RangeIter</ref><sp/>g_extender_end<sp/>=<sp/>g_extender_begin<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_extender_begin)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_q_xml_char_range" kindref="compound">QXmlCharRange</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isExtender(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeContains(g_extender_begin,<sp/>g_extender_end,<sp/>c);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isBaseChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeContains(g_base_begin,<sp/>g_base_end,<sp/>c);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isEncName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;encName)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right,<sp/>we<sp/>here<sp/>have<sp/>a<sp/>dependency<sp/>on<sp/>QRegExp.<sp/>Writing<sp/>a<sp/>manual<sp/>parser<sp/>to</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>replace<sp/>that<sp/>regexp<sp/>is<sp/>probably<sp/>a<sp/>70<sp/>lines<sp/>so<sp/>I<sp/>prioritize<sp/>this<sp/>to<sp/>when</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>dependency<sp/>is<sp/>considered<sp/>alarming,<sp/>or<sp/>when<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>bugs</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>fixed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>QRegExp<sp/>encNameRegExp(QLatin1String(</highlight><highlight class="stringliteral">&quot;[A-Za-z][A-Za-z0-9._\\-]*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(encNameRegExp.isValid());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encNameRegExp.exactMatch(encName);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isLetter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBaseChar(c)<sp/>||<sp/>isIdeographic(c);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c.unicode()<sp/>&gt;=<sp/>0x0020<sp/>&amp;&amp;<sp/>c.unicode()<sp/>&lt;=<sp/>0xD7FF)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/>0x0009</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/>0x000A</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/>0x000D</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(c.unicode()<sp/>&gt;=<sp/>0xE000<sp/>&amp;&amp;<sp/>c.unicode()<sp/>&lt;=<sp/>0xFFFD);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isNameChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>c)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBaseChar(c)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isDigit(c)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c.unicode()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isCombiningChar(c)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isIdeographic(c)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isExtender(c);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isPublicID(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;candidate)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>candidate.length();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ushort<sp/>cp<sp/>=<sp/>candidate.at(i).unicode();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cp<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>cp<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(cp<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>cp<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(cp<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>cp<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cp)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fallthrough<sp/>all<sp/>these.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x20:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x0D:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x0A:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QXmlUtils::isNCName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QStringRef<sp/>&amp;ncName)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ncName.isEmpty())</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>first(ncName.at(0));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!QXmlUtils::isLetter(first)<sp/>&amp;&amp;<sp/>first.unicode()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>first.unicode()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>ncName.size();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QChar<sp/>at<sp/>=<sp/>ncName.at(i);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!QXmlUtils::isNameChar(at)<sp/>||<sp/>at<sp/>==<sp/>QLatin1Char(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">QT_END_NAMESPACE</highlight></codeline>
    </programlisting>
    <location file="thirdparty/xmlstream/xmlutils.cpp"/>
  </compounddef>
</doxygen>
