<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="infcodes_8h" kind="file" language="C++">
    <compoundname>infcodes.h</compoundname>
    <includedby refid="infblock_8c" local="yes">thirdparty/freetype/src/gzip/infblock.c</includedby>
    <includedby refid="infcodes_8c" local="yes">thirdparty/freetype/src/gzip/infcodes.c</includedby>
    <includedby refid="infutil_8c" local="yes">thirdparty/freetype/src/gzip/infutil.c</includedby>
    <invincdepgraph>
      <node id="80068">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c_source"/>
      </node>
      <node id="80070">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c_source"/>
      </node>
      <node id="80069">
        <label>thirdparty/freetype/src/gzip/infcodes.c</label>
        <link refid="infcodes_8c_source"/>
      </node>
      <node id="80067">
        <label>thirdparty/freetype/src/gzip/infcodes.h</label>
        <link refid="infcodes_8h"/>
        <childnode refid="80068" relation="include">
        </childnode>
        <childnode refid="80069" relation="include">
        </childnode>
        <childnode refid="80070" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="infcodes_8h_1a22c6f5a77fb8dc3e022c1fe4f1b30ec1" prot="public" static="no">
        <type>struct <ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref> FAR</type>
        <definition>typedef struct inflate_codes_state FAR inflate_codes_statef</definition>
        <argsstring></argsstring>
        <name>inflate_codes_statef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infcodes.h" line="45" column="1" bodyfile="thirdparty/freetype/src/gzip/infcodes.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infcodes_8h_1abc0b458353d89c5417bf0ba1e1d11c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local inflate_codes_statef *inflate_codes_new</type>
        <definition>local inflate_codes_statef* inflate_codes_new OF</definition>
        <argsstring>((uInt, uInt, inflate_huft *, inflate_huft *, z_streamp))</argsstring>
        <name>OF</name>
        <param>
          <type>(uInt, uInt, inflate_huft *, inflate_huft *, z_streamp)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infcodes.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infcodes_8h_1a4c3c8015b308242175f213a1471fb2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int inflate_codes</type>
        <definition>local int inflate_codes OF</definition>
        <argsstring>((inflate_blocks_statef *, z_streamp, int))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_blocks_statef *, z_streamp, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infcodes.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="infcodes_8h_1a5000d1483b00898269c7d117e0d4eab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local void inflate_codes_free</type>
        <definition>local void inflate_codes_free OF</definition>
        <argsstring>((inflate_codes_statef *, z_streamp))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_codes_statef *, z_streamp)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infcodes.h" line="27" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>infcodes.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>infcodes.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_INFCODES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INFCODES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref><sp/>FAR<sp/>inflate_codes_statef;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">local<sp/>inflate_codes_statef<sp/>*inflate_codes_new<sp/>OF((</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/>uInt,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_huft<sp/>*,<sp/>inflate_huft<sp/>*,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_codes<sp/>OF((</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_statef<sp/>*,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_codes_free<sp/>OF((</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_codes_statef<sp/>*,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_INFCODES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/infcodes.h"/>
  </compounddef>
</doxygen>
