<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_marked_content_output_dev_8cc" kind="file" language="C++">
    <compoundname>MarkedContentOutputDev.cc</compoundname>
    <includes refid="_marked_content_output_dev_8h" local="yes">MarkedContentOutputDev.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="_annot_8h" local="yes">Annot.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="88075">
        <label>stdarg.h</label>
      </node>
      <node id="88086">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88071" relation="include">
        </childnode>
      </node>
      <node id="88087">
        <label>assert.h</label>
      </node>
      <node id="88085">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88086" relation="include">
        </childnode>
        <childnode refid="88087" relation="include">
        </childnode>
        <childnode refid="88088" relation="include">
        </childnode>
      </node>
      <node id="88089">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88073" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88069" relation="include">
        </childnode>
      </node>
      <node id="88076">
        <label>stdlib.h</label>
      </node>
      <node id="88067">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="88066" relation="include">
        </childnode>
        <childnode refid="88065" relation="include">
        </childnode>
      </node>
      <node id="88079">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88080" relation="include">
        </childnode>
      </node>
      <node id="88063">
        <label>MarkedContentOutputDev.h</label>
        <link refid="_marked_content_output_dev_8h_source"/>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88067" relation="include">
        </childnode>
        <childnode refid="88068" relation="include">
        </childnode>
        <childnode refid="88085" relation="include">
        </childnode>
        <childnode refid="88089" relation="include">
        </childnode>
        <childnode refid="88090" relation="include">
        </childnode>
      </node>
      <node id="88091">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="88087" relation="include">
        </childnode>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88066" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88069" relation="include">
        </childnode>
        <childnode refid="88080" relation="include">
        </childnode>
      </node>
      <node id="88088">
        <label>map</label>
      </node>
      <node id="88078">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="88075" relation="include">
        </childnode>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88073" relation="include">
        </childnode>
      </node>
      <node id="88082">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88080" relation="include">
        </childnode>
      </node>
      <node id="88093">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="88070" relation="include">
        </childnode>
      </node>
      <node id="88074">
        <label>limits.h</label>
      </node>
      <node id="88065">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="88066" relation="include">
        </childnode>
      </node>
      <node id="88077">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="88083">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88066" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88080" relation="include">
        </childnode>
      </node>
      <node id="88081">
        <label>pthread.h</label>
      </node>
      <node id="88084">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="88070" relation="include">
        </childnode>
      </node>
      <node id="88072">
        <label>string.h</label>
      </node>
      <node id="88073">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="88074" relation="include">
        </childnode>
        <childnode refid="88075" relation="include">
        </childnode>
        <childnode refid="88076" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
      </node>
      <node id="88070">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="88071" relation="include">
        </childnode>
        <childnode refid="88066" relation="include">
        </childnode>
        <childnode refid="88072" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88067" relation="include">
        </childnode>
        <childnode refid="88073" relation="include">
        </childnode>
        <childnode refid="88077" relation="include">
        </childnode>
        <childnode refid="88078" relation="include">
        </childnode>
        <childnode refid="88079" relation="include">
        </childnode>
        <childnode refid="88082" relation="include">
        </childnode>
        <childnode refid="88083" relation="include">
        </childnode>
      </node>
      <node id="88090">
        <label>vector</label>
      </node>
      <node id="88068">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88069" relation="include">
        </childnode>
        <childnode refid="88070" relation="include">
        </childnode>
        <childnode refid="88084" relation="include">
        </childnode>
      </node>
      <node id="88062">
        <label>thirdparty/poppler/poppler/MarkedContentOutputDev.cc</label>
        <link refid="_marked_content_output_dev_8cc"/>
        <childnode refid="88063" relation="include">
        </childnode>
        <childnode refid="88091" relation="include">
        </childnode>
        <childnode refid="88092" relation="include">
        </childnode>
        <childnode refid="88085" relation="include">
        </childnode>
        <childnode refid="88089" relation="include">
        </childnode>
        <childnode refid="88093" relation="include">
        </childnode>
        <childnode refid="88090" relation="include">
        </childnode>
      </node>
      <node id="88080">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="88081" relation="include">
        </childnode>
      </node>
      <node id="88069">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="88064">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
      </node>
      <node id="88092">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="88065" relation="include">
        </childnode>
        <childnode refid="88064" relation="include">
        </childnode>
        <childnode refid="88069" relation="include">
        </childnode>
        <childnode refid="88080" relation="include">
        </childnode>
      </node>
      <node id="88071">
        <label>set</label>
      </node>
      <node id="88066">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MarkedContentOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2013<sp/>Igalia<sp/>S.L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MarkedContentOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Annot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">MarkedContentOutputDev::MarkedContentOutputDev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcidA):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>currentFont(NULL),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>currentText(NULL),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>mcid(mcidA),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>pageWidth(0.0),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>pageHeight(0.0),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>unicodeMap(NULL)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>currentColor.r<sp/>=<sp/>currentColor.g<sp/>=<sp/>currentColor.b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">MarkedContentOutputDev::~MarkedContentOutputDev()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicodeMap)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>unicodeMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFont)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFont-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>currentText;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::endSpan()</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentText<sp/>&amp;&amp;<sp/>currentText-&gt;getLength())<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>TextSpan<sp/>takes<sp/>ownership<sp/>of<sp/>currentText<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increases<sp/>the<sp/>reference<sp/>count<sp/>for<sp/>currentFont.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>textSpans.push_back(<ref refid="class_text_span" kindref="compound">TextSpan</ref>(currentText,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentFont,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentColor));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>currentText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/><sp/>=<sp/>state-&gt;getPageWidth();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>state-&gt;getPageHeight();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>pageHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::endPage()</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>pageWidth<sp/>=<sp/>pageHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::beginMarkedContent(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*properties)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(properties)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>properties-&gt;lookupInt(</highlight><highlight class="stringliteral">&quot;MCID&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stack<sp/>keep<sp/>track<sp/>of<sp/>MCIDs<sp/>of<sp/>nested<sp/>marked<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inMarkedContent()<sp/>||<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>mcid)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>mcidStack.push_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::endMarkedContent(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inMarkedContent())<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcidStack.pop_back();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>outer<sp/>marked<sp/>content<sp/>sequence<sp/>MCID<sp/>was<sp/>popped,<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>last<sp/>piece<sp/>of<sp/>text<sp/>collected<sp/>ends<sp/>up<sp/>in<sp/>a<sp/>TextSpan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inMarkedContent())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endSpan();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::needFontChange(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref>*<sp/><ref refid="structfont" kindref="compound">font</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="100"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFont<sp/>==<sp/>font)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentFont)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>font-&gt;isOk();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>non-null<sp/>valid<sp/>fonts<sp/>are<sp/>the<sp/>same<sp/>if<sp/>they<sp/>point<sp/>to<sp/>the<sp/>same<sp/>Ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFont-&gt;getID()-&gt;num<sp/>==<sp/>font-&gt;getID()-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFont-&gt;getID()-&gt;gen<sp/>==<sp/>font-&gt;getID()-&gt;gen)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkedContentOutputDev::drawChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yy,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ox,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oy,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inMarkedContent()<sp/>||<sp/>!uLen)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Color<sp/>changes<sp/>are<sp/>tracked<sp/>here<sp/>so<sp/>the<sp/>color<sp/>can<sp/>be<sp/>chosen<sp/>depending<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>render<sp/>mode<sp/>(for<sp/>mode<sp/>1<sp/>stroke<sp/>color<sp/>is<sp/>used),<sp/>so<sp/>there<sp/>is<sp/>no<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>implement<sp/>both<sp/>updateFillColor()<sp/>and<sp/>updateStrokeColor().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>GBool<sp/>colorChange<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((state-&gt;getRender()<sp/>&amp;<sp/>3)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeRGB(&amp;color);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillRGB(&amp;color);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>colorChange<sp/>=<sp/>(color.r<sp/>!=<sp/>currentColor.r<sp/>||</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.g<sp/>!=<sp/>currentColor.g<sp/>||</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.b<sp/>!=<sp/>currentColor.b);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>also<sp/>for<sp/>font<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>GBool<sp/>fontChange<sp/>=<sp/>needFontChange(state-&gt;getFont());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>a<sp/>span<sp/>with<sp/>the<sp/>current<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChange<sp/>||<sp/>fontChange)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>endSpan();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>the<sp/>color/font<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChange)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>currentColor<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontChange)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFont<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFont-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFont()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFont<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentFont-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sp,<sp/>dx2,<sp/>dy2,<sp/>w1,<sp/>h1,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>char<sp/>and<sp/>word<sp/>spacing<sp/>from<sp/>the<sp/>(dx,dy)<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>sp<sp/>=<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(CharCode)<sp/>0x20)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>state-&gt;textTransformDelta(sp<sp/>*<sp/>state-&gt;getHorizScaling(),<sp/>0,<sp/>&amp;dx2,<sp/>&amp;dy2);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>dx<sp/>-=<sp/>dx2;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>dy<sp/>-=<sp/>dy2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>state-&gt;transformDelta(dx,<sp/>dy,<sp/>&amp;w1,<sp/>&amp;h1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>state-&gt;transform(xx,<sp/>yy,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>away<sp/>characters<sp/>that<sp/>are<sp/>not<sp/>inside<sp/>the<sp/>page<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>+<sp/>w1<sp/>&lt;<sp/>0<sp/>||<sp/>x1<sp/>&gt;<sp/>pageWidth<sp/>||<sp/>y1<sp/>+<sp/>h1<sp/>&lt;<sp/>0<sp/>||<sp/>y1<sp/>&gt;<sp/>pageHeight)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>sanity<sp/>check<sp/>on<sp/>character<sp/>size.<sp/>Note:<sp/>(x<sp/>!=<sp/>x)<sp/>&lt;-&gt;<sp/>isnan(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>!=<sp/>x1<sp/>||<sp/>y1<sp/>!=<sp/>y1<sp/>||<sp/>w1<sp/>!=<sp/>w1<sp/>||<sp/>h1<sp/>!=<sp/>h1)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>uLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Soft<sp/>hyphen<sp/>markers<sp/>are<sp/>skipped,<sp/>as<sp/>they<sp/>are<sp/>invisible<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rendering<sp/>is<sp/>done<sp/>to<sp/>an<sp/>actual<sp/>device<sp/>and<sp/>the<sp/>hyphenation<sp/>hint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used.<sp/>MarkedContentOutputDev<sp/>extracts<sp/>the<sp/>*visible*<sp/>text<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u[i]<sp/>!=<sp/>0x00AD)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>UTF-8<sp/>sequence<sp/>to<sp/>the<sp/>current<sp/>text<sp/>span.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unicodeMap)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicodeMap<sp/>=<sp/>globalParams-&gt;getTextEncoding();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>unicodeMap-&gt;mapUnicode(u[i],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentText<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentText-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextSpanArray&amp;<sp/>MarkedContentOutputDev::getTextSpans()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="210"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>textSpans;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/MarkedContentOutputDev.cc"/>
  </compounddef>
</doxygen>
