<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ecdsa_8h" kind="file" language="C++">
    <compoundname>ecdsa.h</compoundname>
    <includes refid="opensslconf_8h" local="no">openssl/opensslconf.h</includes>
    <includes refid="ec_8h" local="no">openssl/ec.h</includes>
    <includes refid="ossl__typ_8h" local="no">openssl/ossl_typ.h</includes>
    <includes refid="bn_8h" local="no">openssl/bn.h</includes>
    <includedby refid="engine_8h" local="no">thirdparty/openssl/include/openssl/engine.h</includedby>
    <includedby refid="x509_8h" local="no">thirdparty/openssl/include/openssl/x509.h</includedby>
    <incdepgraph>
      <node id="82760">
        <label>stdarg.h</label>
      </node>
      <node id="82765">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82768">
        <label>stdint.h</label>
      </node>
      <node id="82754">
        <label>openssl/ec.h</label>
        <link refid="ec_8h_source"/>
        <childnode refid="82753" relation="include">
        </childnode>
        <childnode refid="82755" relation="include">
        </childnode>
        <childnode refid="82767" relation="include">
        </childnode>
        <childnode refid="82769" relation="include">
        </childnode>
      </node>
      <node id="82762">
        <label>stdlib.h</label>
      </node>
      <node id="82758">
        <label>openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="82757" relation="include">
        </childnode>
        <childnode refid="82759" relation="include">
        </childnode>
        <childnode refid="82760" relation="include">
        </childnode>
        <childnode refid="82761" relation="include">
        </childnode>
        <childnode refid="82768" relation="include">
        </childnode>
      </node>
      <node id="82763">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82769">
        <label>openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="82757" relation="include">
        </childnode>
        <childnode refid="82759" relation="include">
        </childnode>
        <childnode refid="82766" relation="include">
        </childnode>
        <childnode refid="82761" relation="include">
        </childnode>
      </node>
      <node id="82767">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82757" relation="include">
        </childnode>
      </node>
      <node id="82755">
        <label>openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="82756" relation="include">
        </childnode>
        <childnode refid="82757" relation="include">
        </childnode>
        <childnode refid="82758" relation="include">
        </childnode>
        <childnode refid="82763" relation="include">
        </childnode>
        <childnode refid="82764" relation="include">
        </childnode>
        <childnode refid="82767" relation="include">
        </childnode>
        <childnode refid="82766" relation="include">
        </childnode>
        <childnode refid="82769" relation="include">
        </childnode>
      </node>
      <node id="82764">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82763" relation="include">
        </childnode>
      </node>
      <node id="82756">
        <label>time.h</label>
      </node>
      <node id="82752">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="82753" relation="include">
        </childnode>
        <childnode refid="82754" relation="include">
        </childnode>
        <childnode refid="82766" relation="include">
        </childnode>
        <childnode refid="82769" relation="include">
        </childnode>
      </node>
      <node id="82753">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82757">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82753" relation="include">
        </childnode>
      </node>
      <node id="82759">
        <label>stdio.h</label>
      </node>
      <node id="82766">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82757" relation="include">
        </childnode>
      </node>
      <node id="82761">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="82762" relation="include">
        </childnode>
        <childnode refid="82757" relation="include">
        </childnode>
        <childnode refid="82759" relation="include">
        </childnode>
        <childnode refid="82763" relation="include">
        </childnode>
        <childnode refid="82764" relation="include">
        </childnode>
        <childnode refid="82765" relation="include">
        </childnode>
        <childnode refid="82766" relation="include">
        </childnode>
        <childnode refid="82767" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82771">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82782">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82774">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82775" relation="include">
        </childnode>
      </node>
      <node id="82778">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82780">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82779" relation="include">
        </childnode>
      </node>
      <node id="82772">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82773" relation="include">
        </childnode>
        <childnode refid="82771" relation="include">
        </childnode>
        <childnode refid="82776" relation="include">
        </childnode>
        <childnode refid="82777" relation="include">
        </childnode>
        <childnode refid="82781" relation="include">
        </childnode>
        <childnode refid="82779" relation="include">
        </childnode>
        <childnode refid="82782" relation="include">
        </childnode>
        <childnode refid="82783" relation="include">
        </childnode>
        <childnode refid="82784" relation="include">
        </childnode>
      </node>
      <node id="82783">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82772" relation="include">
        </childnode>
      </node>
      <node id="82770">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="82771" relation="include">
        </childnode>
        <childnode refid="82772" relation="include">
        </childnode>
      </node>
      <node id="82777">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82778" relation="include">
        </childnode>
        <childnode refid="82779" relation="include">
        </childnode>
      </node>
      <node id="82773">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82774" relation="include">
        </childnode>
      </node>
      <node id="82779">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82778" relation="include">
        </childnode>
        <childnode refid="82780" relation="include">
        </childnode>
      </node>
      <node id="82775">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82784">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82776" relation="include">
        </childnode>
        <childnode refid="82782" relation="include">
        </childnode>
      </node>
      <node id="82781">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82776">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_e_c_d_s_a___s_i_g__st" prot="public">ECDSA_SIG_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ecdsa_8h_1aa5c1d3e7fe402b3d947c49b1e2926de3" prot="public" static="no">
        <name>ECDSA_F_ECDSA_CHECK</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="241" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a04c07cf1a69d2321fec08217dcddf262" prot="public" static="no">
        <name>ECDSA_F_ECDSA_DATA_NEW_METHOD</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="242" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a60c3a11981ef74374a56dba9e87678d1" prot="public" static="no">
        <name>ECDSA_F_ECDSA_DO_SIGN</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="243" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1afcf8f6c5f61c81171c93b62c0e4d6d3f" prot="public" static="no">
        <name>ECDSA_F_ECDSA_DO_VERIFY</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="244" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1aa7e811603ff18eff54ea761ecc4621ea" prot="public" static="no">
        <name>ECDSA_F_ECDSA_SIGN_SETUP</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="245" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a28dd9ecfba30abf8da4de31dd9a62567" prot="public" static="no">
        <name>ECDSA_R_BAD_SIGNATURE</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="248" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a0948ecf6753b3e48169ab071b12f871c" prot="public" static="no">
        <name>ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="249" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1aac008f189932818706c259090c20329e" prot="public" static="no">
        <name>ECDSA_R_ERR_EC_LIB</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="250" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1afd6c3fb40122b54a3094edc02e72acdc" prot="public" static="no">
        <name>ECDSA_R_MISSING_PARAMETERS</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="251" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a51daa556bae1a70d8eb67b28e7722763" prot="public" static="no">
        <name>ECDSA_R_NEED_NEW_SETUP_VALUES</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="252" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1ac20fa7a3ad397018dc16af5927c6eada" prot="public" static="no">
        <name>ECDSA_R_NON_FIPS_METHOD</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="253" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1a59d8560f848011eacbc333a95f5095c0" prot="public" static="no">
        <name>ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="254" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecdsa_8h_1ae1643bfe8f09b4c9742ecca9f7bff367" prot="public" static="no">
        <name>ECDSA_R_SIGNATURE_MALLOC_FAILED</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="255" column="9" bodyfile="thirdparty/openssl/include/openssl/ecdsa.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ecdsa_8h_1a3298e5488d7e3f4a8ede239866bfc5b3" prot="public" static="no">
        <type>struct <ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG_st</ref></type>
        <definition>typedef struct ECDSA_SIG_st  ECDSA_SIG</definition>
        <argsstring></argsstring>
        <name>ECDSA_SIG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecdsa_8h_1a1e24434125df0fc6720fe18bc8cd0ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
        <definition>ECDSA_SIG* ECDSA_SIG_new</definition>
        <argsstring>(void)</argsstring>
        <name>ECDSA_SIG_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates and initialize a ECDSA_SIG structure <simplesect kind="return"><para>pointer to a ECDSA_SIG structure or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1acd70808233eacdcb183148deca9c8b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_SIG_free</definition>
        <argsstring>(ECDSA_SIG *sig)</argsstring>
        <name>ECDSA_SIG_free</name>
        <param>
          <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees a ECDSA_SIG structure <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ECDSA_SIG structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a08c0aa1ccdf1879fc4b0eb98c9ba0fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ECDSA_SIG</definition>
        <argsstring>(const ECDSA_SIG *sig, unsigned char **pp)</argsstring>
        <name>i2d_ECDSA_SIG</name>
        <param>
          <type>const <ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DER encode content of ECDSA_SIG object (note: this function modifies *pp (*pp += length of the DER encoded signature)). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ECDSA_SIG object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a unsigned char pointer for the output or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the DER encoded ECDSA_SIG object or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1afb26eca66faca7d8c56176b3babfa044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
        <definition>ECDSA_SIG* d2i_ECDSA_SIG</definition>
        <argsstring>(ECDSA_SIG **sig, const unsigned char **pp, long len)</argsstring>
        <name>d2i_ECDSA_SIG</name>
        <param>
          <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> **</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes a DER encoded ECDSA signature (note: this function changes *pp (*pp += len)). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to ECDSA_SIG pointer (may be NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>memory buffer with the DER encoded signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the decoded ECDSA_SIG structure (or NULL) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1aa6f4bce46de947050b5cc529b310392c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
        <definition>ECDSA_SIG* ECDSA_do_sign</definition>
        <argsstring>(const unsigned char *dgst, int dgst_len, EC_KEY *eckey)</argsstring>
        <name>ECDSA_do_sign</name>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgst_len</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the ECDSA signature of the given hash value using the supplied private key and returns the created signature. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgst_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a private EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to a ECDSA_SIG structure or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ada54373ff759126ddc753b1881f45ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
        <definition>ECDSA_SIG* ECDSA_do_sign_ex</definition>
        <argsstring>(const unsigned char *dgst, int dgstlen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)</argsstring>
        <name>ECDSA_do_sign_ex</name>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgstlen</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>kinv</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value to sign </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgstlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinv</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with a pre-computed inverse k (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with a pre-computed rp value (optioanl), see ECDSA_sign_setup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a private EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to a ECDSA_SIG structure or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ae3999bccda13f8f82e939013c2f49c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_do_verify</definition>
        <argsstring>(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey)</argsstring>
        <name>ECDSA_do_verify</name>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgst_len</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that the supplied signature is a valid ECDSA signature of the supplied hash value using the supplied public key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgst_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>ECDSA_SIG structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a public EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the signature is valid, 0 if the signature is invalid and -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1aa9df56cb99936931c72b5ea096101ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ECDSA_METHOD *</type>
        <definition>const ECDSA_METHOD* ECDSA_OpenSSL</definition>
        <argsstring>(void)</argsstring>
        <name>ECDSA_OpenSSL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a106ff0b59dfa17b2af20e0bfc3df9a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_set_default_method</definition>
        <argsstring>(const ECDSA_METHOD *meth)</argsstring>
        <name>ECDSA_set_default_method</name>
        <param>
          <type>const ECDSA_METHOD *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the default ECDSA method <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meth</parametername>
</parameternamelist>
<parameterdescription>
<para>new default ECDSA_METHOD </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a9fa176173c9d759a4b5db4015579eb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ECDSA_METHOD *</type>
        <definition>const ECDSA_METHOD* ECDSA_get_default_method</definition>
        <argsstring>(void)</argsstring>
        <name>ECDSA_get_default_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the default ECDSA method <simplesect kind="return"><para>pointer to ECDSA_METHOD structure containing the default method </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ad19ae3071bf2da49caec1e409c6e511d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_set_method</definition>
        <argsstring>(EC_KEY *eckey, const ECDSA_METHOD *meth)</argsstring>
        <name>ECDSA_set_method</name>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <param>
          <type>const ECDSA_METHOD *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets method to be used for the ECDSA operations <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meth</parametername>
</parameternamelist>
<parameterdescription>
<para>new method </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a8a5270aef99c08ca81b5bdc1bff110a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_size</definition>
        <argsstring>(const EC_KEY *eckey)</argsstring>
        <name>ECDSA_size</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum length of the DER encoded signature <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>numbers of bytes required for the DER encoded signature </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ae9da0b6344f0c7f03ea26d648f434da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_sign_setup</definition>
        <argsstring>(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp)</argsstring>
        <name>ECDSA_sign_setup</name>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> **</type>
          <declname>kinv</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> **</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Precompute parts of the signing operation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a private EC key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinv</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM pointer for the inverse of k </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM pointer for x coordinate of k * generator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a22916b9617edac877f99da5b78de7ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_sign</definition>
        <argsstring>(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, EC_KEY *eckey)</argsstring>
        <name>ECDSA_sign</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgstlen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>this parameter is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value to sign </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgstlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>memory for the DER encoded created signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>siglen</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the length of the returned signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a private EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a4ec0356421e4cd3ec4837b7ee2f9e0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_sign_ex</definition>
        <argsstring>(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)</argsstring>
        <name>ECDSA_sign_ex</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgstlen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>kinv</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>this parameter is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value to sign </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgstlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to hold the DER encoded signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>siglen</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the length of the returned signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinv</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with a pre-computed inverse k (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with a pre-computed rp value (optioanl), see ECDSA_sign_setup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a private EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ac5884c7796bad53a27114ea3457a68dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_verify</definition>
        <argsstring>(int type, const unsigned char *dgst, int dgstlen, const unsigned char *sig, int siglen, EC_KEY *eckey)</argsstring>
        <name>ECDSA_verify</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>dgst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dgstlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>int</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that the given signature is valid ECDSA signature of the supplied hash value using the specified public key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>this parameter is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgstlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the hash value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the DER encoded signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>siglen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DER encoded signature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eckey</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object containing a public EC key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the signature is valid, 0 if the signature is invalid and -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1addf9321f0c214c139766951b23389c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_get_ex_new_index</definition>
        <argsstring>(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)</argsstring>
        <name>ECDSA_get_ex_new_index</name>
        <param>
          <type>long</type>
          <declname>argl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>argp</declname>
        </param>
        <param>
          <type>CRYPTO_EX_new *</type>
          <declname>new_func</declname>
        </param>
        <param>
          <type>CRYPTO_EX_dup *</type>
          <declname>dup_func</declname>
        </param>
        <param>
          <type>CRYPTO_EX_free *</type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a3ace20393da32d8549315443f1803f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECDSA_set_ex_data</definition>
        <argsstring>(EC_KEY *d, int idx, void *arg)</argsstring>
        <name>ECDSA_set_ex_data</name>
        <param>
          <type>EC_KEY *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1ab94f5190d44e4de55338edc444125c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ECDSA_get_ex_data</definition>
        <argsstring>(EC_KEY *d, int idx)</argsstring>
        <name>ECDSA_get_ex_data</name>
        <param>
          <type>EC_KEY *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a36c46ecfdc9136e8ae272657ac774a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_ECDSA_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_ECDSA_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ecdsa.h" line="236" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/ecdsa/ecdsa.h<sp/>*/</highlight></codeline>
<codeline lineno="6"><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2000-2005<sp/>The<sp/>OpenSSL<sp/>Project.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgment:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit.<sp/>(http://www.OpenSSL.org/)&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>4.<sp/>The<sp/>names<sp/>&quot;OpenSSL<sp/>Toolkit&quot;<sp/>and<sp/>&quot;OpenSSL<sp/>Project&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prior<sp/>written<sp/>permission.<sp/>For<sp/>written<sp/>permission,<sp/>please<sp/>contact</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>licensing@OpenSSL.org.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>5.<sp/>Products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>may<sp/>not<sp/>be<sp/>called<sp/>&quot;OpenSSL&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>nor<sp/>may<sp/>&quot;OpenSSL&quot;<sp/>appear<sp/>in<sp/>their<sp/>names<sp/>without<sp/>prior<sp/>written</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>permission<sp/>of<sp/>the<sp/>OpenSSL<sp/>Project.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>6.<sp/>Redistributions<sp/>of<sp/>any<sp/>form<sp/>whatsoever<sp/>must<sp/>retain<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>acknowledgment:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit<sp/>(http://www.OpenSSL.org/)&quot;</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>OR</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>(eay@cryptsoft.com).<sp/><sp/>This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_ECDSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_ECDSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/opensslconf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_NO_ECDSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>ECDSA<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ossl_typ.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_e_c_d_s_a___s_i_g__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG_st</ref></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*s;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*ECDSA_SIG_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_SIG_free(<ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*sig);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>i2d_ECDSA_SIG(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*sig,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*d2i_ECDSA_SIG(<ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>**sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*ECDSA_do_sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgst_len,EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*ECDSA_do_sign_ex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgstlen,<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*kinv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rp,<sp/>EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ECDSA_do_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgst_len,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_d_s_a___s_i_g__st" kindref="compound">ECDSA_SIG</ref><sp/>*sig,<sp/>EC_KEY*<sp/>eckey);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECDSA_METHOD<sp/>*ECDSA_OpenSSL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_set_default_method(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECDSA_METHOD<sp/>*meth);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECDSA_METHOD<sp/>*ECDSA_get_default_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_set_method(EC_KEY<sp/>*eckey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECDSA_METHOD<sp/>*meth);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ECDSA_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_sign_setup(EC_KEY<sp/>*eckey,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>**kinv,<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>**rp);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ECDSA_sign(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgstlen,<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*siglen,<sp/>EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ECDSA_sign_ex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgstlen,<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*siglen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*kinv,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rp,<sp/>EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_verify(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dgst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgstlen,<sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siglen,<sp/>EC_KEY<sp/>*eckey);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>standard<sp/>ex_data<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_get_ex_new_index(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp,<sp/>CRYPTO_EX_new<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*new_func,<sp/>CRYPTO_EX_dup<sp/>*dup_func,<sp/>CRYPTO_EX_free<sp/>*free_func);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECDSA_set_ex_data(EC_KEY<sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ECDSA_get_ex_data(EC_KEY<sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_ECDSA_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>ECDSA<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_F_ECDSA_CHECK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_F_ECDSA_DATA_NEW_METHOD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_F_ECDSA_DO_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_F_ECDSA_DO_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_F_ECDSA_SIGN_SETUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_BAD_SIGNATURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_ERR_EC_LIB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_MISSING_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_NEED_NEW_SETUP_VALUES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_NON_FIPS_METHOD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED<sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECDSA_R_SIGNATURE_MALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/ecdsa.h"/>
  </compounddef>
</doxygen>
