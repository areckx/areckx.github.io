<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pmutil_8c" kind="file" language="C++">
    <compoundname>pmutil.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="portmidi_8h" local="yes">portmidi.h</includes>
    <includes refid="pmutil_8h" local="yes">pmutil.h</includes>
    <includes refid="pminternal_8h" local="yes">pminternal.h</includes>
    <incdepgraph>
      <node id="92896">
        <label>assert.h</label>
      </node>
      <node id="92900">
        <label>pminternal.h</label>
        <link refid="pminternal_8h_source"/>
      </node>
      <node id="92895">
        <label>stdlib.h</label>
      </node>
      <node id="92898">
        <label>portmidi.h</label>
        <link refid="portmidi_8h_source"/>
      </node>
      <node id="92897">
        <label>string.h</label>
      </node>
      <node id="92894">
        <label>thirdparty/portmidi/pm_common/pmutil.c</label>
        <link refid="pmutil_8c"/>
        <childnode refid="92895" relation="include">
        </childnode>
        <childnode refid="92896" relation="include">
        </childnode>
        <childnode refid="92897" relation="include">
        </childnode>
        <childnode refid="92898" relation="include">
        </childnode>
        <childnode refid="92899" relation="include">
        </childnode>
        <childnode refid="92900" relation="include">
        </childnode>
      </node>
      <node id="92899">
        <label>pmutil.h</label>
        <link refid="pmutil_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="struct_pm_queue_rep" prot="public">PmQueueRep</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pmutil_8c_1a4ca2d97e571b049be6f4cdcfaa1ab946" prot="public" static="no">
        <type>long</type>
        <definition>typedef long int32</definition>
        <argsstring></argsstring>
        <name>int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="24" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pmutil_8c_1a8956a2b1675397b622241956579d827a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmQueue *</type>
        <definition>PmQueue* Pm_QueueCreate</definition>
        <argsstring>(long num_msgs, long bytes_per_msg)</argsstring>
        <name>Pm_QueueCreate</name>
        <param>
          <type>long</type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bytes_per_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="39" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="39" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1a90c8f0e1f8185196687d73e30b2bef17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_QueueDestroy</definition>
        <argsstring>(PmQueue *q)</argsstring>
        <name>Pm_QueueDestroy</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="75" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1ab1c6455de83bd94629d7298e782664d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Dequeue</definition>
        <argsstring>(PmQueue *q, void *msg)</argsstring>
        <name>Pm_Dequeue</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="90" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="90" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1afe650b8850e3268c04069f0da348d0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_SetOverflow</definition>
        <argsstring>(PmQueue *q)</argsstring>
        <name>Pm_SetOverflow</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="169" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="169" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1a251173e11be2aa7f8f552420e193bef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Enqueue</definition>
        <argsstring>(PmQueue *q, void *msg)</argsstring>
        <name>Pm_Enqueue</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="184" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="184" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1a524b002ac04d8d22a23211bc2c5c75f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_QueueEmpty</definition>
        <argsstring>(PmQueue *q)</argsstring>
        <name>Pm_QueueEmpty</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="226" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="226" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1a5dd36e4d4d7bfb585e067f802e64f700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_QueueFull</definition>
        <argsstring>(PmQueue *q)</argsstring>
        <name>Pm_QueueFull</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="234" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="234" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8c_1ada7115d4b0679ac569165129311625ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* Pm_QueuePeek</definition>
        <argsstring>(PmQueue *q)</argsstring>
        <name>Pm_QueuePeek</name>
        <param>
          <type>PmQueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pmutil.c" line="253" column="1" bodyfile="thirdparty/portmidi/pm_common/pmutil.c" bodystart="253" bodyend="288"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>pmutil.c<sp/>--<sp/>some<sp/>helpful<sp/>utilities<sp/>for<sp/>building<sp/>midi</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applications<sp/>that<sp/>use<sp/>PortMidi</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;portmidi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pmutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pminternal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bzero(addr,<sp/>siz)<sp/>memset(addr,<sp/>0,<sp/>siz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>QUEUE_DEBUG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QUEUE_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>code<sp/>is<sp/>based<sp/>on<sp/>4-byte<sp/>words<sp/>--<sp/>it<sp/>should<sp/>work<sp/>on<sp/>a<sp/>64-bit<sp/>machine</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>as<sp/>long<sp/>as<sp/>a<sp/>&quot;long&quot;<sp/>has<sp/>4<sp/>bytes.<sp/>This<sp/>code<sp/>could<sp/>be<sp/>generalized<sp/>to</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>be<sp/>independent<sp/>of<sp/>the<sp/>size<sp/>of<sp/>&quot;long&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int32;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="struct_pm_queue_rep" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msg_size;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>int32<sp/>in<sp/>a<sp/>message<sp/>including<sp/>extra<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>overflow;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>peek_overflow;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*buffer;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*peek;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peek_flag;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">PmQueue<sp/>*Pm_QueueCreate(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_msgs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bytes_per_msg)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int32s_per_msg<sp/>=<sp/>((bytes_per_msg<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32)<sp/>-<sp/>1)<sp/>&amp;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32)<sp/>-<sp/>1))<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>pm_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref>));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)<sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>allocation<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>extra<sp/>word<sp/>per<sp/>message<sp/>for<sp/>non-zero<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;len<sp/>=<sp/>num_msgs<sp/>*<sp/>(int32s_per_msg<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;buffer<sp/>=<sp/>(int32<sp/>*)<sp/>pm_alloc(queue-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>bzero(queue-&gt;buffer,<sp/>queue-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue-&gt;buffer)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(queue);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>&quot;peek&quot;<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;peek<sp/>=<sp/>(int32<sp/>*)<sp/>pm_alloc(int32s_per_msg<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue-&gt;peek)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>everything<sp/>allocated<sp/>so<sp/>far<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(queue-&gt;buffer);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_free(queue);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>bzero(queue-&gt;buffer,<sp/>queue-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>msg_size<sp/>is<sp/>in<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;msg_size<sp/>=<sp/>int32s_per_msg<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>note<sp/>extra<sp/>word<sp/>is<sp/>counted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;overflow<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;peek_overflow<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;peek_flag<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">PmError<sp/>Pm_QueueDestroy(PmQueue<sp/>*q)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue<sp/>||<sp/>!queue-&gt;buffer<sp/>||<sp/>!queue-&gt;peek)<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_free(queue-&gt;peek);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_free(queue-&gt;buffer);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_free(queue);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">PmError<sp/>Pm_Dequeue(PmQueue<sp/>*q,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*msg_as_int32<sp/>=<sp/>(int32<sp/>*)<sp/>msg;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>previous<sp/>peek<sp/>operation<sp/>encountered<sp/>an<sp/>overflow,<sp/>but<sp/>the<sp/>overflow</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>reported<sp/>to<sp/>client,<sp/>so<sp/>do<sp/>it<sp/>now.<sp/>No<sp/>message<sp/>is</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>returned,<sp/>but<sp/>on<sp/>the<sp/>next<sp/>call,<sp/>we<sp/>will<sp/>return<sp/>the<sp/>peek<sp/>buffer.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;peek_overflow)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;peek_overflow<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;peek_flag)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(msg,<sp/>queue-&gt;peek,<sp/>(queue-&gt;msg_size<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;peek_flag<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmGotData;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>queue-&gt;head;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>writer<sp/>overflows,<sp/>it<sp/>writes<sp/>queue-&gt;overflow<sp/>=<sp/>tail+1<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>when<sp/>the<sp/>reader<sp/>gets<sp/>to<sp/>that<sp/>position<sp/>in<sp/>the<sp/>buffer,<sp/>it<sp/>can<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>the<sp/>overflow<sp/>condition<sp/>to<sp/>the<sp/>reader.<sp/>The<sp/>problem<sp/>is<sp/>that</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>overflow,<sp/>things<sp/>have<sp/>wrapped<sp/>around,<sp/>so<sp/>tail<sp/>==<sp/>head,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>reader<sp/>will<sp/>detect<sp/>overflow<sp/>immediately<sp/>instead<sp/>of<sp/>waiting<sp/>until</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>reads<sp/>everything<sp/>in<sp/>the<sp/>buffer,<sp/>wrapping<sp/>around<sp/>again<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>point<sp/>where<sp/>tail<sp/>==<sp/>head.<sp/>So<sp/>the<sp/>condition<sp/>also<sp/>checks<sp/>that</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>queue-&gt;buffer[head]<sp/>is<sp/>zero<sp/>--<sp/>if<sp/>so,<sp/>then<sp/>the<sp/>buffer<sp/>is<sp/>now</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>empty,<sp/>and<sp/>we&apos;re<sp/>at<sp/>the<sp/>point<sp/>in<sp/>the<sp/>msg<sp/>stream<sp/>where<sp/>overflow</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>occurred.<sp/>It&apos;s<sp/>time<sp/>to<sp/>signal<sp/>overflow<sp/>to<sp/>the<sp/>reader.<sp/>If<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>queue-&gt;buffer[head]<sp/>is<sp/>non-zero,<sp/>there&apos;s<sp/>a<sp/>message<sp/>there<sp/>and<sp/>we</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>should<sp/>read<sp/>all<sp/>the<sp/>way<sp/>around<sp/>the<sp/>buffer<sp/>before<sp/>signalling<sp/>overflow.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>There<sp/>is<sp/>a<sp/>write-order<sp/>dependency<sp/>here,<sp/>but<sp/>to<sp/>fail,<sp/>the<sp/>overflow</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>field<sp/>would<sp/>have<sp/>to<sp/>be<sp/>written<sp/>while<sp/>an<sp/>entire<sp/>buffer<sp/>full<sp/>of<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>writes<sp/>are<sp/>still<sp/>pending.<sp/>I&apos;m<sp/>assuming<sp/>out-of-order<sp/>writes<sp/>are</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>possible,<sp/>but<sp/>not<sp/>that<sp/>many.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;overflow<sp/>==<sp/>head<sp/>+<sp/>1<sp/>&amp;&amp;<sp/>!queue-&gt;buffer[head])<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;overflow<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>non-overflow<sp/>condition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>to<sp/>see<sp/>if<sp/>there<sp/>is<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>--<sp/>test<sp/>from<sp/>back</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>front<sp/>so<sp/>if<sp/>writer<sp/>is<sp/>simultaneously<sp/>writing,<sp/>we<sp/>don&apos;t</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>waste<sp/>time<sp/>discovering<sp/>the<sp/>write<sp/>is<sp/>not<sp/>finished<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>queue-&gt;msg_size<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue-&gt;buffer[head<sp/>+<sp/>i])<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoData;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(msg,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;queue-&gt;buffer[head<sp/>+<sp/>1],<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32)<sp/>*<sp/>(queue-&gt;msg_size<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fix<sp/>up<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>queue-&gt;buffer[head];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>queue-&gt;msg_size)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>j;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;<sp/></highlight><highlight class="comment">/*<sp/>msg<sp/>does<sp/>not<sp/>have<sp/>extra<sp/>word<sp/>so<sp/>shift<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>msg_as_int32[i];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_as_int32[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>signal<sp/>that<sp/>data<sp/>has<sp/>been<sp/>removed<sp/>by<sp/>zeroing:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>bzero((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;queue-&gt;buffer[head],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32)<sp/>*<sp/>queue-&gt;msg_size);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>+=<sp/>queue-&gt;msg_size;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>==<sp/>queue-&gt;len)<sp/>head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;head<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmGotData;<sp/></highlight><highlight class="comment">/*<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">PmError<sp/>Pm_SetOverflow(PmQueue<sp/>*q)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>more<sp/>enqueue<sp/>until<sp/>receiver<sp/>acknowledges<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;overflow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>queue-&gt;tail;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;overflow<sp/>=<sp/>tail<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">PmError<sp/>Pm_Enqueue(PmQueue<sp/>*q,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*src<sp/>=<sp/>(int32<sp/>*)<sp/>msg;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*ptr;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*dest;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>more<sp/>enqueue<sp/>until<sp/>receiver<sp/>acknowledges<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;overflow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>rslt<sp/>=<sp/>Pm_QueueFull(q);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>already<sp/>checked<sp/>above:<sp/>if<sp/>(rslt<sp/>==<sp/>pmBadPtr)<sp/>return<sp/>rslt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>queue-&gt;tail;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;overflow<sp/>=<sp/>tail<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBufferOverflow;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>queue<sp/>is<sp/>has<sp/>room<sp/>for<sp/>message,<sp/>and<sp/>overflow<sp/>flag<sp/>is<sp/>cleared<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>&amp;queue-&gt;buffer[tail];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>ptr<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>queue-&gt;msg_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>j<sp/>=<sp/>src[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>dest;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>tail<sp/>+=<sp/>queue-&gt;msg_size;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tail<sp/>==<sp/>queue-&gt;len)<sp/>tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;tail<sp/>=<sp/>tail;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmNoError;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_QueueEmpty(PmQueue<sp/>*q)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!queue)<sp/>||<sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>pointer<sp/>-&gt;<sp/>return<sp/>&quot;empty&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(queue-&gt;buffer[queue-&gt;head]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!queue-&gt;peek_flag);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_QueueFull(PmQueue<sp/>*q)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmBadPtr;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>queue-&gt;tail;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>to<sp/>see<sp/>if<sp/>there<sp/>is<sp/>space<sp/>in<sp/>the<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>queue-&gt;msg_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;buffer[tail<sp/>+<sp/>i])<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Pm_QueuePeek(PmQueue<sp/>*q)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>PmError<sp/>rslt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*queue<sp/>=<sp/>(<ref refid="struct_pm_queue_rep" kindref="compound">PmQueueRep</ref><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queue)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue-&gt;peek_flag)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue-&gt;peek;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>ugly:<sp/>if<sp/>peek_overflow<sp/>is<sp/>set,<sp/>then<sp/>Pm_Dequeue()<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>returns<sp/>immediately<sp/>with<sp/>pmBufferOverflow,<sp/>but<sp/>here,<sp/>we</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>want<sp/>Pm_Dequeue()<sp/>to<sp/>really<sp/>check<sp/>for<sp/>data.<sp/>If<sp/>data<sp/>is</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>there,<sp/>we<sp/>can<sp/>return<sp/>it</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>queue-&gt;peek_overflow;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;peek_overflow<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>rslt<sp/>=<sp/>Pm_Dequeue(q,<sp/>queue-&gt;peek);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>queue-&gt;peek_overflow<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;peek_flag<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue-&gt;peek;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt<sp/>==<sp/>pmBufferOverflow)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>overflow<sp/>is<sp/>indicated,<sp/>the<sp/>queue<sp/>is<sp/>empty<sp/>and<sp/>the<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>first<sp/>message<sp/>that<sp/>was<sp/>dropped<sp/>by<sp/>Enqueue<sp/>(signalling</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pmBufferOverflow<sp/>to<sp/>its<sp/>caller)<sp/>would<sp/>have<sp/>been<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>message<sp/>in<sp/>the<sp/>queue.<sp/>Pm_QueuePeek<sp/>will<sp/>return<sp/>NULL,<sp/>but</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>remember<sp/>that<sp/>an<sp/>overflow<sp/>occurred.<sp/>(see<sp/>Pm_Dequeue)</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;peek_overflow<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_common/pmutil.c"/>
  </compounddef>
</doxygen>
