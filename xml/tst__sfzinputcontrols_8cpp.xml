<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tst__sfzinputcontrols_8cpp" kind="file" language="C++">
    <compoundname>tst_sfzinputcontrols.cpp</compoundname>
    <includes local="no">QtTest/QtTest</includes>
    <includes refid="testutils_8h" local="yes">mtest/testutils.h</includes>
    <includes refid="zerberus_2instrument_8h" local="yes">zerberus/instrument.h</includes>
    <includes refid="zerberus_8h" local="yes">zerberus/zerberus.h</includes>
    <includes refid="channel_8h" local="yes">zerberus/channel.h</includes>
    <includes refid="zone_8h" local="yes">zerberus/zone.h</includes>
    <includes refid="preferences_8h" local="yes">mscore/preferences.h</includes>
    <includes refid="synthesizer_2event_8h" local="yes">synthesizer/event.h</includes>
    <includes local="yes">tst_sfzinputcontrols.moc</includes>
    <incdepgraph>
      <node id="75054">
        <label>list</label>
      </node>
      <node id="75071">
        <label>mscore/importmidi/importmidi_operations.h</label>
        <link refid="importmidi__operations_8h_source"/>
        <childnode refid="75072" relation="include">
        </childnode>
        <childnode refid="75075" relation="include">
        </childnode>
      </node>
      <node id="75058">
        <label>atomic</label>
      </node>
      <node id="75067">
        <label>mscore/preferences.h</label>
        <link refid="preferences_8h_source"/>
        <childnode refid="75068" relation="include">
        </childnode>
        <childnode refid="75069" relation="include">
        </childnode>
        <childnode refid="75071" relation="include">
        </childnode>
      </node>
      <node id="75066">
        <label>zerberus/zone.h</label>
        <link refid="zone_8h_source"/>
      </node>
      <node id="75052">
        <label>shape.h</label>
        <link refid="shape_8h_source"/>
      </node>
      <node id="75069">
        <label>shortcut.h</label>
        <link refid="shortcut_8h_source"/>
        <childnode refid="75070" relation="include">
        </childnode>
        <childnode refid="75068" relation="include">
        </childnode>
      </node>
      <node id="75064">
        <label>cstdint</label>
      </node>
      <node id="75062">
        <label>map</label>
      </node>
      <node id="75065">
        <label>zerberus/channel.h</label>
        <link refid="channel_8h_source"/>
      </node>
      <node id="75077">
        <label>tst_sfzinputcontrols.moc</label>
      </node>
      <node id="75070">
        <label>icons.h</label>
        <link refid="icons_8h_source"/>
      </node>
      <node id="75044">
        <label>mtest/zerberus/inputControls/tst_sfzinputcontrols.cpp</label>
        <link refid="tst__sfzinputcontrols_8cpp"/>
        <childnode refid="75045" relation="include">
        </childnode>
        <childnode refid="75046" relation="include">
        </childnode>
        <childnode refid="75053" relation="include">
        </childnode>
        <childnode refid="75056" relation="include">
        </childnode>
        <childnode refid="75065" relation="include">
        </childnode>
        <childnode refid="75066" relation="include">
        </childnode>
        <childnode refid="75067" relation="include">
        </childnode>
        <childnode refid="75061" relation="include">
        </childnode>
        <childnode refid="75077" relation="include">
        </childnode>
      </node>
      <node id="75073">
        <label>importmidi_fraction.h</label>
        <link refid="importmidi__fraction_8h_source"/>
        <childnode refid="75049" relation="include">
        </childnode>
      </node>
      <node id="75072">
        <label>importmidi_operation.h</label>
        <link refid="importmidi__operation_8h_source"/>
        <childnode refid="75073" relation="include">
        </childnode>
        <childnode refid="75074" relation="include">
        </childnode>
      </node>
      <node id="75046">
        <label>mtest/testutils.h</label>
        <link refid="testutils_8h_source"/>
        <childnode refid="75047" relation="include">
        </childnode>
      </node>
      <node id="75048">
        <label>spatium.h</label>
        <link refid="spatium_8h_source"/>
      </node>
      <node id="75049">
        <label>fraction.h</label>
        <link refid="fraction_8h_source"/>
        <childnode refid="75050" relation="include">
        </childnode>
      </node>
      <node id="75055">
        <label>QString</label>
      </node>
      <node id="75068">
        <label>globals.h</label>
        <link refid="globals_8h_source"/>
      </node>
      <node id="75075">
        <label>midi/midifile.h</label>
        <link refid="midifile_8h_source"/>
        <childnode refid="75076" relation="include">
        </childnode>
        <childnode refid="75061" relation="include">
        </childnode>
      </node>
      <node id="75057">
        <label>math.h</label>
      </node>
      <node id="75053">
        <label>zerberus/instrument.h</label>
        <link refid="zerberus_2instrument_8h_source"/>
        <childnode refid="75054" relation="include">
        </childnode>
        <childnode refid="75055" relation="include">
        </childnode>
      </node>
      <node id="75047">
        <label>libmscore/element.h</label>
        <link refid="element_8h_source"/>
        <childnode refid="75048" relation="include">
        </childnode>
        <childnode refid="75049" relation="include">
        </childnode>
        <childnode refid="75051" relation="include">
        </childnode>
        <childnode refid="75052" relation="include">
        </childnode>
      </node>
      <node id="75060">
        <label>libmscore/synthesizerstate.h</label>
        <link refid="synthesizerstate_8h_source"/>
        <childnode refid="75054" relation="include">
        </childnode>
      </node>
      <node id="75056">
        <label>zerberus/zerberus.h</label>
        <link refid="zerberus_8h_source"/>
        <childnode refid="75057" relation="include">
        </childnode>
        <childnode refid="75058" relation="include">
        </childnode>
        <childnode refid="75054" relation="include">
        </childnode>
        <childnode refid="75059" relation="include">
        </childnode>
        <childnode refid="75061" relation="include">
        </childnode>
        <childnode refid="75063" relation="include">
        </childnode>
      </node>
      <node id="75059">
        <label>synthesizer/synthesizer.h</label>
        <link refid="synthesizer_8h_source"/>
        <childnode refid="75060" relation="include">
        </childnode>
      </node>
      <node id="75063">
        <label>voice.h</label>
        <link refid="zerberus_2voice_8h_source"/>
        <childnode refid="75064" relation="include">
        </childnode>
        <childnode refid="75057" relation="include">
        </childnode>
      </node>
      <node id="75074">
        <label>set</label>
      </node>
      <node id="75050">
        <label>config.h</label>
      </node>
      <node id="75061">
        <label>synthesizer/event.h</label>
        <link refid="synthesizer_2event_8h_source"/>
        <childnode refid="75062" relation="include">
        </childnode>
      </node>
      <node id="75076">
        <label>libmscore/sig.h</label>
        <link refid="sig_8h_source"/>
        <childnode refid="75049" relation="include">
        </childnode>
      </node>
      <node id="75051">
        <label>scoreElement.h</label>
        <link refid="score_element_8h_source"/>
      </node>
      <node id="75045">
        <label>QtTest/QtTest</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_sfz_input_controls" prot="public">TestSfzInputControls</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>MuseScore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Music<sp/>Composition<sp/>&amp;<sp/>Notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>$Id:$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>version<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation<sp/>and<sp/>appearing<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>the<sp/>file<sp/>LICENCE.GPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtTest/QtTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mtest/testutils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zerberus/instrument.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zerberus/zerberus.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zerberus/channel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zerberus/zone.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mscore/preferences.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;synthesizer/event.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_ms" kindref="compound">Ms</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TestSfzGlobal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_test_sfz_input_controls" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_sfz_input_controls" kindref="compound">TestSfzInputControls</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_ms_1_1_m_test" kindref="compound">MTest</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_zerberus" kindref="compound">Zerberus</ref>*<sp/>synth;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ms_1_1_channel" kindref="compound">Channel</ref>*<sp/>channel;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;Zone<sp/>*&gt;::iterator<sp/>zoneIterator;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>slots:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputKeys();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputVolume();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputCCFilter();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputRand();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputSeq();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputTrigger();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputGroupOffBy();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputCCTrigger();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputRtDecay();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>initTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::initTestCase()</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initMTest();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_zerberus" kindref="compound">Zerberus</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ms::preferences.mySoundfontsPath<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>+<sp/>root;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;init(44100.0f);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;loadInstrument(</highlight><highlight class="stringliteral">&quot;inputControls.sfz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channel<sp/>=<sp/>synth-&gt;channel(0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator<sp/>=<sp/>synth-&gt;instrument(0)-&gt;zones().begin();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputKeys()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>18,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>19,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>20,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>19,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>20;<sp/>i<sp/>&lt;=<sp/>30;<sp/>i++)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,i,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>31,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputVolume()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>40,<sp/>29,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>30;<sp/>i<sp/>&lt;=<sp/>40;<sp/>i++)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,40,<sp/>i,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>40,<sp/>41,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputCCFilter()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>41,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>10;<sp/>i<sp/>&lt;=<sp/>15;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel-&gt;controller(23,<sp/>i);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>41,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channel-&gt;controller(23,<sp/>16);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>41,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputRand()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>42,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>42,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.5f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>42,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.6f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>42,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.74f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>42,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.75f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputSeq()</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;Zone<sp/>*&gt;::iterator<sp/>beforeIterator<sp/>=<sp/>zoneIterator;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*beforeIterator)-&gt;match(channel,<sp/>43,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>43,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*beforeIterator)-&gt;match(channel,<sp/>43,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>43,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputTrigger()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::RELEASE,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::FIRST,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::LEGATO,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::RELEASE,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::FIRST,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::LEGATO,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::RELEASE,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::FIRST,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::LEGATO,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::RELEASE,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::FIRST,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>44,<sp/>127,<sp/>Trigger::LEGATO,<sp/>0.0f,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputGroupOffBy()</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;play(<ref refid="class_ms_1_1_play_event" kindref="compound">Ms::PlayEvent</ref>(ME_NOTEON,<sp/>0,<sp/>45,<sp/>127));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;isPlaying());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;isPlaying());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;next()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;play(<ref refid="class_ms_1_1_play_event" kindref="compound">Ms::PlayEvent</ref>(ME_NOTEON,<sp/>0,<sp/>46,<sp/>127));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>our<sp/>list<sp/>the<sp/>newest<sp/>voice<sp/>is<sp/>at<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;isPlaying());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(46,<sp/>synth-&gt;getActiveVoices()-&gt;key());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;isStopped());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(45,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;key());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;next()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;next()-&gt;isStopped());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(45,<sp/>synth-&gt;getActiveVoices()-&gt;next()-&gt;next()-&gt;key());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputCCTrigger()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>-1,<sp/>-1,<sp/>Trigger::ATTACK,<sp/>0.0f,<sp/>23,<sp/>60));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>-1,<sp/>-1,<sp/>Trigger::CC,<sp/>0.0f,<sp/>23,<sp/>60));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>-1,<sp/>-1,<sp/>Trigger::CC,<sp/>0.0f,<sp/>23,<sp/>59));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>60;<sp/>i<sp/>&lt;<sp/>65;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>-1,<sp/>-1,<sp/>Trigger::CC,<sp/>0.0f,<sp/>23,<sp/>i));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>(*zoneIterator)-&gt;match(channel,<sp/>-1,<sp/>-1,<sp/>Trigger::CC,<sp/>0.0f,<sp/>23,<sp/>66));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoneIterator++;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSfzInputControls::testInputRtDecay()</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>buffer[44100<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;play(<ref refid="class_ms_1_1_play_event" kindref="compound">Ms::PlayEvent</ref>(ME_NOTEON,<sp/>0,<sp/>50,<sp/>127));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;process(44100,<sp/>buffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>synth-&gt;play(<ref refid="class_ms_1_1_play_event" kindref="compound">Ms::PlayEvent</ref>(ME_NOTEOFF,<sp/>0,<sp/>50,<sp/>0));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rt_decay_value<sp/>=<sp/>pow(10,<sp/>-6<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>1.0f<sp/>/<sp/>20);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain<sp/>=<sp/>(*zoneIterator)-&gt;volume<sp/>*<sp/>100<sp/>*<sp/>.005<sp/>*<sp/>channel-&gt;gain()<sp/>*<sp/>rt_decay_value;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(synth-&gt;getActiveVoices()-&gt;getGain(),<sp/>gain);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">QTEST_MAIN(<ref refid="class_test_sfz_input_controls" kindref="compound">TestSfzInputControls</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tst_sfzinputcontrols.moc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="mtest/zerberus/inputControls/tst_sfzinputcontrols.cpp"/>
  </compounddef>
</doxygen>
