<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_stream_8cc" kind="file" language="C++">
    <compoundname>Stream.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="poppler-config_8h" local="yes">poppler-config.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2lexer_8h" local="yes">Lexer.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="_j_b_i_g2_stream_8h" local="yes">JBIG2Stream.h</includes>
    <includes refid="_stream-_c_c_i_t_t_8h" local="yes">Stream-CCITT.h</includes>
    <includes refid="_cached_file_8h" local="yes">CachedFile.h</includes>
    <includes refid="_j_p_x_stream_8h" local="yes">JPXStream.h</includes>
    <incdepgraph>
      <node id="90039">
        <label>JBIG2Stream.h</label>
        <link refid="_j_b_i_g2_stream_8h_source"/>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
      </node>
      <node id="90022">
        <label>stdarg.h</label>
      </node>
      <node id="90034">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90025" relation="include">
        </childnode>
      </node>
      <node id="90035">
        <label>assert.h</label>
      </node>
      <node id="90037">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90028" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
        <childnode refid="90038" relation="include">
        </childnode>
      </node>
      <node id="90033">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90034" relation="include">
        </childnode>
        <childnode refid="90035" relation="include">
        </childnode>
        <childnode refid="90036" relation="include">
        </childnode>
      </node>
      <node id="90017">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90009" relation="include">
        </childnode>
        <childnode refid="90010" relation="include">
        </childnode>
        <childnode refid="90011" relation="include">
        </childnode>
        <childnode refid="90018" relation="include">
        </childnode>
        <childnode refid="90019" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
      </node>
      <node id="90041">
        <label>CachedFile.h</label>
        <link refid="_cached_file_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
        <childnode refid="90038" relation="include">
        </childnode>
      </node>
      <node id="90010">
        <label>stdlib.h</label>
      </node>
      <node id="90015">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90009" relation="include">
        </childnode>
        <childnode refid="90016" relation="include">
        </childnode>
      </node>
      <node id="90027">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90028" relation="include">
        </childnode>
      </node>
      <node id="90036">
        <label>map</label>
      </node>
      <node id="90032">
        <label>Lexer.h</label>
        <link refid="thirdparty_2poppler_2poppler_2lexer_8h_source"/>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
      </node>
      <node id="90021">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90022" relation="include">
        </childnode>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90023" relation="include">
        </childnode>
      </node>
      <node id="90030">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90028" relation="include">
        </childnode>
      </node>
      <node id="90011">
        <label>stddef.h</label>
      </node>
      <node id="90012">
        <label>limits.h</label>
      </node>
      <node id="90016">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90009" relation="include">
        </childnode>
      </node>
      <node id="90026">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90031">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90009" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90028" relation="include">
        </childnode>
      </node>
      <node id="90029">
        <label>pthread.h</label>
      </node>
      <node id="90019">
        <label>sys/types.h</label>
      </node>
      <node id="90013">
        <label>string.h</label>
      </node>
      <node id="90023">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90012" relation="include">
        </childnode>
        <childnode refid="90022" relation="include">
        </childnode>
        <childnode refid="90010" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
      </node>
      <node id="90007">
        <label>thirdparty/poppler/poppler/Stream.cc</label>
        <link refid="_stream_8cc"/>
        <childnode refid="90008" relation="include">
        </childnode>
        <childnode refid="90009" relation="include">
        </childnode>
        <childnode refid="90010" relation="include">
        </childnode>
        <childnode refid="90011" relation="include">
        </childnode>
        <childnode refid="90012" relation="include">
        </childnode>
        <childnode refid="90013" relation="include">
        </childnode>
        <childnode refid="90014" relation="include">
        </childnode>
        <childnode refid="90015" relation="include">
        </childnode>
        <childnode refid="90017" relation="include">
        </childnode>
        <childnode refid="90016" relation="include">
        </childnode>
        <childnode refid="90021" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90032" relation="include">
        </childnode>
        <childnode refid="90033" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
        <childnode refid="90037" relation="include">
        </childnode>
        <childnode refid="90039" relation="include">
        </childnode>
        <childnode refid="90040" relation="include">
        </childnode>
        <childnode refid="90041" relation="include">
        </childnode>
        <childnode refid="90042" relation="include">
        </childnode>
      </node>
      <node id="90024">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90025" relation="include">
        </childnode>
        <childnode refid="90009" relation="include">
        </childnode>
        <childnode refid="90013" relation="include">
        </childnode>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90015" relation="include">
        </childnode>
        <childnode refid="90023" relation="include">
        </childnode>
        <childnode refid="90026" relation="include">
        </childnode>
        <childnode refid="90021" relation="include">
        </childnode>
        <childnode refid="90027" relation="include">
        </childnode>
        <childnode refid="90030" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
      </node>
      <node id="90018">
        <label>unistd.h</label>
      </node>
      <node id="90038">
        <label>vector</label>
      </node>
      <node id="90028">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90029" relation="include">
        </childnode>
      </node>
      <node id="90014">
        <label>ctype.h</label>
      </node>
      <node id="90020">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90016" relation="include">
        </childnode>
      </node>
      <node id="90040">
        <label>Stream-CCITT.h</label>
        <link refid="_stream-_c_c_i_t_t_8h_source"/>
      </node>
      <node id="90025">
        <label>set</label>
      </node>
      <node id="90008">
        <label>config.h</label>
      </node>
      <node id="90009">
        <label>stdio.h</label>
      </node>
      <node id="90042">
        <label>JPXStream.h</label>
        <link refid="_j_p_x_stream_8h_source"/>
        <childnode refid="90020" relation="include">
        </childnode>
        <childnode refid="90024" relation="include">
        </childnode>
        <childnode refid="90031" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_stream_8cc_1afa762bafba018cc7d44ff0588104e8c4" prot="public" static="no">
        <name>streamLocker</name>
        <param></param>
        <initializer><ref refid="class_mutex_locker" kindref="compound">MutexLocker</ref> locker(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="96" column="11" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a2753be8ec28b57910d56e241a7cfaea5" prot="public" static="no">
        <name>dctCos1</name>
        <initializer>4017</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2398" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a3c6d7cfe0caa9fe5766420a0d5aae4c2" prot="public" static="no">
        <name>dctSin1</name>
        <initializer>799</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2399" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a12be19f312d233f51735832d0549b35a" prot="public" static="no">
        <name>dctCos3</name>
        <initializer>3406</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2400" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a32cbd332fca9abd0348bde795f347a81" prot="public" static="no">
        <name>dctSin3</name>
        <initializer>2276</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2401" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1aa0a857be3b9f6d0763c91e36063b80de" prot="public" static="no">
        <name>dctCos6</name>
        <initializer>1567</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2402" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1aacd64ed7d03dcb81f5b2da0bad2894c4" prot="public" static="no">
        <name>dctSin6</name>
        <initializer>3784</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2403" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1ae57a6640e76376fc3c5aabd58949d79b" prot="public" static="no">
        <name>dctSqrt2</name>
        <initializer>5793</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2404" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a977f3aa24b9a99102420ba1a7e87346e" prot="public" static="no">
        <name>dctSqrt1d2</name>
        <initializer>2896</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2405" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a0733fb62225730a318c71ccbf0f90ac3" prot="public" static="no">
        <name>dctCrToR</name>
        <initializer>91881</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2408" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a45b4817c342aa6a7e3a2952b5ae7afee" prot="public" static="no">
        <name>dctCbToG</name>
        <initializer>-22553</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2409" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a039b7700f1ccbe86786cdbc25a94aa9f" prot="public" static="no">
        <name>dctCrToG</name>
        <initializer>-46802</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2410" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a008085455e6aa68a91b60f810ca66f3b" prot="public" static="no">
        <name>dctCbToB</name>
        <initializer>116130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2411" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a28db8b0884e2e633aa0c8114dae68d52" prot="public" static="no">
        <name>dctClipOffset</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2414" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_stream_8cc_1a85c28f07d174b7e686bd8a602400d2fc" prot="public" static="no">
        <name>dctClipLength</name>
        <initializer>768</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2415" column="9" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2415" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_stream_8cc_1a8634fb258e163f899df8656251e0fef0" prot="public" static="yes" mutable="no">
        <type>Guchar</type>
        <definition>Guchar dctClip[dctClipLength]</definition>
        <argsstring>[dctClipLength]</argsstring>
        <name>dctClip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2416" column="1" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_stream_8cc_1a5b42b546453616d81423f8710a71c152" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dctClipInit</definition>
        <argsstring></argsstring>
        <name>dctClipInit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2417" column="1" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_stream_8cc_1a3b65407be983eb3f6f1d1faaccb3e587" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int dctZigZag[64]</definition>
        <argsstring>[64]</argsstring>
        <name>dctZigZag</name>
        <initializer>= {
   0,
   1,  8,
  16,  9,  2,
   3, 10, 17, 24,
  32, 25, 18, 11, 4,
   5, 12, 19, 26, 33, 40,
  48, 41, 34, 27, 20, 13,  6,
   7, 14, 21, 28, 35, 42, 49, 56,
  57, 50, 43, 36, 29, 22, 15,
  23, 30, 37, 44, 51, 58,
  59, 52, 45, 38, 31,
  39, 46, 53, 60,
  61, 54, 47,
  55, 62,
  63
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="2420" column="1" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="2420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_stream_8cc_1a0a087524a705bc743c60ca7a25957c96" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_flate_code" kindref="compound">FlateCode</ref></type>
        <definition>FlateCode flateFixedLitCodeTabCodes[512]</definition>
        <argsstring>[512]</argsstring>
        <name>flateFixedLitCodeTabCodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="3944" column="1" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="3944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_stream_8cc_1a5c74648f5cef69fb9d85c4b2421b2bb7" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_flate_code" kindref="compound">FlateCode</ref></type>
        <definition>FlateCode flateFixedDistCodeTabCodes[32]</definition>
        <argsstring>[32]</argsstring>
        <name>flateFixedDistCodeTabCodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Stream.cc" line="4463" column="1" bodyfile="thirdparty/poppler/poppler/Stream.cc" bodystart="4463" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stream.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2010,<sp/>2012-2014,<sp/>2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Krzysztof<sp/>Kowalczyk<sp/>&lt;kkowalczyk@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Julien<sp/>Rebetez<sp/>&lt;julien@fhtagn.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Glenn<sp/>Ganz<sp/>&lt;glenn.ganz@uptime.ch&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Stefan<sp/>Thomas<sp/>&lt;thomas@eload24.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Tomas<sp/>Hoger<sp/>&lt;thoger@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011,<sp/>2012,<sp/>2016<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Oliver<sp/>Sander<sp/>&lt;sander@mi.fu-berlin.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Even<sp/>Rouault<sp/>&lt;even.rouault@mines-paris.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Adam<sp/>Reichold<sp/>&lt;adamreichold@myopera.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Suzuki<sp/>Toshiya<sp/>&lt;mpsuzuki@hiroshima-u.ac.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;poppler-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JBIG2Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream-CCITT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CachedFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_LIBJPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DCTStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_ZLIB_UNCOMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FlateStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_LIBOPENJPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JPEG2000Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JPXStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__DJGPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>setDJSYSFLAGS<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEEK_SET<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEEK_CUR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEEK_END<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>streamLocker()<sp/><sp/><sp/>MutexLocker<sp/>locker(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>streamLocker()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stream<sp/>(base<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">Stream::Stream()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">Stream::~Stream()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stream::incRef()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>streamLocker();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>++ref;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stream::decRef()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>streamLocker();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>--ref;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Stream::close()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stream::getRawChar()<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>getRawChar()<sp/>on<sp/>non-predictor<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>getChars()<sp/>on<sp/>non-predictor<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Stream::getRawChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>getRawChars()<sp/>on<sp/>non-predictor<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Stream::getLine(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lookChar()<sp/>==<sp/>EOF<sp/>||<sp/>size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getChar();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>lookChar())<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>getChar();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>buf[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*Stream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*Stream::addFilters(<ref refid="class_object" kindref="compound">Object</ref><sp/>*dict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>obj2;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>params,<sp/>params2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Filter&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;DecodeParms&quot;</highlight><highlight class="normal">,<sp/>&amp;params,<sp/>recursion);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.isNull())<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>params.free();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;DP&quot;</highlight><highlight class="normal">,<sp/>&amp;params,<sp/>recursion);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isName())<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makeFilter(obj.getName(),<sp/>str,<sp/>&amp;params,<sp/>recursion,<sp/>dict);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj.arrayGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.arrayGet(i,<sp/>&amp;obj2,<sp/>recursion);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.isArray())</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>params.arrayGet(i,<sp/>&amp;params2,<sp/>recursion);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>params2.initNull();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName())<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makeFilter(obj2.getName(),<sp/>str,<sp/>&amp;params2,<sp/>recursion);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>filter<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_e_o_f_stream" kindref="compound">EOFStream</ref>(str);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params2.free();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>&apos;Filter&apos;<sp/>attribute<sp/>in<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>params.free();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*Stream::makeFilter(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*params,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pred;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colors;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>early;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encoding;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>GBool<sp/>endOfLine,<sp/>byteAlign,<sp/>endOfBlock,<sp/>black;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,<sp/>rows;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorXform;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>globals,<sp/>obj;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;ASCIIHexDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;AHx&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_stream" kindref="compound">ASCIIHexStream</ref>(str);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;ASCII85Decode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;A85&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_stream" kindref="compound">ASCII85Stream</ref>(str);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;LZWDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;LZW&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>colors<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>early<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Predictor&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Columns&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Colors&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>colors<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;EarlyChange&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>early<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_stream" kindref="compound">LZWStream</ref>(str,<sp/>pred,<sp/>columns,<sp/>colors,<sp/>bits,<sp/>early);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;RunLengthDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;RL&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_stream" kindref="compound">RunLengthStream</ref>(str);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;CCITTFaxDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;CCF&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>encoding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfLine<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>byteAlign<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>1728;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>black<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>encoding<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;EndOfLine&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isBool())<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfLine<sp/>=<sp/>obj.getBool();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;EncodedByteAlign&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isBool())<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>byteAlign<sp/>=<sp/>obj.getBool();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Columns&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Rows&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;EndOfBlock&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isBool())<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfBlock<sp/>=<sp/>obj.getBool();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;BlackIs1&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isBool())<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>black<sp/>=<sp/>obj.getBool();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_c_i_t_t_fax_stream" kindref="compound">CCITTFaxStream</ref>(str,<sp/>encoding,<sp/>endOfLine,<sp/>byteAlign,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns,<sp/>rows,<sp/>endOfBlock,<sp/>black);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;DCTDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;DCT&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;ColorTransform&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_d_c_t_stream" kindref="compound">DCTStream</ref>(str,<sp/>colorXform,<sp/>dict,<sp/>recursion);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;FlateDecode&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;Fl&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>colors<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Predictor&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Columns&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Colors&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>colors<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_stream" kindref="compound">FlateStream</ref>(str,<sp/>pred,<sp/>columns,<sp/>colors,<sp/>bits);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;JBIG2Decode&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref<sp/>=<sp/>params-&gt;getDict()-&gt;getXRef();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;dictLookupNF(</highlight><highlight class="stringliteral">&quot;JBIG2Globals&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.fetch(xref,<sp/>&amp;globals,<sp/>recursion);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_j_b_i_g2_stream" kindref="compound">JBIG2Stream</ref>(str,<sp/>&amp;globals,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>globals.free();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;JPXDecode&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_j_p_x_stream" kindref="compound">JPXStream</ref>(str);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;Crypt&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;getKind()<sp/>==<sp/>strCrypt)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str-&gt;getBaseStream();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>revert<sp/>non<sp/>decrypt<sp/>streams&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>filter<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_e_o_f_stream" kindref="compound">EOFStream</ref>(str);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OutStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">OutStream::OutStream<sp/>()</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">OutStream::~OutStream<sp/>()</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FileOutStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">FileOutStream::FileOutStream<sp/>(FILE*<sp/>fa,<sp/>Goffset<sp/>startA)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>fa;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>startA;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">FileOutStream::~FileOutStream<sp/>()</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>close<sp/>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileOutStream::close<sp/>()</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">Goffset<sp/>FileOutStream::getPos<sp/>()</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Gftell(f);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileOutStream::put<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>fputc(c,f);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileOutStream::printf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>va_start<sp/>(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>vfprintf(f,<sp/>format,<sp/>argptr);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>va_end<sp/>(argptr);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BaseStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">BaseStream::BaseStream(<ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA,<sp/>Goffset<sp/>lengthA)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>*dictA;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">BaseStream::~BaseStream()<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FilterStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">FilterStream::FilterStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">FilterStream::~FilterStream()<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FilterStream::close()<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FilterStream::setPos(Goffset<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>setPos()<sp/>on<sp/>FilterStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ImageStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">ImageStream::ImageStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBitsA)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLineSize;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>widthA;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nCompsA;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>nBits<sp/>=<sp/>nBitsA;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>nVals<sp/>=<sp/>width<sp/>*<sp/>nComps;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>inputLineSize<sp/>=<sp/>(nVals<sp/>*<sp/>nBits<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>&lt;=<sp/>0<sp/>||<sp/>nVals<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/>nBits<sp/>-<sp/>7<sp/>||<sp/>width<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>inputLineSize<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>inputLine<sp/>=<sp/>(Guchar<sp/>*)gmallocn_checkoverflow(inputLineSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>imgLine<sp/>=<sp/>(Guchar<sp/>*)inputLine;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLineSize<sp/>=<sp/>(nVals<sp/>+<sp/>7)<sp/>&amp;<sp/>~7;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLineSize<sp/>=<sp/>nVals;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>a<sp/>call<sp/>to<sp/>gmallocn(-1,...),<sp/>which<sp/>will<sp/>throw<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLineSize<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>imgLine<sp/>=<sp/>(Guchar<sp/>*)gmallocn(imgLineSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>imgIdx<sp/>=<sp/>nVals;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">ImageStream::~ImageStream()<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgLine<sp/>!=<sp/>(Guchar<sp/>*)inputLine)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(imgLine);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>gfree(inputLine);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageStream::close()<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">GBool<sp/>ImageStream::getPixel(Guchar<sp/>*pix)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgIdx<sp/>&gt;=<sp/>nVals)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getLine())<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>imgIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>pix[i]<sp/>=<sp/>imgLine[imgIdx++];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">Guchar<sp/>*ImageStream::getLine()<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>Gulong<sp/>buf,<sp/>bitMask;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(inputLine<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readChars<sp/>=<sp/>str-&gt;doGetChars(inputLineSize,<sp/>inputLine);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>readChars<sp/>&lt;<sp/>inputLineSize;<sp/>readChars++)<sp/>inputLine[readChars]<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>inputLine;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nVals;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+0]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>7)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+1]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+2]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+3]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+4]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>3)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+5]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+6]<sp/>=<sp/>(Guchar)((c<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i+7]<sp/>=<sp/>(Guchar)(c<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case:<sp/>imgLine<sp/>==<sp/>inputLine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>hack<sp/>to<sp/>support<sp/>16<sp/>bits<sp/>images,<sp/>everywhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>a<sp/>component<sp/>fits<sp/>in<sp/>8<sp/>bits,<sp/>with<sp/>this<sp/>hack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>treat<sp/>16<sp/>bit<sp/>images<sp/>as<sp/>8<sp/>bit<sp/>ones<sp/>until<sp/>it&apos;s<sp/>fixed<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>hack<sp/>has<sp/>another<sp/>part<sp/>on<sp/>GfxImageColorMap::GfxImageColorMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>inputLine;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nVals;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i]<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>bitMask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>nBits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>inputLine;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nVals;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&lt;<sp/>nBits)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(buf<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(*p++<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLine[i]<sp/>=<sp/>(Guchar)((buf<sp/>&gt;&gt;<sp/>(bits<sp/>-<sp/>nBits))<sp/>&amp;<sp/>bitMask);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>nBits;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imgLine;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageStream::skipLine()<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>str-&gt;doGetChars(inputLineSize,<sp/>inputLine);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StreamPredictor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">StreamPredictor::StreamPredictor(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>predictorA,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCompsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBitsA)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>predictor<sp/>=<sp/>predictorA;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>widthA;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>nCompsA;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>nBits<sp/>=<sp/>nBitsA;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>predLine<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>nVals<sp/>=<sp/>width<sp/>*<sp/>nComps;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>pixBytes<sp/>=<sp/>(nComps<sp/>*<sp/>nBits<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>rowBytes<sp/>=<sp/>((nVals<sp/>*<sp/>nBits<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3)<sp/>+<sp/>pixBytes;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;=<sp/>0<sp/>||<sp/>nComps<sp/>&lt;=<sp/>0<sp/>||<sp/>nBits<sp/>&lt;=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nComps<sp/>&gt;<sp/>gfxColorMaxComps<sp/>||</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>&gt;<sp/>16<sp/>||</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>nComps<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overflow<sp/>in<sp/>nVals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nVals<sp/>&gt;=<sp/>(INT_MAX<sp/>-<sp/>7)<sp/>/<sp/>nBits)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overflow<sp/>in<sp/>rowBytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>predLine<sp/>=<sp/>(Guchar<sp/>*)gmalloc(rowBytes);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>memset(predLine,<sp/>0,<sp/>rowBytes);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>predIdx<sp/>=<sp/>rowBytes;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">StreamPredictor::~StreamPredictor()<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>gfree(predLine);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StreamPredictor::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predIdx<sp/>&gt;=<sp/>rowBytes)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getNextLine())<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>predLine[predIdx];</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StreamPredictor::getChar()<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predIdx<sp/>&gt;=<sp/>rowBytes)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getNextLine())<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>predLine[predIdx++];</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StreamPredictor::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predIdx<sp/>&gt;=<sp/>rowBytes)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getNextLine())<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>rowBytes<sp/>-<sp/>predIdx;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>nChars<sp/>-<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>nChars<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer<sp/>+<sp/>n,<sp/>predLine<sp/>+<sp/>predIdx,<sp/>m);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>predIdx<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">GBool<sp/>StreamPredictor::getNextLine()<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curPred;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>Guchar<sp/>upLeftBuf[gfxColorMaxComps<sp/>*<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/>up,<sp/>upLeft,<sp/>p,<sp/>pa,<sp/>pb,<sp/>pc;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>Gulong<sp/>inBuf,<sp/>outBuf,<sp/>bitMask;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inBits,<sp/>outBits;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>kk;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>PNG<sp/>optimum<sp/>predictor<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predictor<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((curPred<sp/>=<sp/>str-&gt;getRawChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>curPred<sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>curPred<sp/>=<sp/>predictor;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>raw<sp/>line,<sp/>apply<sp/>PNG<sp/>(byte)<sp/>predictor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*rawCharLine<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[rowBytes<sp/>-<sp/>pixBytes];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>str-&gt;getRawChars(rowBytes<sp/>-<sp/>pixBytes,<sp/>rawCharLine);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>memset(upLeftBuf,<sp/>0,<sp/>pixBytes<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pixBytes;<sp/>i<sp/>&lt;<sp/>rowBytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>pixBytes;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upLeftBuf[j]<sp/>=<sp/>upLeftBuf[j-1];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>upLeftBuf[0]<sp/>=<sp/>predLine[i];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>rawCharLine[i<sp/>-<sp/>pixBytes])<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>pixBytes)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>ought<sp/>to<sp/>return<sp/>false,<sp/>but<sp/>some<sp/>(broken)<sp/>PDF<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contain<sp/>truncated<sp/>image<sp/>data,<sp/>and<sp/>Adobe<sp/>apparently<sp/>reads<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>partial<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>rawCharLine;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(curPred)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PNG<sp/>sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>predLine[i<sp/>-<sp/>pixBytes]<sp/>+<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PNG<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>predLine[i]<sp/>+<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PNG<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>((predLine[i<sp/>-<sp/>pixBytes]<sp/>+<sp/>predLine[i])<sp/>&gt;&gt;<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PNG<sp/>Paeth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>predLine[i<sp/>-<sp/>pixBytes];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>predLine[i];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upLeft<sp/>=<sp/>upLeftBuf[pixBytes];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>left<sp/>+<sp/>up<sp/>-<sp/>upLeft;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pa<sp/>=<sp/>p<sp/>-<sp/>left)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>pa<sp/>=<sp/>-pa;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pb<sp/>=<sp/>p<sp/>-<sp/>up)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>pb<sp/>=<sp/>-pb;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pc<sp/>=<sp/>p<sp/>-<sp/>upLeft)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>=<sp/>-pc;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa<sp/>&lt;=<sp/>pb<sp/>&amp;&amp;<sp/>pa<sp/>&lt;=<sp/>pc)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>left<sp/>+<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb<sp/>&lt;=<sp/>pc)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>up<sp/>+<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>upLeft<sp/>+<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PNG<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>predictor<sp/>or<sp/>TIFF<sp/>predictor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predLine[i]<sp/>=<sp/>(Guchar)c;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>rawCharLine;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>TIFF<sp/>(component)<sp/>predictor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predictor<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inBuf<sp/>=<sp/>predLine[pixBytes<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pixBytes;<sp/>i<sp/>&lt;<sp/>rowBytes;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-bit<sp/>add<sp/>is<sp/>just<sp/>xor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>inBuf<sp/>=<sp/>(inBuf<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>predLine[i];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[i]<sp/>^=<sp/>inBuf<sp/>&gt;&gt;<sp/>nComps;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pixBytes;<sp/>i<sp/>&lt;<sp/>rowBytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[i]<sp/>+=<sp/>predLine[i<sp/>-<sp/>nComps];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(upLeftBuf,<sp/>0,<sp/>nComps<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitMask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>nBits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inBuf<sp/>=<sp/>outBuf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inBits<sp/>=<sp/>outBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>k<sp/>=<sp/>pixBytes;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>width;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(kk<sp/>=<sp/>0;<sp/>kk<sp/>&lt;<sp/>nComps;<sp/>++kk)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inBits<sp/>&lt;<sp/>nBits)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inBuf<sp/>=<sp/>(inBuf<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(predLine[j++]<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inBits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upLeftBuf[kk]<sp/>=<sp/>(Guchar)((upLeftBuf[kk]<sp/>+</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inBuf<sp/>&gt;&gt;<sp/>(inBits<sp/>-<sp/>nBits)))<sp/>&amp;<sp/>bitMask);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inBits<sp/>-=<sp/>nBits;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outBuf<sp/>=<sp/>(outBuf<sp/>&lt;&lt;<sp/>nBits)<sp/>|<sp/>upLeftBuf[kk];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outBits<sp/>+=<sp/>nBits;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBits<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predLine[k++]<sp/>=<sp/>(Guchar)(outBuf<sp/>&gt;&gt;<sp/>(outBits<sp/>-<sp/>8));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outBits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>predLine[k++]<sp/>=<sp/>(Guchar)((outBuf<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>outBits))<sp/>+</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inBuf<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>outBits))<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>to<sp/>start<sp/>of<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>predIdx<sp/>=<sp/>pixBytes;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FileStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">FileStream::FileStream(<ref refid="class_goo_file" kindref="compound">GooFile</ref>*<sp/>fileA,<sp/>Goffset<sp/>startA,<sp/>GBool<sp/>limitedA,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA):</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref>(dictA,<sp/>lengthA)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>file<sp/>=<sp/>fileA;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>offset<sp/>=<sp/>start<sp/>=<sp/>startA;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>limited<sp/>=<sp/>limitedA;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>savePos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">FileStream::~FileStream()<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>close();</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*FileStream::copy()<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_stream" kindref="compound">FileStream</ref>(file,<sp/>start,<sp/>limited,<sp/>length,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*FileStream::makeSubStream(Goffset<sp/>startA,<sp/>GBool<sp/>limitedA,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_stream" kindref="compound">FileStream</ref>(file,<sp/>startA,<sp/>limitedA,<sp/>lengthA,<sp/>dictA);</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>savePos<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>offset<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileStream::close()<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>savePos;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">GBool<sp/>FileStream::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>bufPos<sp/>+=<sp/>bufEnd<sp/>-<sp/>buf;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>bufPos<sp/>&gt;=<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>bufPos<sp/>+<sp/>fileStreamBufSize<sp/>&gt;<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>start<sp/>+<sp/>length<sp/>-<sp/>bufPos;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>fileStreamBufSize;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>file-&gt;read(buf,<sp/>n,<sp/>offset);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>offset<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>bufEnd<sp/>=<sp/>buf<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufPtr<sp/>&gt;=<sp/>bufEnd)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileStream::setPos(Goffset<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>Goffset<sp/>size;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>bufPos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>file-&gt;size();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/>size)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>size<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>bufPos<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileStream::moveStart(Goffset<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>start<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CachedFileStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">CachedFileStream::CachedFileStream(<ref refid="class_cached_file" kindref="compound">CachedFile</ref><sp/>*ccA,<sp/>Goffset<sp/>startA,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>limitedA,<sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref>(dictA,<sp/>lengthA)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>cc<sp/>=<sp/>ccA;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>startA;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>limited<sp/>=<sp/>limitedA;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>savePos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">CachedFileStream::~CachedFileStream()</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>close();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>cc-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*CachedFileStream::copy()<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>cc-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cached_file_stream" kindref="compound">CachedFileStream</ref>(cc,<sp/>start,<sp/>limited,<sp/>length,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*CachedFileStream::makeSubStream(Goffset<sp/>startA,<sp/>GBool<sp/>limitedA,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>cc-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cached_file_stream" kindref="compound">CachedFileStream</ref>(cc,<sp/>startA,<sp/>limitedA,<sp/>lengthA,<sp/>dictA);</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CachedFileStream::reset()</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>savePos<sp/>=<sp/>(Guint)cc-&gt;tell();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>cc-&gt;seek(start,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>saved<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CachedFileStream::close()</highlight></codeline>
<codeline lineno="907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>cc-&gt;seek(savePos,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">GBool<sp/>CachedFileStream::fillBuf()</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>bufPos<sp/>+=<sp/>bufEnd<sp/>-<sp/>buf;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>bufPos<sp/>&gt;=<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>bufPos<sp/>+<sp/>cachedStreamBufSize<sp/>&gt;<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>start<sp/>+<sp/>length<sp/>-<sp/>bufPos;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>cachedStreamBufSize<sp/>-<sp/>(bufPos<sp/>%<sp/>cachedStreamBufSize);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>cc-&gt;read(buf,<sp/>1,<sp/>n);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>bufEnd<sp/>=<sp/>buf<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufPtr<sp/>&gt;=<sp/>bufEnd)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CachedFileStream::setPos(Goffset<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight></codeline>
<codeline lineno="937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>Guint<sp/>size;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>cc-&gt;seek(pos,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>bufPos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>cc-&gt;seek(0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>(Guint)cc-&gt;tell();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/>size)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>(Guint)size;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>cc-&gt;seek(-(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pos,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>bufPos<sp/>=<sp/>(Guint)cc-&gt;tell();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CachedFileStream::moveStart(Goffset<sp/>delta)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>start<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>bufPos<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MemStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal">MemStream::MemStream(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bufA,<sp/>Goffset<sp/>startA,<sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA):</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref>(dictA,<sp/>lengthA)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>bufA;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>startA;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>bufEnd<sp/>=<sp/>buf<sp/>+<sp/>start<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf<sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>needFree<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal">MemStream::~MemStream()<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needFree)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(buf);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*MemStream::copy()<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref>(buf,<sp/>start,<sp/>length,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*MemStream::makeSubStream(Goffset<sp/>startA,<sp/>GBool<sp/>limited,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref><sp/>*subStr;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>Goffset<sp/>newLength;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!limited<sp/>||<sp/>startA<sp/>+<sp/>lengthA<sp/>&gt;<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>newLength<sp/>=<sp/>start<sp/>+<sp/>length<sp/>-<sp/>startA;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>newLength<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>subStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref>(buf,<sp/>startA,<sp/>newLength,<sp/>dictA);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subStr;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf<sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemStream::close()<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChars<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufEnd<sp/>-<sp/>bufPtr<sp/>&lt;<sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(int)(bufEnd<sp/>-<sp/>bufPtr);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nChars;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>memcpy(buffer,<sp/>bufPtr,<sp/>n);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>bufPtr<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemStream::setPos(Goffset<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>Guint<sp/>i;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>start<sp/>+<sp/>length<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>start<sp/>+<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>start<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemStream::moveStart(Goffset<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>start<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>length<sp/>-=<sp/>delta;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf<sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EmbedStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">EmbedStream::EmbedStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>limitedA,<sp/>Goffset<sp/>lengthA):</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref>(dictA,<sp/>lengthA)<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>limited<sp/>=<sp/>limitedA;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">EmbedStream::~EmbedStream()<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*EmbedStream::copy()<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>copy()<sp/>on<sp/>EmbedStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*EmbedStream::makeSubStream(Goffset<sp/>start,<sp/>GBool<sp/>limitedA,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>lengthA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dictA)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>makeSubStream()<sp/>on<sp/>EmbedStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EmbedStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>!length)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>--length;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EmbedStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>!length)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;lookChar();</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EmbedStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChars<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limited<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>nChars<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;doGetChars(nChars,<sp/>buffer);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EmbedStream::setPos(Goffset<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>setPos()<sp/>on<sp/>EmbedStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">Goffset<sp/>EmbedStream::getStart()<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>getStart()<sp/>on<sp/>EmbedStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EmbedStream::moveStart(Goffset<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal:<sp/>called<sp/>moveStart()<sp/>on<sp/>EmbedStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASCIIHexStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">ASCIIHexStream::ASCIIHexStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">ASCIIHexStream::~ASCIIHexStream()<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ASCIIHexStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ASCIIHexStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1,<sp/>c2,<sp/>x;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(c1));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(c2));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c1<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(c1<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c1<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(c1<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c1<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(c1<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>character<sp/>&lt;{0:02x}&gt;<sp/>in<sp/>ASCIIHex<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>c1);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>c2<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>c2<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>c2<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>character<sp/>&lt;{0:02x}&gt;<sp/>in<sp/>ASCIIHex<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>c2);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>x<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ASCIIHexStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;/ASCIIHexDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal">GBool<sp/>ASCIIHexStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gFalse);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASCII85Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">ASCII85Stream::ASCII85Stream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">ASCII85Stream::~ASCII85Stream()<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ASCII85Stream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ASCII85Stream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>Gulong<sp/>t;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Lexer::isSpace(c[0]));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>||<sp/>c[0]<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[0]<sp/>=<sp/>b[1]<sp/>=<sp/>b[2]<sp/>=<sp/>b[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>5;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Lexer::isSpace(c[k]));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[k]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>||<sp/>c[k]<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>k<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>5<sp/>&amp;&amp;<sp/>(c[k]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>||<sp/>c[k]<sp/>==<sp/>EOF))<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++k;<sp/>k<sp/>&lt;<sp/>5;<sp/>++k)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>0x21<sp/>+<sp/>84;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>5;<sp/>++k)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t<sp/>*<sp/>85<sp/>+<sp/>(c[k]<sp/>-<sp/>0x21);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>3;<sp/>k<sp/>&gt;=<sp/>0;<sp/>--k)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>b[k]<sp/>=<sp/>(int)(t<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b[index];</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ASCII85Stream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;/ASCII85Decode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal">GBool<sp/>ASCII85Stream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gFalse);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LZWStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal">LZWStream::LZWStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>predictor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colors,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>earlyA):</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predictor<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_stream_predictor" kindref="compound">StreamPredictor</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>predictor,<sp/>columns,<sp/>colors,<sp/>bits);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pred-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pred;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>early<sp/>=<sp/>earlyA;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>clearTable();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal">LZWStream::~LZWStream()<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pred;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;getChar();</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqIndex<sp/>&gt;=<sp/>seqLength)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!processNextCode())<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seqBuf[seqIndex++];</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;lookChar();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqIndex<sp/>&gt;=<sp/>seqLength)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!processNextCode())<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seqBuf[seqIndex];</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LZWStream::getRawChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nChars;<sp/>++i)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[i]<sp/>=<sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWStream::getRawChar()<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;getChars(nChars,<sp/>buffer);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqIndex<sp/>&gt;=<sp/>seqLength)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!processNextCode())<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>seqLength<sp/>-<sp/>seqIndex;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>nChars<sp/>-<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>nChars<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer<sp/>+<sp/>n,<sp/>seqBuf<sp/>+<sp/>seqIndex,<sp/>m);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>seqIndex<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LZWStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>clearTable();</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">GBool<sp/>LZWStream::processNextCode()<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextLength;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>EOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>eod<sp/>and<sp/>clear-table<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/>start:</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>getCode();</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF<sp/>||<sp/>code<sp/>==<sp/>257)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>clearTable();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCode<sp/>&gt;=<sp/>4097)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>LZW<sp/>stream<sp/>-<sp/>expected<sp/>clear-table<sp/>code&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>clearTable();</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>next<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>nextLength<sp/>=<sp/>seqLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>seqBuf[0]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>seqLength<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>nextCode)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>seqLength<sp/>=<sp/><ref refid="classtable" kindref="compound">table</ref>[code].length;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>seqLength<sp/>-<sp/>1,<sp/>j<sp/>=<sp/>code;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seqBuf[i]<sp/>=<sp/><ref refid="classtable" kindref="compound">table</ref>[j].tail;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="classtable" kindref="compound">table</ref>[j].head;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>seqBuf[0]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>nextCode)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>seqBuf[seqLength]<sp/>=<sp/>newChar;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>++seqLength;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>LZW<sp/>stream<sp/>-<sp/>unexpected<sp/>code&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>newChar<sp/>=<sp/>seqBuf[0];</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtable" kindref="compound">table</ref>[nextCode].length<sp/>=<sp/>nextLength;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtable" kindref="compound">table</ref>[nextCode].head<sp/>=<sp/>prevCode;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtable" kindref="compound">table</ref>[nextCode].tail<sp/>=<sp/>newChar;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>++nextCode;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCode<sp/>+<sp/>early<sp/>==<sp/>512)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextBits<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCode<sp/>+<sp/>early<sp/>==<sp/>1024)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextBits<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCode<sp/>+<sp/>early<sp/>==<sp/>2048)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextBits<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>prevCode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>seqIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LZWStream::clearTable()<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>nextCode<sp/>=<sp/>258;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>nextBits<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>seqIndex<sp/>=<sp/>seqLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>first<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWStream::getCode()<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(inputBits<sp/>&lt;<sp/>nextBits)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBuf<sp/>=<sp/>(inputBuf<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(c<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>(inputBuf<sp/>&gt;&gt;<sp/>(inputBits<sp/>-<sp/>nextBits))<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>nextBits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>inputBits<sp/>-=<sp/>nextBits;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*LZWStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2<sp/>||<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!early)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;/EarlyChange<sp/>0<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;&gt;&gt;<sp/>/LZWDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">GBool<sp/>LZWStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RunLengthStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal">RunLengthStream::RunLengthStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal">RunLengthStream::~RunLengthStream()<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunLengthStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunLengthStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufPtr<sp/>&gt;=<sp/>bufEnd)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fillBuf())<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(int)(bufEnd<sp/>-<sp/>bufPtr);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>nChars<sp/>-<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>nChars<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer<sp/>+<sp/>n,<sp/>bufPtr,<sp/>m);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>bufPtr<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*RunLengthStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;/RunLengthDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal">GBool<sp/>RunLengthStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">GBool<sp/>RunLengthStream::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0x80<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>c<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)str-&gt;getChar();</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0x101<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)c;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>bufEnd<sp/>=<sp/>buf<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CCITTFaxStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal">CCITTFaxStream::CCITTFaxStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encodingA,<sp/>GBool<sp/>endOfLineA,</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>byteAlignA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columnsA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rowsA,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>endOfBlockA,<sp/>GBool<sp/>blackA):</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>encoding<sp/>=<sp/>encodingA;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>endOfLine<sp/>=<sp/>endOfLineA;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>byteAlign<sp/>=<sp/>byteAlignA;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>columns<sp/>=<sp/>columnsA;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(columns<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(columns<sp/>&gt;<sp/>INT_MAX<sp/>-<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>columns<sp/>=<sp/>INT_MAX<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>rows<sp/>=<sp/>rowsA;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>endOfBlockA;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>black<sp/>=<sp/>blackA;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>&lt;=<sp/>codingLine[0]<sp/>&lt;<sp/>codingLine[1]<sp/>&lt;<sp/>...<sp/>&lt;<sp/>codingLine[n]<sp/>=<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---&gt;<sp/>max<sp/>codingLine<sp/>size<sp/>=<sp/>columns<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>refLine<sp/>has<sp/>one<sp/>extra<sp/>guard<sp/>entry<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---&gt;<sp/>max<sp/>refLine<sp/>size<sp/>=<sp/>columns<sp/>+<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>codingLine<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn_checkoverflow(columns<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>refLine<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn_checkoverflow(columns<sp/>+<sp/>2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>refLine<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>codingLine[0]<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>nextLine2D<sp/>=<sp/>encoding<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>a0i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>outputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal">CCITTFaxStream::~CCITTFaxStream()<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>gfree(refLine);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>gfree(codingLine);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CCITTFaxStream::ccittReset(GBool<sp/>unfiltered)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unfiltered)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;unfilteredReset();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>nextLine2D<sp/>=<sp/>encoding<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>a0i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>outputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>EOF;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CCITTFaxStream::unfilteredReset()<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>ccittReset(gTrue);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CCITTFaxStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code1;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>ccittReset(gFalse);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>refLine<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>codingLine[0]<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>any<sp/>initial<sp/>zero<sp/>bits<sp/>and<sp/>end-of-line<sp/>marker,<sp/>and<sp/>get<sp/>the<sp/>2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encoding<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((code1<sp/>=<sp/>lookBits(12))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(12);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfLine<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>nextLine2D<sp/>=<sp/>!lookBits(1);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CCITTFaxStream::addPixels(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&gt;<sp/>codingLine[a0i])<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&gt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CCITTFax<sp/>row<sp/>is<sp/>wrong<sp/>length<sp/>({0:d})&quot;</highlight><highlight class="normal">,<sp/>a1);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a0i<sp/>&amp;<sp/>1)<sp/>^<sp/>blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++a0i;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>codingLine[a0i]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CCITTFaxStream::addPixelsNeg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&gt;<sp/>codingLine[a0i])<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&gt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CCITTFax<sp/>row<sp/>is<sp/>wrong<sp/>length<sp/>({0:d})&quot;</highlight><highlight class="normal">,<sp/>a1);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a0i<sp/>&amp;<sp/>1)<sp/>^<sp/>blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++a0i;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>codingLine[a0i]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&lt;<sp/>codingLine[a0i])<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>CCITTFax<sp/>code&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a0i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>a1<sp/>&lt;=<sp/>codingLine[a0i<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--a0i;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>codingLine[a0i]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CCITTFaxStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code1,<sp/>code2,<sp/>code3;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b1i,<sp/>blackPixels,<sp/>i,<sp/>bits;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>GBool<sp/>gotEOL;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>next<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputBits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>at<sp/>eof<sp/>just<sp/>return<sp/>EOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-D<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextLine2D)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>columns<sp/>&amp;&amp;<sp/>codingLine[i]<sp/>&lt;<sp/>columns;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>refLine[i]<sp/>=<sp/>codingLine[i];</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>columns<sp/>+<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>refLine[i]<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codingLine[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a0i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refLine[b1i-1]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&lt;<sp/>refLine[b1i]<sp/>&lt;<sp/>refLine[b1i+1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;=<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>at<sp/>left<sp/>edge:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>codingLine[a0i<sp/>=<sp/>0]<sp/>=<sp/>refLine[b1i<sp/>=<sp/>0]<sp/>=<sp/>0<sp/>is<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>at<sp/>right<sp/>edge:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>refLine[b1i]<sp/>=<sp/>refLine[b1i+1]<sp/>=<sp/>columns<sp/>is<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns<sp/>&amp;&amp;<sp/>!err)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>getTwoDimCode();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code1)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimPass:</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(b1i<sp/>+<sp/>1<sp/>&lt;<sp/>columns<sp/>+<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(refLine[b1i<sp/>+<sp/>1],<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refLine[b1i<sp/>+<sp/>1]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimHoriz:</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>code2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>+=<sp/>code3<sp/>=<sp/>getBlackCode();</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>+=<sp/>code3<sp/>=<sp/>getWhiteCode();</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>+=<sp/>code3<sp/>=<sp/>getWhiteCode();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>+=<sp/>code3<sp/>=<sp/>getBlackCode();</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(codingLine[a0i]<sp/>+<sp/>code1,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(codingLine[a0i]<sp/>+<sp/>code2,<sp/>blackPixels<sp/>^<sp/>1);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertR3:</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(refLine[b1i]<sp/>+<sp/>3,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertR2:</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(refLine[b1i]<sp/>+<sp/>2,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertR1:</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(refLine[b1i]<sp/>+<sp/>1,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVert0:</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(refLine[b1i],<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertL3:</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixelsNeg(refLine[b1i]<sp/>-<sp/>3,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--b1i;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertL2:</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixelsNeg(refLine[b1i]<sp/>-<sp/>2,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--b1i;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>twoDimVertL1:</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixelsNeg(refLine[b1i]<sp/>-<sp/>1,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--b1i;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++b1i;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(refLine[b1i]<sp/>&lt;=<sp/>codingLine[a0i]<sp/>&amp;&amp;<sp/>refLine[b1i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(b1i<sp/>&gt;<sp/>columns<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EOF:</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(columns,<sp/>0);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>2D<sp/>code<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code1);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPixels(columns,<sp/>0);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-D<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codingLine[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a0i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackPixels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blackPixels)<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>+=<sp/>code3<sp/>=<sp/>getBlackCode();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>+=<sp/>code3<sp/>=<sp/>getWhiteCode();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code3<sp/>&gt;=<sp/>64);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>addPixels(codingLine[a0i]<sp/>+<sp/>code1,<sp/>blackPixels);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>blackPixels<sp/>^=<sp/>1;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>end-of-line<sp/>marker,<sp/>skipping<sp/>over<sp/>any<sp/>extra<sp/>zero<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(if<sp/>EncodedByteAlign<sp/>is<sp/>true<sp/>and<sp/>EndOfLine<sp/>is<sp/>false,<sp/>there<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>&quot;false&quot;<sp/>EOL<sp/>markers<sp/>--<sp/>i.e.,<sp/>if<sp/>the<sp/>last<sp/>n<sp/>unused<sp/>bits<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row<sp/>i<sp/>are<sp/>set<sp/>to<sp/>zero,<sp/>and<sp/>the<sp/>first<sp/>11-n<sp/>bits<sp/>in<sp/>row<sp/>i+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happen<sp/>to<sp/>be<sp/>zero<sp/>--<sp/>so<sp/>we<sp/>don&apos;t<sp/>look<sp/>for<sp/>EOL<sp/>markers<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>gotEOL<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!endOfBlock<sp/>&amp;&amp;<sp/>row<sp/>==<sp/>rows<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfLine<sp/>||<sp/>!byteAlign)<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfLine)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code1<sp/>!=<sp/>EOF<sp/>&amp;&amp;<sp/>code1<sp/>!=<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(12);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>gotEOL<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>byte-align<sp/>the<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Adobe<sp/>apparently<sp/>doesn&apos;t<sp/>do<sp/>byte<sp/>alignment<sp/>after<sp/>EOL<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>I&apos;ve<sp/>seen<sp/>CCITT<sp/>image<sp/>data<sp/>streams<sp/>in<sp/>two<sp/>different<sp/>formats,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>with<sp/>the<sp/>byteAlign<sp/>flag<sp/>set:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>xx:x0:01:yy:yy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>xx:00:1y:yy:yy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>xx<sp/>is<sp/>the<sp/>previous<sp/>line,<sp/>yy<sp/>is<sp/>the<sp/>next<sp/>line,<sp/>and<sp/>colons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>separate<sp/>bytes.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byteAlign<sp/>&amp;&amp;<sp/>!gotEOL)<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputBits<sp/>&amp;=<sp/>~7;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>end<sp/>of<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lookBits(1)<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>2D<sp/>encoding<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eof<sp/>&amp;&amp;<sp/>encoding<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextLine2D<sp/>=<sp/>!lookBits(1);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>end-of-block<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock<sp/>&amp;&amp;<sp/>!endOfLine<sp/>&amp;&amp;<sp/>byteAlign)<sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case,<sp/>we<sp/>didn&apos;t<sp/>check<sp/>for<sp/>an<sp/>EOL<sp/>code<sp/>above,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(24);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>0x001001)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(12);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>gotEOL<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock<sp/>&amp;&amp;<sp/>gotEOL)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(12);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookBits(1);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>!=<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>RTC<sp/>code<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(12);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lookBits(1);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>an<sp/>end-of-line<sp/>marker<sp/>after<sp/>an<sp/>error<sp/>--<sp/>we<sp/>only<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>if<sp/>we<sp/>know<sp/>the<sp/>stream<sp/>contains<sp/>end-of-line<sp/>markers<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;just<sp/>plow<sp/>on&quot;<sp/>technique<sp/>tends<sp/>to<sp/>work<sp/>better<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&amp;&amp;<sp/>endOfLine)<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>lookBits(13);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code1<sp/>&gt;&gt;<sp/>1)<sp/>==<sp/>0x001)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(12);<sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>nextLine2D<sp/>=<sp/>!(code1<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>for<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[0]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputBits<sp/>=<sp/>codingLine[a0i<sp/>=<sp/>0];</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputBits<sp/>=<sp/>codingLine[a0i<sp/>=<sp/>1];</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>++row;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputBits<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(a0i<sp/>&amp;<sp/>1)<sp/>?<sp/>0x00<sp/>:<sp/>0xff;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>outputBits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputBits<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++a0i;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputBits<sp/>=<sp/>codingLine[a0i]<sp/>-<sp/>codingLine[a0i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputBits<sp/>&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;=<sp/>bits;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a0i<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>|=<sp/>0xff<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>bits);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>outputBits<sp/>-=<sp/>bits;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;=<sp/>outputBits;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a0i<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>|=<sp/>0xff<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>outputBits);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>outputBits;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>outputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codingLine[a0i]<sp/>&lt;<sp/>columns)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++a0i;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(a0i<sp/>&gt;<sp/>columns))<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>bits<sp/>{0:04x}<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>bits);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputBits<sp/>=<sp/>codingLine[a0i]<sp/>-<sp/>codingLine[a0i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;=<sp/>bits;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(black)<sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>^=<sp/>0xff;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>CCITTFaxStream::getTwoDimCode()<sp/>{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_i_t_t_code" kindref="compound">CCITTCode</ref><sp/>*p;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock)<sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>=<sp/>lookBits(7))<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;twoDimTab1[code];</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(p-&gt;bits);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>1;<sp/>n<sp/>&lt;=<sp/>7;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>=<sp/>lookBits(n))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>7<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;twoDimTab1[code];</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>two<sp/>dim<sp/>code<sp/>({0:04x})<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>CCITTFaxStream::getWhiteCode()<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_i_t_t_code" kindref="compound">CCITTCode</ref><sp/>*p;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock)<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(12);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>&gt;&gt;<sp/>5)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;whiteTab1[code];</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;whiteTab2[code<sp/>&gt;&gt;<sp/>3];</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(p-&gt;bits);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>1;<sp/>n<sp/>&lt;=<sp/>9;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(n);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>9<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;whiteTab2[code];</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>11;<sp/>n<sp/>&lt;=<sp/>12;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(n);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>12<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;whiteTab1[code];</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>white<sp/>code<sp/>({0:04x})<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eat<sp/>a<sp/>bit<sp/>and<sp/>return<sp/>a<sp/>positive<sp/>number<sp/>so<sp/>that<sp/>the<sp/>caller<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>into<sp/>an<sp/>infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>CCITTFaxStream::getBlackCode()<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_i_t_t_code" kindref="compound">CCITTCode</ref><sp/>*p;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(13);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>&gt;&gt;<sp/>7)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab1[code];</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>&gt;&gt;<sp/>9)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(code<sp/>&gt;&gt;<sp/>7)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab2[(code<sp/>&gt;&gt;<sp/>1)<sp/>-<sp/>64];</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab3[code<sp/>&gt;&gt;<sp/>7];</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(p-&gt;bits);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>2;<sp/>n<sp/>&lt;=<sp/>6;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(n);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>6<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab3[code];</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>7;<sp/>n<sp/>&lt;=<sp/>12;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(n);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>12<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab2[code<sp/>-<sp/>64];</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>10;<sp/>n<sp/>&lt;=<sp/>13;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>lookBits(n);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>13)<sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>13<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;blackTab1[code];</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;bits<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>eatBits(n);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;n;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>black<sp/>code<sp/>({0:04x})<sp/>in<sp/>CCITTFax<sp/>stream&quot;</highlight><highlight class="normal">,<sp/>code);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eat<sp/>a<sp/>bit<sp/>and<sp/>return<sp/>a<sp/>positive<sp/>number<sp/>so<sp/>that<sp/>the<sp/>caller<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>into<sp/>an<sp/>infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>eatBits(1);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>CCITTFaxStream::lookBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(inputBits<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputBits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>near<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream,<sp/>the<sp/>caller<sp/>may<sp/>ask<sp/>for<sp/>more<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>are<sp/>available,<sp/>but<sp/>there<sp/>may<sp/>still<sp/>be<sp/>a<sp/>valid<sp/>code<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however<sp/>many<sp/>bits<sp/>are<sp/>available<sp/>--<sp/>we<sp/>need<sp/>to<sp/>return<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(inputBuf<sp/>&lt;&lt;<sp/>(n<sp/>-<sp/>inputBits))<sp/>&amp;<sp/>(0xffffffff<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBuf<sp/>=<sp/>(inputBuf<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(inputBuf<sp/>&gt;&gt;<sp/>(inputBits<sp/>-<sp/>n))<sp/>&amp;<sp/>(0xffffffff<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>n));</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*CCITTFaxStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s1[50];</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(s1,<sp/></highlight><highlight class="stringliteral">&quot;/K<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>encoding);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(s1);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfLine)<sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;/EndOfLine<sp/>true<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byteAlign)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;/EncodedByteAlign<sp/>true<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>sprintf(s1,<sp/></highlight><highlight class="stringliteral">&quot;/Columns<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>columns);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>s-&gt;append(s1);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(s1,<sp/></highlight><highlight class="stringliteral">&quot;/Rows<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>rows);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(s1);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!endOfBlock)<sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;/EndOfBlock<sp/>false<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(black)<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;/BlackIs1<sp/>true<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>s-&gt;append(</highlight><highlight class="stringliteral">&quot;&gt;&gt;<sp/>/CCITTFaxDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal">GBool<sp/>CCITTFaxStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ENABLE_LIBJPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DCTStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IDCT<sp/>constants<sp/>(20.12<sp/>fixed<sp/>point<sp/>format)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCos1<sp/><sp/><sp/><sp/>4017<sp/><sp/><sp/><sp/><sp/>//<sp/>cos(pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctSin1<sp/><sp/><sp/><sp/><sp/>799<sp/><sp/><sp/><sp/><sp/>//<sp/>sin(pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCos3<sp/><sp/><sp/><sp/>3406<sp/><sp/><sp/><sp/><sp/>//<sp/>cos(3*pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctSin3<sp/><sp/><sp/><sp/>2276<sp/><sp/><sp/><sp/><sp/>//<sp/>sin(3*pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCos6<sp/><sp/><sp/><sp/>1567<sp/><sp/><sp/><sp/><sp/>//<sp/>cos(6*pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctSin6<sp/><sp/><sp/><sp/>3784<sp/><sp/><sp/><sp/><sp/>//<sp/>sin(6*pi/16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctSqrt2<sp/><sp/><sp/>5793<sp/><sp/><sp/><sp/><sp/>//<sp/>sqrt(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctSqrt1d2<sp/>2896<sp/><sp/><sp/><sp/><sp/>//<sp/>sqrt(2)<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>color<sp/>conversion<sp/>parameters<sp/>(16.16<sp/>fixed<sp/>point<sp/>format)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCrToR<sp/><sp/><sp/>91881<sp/><sp/><sp/><sp/>//<sp/><sp/>1.4020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCbToG<sp/><sp/>-22553<sp/><sp/><sp/><sp/>//<sp/>-0.3441363</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCrToG<sp/><sp/>-46802<sp/><sp/><sp/><sp/>//<sp/>-0.71413636</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctCbToB<sp/><sp/>116130<sp/><sp/><sp/><sp/>//<sp/><sp/>1.772</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clip<sp/>[-256,511]<sp/>--&gt;<sp/>[0,255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctClipOffset<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dctClipLength<sp/>768</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Guchar<sp/>dctClip[dctClipLength];</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dctClipInit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>zig<sp/>zag<sp/>decode<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dctZigZag[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/>1,<sp/><sp/>8,</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>16,<sp/><sp/>9,<sp/><sp/>2,</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/>3,<sp/>10,<sp/>17,<sp/>24,</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>32,<sp/>25,<sp/>18,<sp/>11,<sp/>4,</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/>5,<sp/>12,<sp/>19,<sp/>26,<sp/>33,<sp/>40,</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>48,<sp/>41,<sp/>34,<sp/>27,<sp/>20,<sp/>13,<sp/><sp/>6,</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/>7,<sp/>14,<sp/>21,<sp/>28,<sp/>35,<sp/>42,<sp/>49,<sp/>56,</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>57,<sp/>50,<sp/>43,<sp/>36,<sp/>29,<sp/>22,<sp/>15,</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/>23,<sp/>30,<sp/>37,<sp/>44,<sp/>51,<sp/>58,</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>59,<sp/>52,<sp/>45,<sp/>38,<sp/>31,</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>39,<sp/>46,<sp/>53,<sp/>60,</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>61,<sp/>54,<sp/>47,</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>55,<sp/>62,</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>63</highlight></codeline>
<codeline lineno="2436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal">DCTStream::DCTStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorXformA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion):</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/>colorXform<sp/>=<sp/>colorXformA;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>progressive<sp/>=<sp/>interleaved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>mcuWidth<sp/>=<sp/>mcuHeight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/>numComps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>dy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[i][j]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>frameBuf[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dctClipInit)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>-256;<sp/>i<sp/>&lt;<sp/>0;<sp/>++i)</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dctClip[dctClipOffset<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dctClip[dctClipOffset<sp/>+<sp/>i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>256;<sp/>i<sp/>&lt;<sp/>512;<sp/>++i)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dctClip[dctClipOffset<sp/>+<sp/>i]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>dctClipInit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal">DCTStream::~DCTStream()<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>close();</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::dctReset(GBool<sp/>unfiltered)<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unfiltered)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;unfilteredReset();</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>progressive<sp/>=<sp/>interleaved<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>numComps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>numQuantTables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/>numDCHuffTables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>numACHuffTables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>gotJFIFMarker<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>gotAdobeMarker<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>restartInterval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::unfilteredReset()<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>dctReset(gTrue);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>dctReset(gFalse);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readHeader())<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>MCU<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[0].hSample<sp/>=<sp/>compInfo[0].vSample<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>mcuWidth<sp/>=<sp/>compInfo[0].hSample;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>mcuHeight<sp/>=<sp/>compInfo[0].vSample;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].hSample<sp/>&gt;<sp/>mcuWidth)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcuWidth<sp/>=<sp/>compInfo[i].hSample;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].vSample<sp/>&gt;<sp/>mcuHeight)<sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mcuHeight<sp/>=<sp/>compInfo[i].vSample;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>mcuWidth<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>mcuHeight<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>figure<sp/>out<sp/>color<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorXform<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotJFIFMarker)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[0].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>82<sp/>&amp;&amp;<sp/>compInfo[1].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>71<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compInfo[2].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>66)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>ASCII<sp/>&quot;RGB&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progressive<sp/>||<sp/>!interleaved)<sp/>{</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>buffer<sp/>for<sp/>the<sp/>whole<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>bufWidth<sp/>=<sp/>((width<sp/>+<sp/>mcuWidth<sp/>-<sp/>1)<sp/>/<sp/>mcuWidth)<sp/>*<sp/>mcuWidth;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>bufHeight<sp/>=<sp/>((height<sp/>+<sp/>mcuHeight<sp/>-<sp/>1)<sp/>/<sp/>mcuHeight)<sp/>*<sp/>mcuHeight;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufWidth<sp/>&lt;=<sp/>0<sp/>||<sp/>bufHeight<sp/>&lt;=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>bufWidth<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/>bufWidth<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int))<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>image<sp/>size<sp/>in<sp/>DCT<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frameBuf[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(bufWidth<sp/>*<sp/>bufHeight,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(frameBuf[i],<sp/>0,<sp/>bufWidth<sp/>*<sp/>bufHeight<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restartMarker<sp/>=<sp/>0xd0;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restart();</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readScan();</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(readHeader());</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeImage();</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>buffer<sp/>for<sp/>one<sp/>row<sp/>of<sp/>MCUs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>bufWidth<sp/>=<sp/>((width<sp/>+<sp/>mcuWidth<sp/>-<sp/>1)<sp/>/<sp/>mcuWidth)<sp/>*<sp/>mcuWidth;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mcuHeight;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>rowBuf[i][j]<sp/>=<sp/>(Guchar<sp/>*)gmallocn(bufWidth,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guchar));</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>mcuHeight;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>restartMarker<sp/>=<sp/>0xd0;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>restart();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::close()<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree(rowBuf[i][j]);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[i][j]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(frameBuf[i]);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>frameBuf[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>FilterStream::close();</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progressive<sp/>||<sp/>!interleaved)<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>frameBuf[comp][y<sp/>*<sp/>bufWidth<sp/>+<sp/>x];</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++comp<sp/>==<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++x<sp/>==<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>++y;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&gt;=<sp/>mcuHeight)<sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readMCURow())<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>rowBuf[comp][dy][x];</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++comp<sp/>==<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++x<sp/>==<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>++y;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>++dy;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readTrailer();</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progressive<sp/>||<sp/>!interleaved)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frameBuf[comp][y<sp/>*<sp/>bufWidth<sp/>+<sp/>x];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&gt;=<sp/>mcuHeight)<sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readMCURow())<sp/>{</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rowBuf[comp][dy][x];</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::restart()<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>restartCtr<sp/>=<sp/>restartInterval;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].prevDC<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/>eobRun<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>row<sp/>of<sp/>MCUs<sp/>from<sp/>a<sp/>sequential<sp/>JPEG<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal">GBool<sp/>DCTStream::readMCURow()<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data1[64];</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>Guchar<sp/>data2[64];</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p1,<sp/>*p2;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pY,<sp/>pCb,<sp/>pCr,<sp/>pR,<sp/>pG,<sp/>pB;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>v,<sp/>horiz,<sp/>vert,<sp/>hSub,<sp/>vSub;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3,<sp/>x4,<sp/>y4,<sp/>x5,<sp/>y5,<sp/>cc,<sp/>i;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>0;<sp/>x1<sp/>&lt;<sp/>width;<sp/>x1<sp/>+=<sp/>mcuWidth)<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>restart<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(restartInterval<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>restartCtr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>readMarker();</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>restartMarker)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>data:<sp/>incorrect<sp/>restart<sp/>marker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++restartMarker<sp/>==<sp/>0xd8)</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>restartMarker<sp/>=<sp/>0xd0;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restart();</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>one<sp/>MCU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>0;<sp/>cc<sp/>&lt;<sp/>numComps;<sp/>++cc)<sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>compInfo[cc].hSample;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>compInfo[cc].vSample;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>mcuWidth<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vert<sp/>=<sp/>mcuHeight<sp/>/<sp/>v;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hSub<sp/>=<sp/>horiz<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vSub<sp/>=<sp/>vert<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>y2<sp/>+=<sp/>vert)<sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>x2<sp/>+=<sp/>horiz)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(scanInfo.dcHuffTable[cc]<sp/>&gt;=<sp/>4)<sp/>||<sp/>unlikely(scanInfo.acHuffTable[cc]<sp/>&gt;=<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readDataUnit(&amp;dcHuffTables[scanInfo.dcHuffTable[cc]],</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;acHuffTables[scanInfo.acHuffTable[cc]],</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;compInfo[cc].prevDC,</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data1))<sp/>{</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transformDataUnit(quantTables[compInfo[cc].quantTable],</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data1,<sp/>data2);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSub<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>vSub<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;rowBuf[cc][y2+y3][x1+x2];</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[0]<sp/>=<sp/>data2[i];</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[1]<sp/>=<sp/>data2[i+1];</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[2]<sp/>=<sp/>data2[i+2];</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[3]<sp/>=<sp/>data2[i+3];</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[4]<sp/>=<sp/>data2[i+4];</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[5]<sp/>=<sp/>data2[i+5];</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[6]<sp/>=<sp/>data2[i+6];</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[7]<sp/>=<sp/>data2[i+7];</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSub<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>vSub<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>16;<sp/>y3<sp/>+=<sp/>2,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;rowBuf[cc][y2+y3][x1+x2];</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>&amp;rowBuf[cc][y2+y3+1][x1+x2];</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[0]<sp/>=<sp/>p1[1]<sp/>=<sp/>p2[0]<sp/>=<sp/>p2[1]<sp/>=<sp/>data2[i];</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[2]<sp/>=<sp/>p1[3]<sp/>=<sp/>p2[2]<sp/>=<sp/>p2[3]<sp/>=<sp/>data2[i+1];</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[4]<sp/>=<sp/>p1[5]<sp/>=<sp/>p2[4]<sp/>=<sp/>p2[5]<sp/>=<sp/>data2[i+2];</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[6]<sp/>=<sp/>p1[7]<sp/>=<sp/>p2[6]<sp/>=<sp/>p2[7]<sp/>=<sp/>data2[i+3];</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[8]<sp/>=<sp/>p1[9]<sp/>=<sp/>p2[8]<sp/>=<sp/>p2[9]<sp/>=<sp/>data2[i+4];</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[10]<sp/>=<sp/>p1[11]<sp/>=<sp/>p2[10]<sp/>=<sp/>p2[11]<sp/>=<sp/>data2[i+5];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[12]<sp/>=<sp/>p1[13]<sp/>=<sp/>p2[12]<sp/>=<sp/>p2[13]<sp/>=<sp/>data2[i+6];</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[14]<sp/>=<sp/>p1[15]<sp/>=<sp/>p2[14]<sp/>=<sp/>p2[15]<sp/>=<sp/>data2[i+7];</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>y4<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>y4<sp/>+=<sp/>vSub)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x3<sp/>=<sp/>0,<sp/>x4<sp/>=<sp/>0;<sp/>x3<sp/>&lt;<sp/>8;<sp/>++x3,<sp/>x4<sp/>+=<sp/>hSub)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y5<sp/>=<sp/>0;<sp/>y5<sp/>&lt;<sp/>vSub;<sp/>++y5)</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x5<sp/>=<sp/>0;<sp/>x5<sp/>&lt;<sp/>hSub;<sp/>++x5)</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[cc][y2+y4+y5][x1+x2+x4+x5]<sp/>=<sp/>data2[i];</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>--restartCtr;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>space<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorXform)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>YCbCr<sp/>to<sp/>RGB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>++y2)<sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>++x2)<sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pY<sp/>=<sp/>rowBuf[0][y2][x1+x2];</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCb<sp/>=<sp/>rowBuf[1][y2][x1+x2]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCr<sp/>=<sp/>rowBuf[2][y2][x1+x2]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pR<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCrToR<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[0][y2][x1+x2]<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pR];</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pG<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToG<sp/>*<sp/>pCb<sp/>+<sp/>dctCrToG<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[1][y2][x1+x2]<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pG];</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pB<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToB<sp/>*<sp/>pCb<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[2][y2][x1+x2]<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pB];</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>YCbCrK<sp/>to<sp/>CMYK<sp/>(K<sp/>is<sp/>passed<sp/>through<sp/>unchanged)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>++y2)<sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>++x2)<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pY<sp/>=<sp/>rowBuf[0][y2][x1+x2];</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCb<sp/>=<sp/>rowBuf[1][y2][x1+x2]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCr<sp/>=<sp/>rowBuf[2][y2][x1+x2]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pR<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCrToR<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[0][y2][x1+x2]<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pR];</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pG<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToG<sp/>*<sp/>pCb<sp/>+<sp/>dctCrToG<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[1][y2][x1+x2]<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pG];</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pB<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToB<sp/>*<sp/>pCb<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowBuf[2][y2][x1+x2]<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pB];</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>scan<sp/>from<sp/>a<sp/>progressive<sp/>or<sp/>non-interleaved<sp/>JPEG<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::readScan()<sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data[64];</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>dx1,<sp/>dy1,<sp/>x2,<sp/>y2,<sp/>y3,<sp/>cc,<sp/>i;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>v,<sp/>horiz,<sp/>vert,<sp/>vSub;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p1;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.numComps<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>0;<sp/>cc<sp/>&lt;<sp/>numComps;<sp/>++cc)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.comp[cc])<sp/>{</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>dx1<sp/>=<sp/>mcuWidth<sp/>/<sp/>compInfo[cc].hSample;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>dy1<sp/>=<sp/>mcuHeight<sp/>/<sp/>compInfo[cc].vSample;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>dx1<sp/>=<sp/>mcuWidth;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>dy1<sp/>=<sp/>mcuHeight;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y1<sp/>=<sp/>0;<sp/>y1<sp/>&lt;<sp/>height;<sp/>y1<sp/>+=<sp/>dy1)<sp/>{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>0;<sp/>x1<sp/>&lt;<sp/>width;<sp/>x1<sp/>+=<sp/>dx1)<sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>restart<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(restartInterval<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>restartCtr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>readMarker();</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>restartMarker)<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>data:<sp/>incorrect<sp/>restart<sp/>marker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++restartMarker<sp/>==<sp/>0xd8)<sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restartMarker<sp/>=<sp/>0xd0;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>restart();</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>one<sp/>MCU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>0;<sp/>cc<sp/>&lt;<sp/>numComps;<sp/>++cc)<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scanInfo.comp[cc])<sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>compInfo[cc].hSample;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>compInfo[cc].vSample;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>mcuWidth<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>vert<sp/>=<sp/>mcuHeight<sp/>/<sp/>v;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>vSub<sp/>=<sp/>vert<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>dy1;<sp/>y2<sp/>+=<sp/>vert)<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>dx1;<sp/>x2<sp/>+=<sp/>horiz)<sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pull<sp/>out<sp/>the<sp/>current<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[cc][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>(x1+x2)];</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>p1[0];</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+1]<sp/>=<sp/>p1[1];</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+2]<sp/>=<sp/>p1[2];</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+3]<sp/>=<sp/>p1[3];</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+4]<sp/>=<sp/>p1[4];</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+5]<sp/>=<sp/>p1[5];</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+6]<sp/>=<sp/>p1[6];</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i+7]<sp/>=<sp/>p1[7];</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth<sp/>*<sp/>vSub;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>one<sp/>data<sp/>unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progressive)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readProgressiveDataUnit(</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dcHuffTables[scanInfo.dcHuffTable[cc]],</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;acHuffTables[scanInfo.acHuffTable[cc]],</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;compInfo[cc].prevDC,</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data))<sp/>{</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readDataUnit(&amp;dcHuffTables[scanInfo.dcHuffTable[cc]],</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;acHuffTables[scanInfo.acHuffTable[cc]],</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;compInfo[cc].prevDC,</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data))<sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>data<sp/>unit<sp/>into<sp/>frameBuf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[cc][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>(x1+x2)];</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[0]<sp/>=<sp/>data[i];</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[1]<sp/>=<sp/>data[i+1];</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[2]<sp/>=<sp/>data[i+2];</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[3]<sp/>=<sp/>data[i+3];</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[4]<sp/>=<sp/>data[i+4];</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[5]<sp/>=<sp/>data[i+5];</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[6]<sp/>=<sp/>data[i+6];</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[7]<sp/>=<sp/>data[i+7];</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth<sp/>*<sp/>vSub;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--restartCtr;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>data<sp/>unit<sp/>from<sp/>a<sp/>sequential<sp/>JPEG<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal">GBool<sp/>DCTStream::readDataUnit(<ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*dcHuffTable,</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*acHuffTable,</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*prevDC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data[64])<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run,<sp/>size,<sp/>amp;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/>readHuffSym(dcHuffTable))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((amp<sp/>=<sp/>readAmp(size))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>*prevDC<sp/>+=<sp/>amp;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>run<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>readHuffSym(acHuffTable))<sp/>==<sp/>0xf0<sp/>&amp;&amp;<sp/>run<sp/>&lt;<sp/>0x30)<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>+=<sp/>0x10;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>+=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>readAmp(size);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amp<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>run;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/>data[j]<sp/>=<sp/>amp;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>data<sp/>unit<sp/>from<sp/>a<sp/>sequential<sp/>JPEG<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal">GBool<sp/>DCTStream::readProgressiveDataUnit(<ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*dcHuffTable,</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*acHuffTable,</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*prevDC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data[64])<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run,<sp/>size,<sp/>amp,<sp/>bit,<sp/>c;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>DC<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>scanInfo.firstCoeff;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.ah<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/>readHuffSym(dcHuffTable))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((amp<sp/>=<sp/>readAmp(size))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>+=<sp/>(*prevDC<sp/>+=<sp/>amp)<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>+=<sp/>bit<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.lastCoeff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>an<sp/>EOB<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eobRun<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;=<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[j]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit)<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[j]<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>--eobRun;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>AC<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;=<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>readHuffSym(acHuffTable))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ZRL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xf0)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>16<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[j]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++k;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit)<sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[j]<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOB<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0x0f)<sp/>==<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eobRun<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>j;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>eobRun<sp/>=<sp/>(eobRun<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>bit;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eobRun<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;=<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[j]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit)<sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[j]<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--eobRun;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>run<sp/>and<sp/>one<sp/>AC<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((amp<sp/>=<sp/>readAmp(size))<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;=<sp/>run<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>scanInfo.lastCoeff;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(data[j]<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit)<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[j]<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>dctZigZag[i++];</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[j]<sp/>=<sp/>amp<sp/>&lt;&lt;<sp/>scanInfo.al;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decode<sp/>a<sp/>progressive<sp/>JPEG<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::decodeImage()<sp/>{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataIn[64];</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>Guchar<sp/>dataOut[64];</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>Gushort<sp/>*quantTable;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pY,<sp/>pCb,<sp/>pCr,<sp/>pR,<sp/>pG,<sp/>pB;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3,<sp/>x4,<sp/>y4,<sp/>x5,<sp/>y5,<sp/>cc,<sp/>i;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>v,<sp/>horiz,<sp/>vert,<sp/>hSub,<sp/>vSub;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p0,<sp/>*p1,<sp/>*p2;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y1<sp/>=<sp/>0;<sp/>y1<sp/>&lt;<sp/>bufHeight;<sp/>y1<sp/>+=<sp/>mcuHeight)<sp/>{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>0;<sp/>x1<sp/>&lt;<sp/>bufWidth;<sp/>x1<sp/>+=<sp/>mcuWidth)<sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>0;<sp/>cc<sp/>&lt;<sp/>numComps;<sp/>++cc)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>quantTable<sp/>=<sp/>quantTables[compInfo[cc].quantTable];</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>compInfo[cc].hSample;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>compInfo[cc].vSample;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>mcuWidth<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>vert<sp/>=<sp/>mcuHeight<sp/>/<sp/>v;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/>hSub<sp/>=<sp/>horiz<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>vSub<sp/>=<sp/>vert<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>y2<sp/>+=<sp/>vert)<sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>x2<sp/>+=<sp/>horiz)<sp/>{</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pull<sp/>out<sp/>the<sp/>coded<sp/>data<sp/>unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[cc][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>(x1+x2)];</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i]<sp/><sp/><sp/>=<sp/>p1[0];</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+1]<sp/>=<sp/>p1[1];</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+2]<sp/>=<sp/>p1[2];</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+3]<sp/>=<sp/>p1[3];</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+4]<sp/>=<sp/>p1[4];</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+5]<sp/>=<sp/>p1[5];</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+6]<sp/>=<sp/>p1[6];</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataIn[i+7]<sp/>=<sp/>p1[7];</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth<sp/>*<sp/>vSub;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformDataUnit(quantTable,<sp/>dataIn,<sp/>dataOut);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>back<sp/>into<sp/>frameBuf,<sp/>doing<sp/>replication<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subsampled<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[cc][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>(x1+x2)];</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSub<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>vSub<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[0]<sp/>=<sp/>dataOut[i]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[1]<sp/>=<sp/>dataOut[i+1]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[2]<sp/>=<sp/>dataOut[i+2]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[3]<sp/>=<sp/>dataOut[i+3]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[4]<sp/>=<sp/>dataOut[i+4]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[5]<sp/>=<sp/>dataOut[i+5]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[6]<sp/>=<sp/>dataOut[i+6]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[7]<sp/>=<sp/>dataOut[i+7]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSub<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>vSub<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p1<sp/>+<sp/>bufWidth;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>16;<sp/>y3<sp/>+=<sp/>2,<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[0]<sp/>=<sp/>p1[1]<sp/>=<sp/>p2[0]<sp/>=<sp/>p2[1]<sp/>=<sp/>dataOut[i]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[2]<sp/>=<sp/>p1[3]<sp/>=<sp/>p2[2]<sp/>=<sp/>p2[3]<sp/>=<sp/>dataOut[i+1]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[4]<sp/>=<sp/>p1[5]<sp/>=<sp/>p2[4]<sp/>=<sp/>p2[5]<sp/>=<sp/>dataOut[i+2]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[6]<sp/>=<sp/>p1[7]<sp/>=<sp/>p2[6]<sp/>=<sp/>p2[7]<sp/>=<sp/>dataOut[i+3]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[8]<sp/>=<sp/>p1[9]<sp/>=<sp/>p2[8]<sp/>=<sp/>p2[9]<sp/>=<sp/>dataOut[i+4]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[10]<sp/>=<sp/>p1[11]<sp/>=<sp/>p2[10]<sp/>=<sp/>p2[11]<sp/>=<sp/>dataOut[i+5]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[12]<sp/>=<sp/>p1[13]<sp/>=<sp/>p2[12]<sp/>=<sp/>p2[13]<sp/>=<sp/>dataOut[i+6]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[14]<sp/>=<sp/>p1[15]<sp/>=<sp/>p2[14]<sp/>=<sp/>p2[15]<sp/>=<sp/>dataOut[i+7]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>+=<sp/>bufWidth<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y3<sp/>=<sp/>0,<sp/>y4<sp/>=<sp/>0;<sp/>y3<sp/>&lt;<sp/>8;<sp/>++y3,<sp/>y4<sp/>+=<sp/>vSub)<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x3<sp/>=<sp/>0,<sp/>x4<sp/>=<sp/>0;<sp/>x3<sp/>&lt;<sp/>8;<sp/>++x3,<sp/>x4<sp/>+=<sp/>hSub)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p1<sp/>+<sp/>x4;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y5<sp/>=<sp/>0;<sp/>y5<sp/>&lt;<sp/>vSub;<sp/>++y5)<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x5<sp/>=<sp/>0;<sp/>x5<sp/>&lt;<sp/>hSub;<sp/>++x5)<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[x5]<sp/>=<sp/>dataOut[i]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>+=<sp/>bufWidth;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>+=<sp/>bufWidth<sp/>*<sp/>vSub;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>space<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorXform)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>YCbCr<sp/>to<sp/>RGB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>++y2)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>&amp;frameBuf[0][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[1][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>&amp;frameBuf[2][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>++x2)<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pY<sp/>=<sp/>*p0;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCb<sp/>=<sp/>*p1<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCr<sp/>=<sp/>*p2<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pR<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCrToR<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p0++<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pR];</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pG<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToG<sp/>*<sp/>pCb<sp/>+<sp/>dctCrToG<sp/>*<sp/>pCr<sp/>+</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p1++<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pG];</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pB<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToB<sp/>*<sp/>pCb<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>dctClip[dctClipOffset<sp/>+<sp/>pB];</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>YCbCrK<sp/>to<sp/>CMYK<sp/>(K<sp/>is<sp/>passed<sp/>through<sp/>unchanged)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y2<sp/>=<sp/>0;<sp/>y2<sp/>&lt;<sp/>mcuHeight;<sp/>++y2)<sp/>{</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>&amp;frameBuf[0][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>&amp;frameBuf[1][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>&amp;frameBuf[2][(y1+y2)<sp/>*<sp/>bufWidth<sp/>+<sp/>x1];</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x2<sp/>=<sp/>0;<sp/>x2<sp/>&lt;<sp/>mcuWidth;<sp/>++x2)<sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pY<sp/>=<sp/>*p0;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCb<sp/>=<sp/>*p1<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCr<sp/>=<sp/>*p2<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pR<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCrToR<sp/>*<sp/>pCr<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p0++<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pR];</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pG<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToG<sp/>*<sp/>pCb<sp/>+<sp/>dctCrToG<sp/>*<sp/>pCr<sp/>+</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p1++<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pG];</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pB<sp/>=<sp/>((pY<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>dctCbToB<sp/>*<sp/>pCb<sp/>+<sp/>32768)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>255<sp/>-<sp/>dctClip[dctClipOffset<sp/>+<sp/>pB];</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Transform<sp/>one<sp/>data<sp/>unit<sp/>--<sp/>this<sp/>performs<sp/>the<sp/>dequantization<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IDCT<sp/>steps.<sp/><sp/>This<sp/>IDCT<sp/>algorithm<sp/>is<sp/>taken<sp/>from:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Christoph<sp/>Loeffler,<sp/>Adriaan<sp/>Ligtenberg,<sp/>George<sp/>S.<sp/>Moschytz,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&quot;Practical<sp/>Fast<sp/>1-D<sp/>DCT<sp/>Algorithms<sp/>with<sp/>11<sp/>Multiplications&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>IEEE<sp/>Intl.<sp/>Conf.<sp/>on<sp/>Acoustics,<sp/>Speech<sp/>&amp;<sp/>Signal<sp/>Processing,<sp/>1989,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>988-991.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>stage<sp/>numbers<sp/>mentioned<sp/>in<sp/>the<sp/>comments<sp/>refer<sp/>to<sp/>Figure<sp/>1<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>paper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::transformDataUnit(Gushort<sp/>*quantTable,</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataIn[64],<sp/>Guchar<sp/>dataOut[64])<sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v0,<sp/>v1,<sp/>v2,<sp/>v3,<sp/>v4,<sp/>v5,<sp/>v6,<sp/>v7,<sp/>t;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dequant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/>dataIn[i]<sp/>*=<sp/>quantTable[i];</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>DCT<sp/>on<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>dataIn<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>all-zero<sp/>AC<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[2]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[3]<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>p[4]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[5]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[6]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[7]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>p[0]<sp/>+<sp/>512)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[4]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[5]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[6]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[7]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>p[0]<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>p[4]<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>p[6];</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(dctSqrt1d2<sp/>*<sp/>(p[1]<sp/>-<sp/>p[7])<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>(dctSqrt1d2<sp/>*<sp/>(p[1]<sp/>+<sp/>p[7])<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>p[3]<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>p[5]<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v0<sp/>-<sp/>v1+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(v0<sp/>+<sp/>v1<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v2<sp/>*<sp/>dctSin6<sp/>+<sp/>v3<sp/>*<sp/>dctCos6<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(v2<sp/>*<sp/>dctCos6<sp/>-<sp/>v3<sp/>*<sp/>dctSin6<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v4<sp/>-<sp/>v6<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(v4<sp/>+<sp/>v6<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v7<sp/>+<sp/>v5<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>(v7<sp/>-<sp/>v5<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v0<sp/>-<sp/>v3<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(v0<sp/>+<sp/>v3<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v1<sp/>-<sp/>v2<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(v1<sp/>+<sp/>v2<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v4<sp/>*<sp/>dctSin3<sp/>+<sp/>v7<sp/>*<sp/>dctCos3<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(v4<sp/>*<sp/>dctCos3<sp/>-<sp/>v7<sp/>*<sp/>dctSin3<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v5<sp/>*<sp/>dctSin1<sp/>+<sp/>v6<sp/>*<sp/>dctCos1<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>(v5<sp/>*<sp/>dctCos1<sp/>-<sp/>v6<sp/>*<sp/>dctSin1<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>v0<sp/>+<sp/>v7;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>p[7]<sp/>=<sp/>v0<sp/>-<sp/>v7;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>v1<sp/>+<sp/>v6;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>p[6]<sp/>=<sp/>v1<sp/>-<sp/>v6;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>v2<sp/>+<sp/>v5;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>p[5]<sp/>=<sp/>v2<sp/>-<sp/>v5;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>v3<sp/>+<sp/>v4;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>p[4]<sp/>=<sp/>v3<sp/>-<sp/>v4;</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>DCT<sp/>on<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>dataIn<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>all-zero<sp/>AC<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[1*8]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[2*8]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[3*8]<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>p[4*8]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[5*8]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[6*8]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>p[7*8]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>dataIn[i+0]<sp/>+<sp/>8192)<sp/>&gt;&gt;<sp/>14;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[4*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[5*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[6*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[7*8]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>p[0*8]<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(dctSqrt2<sp/>*<sp/>p[4*8]<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>p[2*8];</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>p[6*8];</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(dctSqrt1d2<sp/>*<sp/>(p[1*8]<sp/>-<sp/>p[7*8])<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>(dctSqrt1d2<sp/>*<sp/>(p[1*8]<sp/>+<sp/>p[7*8])<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>p[3*8];</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>p[5*8];</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v0<sp/>-<sp/>v1<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(v0<sp/>+<sp/>v1<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v2<sp/>*<sp/>dctSin6<sp/>+<sp/>v3<sp/>*<sp/>dctCos6<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(v2<sp/>*<sp/>dctCos6<sp/>-<sp/>v3<sp/>*<sp/>dctSin6<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v4<sp/>-<sp/>v6<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(v4<sp/>+<sp/>v6<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v7<sp/>+<sp/>v5<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>(v7<sp/>-<sp/>v5<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v0<sp/>-<sp/>v3<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>(v0<sp/>+<sp/>v3<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v1<sp/>-<sp/>v2<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(v1<sp/>+<sp/>v2<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v4<sp/>*<sp/>dctSin3<sp/>+<sp/>v7<sp/>*<sp/>dctCos3<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>v4<sp/>=<sp/>(v4<sp/>*<sp/>dctCos3<sp/>-<sp/>v7<sp/>*<sp/>dctSin3<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>v7<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(v5<sp/>*<sp/>dctSin1<sp/>+<sp/>v6<sp/>*<sp/>dctCos1<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>v5<sp/>=<sp/>(v5<sp/>*<sp/>dctCos1<sp/>-<sp/>v6<sp/>*<sp/>dctSin1<sp/>+<sp/>2048)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>v6<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>p[0*8]<sp/>=<sp/>v0<sp/>+<sp/>v7;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>p[7*8]<sp/>=<sp/>v0<sp/>-<sp/>v7;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/>p[1*8]<sp/>=<sp/>v1<sp/>+<sp/>v6;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/>p[6*8]<sp/>=<sp/>v1<sp/>-<sp/>v6;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>p[2*8]<sp/>=<sp/>v2<sp/>+<sp/>v5;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/>p[5*8]<sp/>=<sp/>v2<sp/>-<sp/>v5;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/>p[3*8]<sp/>=<sp/>v3<sp/>+<sp/>v4;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>p[4*8]<sp/>=<sp/>v3<sp/>-<sp/>v4;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>8-bit<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>dctClipOffset<sp/>+<sp/>128<sp/>+<sp/>((dataIn[i]<sp/>+<sp/>8)<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(ix<sp/>&lt;<sp/>0<sp/>||<sp/>ix<sp/>&gt;=<sp/>dctClipLength))<sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataOut[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataOut[i]<sp/>=<sp/>dctClip[ix];</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::readHuffSym(<ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*<ref refid="classtable" kindref="compound">table</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/>Gushort<sp/>code;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codeBits;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/>codeBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>a<sp/>bit<sp/>to<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9999;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>=<sp/>(code<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>bit;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>++codeBits;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>up<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>table-&gt;firstCode[codeBits])<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>-<sp/>table-&gt;firstCode[codeBits]<sp/>&lt;<sp/>table-&gt;numCodes[codeBits])<sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>-=<sp/>table-&gt;firstCode[codeBits];</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table-&gt;sym[table-&gt;firstSym[codeBits]<sp/>+<sp/>code];</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codeBits<sp/>&lt;<sp/>16);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>Huffman<sp/>code<sp/>in<sp/>DCT<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9999;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::readAmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amp,<sp/>bit;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>amp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bits<sp/>=<sp/>0;<sp/>bits<sp/>&lt;<sp/>size;<sp/>++bits)<sp/>{</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bit<sp/>=<sp/>readBit())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9999;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>(amp<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>bit;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amp<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>(size<sp/>-<sp/>1)))</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>amp<sp/>-=<sp/>(1<sp/>&lt;&lt;<sp/>size)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>amp;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::readBit()<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>c2;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputBits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/>0xff);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>!=<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>data:<sp/>missing<sp/>00<sp/>after<sp/>ff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBuf<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>bit<sp/>=<sp/>(inputBuf<sp/>&gt;&gt;<sp/>(inputBits<sp/>-<sp/>1))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>--inputBits;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal">GBool<sp/>DCTStream::readHeader()<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/>GBool<sp/>doScan;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>doScan<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!doScan)<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>readMarker();</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xc0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOF0<sp/>(sequential)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xc1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOF1<sp/>(extended<sp/>sequential)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readBaselineSOF())<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xc2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOF2<sp/>(progressive)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readProgressiveSOF())<sp/>{</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xc4:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readHuffmanTables())<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xd8:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xd9:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xda:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readScanInfo())<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doScan<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xdb:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DQT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readQuantTables())<sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xdd:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DRI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readRestartInterval())<sp/>{</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xe0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>APP0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readJFIFMarker())<sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xee:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>APP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readAdobeMarker())<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EOF:</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>APPn<sp/>/<sp/>COM<sp/>/<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>read16()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>DCT<sp/>marker<sp/>&lt;{0:02x}&gt;&quot;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal">GBool<sp/>DCTStream::readBaselineSOF()<sp/>{</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prec;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/>prec<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>numComps<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>&lt;=<sp/>0<sp/>||<sp/>numComps<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>number<sp/>of<sp/>components<sp/>in<sp/>DCT<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>precision<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>prec);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].id<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].hSample<sp/>=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].vSample<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].quantTable<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].hSample<sp/>&lt;<sp/>1<sp/>||<sp/>compInfo[i].hSample<sp/>&gt;<sp/>4<sp/>||</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].vSample<sp/>&lt;<sp/>1<sp/>||<sp/>compInfo[i].vSample<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>sampling<sp/>factor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].quantTable<sp/>&lt;<sp/>0<sp/>||<sp/>compInfo[i].quantTable<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>quant<sp/>table<sp/>selector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/>progressive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal">GBool<sp/>DCTStream::readProgressiveSOF()<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prec;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/>prec<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/>numComps<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>precision<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>prec);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].id<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].hSample<sp/>=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].vSample<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].quantTable<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].hSample<sp/>&lt;<sp/>1<sp/>||<sp/>compInfo[i].hSample<sp/>&gt;<sp/>4<sp/>||</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/>compInfo[i].vSample<sp/>&lt;<sp/>1<sp/>||<sp/>compInfo[i].vSample<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>sampling<sp/>factor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compInfo[i].quantTable<sp/>&lt;<sp/>0<sp/>||<sp/>compInfo[i].quantTable<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>quant<sp/>table<sp/>selector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>progressive<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal">GBool<sp/>DCTStream::readScanInfo()<sp/>{</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>c;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/>scanInfo.numComps<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.numComps<sp/>&lt;=<sp/>0<sp/>||<sp/>scanInfo.numComps<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>number<sp/>of<sp/>components<sp/>in<sp/>DCT<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.numComps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/>--length;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>!=<sp/>2<sp/>*<sp/>scanInfo.numComps<sp/>+<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>scan<sp/>info<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/>interleaved<sp/>=<sp/>scanInfo.numComps<sp/>==<sp/>numComps;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.comp[j]<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.dcHuffTable[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.acHuffTable[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scanInfo.numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>(broken)<sp/>DCT<sp/>streams<sp/>reuse<sp/>ID<sp/>numbers,<sp/>but<sp/>at<sp/>least<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>the<sp/>components<sp/>in<sp/>order,<sp/>so<sp/>we<sp/>check<sp/>compInfo[i]<sp/>first<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>around<sp/>the<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>compInfo[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>compInfo[j].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>component<sp/>ID<sp/>in<sp/>scan<sp/>info<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.comp[j]<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.dcHuffTable[j]<sp/>=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInfo.acHuffTable[j]<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/>scanInfo.firstCoeff<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/>scanInfo.lastCoeff<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanInfo.firstCoeff<sp/>&lt;<sp/>0<sp/>||<sp/>scanInfo.lastCoeff<sp/>&gt;<sp/>63<sp/>||</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scanInfo.firstCoeff<sp/>&gt;<sp/>scanInfo.lastCoeff)<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>coefficient<sp/>numbers<sp/>in<sp/>scan<sp/>info<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>scanInfo.ah<sp/>=<sp/>(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>scanInfo.al<sp/>=<sp/>c<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal">GBool<sp/>DCTStream::readQuantTables()<sp/>{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/>prec,<sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>prec<sp/>=<sp/>(index<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>&amp;=<sp/>0x0f;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec<sp/>&gt;<sp/>1<sp/>||<sp/>index<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>quantization<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>numQuantTables)<sp/>{</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numQuantTables<sp/>=<sp/>index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec)<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>quantTables[index][dctZigZag[i]]<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>quantTables[index][dctZigZag[i]]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec)<sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>-=<sp/>129;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>-=<sp/>65;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal">GBool<sp/>DCTStream::readHuffmanTables()<sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><ref refid="struct_d_c_t_huff_table" kindref="compound">DCTHuffTable</ref><sp/>*tbl;</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/>Gushort<sp/>code;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>Guchar<sp/>sym;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>--length;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((index<sp/>&amp;<sp/>0x0f)<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>Huffman<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&amp;<sp/>0x10)<sp/>{</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&amp;=<sp/>0x0f;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>numACHuffTables)</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>numACHuffTables<sp/>=<sp/>index+1;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>&amp;acHuffTables[index];</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&amp;=<sp/>0x0f;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>numDCHuffTables)</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>numDCHuffTables<sp/>=<sp/>index+1;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>&amp;dcHuffTables[index];</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>sym<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl-&gt;firstSym[i]<sp/>=<sp/>sym;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl-&gt;firstCode[i]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl-&gt;numCodes[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sym<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>(code<sp/>+<sp/>c)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sym;<sp/>++i)</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl-&gt;sym[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>-=<sp/>sym;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal">GBool<sp/>DCTStream::readRestartInterval()<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>restart<sp/>interval&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>restartInterval<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal">GBool<sp/>DCTStream::readJFIFMarker()<sp/>{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/>i;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[5];</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>length<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>APP0<sp/>marker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>-=<sp/>5;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;JFIF\0&quot;</highlight><highlight class="normal">,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gotJFIFMarker<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>APP0<sp/>marker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>--length;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal">GBool<sp/>DCTStream::readAdobeMarker()<sp/>{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/>i;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[12];</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>read16();</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>14)<sp/>{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>12;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;Adobe&quot;</highlight><highlight class="normal">,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/>colorXform<sp/>=<sp/>buf[11];</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/>gotAdobeMarker<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>14;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/>err:</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>Adobe<sp/>APP14<sp/>marker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal">GBool<sp/>DCTStream::readTrailer()<sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>readMarker();</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0xd9)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>DCT<sp/>trailer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::readMarker()<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0xff<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>EOF);</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0x00);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::read16()<sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c1<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c2<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c1<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>c2;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*DCTStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&gt;&gt;<sp/>/DCTDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal">GBool<sp/>DCTStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ENABLE_ZLIB_UNCOMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FlateStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::codeLenCodeMap[flateMaxCodeLenCodes]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>16,<sp/>17,<sp/>18,<sp/>0,<sp/>8,<sp/>7,<sp/>9,<sp/>6,<sp/>10,<sp/>5,<sp/>11,<sp/>4,<sp/>12,<sp/>3,<sp/>13,<sp/>2,<sp/>14,<sp/>1,<sp/>15</highlight></codeline>
<codeline lineno="3875"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><ref refid="struct_flate_decode" kindref="compound">FlateDecode</ref><sp/>FlateStream::lengthDecode[flateMaxLitCodes-257]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>3},</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>4},</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>5},</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>6},</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>7},</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>8},</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/><sp/>9},</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/>{0,<sp/><sp/>10},</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>{1,<sp/><sp/>11},</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/>{1,<sp/><sp/>13},</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/>{1,<sp/><sp/>15},</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>{1,<sp/><sp/>17},</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/>{2,<sp/><sp/>19},</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/>{2,<sp/><sp/>23},</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/>{2,<sp/><sp/>27},</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/>{2,<sp/><sp/>31},</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/>{3,<sp/><sp/>35},</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>{3,<sp/><sp/>43},</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>{3,<sp/><sp/>51},</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/>{3,<sp/><sp/>59},</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/>{4,<sp/><sp/>67},</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/>{4,<sp/><sp/>83},</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/>{4,<sp/><sp/>99},</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>{4,<sp/>115},</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>{5,<sp/>131},</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/>{5,<sp/>163},</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/>{5,<sp/>195},</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/>{5,<sp/>227},</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/>{0,<sp/>258},</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/>{0,<sp/>258},</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/>{0,<sp/>258}</highlight></codeline>
<codeline lineno="3909"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><ref refid="struct_flate_decode" kindref="compound">FlateDecode</ref><sp/>FlateStream::distDecode[flateMaxDistCodes]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/>1},</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/>2},</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/>3},</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/>4},</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/>{<sp/>1,<sp/><sp/><sp/><sp/><sp/>5},</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/>{<sp/>1,<sp/><sp/><sp/><sp/><sp/>7},</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/>{<sp/>2,<sp/><sp/><sp/><sp/><sp/>9},</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>{<sp/>2,<sp/><sp/><sp/><sp/>13},</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>{<sp/>3,<sp/><sp/><sp/><sp/>17},</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/>{<sp/>3,<sp/><sp/><sp/><sp/>25},</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/><sp/><sp/><sp/>33},</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/><sp/><sp/><sp/>49},</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>{<sp/>5,<sp/><sp/><sp/><sp/>65},</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>{<sp/>5,<sp/><sp/><sp/><sp/>97},</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/>{<sp/>6,<sp/><sp/><sp/>129},</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/>{<sp/>6,<sp/><sp/><sp/>193},</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/>{<sp/>7,<sp/><sp/><sp/>257},</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/>{<sp/>7,<sp/><sp/><sp/>385},</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/>{<sp/>8,<sp/><sp/><sp/>513},</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/>{<sp/>8,<sp/><sp/><sp/>769},</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/>{<sp/>9,<sp/><sp/>1025},</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/>{<sp/>9,<sp/><sp/>1537},</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/>{10,<sp/><sp/>2049},</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>{10,<sp/><sp/>3073},</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/>{11,<sp/><sp/>4097},</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>{11,<sp/><sp/>6145},</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>{12,<sp/><sp/>8193},</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/>{12,<sp/>12289},</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/>{13,<sp/>16385},</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>{13,<sp/>24577}</highlight></codeline>
<codeline lineno="3942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_flate_code" kindref="compound">FlateCode</ref><sp/>flateFixedLitCodeTabCodes[512]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0100},</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0050},</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0010},</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0118},</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0110},</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0070},</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0030},</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c0},</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0108},</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0060},</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0020},</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a0},</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0000},</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0080},</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0040},</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e0},</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0104},</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0058},</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0018},</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0090},</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0114},</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0078},</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0038},</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d0},</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010c},</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0068},</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0028},</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b0},</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0008},</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0088},</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0048},</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f0},</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0102},</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0054},</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0014},</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011c},</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0112},</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0074},</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0034},</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c8},</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010a},</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0064},</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0024},</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a8},</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0004},</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0084},</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0044},</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e8},</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0106},</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005c},</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001c},</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0098},</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0116},</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007c},</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003c},</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d8},</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010e},</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006c},</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002c},</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b8},</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000c},</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008c},</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004c},</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f8},</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0101},</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0052},</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0012},</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011a},</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0111},</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0072},</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0032},</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c4},</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0109},</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0062},</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0022},</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a4},</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0002},</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0082},</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0042},</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e4},</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0105},</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005a},</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001a},</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0094},</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0115},</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007a},</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003a},</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d4},</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010d},</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006a},</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002a},</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b4},</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000a},</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008a},</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004a},</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f4},</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0103},</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0056},</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0016},</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011e},</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0113},</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0076},</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0036},</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00cc},</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010b},</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0066},</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0026},</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ac},</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0006},</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0086},</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0046},</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ec},</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0107},</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005e},</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001e},</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009c},</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0117},</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007e},</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003e},</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00dc},</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010f},</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006e},</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002e},</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00bc},</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000e},</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008e},</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004e},</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00fc},</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0100},</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0051},</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0011},</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0119},</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0110},</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0071},</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0031},</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c2},</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0108},</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0061},</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0021},</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a2},</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0001},</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0081},</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0041},</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e2},</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0104},</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0059},</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0019},</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0092},</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0114},</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0079},</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0039},</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d2},</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010c},</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0069},</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0029},</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b2},</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0009},</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0089},</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0049},</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f2},</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0102},</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0055},</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0015},</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011d},</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0112},</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0075},</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0035},</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ca},</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010a},</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0065},</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0025},</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00aa},</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0005},</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0085},</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0045},</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ea},</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0106},</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005d},</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001d},</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009a},</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0116},</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007d},</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003d},</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00da},</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010e},</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006d},</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002d},</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ba},</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000d},</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008d},</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004d},</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00fa},</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0101},</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0053},</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0013},</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011b},</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0111},</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0073},</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0033},</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c6},</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0109},</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0063},</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0023},</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a6},</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0003},</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0083},</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0043},</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e6},</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0105},</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005b},</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001b},</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0096},</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0115},</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007b},</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003b},</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d6},</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010d},</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006b},</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002b},</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b6},</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000b},</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008b},</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004b},</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f6},</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0103},</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0057},</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0017},</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011f},</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0113},</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0077},</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0037},</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ce},</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010b},</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0067},</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0027},</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ae},</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0007},</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0087},</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0047},</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ee},</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0107},</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005f},</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001f},</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009e},</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0117},</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007f},</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003f},</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00de},</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010f},</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006f},</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002f},</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00be},</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000f},</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008f},</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004f},</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00fe},</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0100},</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0050},</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0010},</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0118},</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0110},</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0070},</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0030},</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c1},</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0108},</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0060},</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0020},</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a1},</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0000},</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0080},</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0040},</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e1},</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0104},</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0058},</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0018},</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0091},</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0114},</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0078},</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0038},</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d1},</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010c},</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0068},</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0028},</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b1},</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0008},</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0088},</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0048},</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f1},</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0102},</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0054},</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0014},</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011c},</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0112},</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0074},</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0034},</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c9},</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010a},</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0064},</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0024},</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a9},</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0004},</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0084},</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0044},</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e9},</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0106},</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005c},</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001c},</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0099},</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0116},</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007c},</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003c},</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d9},</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010e},</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006c},</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002c},</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b9},</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000c},</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008c},</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004c},</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f9},</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0101},</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0052},</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0012},</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011a},</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0111},</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0072},</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0032},</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c5},</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0109},</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0062},</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0022},</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a5},</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0002},</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0082},</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0042},</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e5},</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0105},</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005a},</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001a},</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0095},</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0115},</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007a},</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003a},</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d5},</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010d},</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006a},</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002a},</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b5},</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000a},</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008a},</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004a},</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f5},</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0103},</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0056},</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0016},</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011e},</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0113},</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0076},</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0036},</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00cd},</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010b},</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0066},</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0026},</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ad},</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0006},</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0086},</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0046},</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ed},</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0107},</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005e},</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001e},</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009d},</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0117},</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007e},</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003e},</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00dd},</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010f},</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006e},</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002e},</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00bd},</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000e},</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008e},</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004e},</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00fd},</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0100},</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0051},</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0011},</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0119},</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0110},</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0071},</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0031},</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c3},</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0108},</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0061},</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0021},</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a3},</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0001},</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0081},</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0041},</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e3},</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0104},</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0059},</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0019},</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0093},</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0114},</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0079},</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0039},</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d3},</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010c},</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0069},</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0029},</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b3},</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0009},</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0089},</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0049},</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f3},</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0102},</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0055},</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0015},</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011d},</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0112},</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0075},</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0035},</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00cb},</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010a},</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0065},</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0025},</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ab},</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0005},</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0085},</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0045},</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00eb},</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0106},</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005d},</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001d},</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009b},</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0116},</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007d},</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003d},</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00db},</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010e},</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006d},</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002d},</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00bb},</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000d},</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008d},</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004d},</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00fb},</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0101},</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0053},</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0013},</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011b},</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0111},</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0073},</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0033},</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00c7},</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0109},</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0063},</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0023},</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00a7},</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0003},</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0083},</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0043},</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00e7},</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0105},</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005b},</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001b},</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/>{9,<sp/>0x0097},</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0115},</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007b},</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003b},</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00d7},</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010d},</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006b},</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002b},</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00b7},</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000b},</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008b},</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004b},</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00f7},</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0103},</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0057},</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0017},</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>{8,<sp/>0x011f},</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0113},</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0077},</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0037},</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00cf},</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010b},</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0067},</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0027},</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00af},</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0007},</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0087},</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/>{8,<sp/>0x0047},</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ef},</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0107},</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>{8,<sp/>0x005f},</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>{8,<sp/>0x001f},</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/>{9,<sp/>0x009f},</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>{7,<sp/>0x0117},</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/>{8,<sp/>0x007f},</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/>{8,<sp/>0x003f},</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00df},</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>{7,<sp/>0x010f},</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/>{8,<sp/>0x006f},</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>{8,<sp/>0x002f},</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00bf},</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/>{8,<sp/>0x000f},</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>{8,<sp/>0x008f},</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/>{8,<sp/>0x004f},</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/>{9,<sp/>0x00ff}</highlight></codeline>
<codeline lineno="4457"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><ref refid="struct_flate_huffman_tab" kindref="compound">FlateHuffmanTab</ref><sp/>FlateStream::fixedLitCodeTab<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/>flateFixedLitCodeTabCodes,<sp/>9</highlight></codeline>
<codeline lineno="4461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_flate_code" kindref="compound">FlateCode</ref><sp/>flateFixedDistCodeTabCodes[32]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0000},</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0010},</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0008},</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0018},</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0004},</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0014},</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000c},</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/>{5,<sp/>0x001c},</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0002},</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0012},</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000a},</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/>{5,<sp/>0x001a},</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0006},</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0016},</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000e},</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/>{0,<sp/>0x0000},</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0001},</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0011},</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0009},</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0019},</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0005},</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0015},</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000d},</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>{5,<sp/>0x001d},</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0003},</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0013},</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000b},</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/>{5,<sp/>0x001b},</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0007},</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/>{5,<sp/>0x0017},</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/>{5,<sp/>0x000f},</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>{0,<sp/>0x0000}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><ref refid="struct_flate_huffman_tab" kindref="compound">FlateHuffmanTab</ref><sp/>FlateStream::fixedDistCodeTab<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/>flateFixedDistCodeTabCodes,<sp/>5</highlight></codeline>
<codeline lineno="4500"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal">FlateStream::FlateStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>predictor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits):</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predictor<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_stream_predictor" kindref="compound">StreamPredictor</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>predictor,<sp/>columns,<sp/>colors,<sp/>bits);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pred-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pred;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>litCodeTab.codes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/>distCodeTab.codes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/>memset(buf,<sp/>0,<sp/>flateWindow);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal">FlateStream::~FlateStream()<sp/>{</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(litCodeTab.codes<sp/>!=<sp/>fixedLitCodeTab.codes)<sp/>{</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(litCodeTab.codes);</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distCodeTab.codes<sp/>!=<sp/>fixedDistCodeTab.codes)<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(distCodeTab.codes);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pred;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::flateReset(GBool<sp/>unfiltered)<sp/>{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unfiltered)</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;unfilteredReset();</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>remain<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>codeBuf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/>codeSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>compressedBlock<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::unfilteredReset()<sp/>{</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>flateReset(gTrue);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmf,<sp/>flg;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/>flateReset(gFalse);</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>look<sp/>at<sp/>window<sp/>size?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/>cmf<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/>flg<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmf<sp/>==<sp/>EOF<sp/>||<sp/>flg<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmf<sp/>&amp;<sp/>0x0f)<sp/>!=<sp/>0x08)<sp/>{</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>compression<sp/>method<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((cmf<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>flg)<sp/>%<sp/>31)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>FCHECK<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flg<sp/>&amp;<sp/>0x20)<sp/>{</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;FDICT<sp/>bit<sp/>set<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;getChar();</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="4584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;getChars(nChars,<sp/>buffer);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nChars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(c<sp/>!=<sp/>EOF))<sp/>buffer[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nChars;</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred)<sp/>{</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pred-&gt;lookChar();</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remain<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock<sp/>&amp;&amp;<sp/>eof)</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/>readSome();</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>buf[index];</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::getRawChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nChars;<sp/>++i)</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[i]<sp/>=<sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="4617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::getRawChar()<sp/>{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doGetRawChar();</highlight></codeline>
<codeline lineno="4621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*FlateStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>3<sp/>||<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&gt;&gt;<sp/>/FlateDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"></highlight></codeline>
<codeline lineno="4636"><highlight class="normal">GBool<sp/>FlateStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="4638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::readSome()<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code1,<sp/>code2;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>dist;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endOfBlock)<sp/>{</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!startBlock())</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compressedBlock)<sp/>{</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code1<sp/>=<sp/>getHuffmanCodeWord(&amp;litCodeTab))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[index]<sp/>=<sp/>code1;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remain<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>==<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endOfBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remain<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>-=<sp/>257;</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>lengthDecode[code1].bits;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code2<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(code2<sp/>=<sp/>getCodeWord(code2))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>lengthDecode[code1].first<sp/>+<sp/>code2;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code1<sp/>=<sp/>getHuffmanCodeWord(&amp;distCodeTab))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>distDecode[code1].bits;</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code2<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(code2<sp/>=<sp/>getCodeWord(code2))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>distDecode[code1].first<sp/>+<sp/>code2;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(index<sp/>-<sp/>dist)<sp/>&amp;<sp/>flateMask;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>buf[j];</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>&amp;<sp/>flateMask;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(j<sp/>+<sp/>1)<sp/>&amp;<sp/>flateMask;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remain<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(blockLen<sp/>&lt;<sp/>flateWindow)<sp/>?<sp/>blockLen<sp/>:<sp/>flateWindow;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i,<sp/>j<sp/>=<sp/>(j<sp/>+<sp/>1)<sp/>&amp;<sp/>flateMask)<sp/>{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>endOfBlock<sp/>=<sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[j]<sp/>=<sp/>c<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>remain<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>blockLen<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockLen<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endOfBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>remain<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal">GBool<sp/>FlateStream::startBlock()<sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockHdr;</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>code<sp/>tables<sp/>from<sp/>the<sp/>previous<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(litCodeTab.codes<sp/>!=<sp/>fixedLitCodeTab.codes)<sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(litCodeTab.codes);</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/>litCodeTab.codes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distCodeTab.codes<sp/>!=<sp/>fixedDistCodeTab.codes)<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(distCodeTab.codes);</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/>distCodeTab.codes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>block<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/>blockHdr<sp/>=<sp/>getCodeWord(3);</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockHdr<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>blockHdr<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uncompressed<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockHdr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/>compressedBlock<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/>blockLen<sp/>=<sp/>c<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/>blockLen<sp/>|=<sp/>(c<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/>check<sp/>=<sp/>c<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>check<sp/>|=<sp/>(c<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check<sp/>!=<sp/>(~blockLen<sp/>&amp;<sp/>0xffff))</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>uncompressed<sp/>block<sp/>length<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>codeBuf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>codeSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compressed<sp/>block<sp/>with<sp/>fixed<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockHdr<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>compressedBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>loadFixedCodes();</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compressed<sp/>block<sp/>with<sp/>dynamic<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockHdr<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/>compressedBlock<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readDynamicCodes())<sp/>{</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unknown<sp/>block<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>block<sp/>header<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>endOfBlock<sp/>=<sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::loadFixedCodes()<sp/>{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/>litCodeTab.codes<sp/>=<sp/>fixedLitCodeTab.codes;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>litCodeTab.maxLen<sp/>=<sp/>fixedLitCodeTab.maxLen;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/>distCodeTab.codes<sp/>=<sp/>fixedDistCodeTab.codes;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>distCodeTab.maxLen<sp/>=<sp/>fixedDistCodeTab.maxLen;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal">GBool<sp/>FlateStream::readDynamicCodes()<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numCodeLenCodes;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numLitCodes;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDistCodes;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codeLenCodeLengths[flateMaxCodeLenCodes];</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><ref refid="struct_flate_huffman_tab" kindref="compound">FlateHuffmanTab</ref><sp/>codeLenCodeTab;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>repeat,<sp/>code;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>codeLenCodeTab.codes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numLitCodes<sp/>=<sp/>getCodeWord(5))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/>numLitCodes<sp/>+=<sp/>257;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numDistCodes<sp/>=<sp/>getCodeWord(5))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/>numDistCodes<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numCodeLenCodes<sp/>=<sp/>getCodeWord(4))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/>numCodeLenCodes<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numLitCodes<sp/>&gt;<sp/>flateMaxLitCodes<sp/>||</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numDistCodes<sp/>&gt;<sp/>flateMaxDistCodes<sp/>||</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numCodeLenCodes<sp/>&gt;<sp/>flateMaxCodeLenCodes)<sp/>{</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>code<sp/>length<sp/>code<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>flateMaxCodeLenCodes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/>codeLenCodeLengths[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numCodeLenCodes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((codeLenCodeLengths[codeLenCodeMap[i]]<sp/>=<sp/>getCodeWord(3))<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/>compHuffmanCodes(codeLenCodeLengths,<sp/>flateMaxCodeLenCodes,<sp/>&amp;codeLenCodeTab);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>literal<sp/>and<sp/>distance<sp/>code<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/>repeat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>numLitCodes<sp/>+<sp/>numDistCodes)<sp/>{</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>=<sp/>getHuffmanCodeWord(&amp;codeLenCodeTab))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((repeat<sp/>=<sp/>getCodeWord(2))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeat<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>repeat<sp/>&gt;<sp/>numLitCodes<sp/>+<sp/>numDistCodes)<sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>repeat<sp/>&gt;<sp/>0;<sp/>--repeat)<sp/>{</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>codeLengths[i++]<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>17)<sp/>{</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((repeat<sp/>=<sp/>getCodeWord(3))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeat<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>repeat<sp/>&gt;<sp/>numLitCodes<sp/>+<sp/>numDistCodes)<sp/>{</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>repeat<sp/>&gt;<sp/>0;<sp/>--repeat)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>codeLengths[i++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>18)<sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((repeat<sp/>=<sp/>getCodeWord(7))<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeat<sp/>+=<sp/>11;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>repeat<sp/>&gt;<sp/>numLitCodes<sp/>+<sp/>numDistCodes)<sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>repeat<sp/>&gt;<sp/>0;<sp/>--repeat)<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>codeLengths[i++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeLengths[i++]<sp/>=<sp/>len<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/>compHuffmanCodes(codeLengths,<sp/>numLitCodes,<sp/>&amp;litCodeTab);</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/>compHuffmanCodes(codeLengths<sp/>+<sp/>numLitCodes,<sp/>numDistCodes,<sp/>&amp;distCodeTab);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/>gfree(codeLenCodeTab.codes);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>dynamic<sp/>code<sp/>table<sp/>in<sp/>flate<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/>gfree(codeLenCodeTab.codes);</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>an<sp/>array<sp/>&lt;lengths&gt;<sp/>of<sp/>&lt;n&gt;<sp/>lengths,<sp/>in<sp/>value<sp/>order,<sp/>into<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Huffman<sp/>code<sp/>lookup<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlateStream::compHuffmanCodes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lengths,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="struct_flate_huffman_tab" kindref="compound">FlateHuffmanTab</ref><sp/>*tab)<sp/>{</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabSize,<sp/>len,<sp/>code,<sp/>code2,<sp/>skip,<sp/>val,<sp/>i,<sp/>t;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>max<sp/>code<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/>tab-&gt;maxLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(val<sp/>=<sp/>0;<sp/>val<sp/>&lt;<sp/>n;<sp/>++val)<sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lengths[val]<sp/>&gt;<sp/>tab-&gt;maxLen)<sp/>{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab-&gt;maxLen<sp/>=<sp/>lengths[val];</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/>tabSize<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>tab-&gt;maxLen;</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>tab-&gt;codes<sp/>=<sp/>(<ref refid="struct_flate_code" kindref="compound">FlateCode</ref><sp/>*)gmallocn(tabSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_flate_code" kindref="compound">FlateCode</ref>));</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tabSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/>tab-&gt;codes[i].len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/>tab-&gt;codes[i].val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(len<sp/>=<sp/>1,<sp/>code<sp/>=<sp/>0,<sp/>skip<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>&lt;=<sp/>tab-&gt;maxLen;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len,<sp/>code<sp/>&lt;&lt;=<sp/>1,<sp/>skip<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(val<sp/>=<sp/>0;<sp/>val<sp/>&lt;<sp/>n;<sp/>++val)<sp/>{</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lengths[val]<sp/>==<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit-reverse<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>(code2<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>(t<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>in<sp/>the<sp/>table<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>code2;<sp/>i<sp/>&lt;<sp/>tabSize;<sp/>i<sp/>+=<sp/>skip)<sp/>{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab-&gt;codes[i].len<sp/>=<sp/>(Gushort)len;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab-&gt;codes[i].val<sp/>=<sp/>(Gushort)val;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/>++code;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::getHuffmanCodeWord(<ref refid="struct_flate_huffman_tab" kindref="compound">FlateHuffmanTab</ref><sp/>*tab)<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><ref refid="struct_flate_code" kindref="compound">FlateCode</ref><sp/>*code;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codeSize<sp/>&lt;<sp/>tab-&gt;maxLen)<sp/>{</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>codeBuf<sp/>|=<sp/>(c<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>codeSize;</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>codeSize<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>&amp;tab-&gt;codes[codeBuf<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>tab-&gt;maxLen)<sp/>-<sp/>1)];</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeSize<sp/>==<sp/>0<sp/>||<sp/>codeSize<sp/>&lt;<sp/>code-&gt;len<sp/>||<sp/>code-&gt;len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/>codeBuf<sp/>&gt;&gt;=<sp/>code-&gt;len;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/>codeSize<sp/>-=<sp/>code-&gt;len;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code-&gt;val;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlateStream::getCodeWord(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codeSize<sp/>&lt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/>codeBuf<sp/>|=<sp/>(c<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>codeSize;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>codeSize<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>codeBuf<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/>codeBuf<sp/>&gt;&gt;=<sp/>bits;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/>codeSize<sp/>-=<sp/>bits;</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EOFStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal">EOFStream::EOFStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="4971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal">EOFStream::~EOFStream()<sp/>{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BufStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal">BufStream::BufStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufSizeA):<sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/>bufSize<sp/>=<sp/>bufSizeA;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(bufSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal">BufStream::~BufStream()<sp/>{</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/>gfree(buf);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BufStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bufSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BufStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>i;</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>buf[0];</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>bufSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i-1]<sp/>=<sp/>buf[i];</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/>buf[bufSize<sp/>-<sp/>1]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BufStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf[0];</highlight></codeline>
<codeline lineno="5013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BufStream::lookChar(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf[idx];</highlight></codeline>
<codeline lineno="5017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal">GBool<sp/>BufStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FixedLengthEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal">FixedLengthEncoder::FixedLengthEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lengthA):</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>lengthA;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal">FixedLengthEncoder::~FixedLengthEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FixedLengthEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FixedLengthEncoder::getChar()<sp/>{</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>count<sp/>&gt;=<sp/>length)</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FixedLengthEncoder::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>count<sp/>&gt;=<sp/>length)</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal">GBool<sp/>FixedLengthEncoder::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="5058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASCIIHexEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal">ASCIIHexEncoder::ASCIIHexEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal">ASCIIHexEncoder::~ASCIIHexEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())<sp/>{</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ASCIIHexEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal">GBool<sp/>ASCIIHexEncoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineLen<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/>hex[(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f];</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/>hex[c<sp/>&amp;<sp/>0x0f];</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/>lineLen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASCII85Encoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal">ASCII85Encoder::ASCII85Encoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal">ASCII85Encoder::~ASCII85Encoder()<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ASCII85Encoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal">GBool<sp/>ASCII85Encoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/>Guint<sp/>t;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf1[5];</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c0,<sp/>c1,<sp/>c2,<sp/>c3;</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/>c0<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/>c3<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c3<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c0<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>c0<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(c0<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(c1<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(c0<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(c1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(c2<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1[i]<sp/>=<sp/>(char)(t<sp/>%<sp/>85<sp/>+<sp/>0x21);</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>/=<sp/>85;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/>buf1[i];</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++lineLen<sp/>==<sp/>65)<sp/>{</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(c0<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(c1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(c2<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>c3;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++lineLen<sp/>==<sp/>65)<sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1[i]<sp/>=<sp/>(char)(t<sp/>%<sp/>85<sp/>+<sp/>0x21);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>/=<sp/>85;</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/>buf1[i];</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++lineLen<sp/>==<sp/>65)<sp/>{</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bufEnd++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RunLengthEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal">RunLengthEncoder::RunLengthEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>nextEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal">RunLengthEncoder::~RunLengthEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunLengthEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>nextEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>fillBuf<sp/>finishes,<sp/>buf[]<sp/>looks<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+-----+--------------+-----------------+--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+<sp/>tag<sp/>|<sp/>...<sp/>data<sp/>...<sp/>|<sp/>next<sp/>0,<sp/>1,<sp/>or<sp/>2<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>+-----+--------------+-----------------+--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufEnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextEnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal">GBool<sp/>RunLengthEncoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>hit<sp/>EOF?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>grab<sp/>two<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextEnd<sp/>&lt;<sp/>bufEnd<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c1<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>bufEnd[0]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextEnd<sp/>&lt;<sp/>bufEnd<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c2<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bufPtr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bufEnd<sp/>=<sp/>&amp;buf[2];</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>bufEnd[1]<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>repeat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>==<sp/>c2)<sp/>{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>128<sp/>&amp;&amp;<sp/>(c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>c1)</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)(257<sp/>-<sp/>n);</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/>bufEnd<sp/>=<sp/>&amp;buf[2];</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextEnd<sp/>=<sp/>&amp;buf[3];</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextEnd<sp/>=<sp/>bufEnd;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>up<sp/>to<sp/>128<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[n]<sp/>==<sp/>buf[n-1])</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[n]<sp/>==<sp/>buf[n-1])<sp/>{</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)(n-2-1);</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bufEnd<sp/>=<sp/>&amp;buf[n-1];</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextEnd<sp/>=<sp/>&amp;buf[n+1];</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)(n-1);</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bufEnd<sp/>=<sp/>nextEnd<sp/>=<sp/>&amp;buf[n+1];</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LZWEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal">LZWEncoder::LZWEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)</highlight></codeline>
<codeline lineno="5310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/>inBufLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/>outBufLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal">LZWEncoder::~LZWEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())<sp/>{</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LZWEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>code<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/>table[i].byte<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/>table[i].next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/>table[i].children<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/>nextSeq<sp/>=<sp/>258;</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/>codeLen<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"></highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>input<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/>inBufLen<sp/>=<sp/>str-&gt;doGetChars(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(inBuf),<sp/>inBuf);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>output<sp/>buffer<sp/>with<sp/>a<sp/>clear-table<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/>outBuf<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/>outBufLen<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/>needEOD<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWEncoder::getChar()<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inBufLen<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!needEOD<sp/>&amp;&amp;<sp/>outBufLen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBufLen<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/>(inBufLen<sp/>&gt;<sp/>0<sp/>||<sp/>needEOD))<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>fillBuf();</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBufLen<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(outBuf<sp/>&gt;&gt;<sp/>(outBufLen<sp/>-<sp/>8))<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/>outBufLen<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(outBuf<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>outBufLen))<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>outBufLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LZWEncoder::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inBufLen<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!needEOD<sp/>&amp;&amp;<sp/>outBufLen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBufLen<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/>(inBufLen<sp/>&gt;<sp/>0<sp/>||<sp/>needEOD))<sp/>{</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>fillBuf();</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outBufLen<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(outBuf<sp/>&gt;&gt;<sp/>(outBufLen<sp/>-<sp/>8))<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(outBuf<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>outBufLen))<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>input,<sp/>outBufLen<sp/>&lt;<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>generates,<sp/>at<sp/>most,<sp/>2<sp/>12-bit<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>--&gt;<sp/>outBufLen<sp/>&lt;<sp/>8<sp/>+<sp/>12<sp/>+<sp/>12<sp/>=<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LZWEncoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><ref refid="struct_l_z_w_encoder_node" kindref="compound">LZWEncoderNode</ref><sp/>*p0,<sp/>*p1;</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seqLen,<sp/>code,<sp/>i;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needEOD)<sp/>{</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/>outBuf<sp/>=<sp/>(outBuf<sp/>&lt;&lt;<sp/>codeLen)<sp/>|<sp/>257;</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>outBufLen<sp/>+=<sp/>codeLen;</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>needEOD<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>longest<sp/>matching<sp/>sequence<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/>p0<sp/>=<sp/>table<sp/>+<sp/>inBuf[0];</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/>seqLen<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(inBufLen<sp/>&gt;<sp/>seqLen)<sp/>{</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p1<sp/>=<sp/>p0-&gt;children;<sp/>p1;<sp/>p1<sp/>=<sp/>p1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1-&gt;byte<sp/>==<sp/>inBuf[seqLen])<sp/>{</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p1)<sp/>{</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/>++seqLen;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>(int)(p0<sp/>-<sp/>table);</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>an<sp/>output<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/>outBuf<sp/>=<sp/>(outBuf<sp/>&lt;&lt;<sp/>codeLen)<sp/>|<sp/>code;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/>outBufLen<sp/>+=<sp/>codeLen;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/>table[nextSeq].byte<sp/>=<sp/>seqLen<sp/>&lt;<sp/>inBufLen<sp/>?<sp/>inBuf[seqLen]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/>table[nextSeq].children<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table[code].children)<sp/>{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/>table[nextSeq].next<sp/>=<sp/>table[code].children;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/>table[nextSeq].next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/>table[code].children<sp/>=<sp/>table<sp/>+<sp/>nextSeq;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/>++nextSeq;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>input<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/>memmove(inBuf,<sp/>inBuf<sp/>+<sp/>seqLen,<sp/>inBufLen<sp/>-<sp/>seqLen);</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/>inBufLen<sp/>-=<sp/>seqLen;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/>inBufLen<sp/>+=<sp/>str-&gt;doGetChars(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(inBuf)<sp/>-<sp/>inBufLen,<sp/>inBuf<sp/>+<sp/>inBufLen);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>codeLen;<sp/>generate<sp/>clear-table<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextSeq<sp/>==<sp/>(1<sp/>&lt;&lt;<sp/>codeLen))<sp/>{</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>++codeLen;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeLen<sp/>==<sp/>13)<sp/>{</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outBuf<sp/>=<sp/>(outBuf<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>256;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outBufLen<sp/>+=<sp/>12;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>table[i].next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>table[i].children<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextSeq<sp/>=<sp/>258;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeLen<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>EOD<sp/>next<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inBufLen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/>needEOD<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CMYKGrayEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal">CMYKGrayEncoder::CMYKGrayEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"></highlight></codeline>
<codeline lineno="5459"><highlight class="normal">CMYKGrayEncoder::~CMYKGrayEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"></highlight></codeline>
<codeline lineno="5464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CMYKGrayEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal">GBool<sp/>CMYKGrayEncoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c0,<sp/>c1,<sp/>c2,<sp/>c3;</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/>c0<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/>c3<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c3<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>(3<sp/>*<sp/>c0<sp/>+<sp/>6<sp/>*<sp/>c1<sp/>+<sp/>c2)<sp/>/<sp/>10<sp/>+<sp/>c3;</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>255)<sp/>i<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/>*bufEnd++<sp/>=<sp/>(char)<sp/>i;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RGBGrayEncoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5495"><highlight class="normal"></highlight></codeline>
<codeline lineno="5496"><highlight class="normal">RGBGrayEncoder::RGBGrayEncoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA):</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"></highlight></codeline>
<codeline lineno="5502"><highlight class="normal">RGBGrayEncoder::~RGBGrayEncoder()<sp/>{</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RGBGrayEncoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/>eof<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight></codeline>
<codeline lineno="5513"><highlight class="normal">GBool<sp/>RGBGrayEncoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c0,<sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eof)<sp/>{</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/>c0<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>eof<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>255<sp/>-<sp/>(3<sp/>*<sp/>c0<sp/>+<sp/>6<sp/>*<sp/>c1<sp/>+<sp/>c2)<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/>bufPtr<sp/>=<sp/>bufEnd<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/>*bufEnd++<sp/>=<sp/>(char)<sp/>i;</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/Stream.cc"/>
  </compounddef>
</doxygen>
