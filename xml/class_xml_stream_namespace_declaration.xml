<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_xml_stream_namespace_declaration" kind="class" language="C++" prot="public">
    <compoundname>XmlStreamNamespaceDeclaration</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_xml_stream_namespace_declaration_1a5d5de2277c68daef6226f2a40ecb8006" prot="private" static="no" mutable="no">
        <type><ref refid="class_xml_stream_string_ref" kindref="compound">XmlStreamStringRef</ref></type>
        <definition>XmlStreamStringRef XmlStreamNamespaceDeclaration::m_prefix</definition>
        <argsstring></argsstring>
        <name>m_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="140" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_xml_stream_namespace_declaration_1ace23dea29fce3b1b3040480c6f3a28f2" prot="private" static="no" mutable="no">
        <type><ref refid="class_xml_stream_string_ref" kindref="compound">XmlStreamStringRef</ref></type>
        <definition>XmlStreamStringRef XmlStreamNamespaceDeclaration::m_namespaceUri</definition>
        <argsstring></argsstring>
        <name>m_namespaceUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="140" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_xml_stream_namespace_declaration_1aa981d2b052db9ba8841d65d94a4fd40d" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* XmlStreamNamespaceDeclaration::reserved</definition>
        <argsstring></argsstring>
        <name>reserved</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="141" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_xml_stream_namespace_declaration_1a07cbe8adea255c3bb802811c3872de83" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class XmlStreamReaderPrivate</definition>
        <argsstring></argsstring>
        <name>XmlStreamReaderPrivate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="143" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a7d6716e210ce5ee3dea6ed914117368d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamNamespaceDeclaration::XmlStreamNamespaceDeclaration</definition>
        <argsstring>()</argsstring>
        <name>XmlStreamNamespaceDeclaration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an empty namespace declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="145" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2518" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a438efeeca364b3003ef2ef16d45d9d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamNamespaceDeclaration::XmlStreamNamespaceDeclaration</definition>
        <argsstring>(const XmlStreamNamespaceDeclaration &amp;)</argsstring>
        <name>XmlStreamNamespaceDeclaration</name>
        <param>
          <type>const <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a copy of <emphasis>other</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="146" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2536" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1af7284ccda394915ac5a1a8bd2c80c064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamNamespaceDeclaration::XmlStreamNamespaceDeclaration</definition>
        <argsstring>(const QString &amp;prefix, const QString &amp;namespaceUri)</argsstring>
        <name>XmlStreamNamespaceDeclaration</name>
        <param>
          <type>const QString &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Creates a namespace declaration with <emphasis>prefix</emphasis> and <emphasis>namespaceUri</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="147" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2527" bodyend="2531"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a682a9243d890610af2b680b8feb2145e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamNamespaceDeclaration::~XmlStreamNamespaceDeclaration</definition>
        <argsstring>()</argsstring>
        <name>~XmlStreamNamespaceDeclaration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructs this namespace declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="148" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2553" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a554efdcdfc87142180db128f9c8c0ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
        <definition>XmlStreamNamespaceDeclaration &amp; XmlStreamNamespaceDeclaration::operator=</definition>
        <argsstring>(const XmlStreamNamespaceDeclaration &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns <emphasis>other</emphasis> to this namespace declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="149" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2544" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a84440d3a55f8679da78032e02a49ccbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamNamespaceDeclaration::prefix</definition>
        <argsstring>() const</argsstring>
        <name>prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the prefix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="150" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1ac2d6510eeacc33073402389403e2c3ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamNamespaceDeclaration::namespaceUri</definition>
        <argsstring>() const</argsstring>
        <name>namespaceUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the namespaceUri. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="151" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1acdd97a34672a888cd8bf2dc29b87b66e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamNamespaceDeclaration::operator==</definition>
        <argsstring>(const XmlStreamNamespaceDeclaration &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this namespace declaration with <emphasis>other</emphasis> and returns <computeroutput>true</computeroutput> if they are equal; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="152" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a44ed88502e624652408d781118835295" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamNamespaceDeclaration::operator!=</definition>
        <argsstring>(const XmlStreamNamespaceDeclaration &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this namespace declaration with <emphasis>other</emphasis> and returns <computeroutput>true</computeroutput> if they are not equal; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="155" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="155" bodyend="156"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="class_xml_stream_namespace_declaration_1a79ff04192c4a4b6ac757799375b0ce50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamNamespaceDeclarations</definition>
        <argsstring></argsstring>
        <name>XmlStreamNamespaceDeclarations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synonym for QVector&lt;XmlStreamNamespaceDeclaration&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.cpp" line="2487" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> class represents a namespace declaration. </para>    </briefdescription>
    <detaileddescription>
<para>QtCore <simplesect kind="since"><para>4.3 </para></simplesect>
An namespace declaration consists of a <ref refid="class_xml_stream_namespace_declaration_1a84440d3a55f8679da78032e02a49ccbd" kindref="member">prefix()</ref> and a <ref refid="class_xml_stream_namespace_declaration_1ac2d6510eeacc33073402389403e2c3ef" kindref="member">namespaceUri()</ref>. </para>    </detaileddescription>
    <location file="thirdparty/xmlstream/xmlstream.h" line="139" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="139" bodyend="157"/>
    <listofallmembers>
      <member refid="class_xml_stream_namespace_declaration_1ace23dea29fce3b1b3040480c6f3a28f2" prot="private" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>m_namespaceUri</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a5d5de2277c68daef6226f2a40ecb8006" prot="private" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>m_prefix</name></member>
      <member refid="class_xml_stream_namespace_declaration_1ac2d6510eeacc33073402389403e2c3ef" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>namespaceUri</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a44ed88502e624652408d781118835295" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>operator!=</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a554efdcdfc87142180db128f9c8c0ed7" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>operator=</name></member>
      <member refid="class_xml_stream_namespace_declaration_1acdd97a34672a888cd8bf2dc29b87b66e" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>operator==</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a84440d3a55f8679da78032e02a49ccbd" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>prefix</name></member>
      <member refid="class_xml_stream_namespace_declaration_1aa981d2b052db9ba8841d65d94a4fd40d" prot="private" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>reserved</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a7d6716e210ce5ee3dea6ed914117368d" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>XmlStreamNamespaceDeclaration</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a438efeeca364b3003ef2ef16d45d9d22" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>XmlStreamNamespaceDeclaration</name></member>
      <member refid="class_xml_stream_namespace_declaration_1af7284ccda394915ac5a1a8bd2c80c064" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>XmlStreamNamespaceDeclaration</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a79ff04192c4a4b6ac757799375b0ce50" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>XmlStreamNamespaceDeclarations</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a07cbe8adea255c3bb802811c3872de83" prot="private" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>XmlStreamReaderPrivate</name></member>
      <member refid="class_xml_stream_namespace_declaration_1a682a9243d890610af2b680b8feb2145e" prot="public" virt="non-virtual"><scope>XmlStreamNamespaceDeclaration</scope><name>~XmlStreamNamespaceDeclaration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
