<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="infutil_8c" kind="file" language="C++">
    <compoundname>infutil.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <includes refid="infblock_8h" local="yes">infblock.h</includes>
    <includes refid="inftrees_8h" local="yes">inftrees.h</includes>
    <includes refid="infcodes_8h" local="yes">infcodes.h</includes>
    <includes refid="infutil_8h" local="yes">infutil.h</includes>
    <incdepgraph>
      <node id="80098">
        <label>infblock.h</label>
        <link refid="infblock_8h_source"/>
      </node>
      <node id="80097">
        <label>errno.h</label>
      </node>
      <node id="80094">
        <label>zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80095" relation="include">
        </childnode>
        <childnode refid="80097" relation="include">
        </childnode>
      </node>
      <node id="80095">
        <label>zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80096" relation="include">
        </childnode>
      </node>
      <node id="80093">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c"/>
        <childnode refid="80094" relation="include">
        </childnode>
        <childnode refid="80098" relation="include">
        </childnode>
        <childnode refid="80099" relation="include">
        </childnode>
        <childnode refid="80100" relation="include">
        </childnode>
        <childnode refid="80101" relation="include">
        </childnode>
      </node>
      <node id="80101">
        <label>infutil.h</label>
        <link refid="infutil_8h_source"/>
      </node>
      <node id="80099">
        <label>inftrees.h</label>
        <link refid="inftrees_8h_source"/>
      </node>
      <node id="80096">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
      <node id="80100">
        <label>infcodes.h</label>
        <link refid="infcodes_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="infutil_8c_1ad38715bc581e863ddcff08d7e0618d73" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt inflate_mask[17]</definition>
        <argsstring>[17]</argsstring>
        <name>inflate_mask</name>
        <initializer>= {
    0x0000,
    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.c" line="14" column="1" bodyfile="thirdparty/freetype/src/gzip/infutil.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infutil_8c_1a692fe258f88cffb7e6a371efc6aaf014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_flush</definition>
        <argsstring>(inflate_blocks_statef *s, z_streamp z, int r)</argsstring>
        <name>inflate_flush</name>
        <param>
          <type>inflate_blocks_statef *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.c" line="22" column="1" bodyfile="thirdparty/freetype/src/gzip/infutil.c" bodystart="22" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>inflate_util.c<sp/>--<sp/>data<sp/>and<sp/>routines<sp/>common<sp/>to<sp/>blocks<sp/>and<sp/>codes</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infblock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inftrees.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infcodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>And&apos;ing<sp/>with<sp/>mask[n]<sp/>masks<sp/>the<sp/>lower<sp/>n<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>inflate_mask[17]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0001,<sp/>0x0003,<sp/>0x0007,<sp/>0x000f,<sp/>0x001f,<sp/>0x003f,<sp/>0x007f,<sp/>0x00ff,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>0x01ff,<sp/>0x03ff,<sp/>0x07ff,<sp/>0x0fff,<sp/>0x1fff,<sp/>0x3fff,<sp/>0x7fff,<sp/>0xffff</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>sliding<sp/>window<sp/>to<sp/>the<sp/>output<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_flush(<sp/></highlight><highlight class="comment">/*<sp/>s,<sp/>z,<sp/>r)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">inflate_blocks_statef<sp/>*s,</highlight></codeline>
<codeline lineno="24"><highlight class="normal">z_streamp<sp/>z,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>uInt<sp/>n;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>Bytef<sp/>*p;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>Bytef<sp/>*q;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>local<sp/>copies<sp/>of<sp/>source<sp/>and<sp/>destination<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>z-&gt;next_out;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>s-&gt;read;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>copy<sp/>as<sp/>far<sp/>as<sp/>end<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>(uInt)((q<sp/>&lt;=<sp/>s-&gt;write<sp/>?<sp/>s-&gt;write<sp/>:<sp/>s-&gt;end)<sp/>-<sp/>q);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>z-&gt;avail_out)<sp/>n<sp/>=<sp/>z-&gt;avail_out;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>Z_BUF_ERROR)<sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>z-&gt;avail_out<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>z-&gt;total_out<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>check<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(s-&gt;check,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>far<sp/>as<sp/>end<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>q<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>more<sp/>to<sp/>copy<sp/>at<sp/>beginning<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>s-&gt;end)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wrap<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;write<sp/>==<sp/>s-&gt;end)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;write<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>bytes<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(uInt)(s-&gt;write<sp/>-<sp/>q);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>z-&gt;avail_out)<sp/>n<sp/>=<sp/>z-&gt;avail_out;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>Z_BUF_ERROR)<sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;avail_out<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>check<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(s-&gt;check,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>z-&gt;next_out<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>s-&gt;read<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/infutil.c"/>
  </compounddef>
</doxygen>
