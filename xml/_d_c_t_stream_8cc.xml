<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_d_c_t_stream_8cc" kind="file" language="C++">
    <compoundname>DCTStream.cc</compoundname>
    <includes refid="_d_c_t_stream_8h" local="yes">DCTStream.h</includes>
    <incdepgraph>
      <node id="86266">
        <label>stdarg.h</label>
      </node>
      <node id="86261">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86254" relation="include">
        </childnode>
        <childnode refid="86255" relation="include">
        </childnode>
        <childnode refid="86256" relation="include">
        </childnode>
        <childnode refid="86262" relation="include">
        </childnode>
        <childnode refid="86263" relation="include">
        </childnode>
        <childnode refid="86264" relation="include">
        </childnode>
      </node>
      <node id="86255">
        <label>stdlib.h</label>
      </node>
      <node id="86260">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="86254" relation="include">
        </childnode>
        <childnode refid="86253" relation="include">
        </childnode>
      </node>
      <node id="86257">
        <label>setjmp.h</label>
      </node>
      <node id="86272">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86269" relation="include">
        </childnode>
        <childnode refid="86273" relation="include">
        </childnode>
      </node>
      <node id="86278">
        <label>jpeglib.h</label>
      </node>
      <node id="86265">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="86266" relation="include">
        </childnode>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86264" relation="include">
        </childnode>
        <childnode refid="86267" relation="include">
        </childnode>
      </node>
      <node id="86277">
        <label>Decrypt.h</label>
        <link refid="_decrypt_8h_source"/>
        <childnode refid="86264" relation="include">
        </childnode>
        <childnode refid="86267" relation="include">
        </childnode>
        <childnode refid="86269" relation="include">
        </childnode>
        <childnode refid="86276" relation="include">
        </childnode>
      </node>
      <node id="86275">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86269" relation="include">
        </childnode>
        <childnode refid="86273" relation="include">
        </childnode>
      </node>
      <node id="86256">
        <label>stddef.h</label>
      </node>
      <node id="86268">
        <label>limits.h</label>
      </node>
      <node id="86253">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="86254" relation="include">
        </childnode>
      </node>
      <node id="86271">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="86276">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86254" relation="include">
        </childnode>
        <childnode refid="86264" relation="include">
        </childnode>
        <childnode refid="86269" relation="include">
        </childnode>
        <childnode refid="86273" relation="include">
        </childnode>
      </node>
      <node id="86274">
        <label>pthread.h</label>
      </node>
      <node id="86263">
        <label>sys/types.h</label>
      </node>
      <node id="86258">
        <label>string.h</label>
      </node>
      <node id="86267">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="86268" relation="include">
        </childnode>
        <childnode refid="86266" relation="include">
        </childnode>
        <childnode refid="86255" relation="include">
        </childnode>
        <childnode refid="86264" relation="include">
        </childnode>
      </node>
      <node id="86252">
        <label>DCTStream.h</label>
        <link refid="_d_c_t_stream_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
        <childnode refid="86254" relation="include">
        </childnode>
        <childnode refid="86255" relation="include">
        </childnode>
        <childnode refid="86256" relation="include">
        </childnode>
        <childnode refid="86257" relation="include">
        </childnode>
        <childnode refid="86258" relation="include">
        </childnode>
        <childnode refid="86259" relation="include">
        </childnode>
        <childnode refid="86260" relation="include">
        </childnode>
        <childnode refid="86261" relation="include">
        </childnode>
        <childnode refid="86265" relation="include">
        </childnode>
        <childnode refid="86269" relation="include">
        </childnode>
        <childnode refid="86277" relation="include">
        </childnode>
        <childnode refid="86276" relation="include">
        </childnode>
        <childnode refid="86278" relation="include">
        </childnode>
        <childnode refid="86279" relation="include">
        </childnode>
      </node>
      <node id="86269">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="86270" relation="include">
        </childnode>
        <childnode refid="86254" relation="include">
        </childnode>
        <childnode refid="86258" relation="include">
        </childnode>
        <childnode refid="86264" relation="include">
        </childnode>
        <childnode refid="86260" relation="include">
        </childnode>
        <childnode refid="86267" relation="include">
        </childnode>
        <childnode refid="86271" relation="include">
        </childnode>
        <childnode refid="86265" relation="include">
        </childnode>
        <childnode refid="86272" relation="include">
        </childnode>
        <childnode refid="86275" relation="include">
        </childnode>
        <childnode refid="86276" relation="include">
        </childnode>
      </node>
      <node id="86262">
        <label>unistd.h</label>
      </node>
      <node id="86273">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="86274" relation="include">
        </childnode>
      </node>
      <node id="86259">
        <label>ctype.h</label>
      </node>
      <node id="86264">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="86253" relation="include">
        </childnode>
      </node>
      <node id="86279">
        <label>jerror.h</label>
      </node>
      <node id="86270">
        <label>set</label>
      </node>
      <node id="86254">
        <label>stdio.h</label>
      </node>
      <node id="86251">
        <label>thirdparty/poppler/poppler/DCTStream.cc</label>
        <link refid="_d_c_t_stream_8cc"/>
        <childnode refid="86252" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_d_c_t_stream_8cc_1aef5fc6966225abf357633d5e303f01ac" prot="public" static="no">
        <name>DO_GET_CHAR</name>
        <initializer>if (current == limit) { \
    if (cinfo.output_scanline &lt; cinfo.output_height) \
    { \
      if (!setjmp(err.setjmp_buffer)) \
      { \
        if (!jpeg_read_scanlines(&amp;cinfo, row_buffer, 1)) c = EOF; \
        else { \
          current = &amp;row_buffer[0][0]; \
          limit = &amp;row_buffer[0][(cinfo.output_width - 1) * cinfo.output_components] + cinfo.output_components; \
          c = *current; \
          ++current; \
        } \
      } \
      else c = EOF; \
    } \
    else c = EOF; \
  } else { \
    c = *current; \
    ++current; \
  } \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="204" column="9" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_d_c_t_stream_8cc_1af4cfb11a790eebfb57137badae40bd85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void str_init_source</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>str_init_source</name>
        <param>
          <type>j_decompress_ptr</type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="19" column="1" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="_d_c_t_stream_8cc_1a634b7472ed694762ce99e1c3990423c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean str_fill_input_buffer</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>str_fill_input_buffer</name>
        <param>
          <type>j_decompress_ptr</type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="23" column="1" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="23" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="_d_c_t_stream_8cc_1ae3d7f671cbef6bc1e058dd471bed9819" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void str_skip_input_data</definition>
        <argsstring>(j_decompress_ptr cinfo, long num_bytes)</argsstring>
        <name>str_skip_input_data</name>
        <param>
          <type>j_decompress_ptr</type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="46" column="1" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="_d_c_t_stream_8cc_1ad0613cf3d3b2cba6fe4332cff0dc3896" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void str_term_source</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>str_term_source</name>
        <param>
          <type>j_decompress_ptr</type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="59" column="1" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="_d_c_t_stream_8cc_1a77d1d9578ecb995af3890afae0bc3967" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void exitErrorHandler</definition>
        <argsstring>(jpeg_common_struct *error)</argsstring>
        <name>exitErrorHandler</name>
        <param>
          <type>jpeg_common_struct *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/DCTStream.cc" line="85" column="1" bodyfile="thirdparty/poppler/poppler/DCTStream.cc" bodystart="85" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DCTStream.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005-2010,<sp/>2012<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2009<sp/>Ryszard<sp/>Trojnacki<sp/>&lt;rysiek@menel.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2010<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2011<sp/>Daiki<sp/>Ueno<sp/>&lt;ueno@unixuser.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2011<sp/>Tomas<sp/>Hoger<sp/>&lt;thoger@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2012,<sp/>2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DCTStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>str_init_source(j_decompress_ptr<sp/>cinfo)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>str_fill_input_buffer(j_decompress_ptr<sp/>cinfo)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstr__src__mgr" kindref="compound">str_src_mgr</ref><sp/>*<sp/>src<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstr__src__mgr" kindref="compound">str_src_mgr</ref><sp/>*)cinfo-&gt;src;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>if<sp/>(src-&gt;index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;index++;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src-&gt;index<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0xD8;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;index++;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>src-&gt;str-&gt;getChar();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;buffer<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;pub.next_input_byte<sp/>=<sp/>&amp;src-&gt;buffer;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;pub.bytes_in_buffer<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>str_skip_input_data(j_decompress_ptr<sp/>cinfo,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_bytes)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstr__src__mgr" kindref="compound">str_src_mgr</ref><sp/>*<sp/>src<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstr__src__mgr" kindref="compound">str_src_mgr</ref><sp/>*)cinfo-&gt;src;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>if<sp/>(num_bytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>src-&gt;pub.bytes_in_buffer)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>-=<sp/>(long)<sp/>src-&gt;pub.bytes_in_buffer;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str_fill_input_buffer(cinfo);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;pub.next_input_byte<sp/>+=<sp/>(size_t)<sp/>num_bytes;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;pub.bytes_in_buffer<sp/>-=<sp/>(size_t)<sp/>num_bytes;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>str_term_source(j_decompress_ptr<sp/>cinfo)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">DCTStream::DCTStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorXformA,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*dict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>colorXform<sp/>=<sp/>colorXformA;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>err.width<sp/>=<sp/>(obj.isInt()<sp/>&amp;&amp;<sp/>obj.getInt()<sp/>&lt;=<sp/>JPEG_MAX_DIMENSION)<sp/>?<sp/>obj.getInt()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">,<sp/>&amp;obj,<sp/>recursion);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>err.height<sp/>=<sp/>(obj.isInt()<sp/>&amp;&amp;<sp/>obj.getInt()<sp/>&lt;=<sp/>JPEG_MAX_DIMENSION)<sp/>?<sp/>obj.getInt()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>err.height<sp/>=<sp/>err.width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">DCTStream::~DCTStream()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>jpeg_destroy_decompress(&amp;cinfo);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exitErrorHandler(jpeg_common_struct<sp/>*error)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>j_decompress_ptr<sp/>cinfo<sp/>=<sp/>(j_decompress_ptr)error;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="structstr__error__mgr" kindref="compound">str_error_mgr</ref><sp/>*<sp/>err<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstr__error__mgr" kindref="compound">str_error_mgr</ref><sp/>*)cinfo-&gt;err;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;err-&gt;msg_code<sp/>==<sp/>JERR_IMAGE_TOO_BIG<sp/>&amp;&amp;<sp/>err-&gt;width<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>err-&gt;height<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo-&gt;image_height<sp/>=<sp/>err-&gt;height;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo-&gt;image_width<sp/>=<sp/>err-&gt;width;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>longjmp(err-&gt;setjmp_buffer,<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::init()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>jpeg_std_error(&amp;err.pub);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>err.pub.error_exit<sp/>=<sp/>&amp;exitErrorHandler;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>src.pub.init_source<sp/>=<sp/>str_init_source;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>src.pub.fill_input_buffer<sp/>=<sp/>str_fill_input_buffer;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>src.pub.skip_input_data<sp/>=<sp/>str_skip_input_data;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>src.pub.resync_to_restart<sp/>=<sp/>jpeg_resync_to_restart;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>src.pub.term_source<sp/>=<sp/>str_term_source;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>src.pub.bytes_in_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>src.pub.next_input_byte<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>src.str<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>src.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>limit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>cinfo.err<sp/>=<sp/>&amp;err.pub;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setjmp(err.setjmp_buffer))<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_create_decompress(&amp;cinfo);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo.src<sp/>=<sp/>(jpeg_source_mgr<sp/>*)&amp;src;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>row_buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DCTStream::reset()<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_stride;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_buffer)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_destroy_decompress(&amp;cinfo);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>JPEG<sp/>data<sp/>has<sp/>to<sp/>start<sp/>with<sp/>0xFF<sp/>0xD8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>some<sp/>pdf<sp/>like<sp/>the<sp/>one<sp/>on<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://bugs.freedesktop.org/show_bug.cgi?id=3299</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>have<sp/>some<sp/>garbage<sp/>before<sp/>that<sp/>this<sp/>seeks<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>start<sp/>marker...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0,<sp/>c2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!startFound)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>start<sp/>of<sp/>jpeg<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0xFF)<sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>!=<sp/>0xD8)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>startFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setjmp(err.setjmp_buffer))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jpeg_read_header(&amp;cinfo,<sp/>TRUE)<sp/>!=<sp/>JPEG_SUSPENDED)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>figure<sp/>out<sp/>color<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorXform<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>!cinfo.saw_Adobe_marker)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo.num_components<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo.saw_JFIF_marker)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo.cur_comp_info[0]-&gt;component_id<sp/>==<sp/>82<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo.cur_comp_info[1]-&gt;component_id<sp/>==<sp/>71<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo.cur_comp_info[2]-&gt;component_id<sp/>==<sp/>66)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>ASCII<sp/>&quot;RGB&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo.saw_Adobe_marker)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>colorXform<sp/>=<sp/>cinfo.Adobe_transform;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cinfo.num_components)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo.jpeg_color_space<sp/>=<sp/>colorXform<sp/>?<sp/>JCS_YCbCr<sp/>:<sp/>JCS_RGB;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo.jpeg_color_space<sp/>=<sp/>colorXform<sp/>?<sp/>JCS_YCCK<sp/>:<sp/>JCS_CMYK;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_start_decompress(&amp;cinfo);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_stride<sp/>=<sp/>cinfo.output_width<sp/>*<sp/>cinfo.output_components;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_buffer<sp/>=<sp/>cinfo.mem-&gt;alloc_sarray((j_common_ptr)<sp/>&amp;cinfo,<sp/>JPOOL_IMAGE,<sp/>row_stride,<sp/>1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>not<sp/>go<sp/>with<sp/>inline<sp/>since<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>refuses<sp/>to<sp/>inline<sp/>because<sp/>of<sp/>setjmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO_GET_CHAR<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/>if<sp/>(current<sp/>==<sp/>limit)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(cinfo.output_scanline<sp/>&lt;<sp/>cinfo.output_height)<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!setjmp(err.setjmp_buffer))<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!jpeg_read_scanlines(&amp;cinfo,<sp/>row_buffer,<sp/>1))<sp/>c<sp/>=<sp/>EOF;<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>&amp;row_buffer[0][0];<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;row_buffer[0][(cinfo.output_width<sp/>-<sp/>1)<sp/>*<sp/>cinfo.output_components]<sp/>+<sp/>cinfo.output_components;<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*current;<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current;<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>c<sp/>=<sp/>EOF;<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>c<sp/>=<sp/>EOF;<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*current;<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>++current;<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::getChar()<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>DO_GET_CHAR</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::getChars(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars,<sp/>Guchar<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nChars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>DO_GET_CHAR</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(c<sp/>!=<sp/>EOF))<sp/>buffer[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nChars;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCTStream::lookChar()<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(current<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*current;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*DCTStream::getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psLevel<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s<sp/>=<sp/>str-&gt;getPSFilter(psLevel,<sp/>indent)))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>s-&gt;append(indent)-&gt;append(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&gt;&gt;<sp/>/DCTDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">GBool<sp/>DCTStream::isBinary(GBool<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str-&gt;isBinary(gTrue);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/DCTStream.cc"/>
  </compounddef>
</doxygen>
