<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_ms_1_1_midi_drum" kind="namespace" language="C++">
    <compoundname>Ms::MidiDrum</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="importmidi__drum_8cpp_1adf3e589dec82b5b85fc0070844e079df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiDrum::splitChord</definition>
        <argsstring>(std::multimap&lt; ReducedFraction, MidiChord &gt;::iterator &amp;chordIt, const QSet&lt; int &gt; &amp;notesToMove, std::multimap&lt; ReducedFraction, MidiChord &gt; &amp;chords)</argsstring>
        <name>splitChord</name>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt;::iterator &amp;</type>
          <declname>chordIt</declname>
        </param>
        <param>
          <type>const QSet&lt; int &gt; &amp;</type>
          <declname>notesToMove</declname>
        </param>
        <param>
          <type>std::multimap&lt; <ref refid="class_ms_1_1_reduced_fraction" kindref="compound">ReducedFraction</ref>, <ref refid="class_ms_1_1_midi_chord" kindref="compound">MidiChord</ref> &gt; &amp;</type>
          <declname>chords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="35" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="35" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1a29df2b1cd890d9e3ee52fb0a3a5c1316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiDrum::splitDrumVoices</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks)</argsstring>
        <name>splitDrumVoices</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="69" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="69" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1a6bd37b274500c40eab8ba28d592546a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &amp;</type>
        <definition>MTrack&amp; Ms::MidiDrum::getNewTrack</definition>
        <argsstring>(std::map&lt; int, MTrack &gt; &amp;newTracks, const MTrack &amp;drumTrack, int pitch)</argsstring>
        <name>getNewTrack</name>
        <param>
          <type>std::map&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>newTracks</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &amp;</type>
          <declname>drumTrack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="106" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="106" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1a16e1ab33366a5153fda4894098a79641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt;</type>
        <definition>std::map&lt;int, MTrack&gt; Ms::MidiDrum::splitDrumTrack</definition>
        <argsstring>(const MTrack &amp;drumTrack)</argsstring>
        <name>splitDrumTrack</name>
        <param>
          <type>const <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &amp;</type>
          <declname>drumTrack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="125" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="125" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1a180341cf49d422fe0464cb4a948c92d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiDrum::splitDrumTracks</definition>
        <argsstring>(std::multimap&lt; int, MTrack &gt; &amp;tracks)</argsstring>
        <name>splitDrumTracks</name>
        <param>
          <type>std::multimap&lt; int, <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="147" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="147" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1aeae664415feb703f3ba887c12f30cfa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiDrum::setBracket</definition>
        <argsstring>(Staff *&amp;staff, int &amp;counter)</argsstring>
        <name>setBracket</name>
        <param>
          <type><ref refid="class_ms_1_1_staff" kindref="compound">Staff</ref> *&amp;</type>
          <declname>staff</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="163" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="163" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="importmidi__drum_8cpp_1a5831c1bd20354c33f4849f02bc7c3768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MidiDrum::setStaffBracketForDrums</definition>
        <argsstring>(QList&lt; MTrack &gt; &amp;tracks)</argsstring>
        <name>setStaffBracketForDrums</name>
        <param>
          <type>QList&lt; <ref refid="class_ms_1_1_m_track" kindref="compound">MTrack</ref> &gt; &amp;</type>
          <declname>tracks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmidi/importmidi_drum.cpp" line="175" column="1" bodyfile="mscore/importmidi/importmidi_drum.cpp" bodystart="175" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="mscore/importmidi/importmidi_drum.cpp" line="18" column="1"/>
  </compounddef>
</doxygen>
