<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="infblock_8c" kind="file" language="C++">
    <compoundname>infblock.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <includes refid="infblock_8h" local="yes">infblock.h</includes>
    <includes refid="inftrees_8h" local="yes">inftrees.h</includes>
    <includes refid="infcodes_8h" local="yes">infcodes.h</includes>
    <includes refid="infutil_8h" local="yes">infutil.h</includes>
    <incdepgraph>
      <node id="80040">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c"/>
        <childnode refid="80041" relation="include">
        </childnode>
        <childnode refid="80045" relation="include">
        </childnode>
        <childnode refid="80046" relation="include">
        </childnode>
        <childnode refid="80047" relation="include">
        </childnode>
        <childnode refid="80048" relation="include">
        </childnode>
      </node>
      <node id="80045">
        <label>infblock.h</label>
        <link refid="infblock_8h_source"/>
      </node>
      <node id="80044">
        <label>errno.h</label>
      </node>
      <node id="80041">
        <label>zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80042" relation="include">
        </childnode>
        <childnode refid="80044" relation="include">
        </childnode>
      </node>
      <node id="80042">
        <label>zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80043" relation="include">
        </childnode>
      </node>
      <node id="80048">
        <label>infutil.h</label>
        <link refid="infutil_8h_source"/>
      </node>
      <node id="80046">
        <label>inftrees.h</label>
        <link refid="inftrees_8h_source"/>
      </node>
      <node id="80043">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
      <node id="80047">
        <label>infcodes.h</label>
        <link refid="infcodes_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="infblock_8c_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="14" column="9" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infblock_8c_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="15" column="9" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="infblock_8c_1a97854b9c671ea1e40fcaef99356b246f" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt border[]</definition>
        <argsstring>[]</argsstring>
        <name>border</name>
        <initializer>= { 
        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="18" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infblock_8c_1ac1a98afb193485db9fbcfa8334e30c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local void</type>
        <definition>local void inflate_blocks_reset</definition>
        <argsstring>(inflate_blocks_statef *s, z_streamp z, uLongf *c)</argsstring>
        <name>inflate_blocks_reset</name>
        <param>
          <type>inflate_blocks_statef *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uLongf *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="67" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="67" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8c_1aa98cf7eec5ae4227a2ad919c4ed14c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local inflate_blocks_statef *</type>
        <definition>local inflate_blocks_statef* inflate_blocks_new</definition>
        <argsstring>(z_streamp z, check_func c, uInt w)</argsstring>
        <name>inflate_blocks_new</name>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <param>
          <type>check_func</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="88" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="88" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8c_1a069535e661c047289b1926eb8985b2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_blocks</definition>
        <argsstring>(inflate_blocks_statef *s, z_streamp z, int r)</argsstring>
        <name>inflate_blocks</name>
        <param>
          <type>inflate_blocks_statef *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="119" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="119" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="infblock_8c_1a77b40c2d205ee4e475dc463d186a571c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_blocks_free</definition>
        <argsstring>(inflate_blocks_statef *s, z_streamp z)</argsstring>
        <name>inflate_blocks_free</name>
        <param>
          <type>inflate_blocks_statef *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infblock.c" line="375" column="1" bodyfile="thirdparty/freetype/src/gzip/infblock.c" bodystart="375" bodyend="385"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>infblock.c<sp/>--<sp/>interpret<sp/>and<sp/>process<sp/>block<sp/>types<sp/>to<sp/>last<sp/>block</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infblock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inftrees.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infcodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;infutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Table<sp/>for<sp/>deflate<sp/>from<sp/>PKZIP&apos;s<sp/>appnote.txt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>border[]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Order<sp/>of<sp/>the<sp/>bit<sp/>length<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/>17,<sp/>18,<sp/>0,<sp/>8,<sp/>7,<sp/>9,<sp/>6,<sp/>10,<sp/>5,<sp/>11,<sp/>4,<sp/>12,<sp/>3,<sp/>13,<sp/>2,<sp/>14,<sp/>1,<sp/>15};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>Notes<sp/>beyond<sp/>the<sp/>1.93a<sp/>appnote.txt:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>1.<sp/>Distance<sp/>pointers<sp/>never<sp/>point<sp/>before<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stream.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>2.<sp/>Distance<sp/>pointers<sp/>can<sp/>point<sp/>back<sp/>across<sp/>blocks,<sp/>up<sp/>to<sp/>32k<sp/>away.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>There<sp/>is<sp/>an<sp/>implied<sp/>maximum<sp/>of<sp/>7<sp/>bits<sp/>for<sp/>the<sp/>bit<sp/>length<sp/>table<sp/>and</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>15<sp/>bits<sp/>for<sp/>the<sp/>actual<sp/>data.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>4.<sp/>If<sp/>only<sp/>one<sp/>code<sp/>exists,<sp/>then<sp/>it<sp/>is<sp/>encoded<sp/>using<sp/>one<sp/>bit.<sp/><sp/>(Zero</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>would<sp/>be<sp/>more<sp/>efficient,<sp/>but<sp/>perhaps<sp/>a<sp/>little<sp/>confusing.)<sp/><sp/>If<sp/>two</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>exist,<sp/>they<sp/>are<sp/>coded<sp/>using<sp/>one<sp/>bit<sp/>each<sp/>(0<sp/>and<sp/>1).</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>5.<sp/>There<sp/>is<sp/>no<sp/>way<sp/>of<sp/>sending<sp/>zero<sp/>distance<sp/>codes--a<sp/>dummy<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>if<sp/>there<sp/>are<sp/>none.<sp/><sp/>(History:<sp/>a<sp/>pre<sp/>2.0<sp/>version<sp/>of<sp/>PKZIP<sp/>would</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>store<sp/>blocks<sp/>with<sp/>no<sp/>distance<sp/>codes,<sp/>but<sp/>this<sp/>was<sp/>discovered<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>too<sp/>harsh<sp/>a<sp/>criterion.)<sp/><sp/>Valid<sp/>only<sp/>for<sp/>1.93a.<sp/><sp/>2.04c<sp/>does<sp/>allow</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>zero<sp/>distance<sp/>codes,<sp/>which<sp/>is<sp/>sent<sp/>as<sp/>one<sp/>code<sp/>of<sp/>zero<sp/>bits<sp/>in</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>length.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>6.<sp/>There<sp/>are<sp/>up<sp/>to<sp/>286<sp/>literal/length<sp/>codes.<sp/><sp/>Code<sp/>256<sp/>represents<sp/>the</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>end-of-block.<sp/><sp/>Note<sp/>however<sp/>that<sp/>the<sp/>static<sp/>length<sp/>tree<sp/>defines</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>288<sp/>codes<sp/>just<sp/>to<sp/>fill<sp/>out<sp/>the<sp/>Huffman<sp/>codes.<sp/><sp/>Codes<sp/>286<sp/>and<sp/>287</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cannot<sp/>be<sp/>used<sp/>though,<sp/>since<sp/>there<sp/>is<sp/>no<sp/>length<sp/>base<sp/>or<sp/>extra<sp/>bits</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>defined<sp/>for<sp/>them.<sp/><sp/>Similarily,<sp/>there<sp/>are<sp/>up<sp/>to<sp/>30<sp/>distance<sp/>codes.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>static<sp/>trees<sp/>define<sp/>32<sp/>codes<sp/>(all<sp/>5<sp/>bits)<sp/>to<sp/>fill<sp/>out<sp/>the</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Huffman<sp/>codes,<sp/>but<sp/>the<sp/>last<sp/>two<sp/>had<sp/>better<sp/>not<sp/>show<sp/>up<sp/>in<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>7.<sp/>Unzip<sp/>can<sp/>check<sp/>dynamic<sp/>Huffman<sp/>blocks<sp/>for<sp/>complete<sp/>code<sp/>sets.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>exception<sp/>is<sp/>that<sp/>a<sp/>single<sp/>code<sp/>would<sp/>not<sp/>be<sp/>complete<sp/>(see<sp/>#4).</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>8.<sp/>The<sp/>five<sp/>bits<sp/>following<sp/>the<sp/>block<sp/>type<sp/>is<sp/>really<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>codes<sp/>sent<sp/>minus<sp/>257.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>9.<sp/>Length<sp/>codes<sp/>8,16,16<sp/>are<sp/>interpreted<sp/>as<sp/>13<sp/>length<sp/>codes<sp/>of<sp/>8<sp/>bits</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(1+6+6).<sp/><sp/>Therefore,<sp/>to<sp/>output<sp/>three<sp/>times<sp/>the<sp/>length,<sp/>you<sp/>output</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>three<sp/>codes<sp/>(1+1+1),<sp/>whereas<sp/>to<sp/>output<sp/>four<sp/>times<sp/>the<sp/>same<sp/>length,</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>you<sp/>only<sp/>need<sp/>two<sp/>codes<sp/>(1+3).<sp/><sp/>Hmm.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>10.<sp/>In<sp/>the<sp/>tree<sp/>reconstruction<sp/>algorithm,<sp/>Code<sp/>=<sp/>Code<sp/>+<sp/>Increment</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>if<sp/>BitLength(i)<sp/>is<sp/>not<sp/>zero.<sp/><sp/>(Pretty<sp/>obvious.)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>11.<sp/>Correction:<sp/>4<sp/>Bits:<sp/>#<sp/>of<sp/>Bit<sp/>Length<sp/>codes<sp/>-<sp/>4<sp/><sp/><sp/><sp/><sp/>(4<sp/>-<sp/>19)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>12.<sp/>Note:<sp/>length<sp/>code<sp/>284<sp/>can<sp/>represent<sp/>227-258,<sp/>but<sp/>length<sp/>code<sp/>285</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>really<sp/>is<sp/>258.<sp/><sp/>The<sp/>last<sp/>length<sp/>deserves<sp/>its<sp/>own,<sp/>short<sp/>code</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>it<sp/>gets<sp/>used<sp/>a<sp/>lot<sp/>in<sp/>very<sp/>redundant<sp/>files.<sp/><sp/>The<sp/>length</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>258<sp/>is<sp/>special<sp/>since<sp/>258<sp/>-<sp/>3<sp/>(the<sp/>min<sp/>match<sp/>length)<sp/>is<sp/>255.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>13.<sp/>The<sp/>literal/length<sp/>and<sp/>distance<sp/>code<sp/>bit<sp/>lengths<sp/>are<sp/>read<sp/>as<sp/>a</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>stream<sp/>of<sp/>lengths.<sp/><sp/>It<sp/>is<sp/>possible<sp/>(and<sp/>advantageous)<sp/>for</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>repeat<sp/>code<sp/>(16,<sp/>17,<sp/>or<sp/>18)<sp/>to<sp/>go<sp/>across<sp/>the<sp/>boundary<sp/>between</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>two<sp/>sets<sp/>of<sp/>lengths.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_blocks_reset(<sp/></highlight><highlight class="comment">/*<sp/>s,<sp/>z,<sp/>c)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">inflate_blocks_statef<sp/>*s,</highlight></codeline>
<codeline lineno="69"><highlight class="normal">z_streamp<sp/>z,</highlight></codeline>
<codeline lineno="70"><highlight class="normal">uLongf<sp/>*c<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>s-&gt;check;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mode<sp/>==<sp/>BTREE<sp/>||<sp/>s-&gt;mode<sp/>==<sp/>DTREE)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mode<sp/>==<sp/>CODES)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_codes_free(s-&gt;sub.decode.codes,<sp/>z);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>s-&gt;bitk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>s-&gt;bitb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>s-&gt;read<sp/>=<sp/>s-&gt;write<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(0L,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*)Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>reset\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">local<sp/>inflate_blocks_statef<sp/>*inflate_blocks_new(<sp/></highlight><highlight class="comment">/*<sp/>z,<sp/>c,<sp/>w)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">z_streamp<sp/>z,</highlight></codeline>
<codeline lineno="90"><highlight class="normal">check_func<sp/>c,</highlight></codeline>
<codeline lineno="91"><highlight class="normal">uInt<sp/>w<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>inflate_blocks_statef<sp/>*s;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>(inflate_blocks_statef<sp/>*)ZALLOC</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(z,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref>)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;hufts<sp/>=</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inflate_huft<sp/>*)ZALLOC(z,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(inflate_huft),<sp/>MANY))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_NULL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;window<sp/>=<sp/>(Bytef<sp/>*)ZALLOC(z,<sp/>1,<sp/>w))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;hufts);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_NULL;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>s-&gt;end<sp/>=<sp/>s-&gt;window<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>s-&gt;checkfn<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>allocated\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>inflate_blocks_reset(s,<sp/>z,<sp/>Z_NULL);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks(<sp/></highlight><highlight class="comment">/*<sp/>s,<sp/>z,<sp/>r)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">inflate_blocks_statef<sp/>*s,</highlight></codeline>
<codeline lineno="121"><highlight class="normal">z_streamp<sp/>z,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>uInt<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>uLong<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>uInt<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>Bytef<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>data<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>available<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>Bytef<sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>uInt<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>to<sp/>end<sp/>of<sp/>window<sp/>or<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>input/output<sp/>information<sp/>to<sp/>locals<sp/>(UPDATE<sp/>macro<sp/>restores)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>input<sp/>based<sp/>on<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s-&gt;mode)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TYPE:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(3)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>=<sp/>t<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(t<sp/>&gt;&gt;<sp/>1)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/>stored<sp/>block%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(last)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>k<sp/>&amp;<sp/>7;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>LENS;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>length<sp/>of<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fixed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/>fixed<sp/>codes<sp/>block%s\n&quot;,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/>&quot;<sp/>(last)&quot;<sp/>:<sp/>&quot;&quot;));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bl,<sp/>bd;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_huft<sp/>*tl,<sp/>*td;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_trees_fixed(&amp;bl,<sp/>&amp;bd,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inflate_huft**)&amp;tl,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inflate_huft**)&amp;td,<sp/>z);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.decode.codes<sp/>=<sp/>inflate_codes_new(bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>z);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;sub.decode.codes<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>CODES;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dynamic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/>dynamic<sp/>codes<sp/>block%s\n&quot;,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/>&quot;<sp/>(last)&quot;<sp/>:<sp/>&quot;&quot;));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>TABLE;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>3:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>illegal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&quot;invalid<sp/>block<sp/>type&quot;;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>LENS:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(32)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((((~b)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffff)<sp/>!=<sp/>(b<sp/>&amp;<sp/>0xffff))</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>stored<sp/>block<sp/>lengths&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.left<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>k<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dump<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>length<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>s-&gt;sub.left));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>s-&gt;sub.left<sp/>?<sp/>STORED<sp/>:<sp/>(s-&gt;last<sp/>?<sp/>DRY<sp/>:<sp/>TYPE);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STORED:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDOUT</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.left;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>n)<sp/>t<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>m)<sp/>t<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zmemcpy(q,<sp/>p,<sp/>t);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>t;<sp/><sp/>n<sp/>-=<sp/>t;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>t;<sp/><sp/>m<sp/>-=<sp/>t;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;sub.left<sp/>-=<sp/>t)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>end,<sp/>%lu<sp/>total<sp/>out\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+<sp/>(q<sp/>&gt;=<sp/>s-&gt;read<sp/>?<sp/>q<sp/>-<sp/>s-&gt;read<sp/>:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;end<sp/>-<sp/>s-&gt;read)<sp/>+<sp/>(q<sp/>-<sp/>s-&gt;window))));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>s-&gt;last<sp/>?<sp/>DRY<sp/>:<sp/>TYPE;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TABLE:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(14)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.<ref refid="classtable" kindref="compound">table</ref><sp/>=<sp/>t<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>0x3fff;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PKZIP_BUG_WORKAROUND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>&amp;<sp/>0x1f)<sp/>&gt;<sp/>29<sp/>||<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f)<sp/>&gt;<sp/>29)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>length<sp/>or<sp/>distance<sp/>symbols&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;sub.trees.blens<sp/>=<sp/>(uIntf*)ZALLOC(z,<sp/>t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(14)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtable" kindref="compound">table</ref><sp/>sizes<sp/>ok\n&quot;));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BTREE;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>BTREE:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(s-&gt;sub.trees.index<sp/>&lt;<sp/>4<sp/>+<sp/>(s-&gt;sub.trees.<ref refid="classtable" kindref="compound">table</ref><sp/>&gt;&gt;<sp/>10))</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(3)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[border[s-&gt;sub.trees.index++]]<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(s-&gt;sub.trees.index<sp/>&lt;<sp/>19)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[border[s-&gt;sub.trees.index++]]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.bb<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>inflate_trees_bits(s-&gt;sub.trees.blens,<sp/>&amp;s-&gt;sub.trees.bb,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s-&gt;sub.trees.tb,<sp/>s-&gt;hufts,<sp/>z);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(t<sp/>!=<sp/>Z_OK)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>tree<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DTREE;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DTREE:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>s-&gt;sub.trees.table,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>&lt;<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_huft<sp/>*h;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>i,<sp/>j,<sp/>c;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.bb;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(t)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>s-&gt;sub.trees.tb<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[t]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>h-&gt;bits;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>h-&gt;base;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[s-&gt;sub.trees.index++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>c<sp/>==<sp/>16..18<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>c<sp/>==<sp/>18<sp/>?<sp/>7<sp/>:<sp/>c<sp/>-<sp/>14;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c<sp/>==<sp/>18<sp/>?<sp/>11<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(t<sp/>+<sp/>i)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>(uInt)b<sp/>&amp;<sp/>inflate_mask[i];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(i)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>s-&gt;sub.trees.index;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.table;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>j<sp/>&gt;<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f)<sp/>||</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>1))</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>bit<sp/>length<sp/>repeat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>==<sp/>16<sp/>?<sp/>s-&gt;sub.trees.blens[i<sp/>-<sp/>1]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[i++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--j);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.tb<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bl,<sp/>bd;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_huft<sp/>*tl,<sp/>*td;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_codes_statef<sp/>*c;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>9;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>&lt;=<sp/>9<sp/>for<sp/>lookahead<sp/>assumptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd<sp/>=<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>&lt;=<sp/>9<sp/>for<sp/>lookahead<sp/>assumptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.table;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>inflate_trees_dynamic(257<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f),<sp/>1<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens,<sp/>&amp;bl,<sp/>&amp;bd,<sp/>&amp;tl,<sp/>&amp;td,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;hufts,<sp/>z);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>Z_OK)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>(uInt)Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>inflate_codes_new(bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>z))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.decode.codes<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>CODES;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CODES:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((r<sp/>=<sp/>inflate_codes(s,<sp/>z,<sp/>r))<sp/>!=<sp/>Z_STREAM_END)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inflate_flush(s,<sp/>z,<sp/>r);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_codes_free(s-&gt;sub.decode.codes,<sp/>z);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>end,<sp/>%lu<sp/>total<sp/>out\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+<sp/>(q<sp/>&gt;=<sp/>s-&gt;read<sp/>?<sp/>q<sp/>-<sp/>s-&gt;read<sp/>:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;end<sp/>-<sp/>s-&gt;read)<sp/>+<sp/>(q<sp/>-<sp/>s-&gt;window))));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;last)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DRY;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DRY:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;read<sp/>!=<sp/>s-&gt;write)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DONE;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DONE:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_END;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BAD:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEED_DUMMY_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_free(<sp/></highlight><highlight class="comment">/*<sp/>s,<sp/>z)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">inflate_blocks_statef<sp/>*s,</highlight></codeline>
<codeline lineno="377"><highlight class="normal">z_streamp<sp/>z<sp/>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>inflate_blocks_reset(s,<sp/>z,<sp/>Z_NULL);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s-&gt;window);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s-&gt;hufts);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>Tracev((stderr,<sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>freed\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/infblock.c"/>
  </compounddef>
</doxygen>
