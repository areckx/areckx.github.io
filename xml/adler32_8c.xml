<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="adler32_8c" kind="file" language="C++">
    <compoundname>adler32.c</compoundname>
    <includes refid="zlib_8h" local="yes">zlib.h</includes>
    <incdepgraph>
      <node id="80033">
        <label>thirdparty/freetype/src/gzip/adler32.c</label>
        <link refid="adler32_8c"/>
        <childnode refid="80034" relation="include">
        </childnode>
      </node>
      <node id="80034">
        <label>zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80035" relation="include">
        </childnode>
      </node>
      <node id="80035">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="adler32_8c_1a79bcfb6bde984f42d1124b068a509af7" prot="public" static="no">
        <name>BASE</name>
        <initializer>65521L /* largest prime smaller than 65536 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="10" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1a5de5d183f9a6a8d53316f743e1ca6dc2" prot="public" static="no">
        <name>NMAX</name>
        <initializer>5552</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="11" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1a465ff70ce96dfc2e84b0e87548b4ecb4" prot="public" static="no">
        <name>DO1</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>{s1 += buf[i]; s2 += s1;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="14" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1a3d7044f8ea7e75164fe5108048fd87eb" prot="public" static="no">
        <name>DO2</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO1(buf,i); DO1(buf,i+1);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="15" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1aef9bafc8b3d89e98b6e26320f99b9e31" prot="public" static="no">
        <name>DO4</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO2(buf,i); DO2(buf,i+2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="16" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1a9aafc447614bf5c4dc0d484aba9edb89" prot="public" static="no">
        <name>DO8</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO4(buf,i); DO4(buf,i+4);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="17" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="adler32_8c_1a6912c3e78e2b797f42f214d1b508aa0c" prot="public" static="no">
        <name>DO16</name>
        <param><defname>buf</defname></param>
        <initializer>DO8(buf,0); DO8(buf,8);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="18" column="9" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="adler32_8c_1a0a9f164d2d0820cfd817c1e41f50aeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ZEXPORT</definition>
        <argsstring>(uLong)</argsstring>
        <name>ZEXPORT</name>
        <param>
          <type>uLong</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/adler32.c" line="21" column="1" bodyfile="thirdparty/freetype/src/gzip/adler32.c" bodystart="21" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>adler32.c<sp/>--<sp/>compute<sp/>the<sp/>Adler-32<sp/>checksum<sp/>of<sp/>a<sp/>data<sp/>stream</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASE<sp/>65521L<sp/></highlight><highlight class="comment">/*<sp/>largest<sp/>prime<sp/>smaller<sp/>than<sp/>65536<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NMAX<sp/>5552</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NMAX<sp/>is<sp/>the<sp/>largest<sp/>n<sp/>such<sp/>that<sp/>255n(n+1)/2<sp/>+<sp/>(n+1)(BASE-1)<sp/>&lt;=<sp/>2^32-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO1(buf,i)<sp/><sp/>{s1<sp/>+=<sp/>buf[i];<sp/>s2<sp/>+=<sp/>s1;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO2(buf,i)<sp/><sp/>DO1(buf,i);<sp/>DO1(buf,i+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO4(buf,i)<sp/><sp/>DO2(buf,i);<sp/>DO2(buf,i+2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO8(buf,i)<sp/><sp/>DO4(buf,i);<sp/>DO4(buf,i+4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO16(buf)<sp/><sp/><sp/>DO8(buf,0);<sp/>DO8(buf,8);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">ZEXPORT(uLong)<sp/>adler32(<sp/></highlight><highlight class="comment">/*<sp/>adler,<sp/>buf,<sp/>len)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>adler,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*buf,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>len<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>adler<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>(adler<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>Z_NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1L;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>len<sp/>&lt;<sp/>NMAX<sp/>?<sp/>len<sp/>:<sp/>NMAX;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>k;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO16(buf);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/>*buf++;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--k);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>BASE;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>%=<sp/>BASE;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>s1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/adler32.c"/>
  </compounddef>
</doxygen>
