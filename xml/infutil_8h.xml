<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="infutil_8h" kind="file" language="C++">
    <compoundname>infutil.h</compoundname>
    <includedby refid="infblock_8c" local="yes">thirdparty/freetype/src/gzip/infblock.c</includedby>
    <includedby refid="infcodes_8c" local="yes">thirdparty/freetype/src/gzip/infcodes.c</includedby>
    <includedby refid="infutil_8c" local="yes">thirdparty/freetype/src/gzip/infutil.c</includedby>
    <invincdepgraph>
      <node id="80105">
        <label>thirdparty/freetype/src/gzip/infblock.c</label>
        <link refid="infblock_8c_source"/>
      </node>
      <node id="80107">
        <label>thirdparty/freetype/src/gzip/infutil.c</label>
        <link refid="infutil_8c_source"/>
      </node>
      <node id="80104">
        <label>thirdparty/freetype/src/gzip/infutil.h</label>
        <link refid="infutil_8h"/>
        <childnode refid="80105" relation="include">
        </childnode>
        <childnode refid="80106" relation="include">
        </childnode>
        <childnode refid="80107" relation="include">
        </childnode>
      </node>
      <node id="80106">
        <label>thirdparty/freetype/src/gzip/infcodes.c</label>
        <link refid="infcodes_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structinflate__blocks__state" prot="public">inflate_blocks_state</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="infutil_8h_1a8e3944c8b5bb40c63d786fc7564171a8" prot="public" static="no">
        <name>UPDBITS</name>
        <initializer>{s-&gt;bitb=b;s-&gt;bitk=k;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="66" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1ae0f0a98923eb962e3e3d7cd35aafb4c6" prot="public" static="no">
        <name>UPDIN</name>
        <initializer>{z-&gt;avail_in=n;z-&gt;total_in+=p-z-&gt;next_in;z-&gt;next_in=p;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="67" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a9bfc17bd4788bf91cf596b51cf93739f" prot="public" static="no">
        <name>UPDOUT</name>
        <initializer>{s-&gt;write=q;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="68" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1ac2558c32fa879d85fe59f8c5f8dfbc04" prot="public" static="no">
        <name>UPDATE</name>
        <initializer>{UPDBITS UPDIN UPDOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="69" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a19983eeff85c5681e77c3396b9fabd3a" prot="public" static="no">
        <name>LEAVE</name>
        <initializer>{UPDATE return inflate_flush(s,z,r);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="70" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a3bdd515dcfd1f6eadbc7bed12e0995ca" prot="public" static="no">
        <name>LOADIN</name>
        <initializer>{p=z-&gt;next_in;n=z-&gt;avail_in;b=s-&gt;bitb;k=s-&gt;bitk;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="72" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a94d1f1effc0da983e806779147c6cdc3" prot="public" static="no">
        <name>NEEDBYTE</name>
        <initializer>{if(n)r=Z_OK;else LEAVE}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="73" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1ab757e29ce18ed03f73c4b81a869e4b9a" prot="public" static="no">
        <name>NEXTBYTE</name>
        <initializer>(n--,*p++)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="74" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a726d29126a5456447bbaa7374af15777" prot="public" static="no">
        <name>NEEDBITS</name>
        <param><defname>j</defname></param>
        <initializer>{while(k&lt;(j)){NEEDBYTE;b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="75" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a807cc22e8d8b812438c23e623b1aa56e" prot="public" static="no">
        <name>DUMPBITS</name>
        <param><defname>j</defname></param>
        <initializer>{b&gt;&gt;=(j);k-=(j);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="76" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1aa36bd5b8497a0221851738c732349a85" prot="public" static="no">
        <name>WAVAIL</name>
        <initializer>(uInt)(q&lt;s-&gt;read?s-&gt;read-q-1:s-&gt;end-q)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="78" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1aa3c996c9d8f737f061b28fcff1e90972" prot="public" static="no">
        <name>LOADOUT</name>
        <initializer>{q=s-&gt;write;m=(uInt)WAVAIL;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="79" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a43c1de45dbd91827a260224c9c40221b" prot="public" static="no">
        <name>WRAP</name>
        <initializer>{if(q==s-&gt;end&amp;&amp;s-&gt;read!=s-&gt;window){q=s-&gt;window;m=(uInt)WAVAIL;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="80" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a263ccab0461d1643cb62c6625b788a7f" prot="public" static="no">
        <name>FLUSH</name>
        <initializer>{UPDOUT r=inflate_flush(s,z,r); LOADOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="81" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a5ef47b00141b9704dc9d477ed2b0cfff" prot="public" static="no">
        <name>NEEDOUT</name>
        <initializer>{if(m==0){WRAP if(m==0){FLUSH WRAP if(m==0) LEAVE}}r=Z_OK;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="82" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1ab6b4e37dafd723b23911aabdccadf6e5" prot="public" static="no">
        <name>OUTBYTE</name>
        <param><defname>a</defname></param>
        <initializer>{*q++=(Byte)(a);m--;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="83" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="infutil_8h_1a0b674752cca6d434a1a69f40877eb2be" prot="public" static="no">
        <name>LOAD</name>
        <initializer>{LOADIN LOADOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="85" column="9" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1" prot="public" static="no">
        <name>inflate_block_mode</name>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1ab47ea8bb955afd0adc0ef98517dd6084" prot="public">
          <name>TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a86b0f8050ddd8ae0b99e2f9323ad00a1" prot="public">
          <name>LENS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a77647f28a49007bb2c1f10fa36f33b55" prot="public">
          <name>STORED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a2e160f29fc076de5496a2b9968be9cc1" prot="public">
          <name>TABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a19457fc25f14bccab07ebb738bc09dc3" prot="public">
          <name>BTREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a9cd890b553121284cd90edc45e4d2f25" prot="public">
          <name>DTREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a4f2ec4135d8cf82c6c35780e470cac28" prot="public">
          <name>CODES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1aac846926be1306ef258549902ab00a25" prot="public">
          <name>DRY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1a9c954bcf443428c80b0f107b3bc48749" prot="public">
          <name>DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="infutil_8h_1a4e90a9976f0c3319ed0e4cb518eb8df1afe29bdbfb6e2165eec29bf28af429856" prot="public">
          <name>BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="14" column="1" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="14" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="infutil_8h_1a745ed016d8485c2b571543498927583a" prot="public" static="no" mutable="no">
        <type>local uInt</type>
        <definition>local uInt inflate_mask[17]</definition>
        <argsstring>[17]</argsstring>
        <name>inflate_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="89" column="1" bodyfile="thirdparty/freetype/src/gzip/infutil.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="infutil_8h_1a41cea9d155ca351ac1124173c1ced2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int inflate_flush</type>
        <definition>local int inflate_flush OF</definition>
        <argsstring>((inflate_blocks_statef *, z_streamp, int))</argsstring>
        <name>OF</name>
        <param>
          <type>(inflate_blocks_statef *, z_streamp, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/infutil.h" line="93" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>infutil.h<sp/>--<sp/>types<sp/>and<sp/>macros<sp/>common<sp/>to<sp/>blocks<sp/>and<sp/>codes</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_INFUTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INFUTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>type<sp/>bits<sp/>(3,<sp/>including<sp/>end<sp/>bit)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LENS,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>lengths<sp/>for<sp/>stored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STORED,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>processing<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TABLE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>table<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BTREE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>bit<sp/>lengths<sp/>tree<sp/>for<sp/>a<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DTREE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>length,<sp/>distance<sp/>trees<sp/>for<sp/>a<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CODES,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>processing<sp/>fixed<sp/>or<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DRY,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>remaining<sp/>window<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DONE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finished<sp/>last<sp/>block,<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BAD}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>got<sp/>a<sp/>data<sp/>error--stuck<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">inflate_block_mode;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inflate<sp/>blocks<sp/>semi-private<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structinflate__blocks__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>inflate_block_mode<sp/><sp/>mode;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inflate_block<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>dependent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>left;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>STORED,<sp/>bytes<sp/>left<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/><ref refid="classtable" kindref="compound">table</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>lengths<sp/>(14<sp/>bits)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>into<sp/>blens<sp/>(or<sp/>border)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uIntf<sp/>*blens;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>lengths<sp/>of<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>tree<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_huft<sp/>*tb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>decoding<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>trees;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>DTREE,<sp/>decoding<sp/>info<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_codes_statef</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*codes;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>decode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>CODES,<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}<sp/>sub;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>submode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>uInt<sp/>last;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>if<sp/>this<sp/>block<sp/>is<sp/>the<sp/>last<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>independent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>uInt<sp/>bitk;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>uLong<sp/>bitb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>inflate_huft<sp/>*hufts;<sp/><sp/></highlight><highlight class="comment">/*<sp/>single<sp/>malloc<sp/>for<sp/>tree<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Bytef<sp/>*window;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sliding<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>Bytef<sp/>*end;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>byte<sp/>after<sp/>sliding<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>Bytef<sp/>*read;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>Bytef<sp/>*write;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>check_func<sp/>checkfn;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>uLong<sp/>check;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>defines<sp/>for<sp/>inflate<sp/>input/output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>update<sp/>pointers<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDBITS<sp/>{s-&gt;bitb=b;s-&gt;bitk=k;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDIN<sp/>{z-&gt;avail_in=n;z-&gt;total_in+=p-z-&gt;next_in;z-&gt;next_in=p;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDOUT<sp/>{s-&gt;write=q;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE<sp/>{UPDBITS<sp/>UPDIN<sp/>UPDOUT}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LEAVE<sp/>{UPDATE<sp/>return<sp/>inflate_flush(s,z,r);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>get<sp/>bytes<sp/>and<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOADIN<sp/>{p=z-&gt;next_in;n=z-&gt;avail_in;b=s-&gt;bitb;k=s-&gt;bitk;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEEDBYTE<sp/>{if(n)r=Z_OK;else<sp/>LEAVE}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEXTBYTE<sp/>(n--,*p++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEEDBITS(j)<sp/>{while(k&lt;(j)){NEEDBYTE;b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMPBITS(j)<sp/>{b&gt;&gt;=(j);k-=(j);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>output<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAVAIL<sp/>(uInt)(q&lt;s-&gt;read?s-&gt;read-q-1:s-&gt;end-q)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOADOUT<sp/>{q=s-&gt;write;m=(uInt)WAVAIL;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRAP<sp/>{if(q==s-&gt;end&amp;&amp;s-&gt;read!=s-&gt;window){q=s-&gt;window;m=(uInt)WAVAIL;}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLUSH<sp/>{UPDOUT<sp/>r=inflate_flush(s,z,r);<sp/>LOADOUT}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEEDOUT<sp/>{if(m==0){WRAP<sp/>if(m==0){FLUSH<sp/>WRAP<sp/>if(m==0)<sp/>LEAVE}}r=Z_OK;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OUTBYTE(a)<sp/>{*q++=(Byte)(a);m--;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>load<sp/>local<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOAD<sp/>{LOADIN<sp/>LOADOUT}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>masks<sp/>for<sp/>lower<sp/>bits<sp/>(size<sp/>given<sp/>to<sp/>avoid<sp/>silly<sp/>warnings<sp/>with<sp/>Visual<sp/>C++)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_INFLATE_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">local<sp/>uInt<sp/>inflate_mask[17];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>sliding<sp/>window<sp/>to<sp/>the<sp/>output<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_flush<sp/>OF((</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_statef<sp/>*,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>z_streamp<sp/>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/infutil.h"/>
  </compounddef>
</doxygen>
