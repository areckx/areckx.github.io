<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ptlinux_8c" kind="file" language="C++">
    <compoundname>ptlinux.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="porttime_8h" local="yes">porttime.h</includes>
    <includes local="yes">sys/time.h</includes>
    <includes local="yes">sys/resource.h</includes>
    <includes local="yes">sys/timeb.h</includes>
    <includes local="yes">pthread.h</includes>
    <incdepgraph>
      <node id="93093">
        <label>stdlib.h</label>
      </node>
      <node id="93099">
        <label>sys/resource.h</label>
      </node>
      <node id="93101">
        <label>pthread.h</label>
      </node>
      <node id="93096">
        <label>sys/types.h</label>
      </node>
      <node id="93095">
        <label>unistd.h</label>
      </node>
      <node id="93092">
        <label>thirdparty/portmidi/porttime/ptlinux.c</label>
        <link refid="ptlinux_8c"/>
        <childnode refid="93093" relation="include">
        </childnode>
        <childnode refid="93094" relation="include">
        </childnode>
        <childnode refid="93095" relation="include">
        </childnode>
        <childnode refid="93096" relation="include">
        </childnode>
        <childnode refid="93097" relation="include">
        </childnode>
        <childnode refid="93098" relation="include">
        </childnode>
        <childnode refid="93099" relation="include">
        </childnode>
        <childnode refid="93100" relation="include">
        </childnode>
        <childnode refid="93101" relation="include">
        </childnode>
      </node>
      <node id="93098">
        <label>sys/time.h</label>
      </node>
      <node id="93100">
        <label>sys/timeb.h</label>
      </node>
      <node id="93094">
        <label>stdio.h</label>
      </node>
      <node id="93097">
        <label>porttime.h</label>
        <link refid="porttime_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="structpt__callback__parameters" prot="public">pt_callback_parameters</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ptlinux_8c_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="37" column="9" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ptlinux_8c_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="38" column="9" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ptlinux_8c_1ad33ffb4eb28d971aaf7b80b897548657" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int time_started_flag</definition>
        <argsstring></argsstring>
        <name>time_started_flag</name>
        <initializer>= FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="40" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ptlinux_8c_1aa8abc76b737dc45c544d187759d64615" prot="public" static="yes" mutable="no">
        <type>struct timeb</type>
        <definition>struct timeb time_offset</definition>
        <argsstring></argsstring>
        <name>time_offset</name>
        <initializer>= {0, 0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="40" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ptlinux_8c_1a254d595de7ea8b73a13eb284a31bc464" prot="public" static="yes" mutable="no">
        <type>pthread_t</type>
        <definition>pthread_t pt_thread_pid</definition>
        <argsstring></argsstring>
        <name>pt_thread_pid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="42" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ptlinux_8c_1a041415ad5239115dea8a01975154f44f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int pt_callback_proc_id</definition>
        <argsstring></argsstring>
        <name>pt_callback_proc_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="52" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ptlinux_8c_1ac2869e29da754c7c0b9b6db5b51f2a43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* Pt_CallbackProc</definition>
        <argsstring>(void *p)</argsstring>
        <name>Pt_CallbackProc</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="54" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="54" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="ptlinux_8c_1a67205dae78222df6fa27d3c20dd574f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PtError</type>
        <definition>PtError Pt_Start</definition>
        <argsstring>(int resolution, PtCallback *callback, void *userData)</argsstring>
        <name>Pt_Start</name>
        <param>
          <type>int</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>PtCallback *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="78" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="78" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="ptlinux_8c_1a1ec792a0ae207b7243018b84de1bae4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PtError</type>
        <definition>PtError Pt_Stop</definition>
        <argsstring>()</argsstring>
        <name>Pt_Stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="100" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="ptlinux_8c_1a8e5fb8ff92c50c61a25d63911b30efc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pt_Started</definition>
        <argsstring>()</argsstring>
        <name>Pt_Started</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="110" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="ptlinux_8c_1adc561fd1f67132ffd377ac585477b3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PtTimestamp</type>
        <definition>PtTimestamp Pt_Time</definition>
        <argsstring>()</argsstring>
        <name>Pt_Time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="116" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="ptlinux_8c_1a8d0fbfbf7c8cab76abdc236e42dcca9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Pt_Sleep</definition>
        <argsstring>(long duration)</argsstring>
        <name>Pt_Sleep</name>
        <param>
          <type>long</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/porttime/ptlinux.c" line="127" column="1" bodyfile="thirdparty/portmidi/porttime/ptlinux.c" bodystart="127" bodyend="130"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>ptlinux.c<sp/>--<sp/>portable<sp/>timer<sp/>implementation<sp/>for<sp/>linux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IMPLEMENTATION<sp/>NOTES<sp/>(by<sp/>Mark<sp/>Nelson):<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Unlike<sp/>Windows,<sp/>Linux<sp/>has<sp/>no<sp/>system<sp/>call<sp/>to<sp/>request<sp/>a<sp/>periodic<sp/>callback,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">so<sp/>if<sp/>Pt_Start()<sp/>receives<sp/>a<sp/>callback<sp/>parameter,<sp/>it<sp/>must<sp/>create<sp/>a<sp/>thread</highlight></codeline>
<codeline lineno="8"><highlight class="comment">that<sp/>wakes<sp/>up<sp/>periodically<sp/>and<sp/>calls<sp/>the<sp/>provided<sp/>callback<sp/>function.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">If<sp/>running<sp/>as<sp/>superuser,<sp/>use<sp/>setpriority()<sp/>to<sp/>renice<sp/>thread<sp/>to<sp/>-20.<sp/><sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">One<sp/>could<sp/>also<sp/>set<sp/>the<sp/>timer<sp/>thread<sp/>to<sp/>a<sp/>real-time<sp/>priority<sp/>(SCHED_FIFO</highlight></codeline>
<codeline lineno="11"><highlight class="comment">and<sp/>SCHED_RR),<sp/>but<sp/>this<sp/>is<sp/>dangerous<sp/>for<sp/>This<sp/>is<sp/>necessary<sp/>because<sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">if<sp/>the<sp/>callback<sp/>hangs<sp/>it&apos;ll<sp/>never<sp/>return.<sp/>A<sp/>more<sp/>serious<sp/>reason</highlight></codeline>
<codeline lineno="13"><highlight class="comment">is<sp/>that<sp/>the<sp/>current<sp/>scheduler<sp/>implementation<sp/>busy-waits<sp/>instead<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">of<sp/>sleeping<sp/>when<sp/>realtime<sp/>threads<sp/>request<sp/>a<sp/>sleep<sp/>of<sp/>&lt;=2ms<sp/>(as<sp/>a<sp/>way<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">to<sp/>get<sp/>around<sp/>the<sp/>10ms<sp/>granularity),<sp/>which<sp/>means<sp/>the<sp/>thread<sp/>would<sp/>never<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">let<sp/>anyone<sp/>else<sp/>on<sp/>the<sp/>CPU.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">CHANGE<sp/>LOG</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">18-Jul-03<sp/>Roger<sp/>Dannenberg<sp/>--<sp/>Simplified<sp/>code<sp/>to<sp/>set<sp/>priority<sp/>of<sp/>timer</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread.<sp/>Simplified<sp/>implementation<sp/>notes.<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>stdlib,<sp/>stdio,<sp/>unistd,<sp/>and<sp/>sys/types<sp/>were<sp/>added<sp/>because<sp/>they<sp/>appeared</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Gentoo<sp/>patch,<sp/>but<sp/>I&apos;m<sp/>not<sp/>sure<sp/>why<sp/>they<sp/>are<sp/>needed.<sp/>-RBD</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;porttime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sys/time.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sys/resource.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sys/timeb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pthread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time_started_flag<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeb<sp/>time_offset<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_t<sp/>pt_thread_pid;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>this<sp/>is<sp/>static<sp/>data<sp/>--<sp/>we<sp/>only<sp/>need<sp/>one<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structpt__callback__parameters" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>PtCallback<sp/>*callback;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userData;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/><ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pt_callback_proc_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Pt_CallbackProc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref><sp/>*parameters<sp/>=<sp/>(<ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mytime<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>kill<sp/>a<sp/>process,<sp/>just<sp/>increment<sp/>the<sp/>pt_callback_proc_id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;pt_callback_proc_id<sp/>%d,<sp/>id<sp/>%d\n&quot;,<sp/>pt_callback_proc_id,</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters-&gt;id);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(geteuid()<sp/>==<sp/>0)<sp/>setpriority(PRIO_PROCESS,<sp/>0,<sp/>-20);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pt_callback_proc_id<sp/>==<sp/>parameters-&gt;id)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>for<sp/>a<sp/>multiple<sp/>of<sp/>resolution<sp/>ms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>timeout;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delay<sp/>=<sp/>mytime++<sp/>*<sp/>parameters-&gt;resolution<sp/>-<sp/>Pt_Time();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delay<sp/>&lt;<sp/>0)<sp/>delay<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_usec<sp/>=<sp/>delay<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select(0,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>&amp;timeout);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(parameters-&gt;callback))(Pt_Time(),<sp/>parameters-&gt;userData);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;Pt_CallbackProc<sp/>exiting\n&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free(parameters);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">PtError<sp/>Pt_Start(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,<sp/>PtCallback<sp/>*callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userData)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_started_flag)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptNoError;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ftime(&amp;time_offset);<sp/></highlight><highlight class="comment">/*<sp/>need<sp/>this<sp/>set<sp/>before<sp/>process<sp/>runs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref><sp/>*parms<sp/>=<sp/>(<ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref><sp/>*)<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpt__callback__parameters" kindref="compound">pt_callback_parameters</ref>));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parms)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptInsufficientMemory;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms-&gt;id<sp/>=<sp/>pt_callback_proc_id;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms-&gt;resolution<sp/>=<sp/>resolution;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms-&gt;callback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms-&gt;userData<sp/>=<sp/>userData;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_create(&amp;pt_thread_pid,<sp/>NULL,<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pt_CallbackProc,<sp/>parms);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptHostError;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>time_started_flag<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptNoError;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">PtError<sp/>Pt_Stop()</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;Pt_Stop<sp/>called\n&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>pt_callback_proc_id++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(pt_thread_pid,<sp/>NULL);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>time_started_flag<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptNoError;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pt_Started()</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_started_flag;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">PtTimestamp<sp/>Pt_Time()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seconds,<sp/>milliseconds;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeb<sp/>now;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ftime(&amp;now);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>now.time<sp/>-<sp/>time_offset.time;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>milliseconds<sp/>=<sp/>now.millitm<sp/>-<sp/>time_offset.millitm;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seconds<sp/>*<sp/>1000<sp/>+<sp/>milliseconds;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pt_Sleep(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>duration)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(duration<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/porttime/ptlinux.c"/>
  </compounddef>
</doxygen>
