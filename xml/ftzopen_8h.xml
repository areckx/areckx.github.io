<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ftzopen_8h" kind="file" language="C++">
    <compoundname>ftzopen.h</compoundname>
    <includes local="no">ft2build.h</includes>
    <includedby refid="ftzopen_8c" local="yes">thirdparty/freetype/src/lzw/ftzopen.c</includedby>
    <incdepgraph>
      <node id="80162">
        <label>thirdparty/freetype/src/lzw/ftzopen.h</label>
        <link refid="ftzopen_8h"/>
        <childnode refid="80163" relation="include">
        </childnode>
      </node>
      <node id="80163">
        <label>ft2build.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="80165">
        <label>thirdparty/freetype/src/lzw/ftzopen.c</label>
        <link refid="ftzopen_8c_source"/>
      </node>
      <node id="80164">
        <label>thirdparty/freetype/src/lzw/ftzopen.h</label>
        <link refid="ftzopen_8h"/>
        <childnode refid="80165" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_f_t___lzw_state_rec__" prot="public">FT_LzwStateRec_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ftzopen_8h_1ae52084d29393df8477a2553b5740acda" prot="public" static="no">
        <name>FT_LZW_IN_BUFF_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="36" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a7b92e136cc9ee460d34c22c2422e5dd5" prot="public" static="no">
        <name>FT_LZW_DEFAULT_STACK_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="37" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a6115dc1cabbf9dc9bd4c94aa2b2a6de8" prot="public" static="no">
        <name>LZW_INIT_BITS</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="39" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1aafbf039d9d1019bb03176789292f488e" prot="public" static="no">
        <name>LZW_MAX_BITS</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="40" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a195326e020cd38ac65c23b3daafa4430" prot="public" static="no">
        <name>LZW_CLEAR</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="42" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a94d05e661fc69192d09cf5ec16191390" prot="public" static="no">
        <name>LZW_FIRST</name>
        <initializer>257</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="43" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a3e4960aee702cfa681ebf2731696bd29" prot="public" static="no">
        <name>LZW_BIT_MASK</name>
        <initializer>0x1F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="45" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a2f5c5acf939959d5bcf3bb84a184fe45" prot="public" static="no">
        <name>LZW_BLOCK_MASK</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="46" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ftzopen_8h_1a3c87cf66767d89d5fbedb79b37b92f10" prot="public" static="no">
        <name>LZW_MASK</name>
        <param><defname>n</defname></param>
        <initializer>( ( 1U &lt;&lt; (n) ) - 1U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="47" column="9" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ftzopen_8h_1a5ca09aca1db6e46809ab1884ce456120" prot="public" static="no">
        <name>FT_LzwPhase_</name>
        <enumvalue id="ftzopen_8h_1a5ca09aca1db6e46809ab1884ce456120afe5e418bea304196a8beff04d73ed5ca" prot="public">
          <name>FT_LZW_PHASE_START</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ftzopen_8h_1a5ca09aca1db6e46809ab1884ce456120a3a7f65afdebbad593b5f91043c0c5f85" prot="public">
          <name>FT_LZW_PHASE_CODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ftzopen_8h_1a5ca09aca1db6e46809ab1884ce456120a57913e7af9db9423575e4dca1bb4a882" prot="public">
          <name>FT_LZW_PHASE_STACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ftzopen_8h_1a5ca09aca1db6e46809ab1884ce456120a00838844261a7fc03cad9b9a27c57b10" prot="public">
          <name>FT_LZW_PHASE_EOF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="51" column="1" bodyfile="thirdparty/freetype/src/lzw/ftzopen.h" bodystart="50" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ftzopen_8h_1aa2869019ecdb1280be33671233d7cdc7" prot="public" static="no">
        <type>enum FT_LzwPhase_</type>
        <definition>typedef enum FT_LzwPhase_  FT_LzwPhase</definition>
        <argsstring></argsstring>
        <name>FT_LzwPhase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ftzopen_8h_1ac0988fc5936bcf0e0517431501857efb" prot="public" static="no">
        <type>struct <ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwStateRec_</ref></type>
        <definition>typedef struct FT_LzwStateRec_  FT_LzwStateRec</definition>
        <argsstring></argsstring>
        <name>FT_LzwStateRec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ftzopen_8h_1a39bcc0112ad7a642cd5d9f2c362fb5fb" prot="public" static="no">
        <type>struct <ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwStateRec_</ref> *</type>
        <definition>typedef struct FT_LzwStateRec_ * FT_LzwState</definition>
        <argsstring></argsstring>
        <name>FT_LzwState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ftzopen_8h_1a031757477b2bec2afbd4618e178626fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ft_lzwstate_init</definition>
        <argsstring>(FT_LzwState state, FT_Stream source)</argsstring>
        <name>ft_lzwstate_init</name>
        <param>
          <type><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="struct_f_t___stream_rec__" kindref="compound">FT_Stream</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="151" column="1" bodyfile="thirdparty/freetype/src/lzw/ftzopen.c" bodystart="200" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="ftzopen_8h_1afa58f85e0b43e87a69f2f2aac1e38c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ft_lzwstate_done</definition>
        <argsstring>(FT_LzwState state)</argsstring>
        <name>ft_lzwstate_done</name>
        <param>
          <type><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="155" column="1" bodyfile="thirdparty/freetype/src/lzw/ftzopen.c" bodystart="220" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="ftzopen_8h_1ab2838170472a5aa1e234d86ea9f95999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ft_lzwstate_reset</definition>
        <argsstring>(FT_LzwState state)</argsstring>
        <name>ft_lzwstate_reset</name>
        <param>
          <type><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="159" column="1" bodyfile="thirdparty/freetype/src/lzw/ftzopen.c" bodystart="186" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="ftzopen_8h_1a75c1b44b6245538b287913b507a406a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ft_lzwstate_io</definition>
        <argsstring>(FT_LzwState state, FT_Byte *buffer, FT_ULong out_size)</argsstring>
        <name>ft_lzwstate_io</name>
        <param>
          <type><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>FT_Byte *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>FT_ULong</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/lzw/ftzopen.h" line="163" column="1" bodyfile="thirdparty/freetype/src/lzw/ftzopen.c" bodystart="248" bodyend="413"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>ftzopen.h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FreeType<sp/>support<sp/>for<sp/>.Z<sp/>compressed<sp/>files.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>optional<sp/>component<sp/>relies<sp/>on<sp/>NetBSD&apos;s<sp/>zopen().<sp/><sp/>It<sp/>should<sp/>mainly<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>be<sp/>used<sp/>to<sp/>parse<sp/>compressed<sp/>PCF<sp/>fonts,<sp/>as<sp/>found<sp/>with<sp/>many<sp/>X11<sp/>server<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>distributions.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Copyright<sp/>2005-2015<sp/>by<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>David<sp/>Turner.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>FreeType<sp/>project,<sp/>and<sp/>may<sp/>only<sp/>be<sp/>used,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>modified,<sp/>and<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>FreeType<sp/>project<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>license,<sp/>LICENSE.TXT.<sp/><sp/>By<sp/>continuing<sp/>to<sp/>use,<sp/>modify,<sp/>or<sp/>distribute<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>this<sp/>file<sp/>you<sp/>indicate<sp/>that<sp/>you<sp/>have<sp/>read<sp/>the<sp/>license<sp/>and<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>understand<sp/>and<sp/>accept<sp/>it<sp/>fully.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__FT_ZOPEN_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__FT_ZOPEN_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ft2build.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>FT_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>This<sp/>is<sp/>a<sp/>complete<sp/>re-implementation<sp/>of<sp/>the<sp/>LZW<sp/>file<sp/>reader,</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>since<sp/>the<sp/>old<sp/>one<sp/>was<sp/>incredibly<sp/>badly<sp/>written,<sp/>using</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>400<sp/>KByte<sp/>of<sp/>heap<sp/>memory<sp/>before<sp/>decompressing<sp/>anything.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_LZW_IN_BUFF_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_LZW_DEFAULT_STACK_SIZE<sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_INIT_BITS<sp/><sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_MAX_BITS<sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_CLEAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_FIRST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_BIT_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0x1F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_BLOCK_MASK<sp/><sp/><sp/><sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LZW_MASK(<sp/>n<sp/>)<sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>1U<sp/>&lt;&lt;<sp/>(n)<sp/>)<sp/>-<sp/>1U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/>FT_LzwPhase_</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_LZW_PHASE_START<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_LZW_PHASE_CODE,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_LZW_PHASE_STACK,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_LZW_PHASE_EOF</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}<sp/>FT_LzwPhase;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>state<sp/>of<sp/>LZW<sp/>decompressor</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>small<sp/>technical<sp/>note</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>--------------------</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>We<sp/>use<sp/>a<sp/>few<sp/>tricks<sp/>in<sp/>this<sp/>implementation<sp/>that<sp/>are<sp/>explained<sp/>here<sp/>to</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>ease<sp/>debugging<sp/>and<sp/>maintenance.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>-<sp/>First<sp/>of<sp/>all,<sp/>the<sp/>`prefix&apos;<sp/>and<sp/>`suffix&apos;<sp/>arrays<sp/>contain<sp/>the<sp/>suffix</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>and<sp/>prefix<sp/>for<sp/>codes<sp/>over<sp/>256;<sp/>this<sp/>means<sp/>that</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>prefix_of(code)<sp/>==<sp/>state-&gt;prefix[code-256]</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>suffix_of(code)<sp/>==<sp/>state-&gt;suffix[code-256]</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Each<sp/>prefix<sp/>is<sp/>a<sp/>16-bit<sp/>code,<sp/>and<sp/>each<sp/>suffix<sp/>an<sp/>8-bit<sp/>byte.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Both<sp/>arrays<sp/>are<sp/>stored<sp/>in<sp/>a<sp/>single<sp/>memory<sp/>block,<sp/>pointed<sp/>to<sp/>by</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>`state-&gt;prefix&apos;.<sp/><sp/>This<sp/>means<sp/>that<sp/>the<sp/>following<sp/>equality<sp/>is<sp/>always</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>true:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;suffix<sp/>==<sp/>(FT_Byte*)(state-&gt;prefix<sp/>+<sp/>state-&gt;prefix_size)</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Of<sp/>course,<sp/>state-&gt;prefix_size<sp/>is<sp/>the<sp/>number<sp/>of<sp/>prefix/suffix<sp/>slots</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>in<sp/>the<sp/>arrays,<sp/>corresponding<sp/>to<sp/>codes<sp/>256..255+prefix_size.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>-<sp/>`free_ent&apos;<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>next<sp/>free<sp/>entry<sp/>in<sp/>the<sp/>`prefix&apos;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>and<sp/>`suffix&apos;<sp/>arrays.<sp/><sp/>This<sp/>means<sp/>that<sp/>the<sp/>corresponding<sp/>`next<sp/>free</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>code&apos;<sp/>is<sp/>really<sp/>`256+free_ent&apos;.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Moreover,<sp/>`max_free&apos;<sp/>is<sp/>the<sp/>maximum<sp/>value<sp/>that<sp/>`free_ent&apos;<sp/>can<sp/>reach.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>`max_free&apos;<sp/>corresponds<sp/>to<sp/>`(1<sp/>&lt;&lt;<sp/>max_bits)<sp/>-<sp/>256&apos;.<sp/><sp/>Note<sp/>that<sp/>this</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>value<sp/>is<sp/>always<sp/>&lt;=<sp/>0xFF00,<sp/>which<sp/>means<sp/>that<sp/>both<sp/>`free_ent&apos;<sp/>and</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>`max_free&apos;<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>an<sp/>FT_UInt<sp/>variable,<sp/>even<sp/>on<sp/>16-bit</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>machines.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>If<sp/>`free_ent<sp/>==<sp/>max_free&apos;,<sp/>you<sp/>cannot<sp/>add<sp/>new<sp/>codes<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>prefix/suffix<sp/>table.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>-<sp/>`num_bits&apos;<sp/>is<sp/>the<sp/>current<sp/>number<sp/>of<sp/>code<sp/>bits,<sp/>starting<sp/>at<sp/>9<sp/>and</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>growing<sp/>each<sp/>time<sp/>`free_ent&apos;<sp/>reaches<sp/>the<sp/>value<sp/>of<sp/>`free_bits&apos;.<sp/><sp/>The</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>latter<sp/>is<sp/>computed<sp/>as<sp/>follows</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>num_bits<sp/>&lt;<sp/>max_bits:</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_bits<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>num_bits)-256</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_bits<sp/>=<sp/>max_free<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Since<sp/>the<sp/>value<sp/>of<sp/>`max_free<sp/>+<sp/>1&apos;<sp/>can<sp/>never<sp/>be<sp/>reached<sp/>by</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>`free_ent&apos;,<sp/>`num_bits&apos;<sp/>cannot<sp/>grow<sp/>larger<sp/>than<sp/>`max_bits&apos;.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_f_t___lzw_state_rec__" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwStateRec_</ref></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_LzwPhase<sp/><sp/>phase;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Int<sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_eof;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Byte<sp/><sp/><sp/><sp/><sp/><sp/>buf_tab[16];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>buf_offset;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>buf_size;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Bool<sp/><sp/><sp/><sp/><sp/><sp/>buf_clear;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Offset<sp/><sp/><sp/><sp/>buf_total;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>max_bits;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>code<sp/>bits,<sp/>from<sp/>file<sp/>header<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Int<sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_mode;<sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>mode<sp/>flag,<sp/>from<sp/>file<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>max_free;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(1<sp/>&lt;&lt;<sp/>max_bits)<sp/>-<sp/>256<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>num_bits;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>code<sp/>bit<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>free_ent;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>of<sp/>next<sp/>free<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>free_bits;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>reached<sp/>by<sp/>free_ent,<sp/>increment<sp/>num_bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>old_code;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>old_char;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>in_code;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UShort*<sp/><sp/><sp/>prefix;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>dynamically<sp/>allocated<sp/>/<sp/>reallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Byte*<sp/><sp/><sp/><sp/><sp/>suffix;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>suffix<sp/>=<sp/>(FT_Byte*)(prefix<sp/>+<sp/>prefix_size)<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>prefix_size;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>slots<sp/>in<sp/>`prefix&apos;<sp/>or<sp/>`suffix&apos;<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Byte*<sp/><sp/><sp/><sp/><sp/>stack;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>character<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_UInt<sp/><sp/><sp/><sp/><sp/><sp/>stack_top;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Offset<sp/><sp/><sp/><sp/>stack_size;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Byte<sp/><sp/><sp/><sp/><sp/><sp/>stack_0[FT_LZW_DEFAULT_STACK_SIZE];<sp/></highlight><highlight class="comment">/*<sp/>minimize<sp/>heap<sp/>alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_f_t___stream_rec__" kindref="compound">FT_Stream</ref><sp/><sp/><sp/><sp/>source;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>source<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Memory<sp/><sp/><sp/><sp/>memory;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwStateRec</ref>,<sp/>*<ref refid="struct_f_t___lzw_state_rec__" kindref="compound">FT_LzwState</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>FT_LOCAL(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>ft_lzwstate_init(<sp/>FT_LzwState<sp/><sp/>state,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_t___stream_rec__" kindref="compound">FT_Stream</ref><sp/><sp/><sp/><sp/>source<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>FT_LOCAL(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>ft_lzwstate_done(<sp/>FT_LzwState<sp/><sp/>state<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>FT_LOCAL(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>ft_lzwstate_reset(<sp/>FT_LzwState<sp/><sp/>state<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>FT_LOCAL(<sp/>FT_ULong<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>ft_lzwstate_io(<sp/>FT_LzwState<sp/><sp/>state,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_Byte*<sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_ULong<sp/><sp/><sp/><sp/><sp/>out_size<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__FT_ZOPEN_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>END<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/lzw/ftzopen.h"/>
  </compounddef>
</doxygen>
