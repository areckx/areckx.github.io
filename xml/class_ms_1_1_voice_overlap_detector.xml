<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_ms_1_1_voice_overlap_detector" kind="class" language="C++" prot="public">
    <compoundname>Ms::VoiceOverlapDetector</compoundname>
    <includes refid="musicxmlsupport_8h" local="no">musicxmlsupport.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ms_1_1_voice_overlap_detector_1ad3f83c561d644e8ee3a07b192470e19c" prot="private" static="no" mutable="no">
        <type>QMap&lt; QString, <ref refid="class_ms_1_1_note_list" kindref="compound">NoteList</ref> &gt;</type>
        <definition>QMap&lt;QString, NoteList&gt; Ms::VoiceOverlapDetector::_noteLists</definition>
        <argsstring></argsstring>
        <name>_noteLists</name>
        <briefdescription>
<para>The notelists for all the voices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="117" column="1" bodyfile="mscore/musicxmlsupport.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ms_1_1_voice_overlap_detector_1a7e0ced7dbca4fd7d9813bc8029ac7b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ms::VoiceOverlapDetector::VoiceOverlapDetector</definition>
        <argsstring>()</argsstring>
        <name>VoiceOverlapDetector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="111" column="1" bodyfile="mscore/musicxmlsupport.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_voice_overlap_detector_1a5ae0da70122cb1cf079e5f63f8c95392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::VoiceOverlapDetector::addNote</definition>
        <argsstring>(const int startTick, const int endTick, const QString &amp;voice, const int staff)</argsstring>
        <name>addNote</name>
        <param>
          <type>const int</type>
          <declname>startTick</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>endTick</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>voice</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>staff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="112" column="1" bodyfile="mscore/musicxmlsupport.cpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_voice_overlap_detector_1aa4874f3dbd2e8686474d5129b5ae96d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::VoiceOverlapDetector::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="113" column="1" bodyfile="mscore/musicxmlsupport.cpp" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_voice_overlap_detector_1a1b990818138615d53a4129fb0b405f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::VoiceOverlapDetector::newMeasure</definition>
        <argsstring>()</argsstring>
        <name>newMeasure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="114" column="1" bodyfile="mscore/musicxmlsupport.cpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_voice_overlap_detector_1ac377135334ec99eef334c2194053a7b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::VoiceOverlapDetector::stavesOverlap</definition>
        <argsstring>(const QString &amp;voice) const</argsstring>
        <name>stavesOverlap</name>
        <param>
          <type>const QString &amp;</type>
          <declname>voice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/musicxmlsupport.h" line="115" column="1" bodyfile="mscore/musicxmlsupport.cpp" bodystart="130" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Detect overlap in a voice, which is when a voice has two or more notes active at the same time. In theory this should not happen, as voices only move forward in time, but Sibelius 7 reuses voice numbers in multi- staff parts, which leads to overlap.</para><para>Current implementation does not detect voice overlap within a staff, but only between staves. </para>    </detaileddescription>
    <location file="mscore/musicxmlsupport.h" line="109" column="1" bodyfile="mscore/musicxmlsupport.h" bodystart="109" bodyend="118"/>
    <listofallmembers>
      <member refid="class_ms_1_1_voice_overlap_detector_1ad3f83c561d644e8ee3a07b192470e19c" prot="private" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>_noteLists</name></member>
      <member refid="class_ms_1_1_voice_overlap_detector_1a5ae0da70122cb1cf079e5f63f8c95392" prot="public" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>addNote</name></member>
      <member refid="class_ms_1_1_voice_overlap_detector_1aa4874f3dbd2e8686474d5129b5ae96d1" prot="public" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>dump</name></member>
      <member refid="class_ms_1_1_voice_overlap_detector_1a1b990818138615d53a4129fb0b405f0d" prot="public" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>newMeasure</name></member>
      <member refid="class_ms_1_1_voice_overlap_detector_1ac377135334ec99eef334c2194053a7b0" prot="public" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>stavesOverlap</name></member>
      <member refid="class_ms_1_1_voice_overlap_detector_1a7e0ced7dbca4fd7d9813bc8029ac7b57" prot="public" virt="non-virtual"><scope>Ms::VoiceOverlapDetector</scope><name>VoiceOverlapDetector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
