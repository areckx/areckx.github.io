<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_ms_1_1_music_x_m_l_parser_pass2" kind="class" language="C++" prot="public">
    <compoundname>Ms::MusicXMLParserPass2</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1af1a1d53274e2ceb84a0c9086649418f7" prot="private" static="no" mutable="no">
        <type>QXmlStreamReader</type>
        <definition>QXmlStreamReader Ms::MusicXMLParserPass2::_e</definition>
        <argsstring></argsstring>
        <name>_e</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="165" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a3375c25642a006e7e58a29dd8316edf7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ms::MusicXMLParserPass2::_divs</definition>
        <argsstring></argsstring>
        <name>_divs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="166" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1ac8ee5bba94c369cb3329a0b69f8866a7" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString Ms::MusicXMLParserPass2::_parseStatus</definition>
        <argsstring></argsstring>
        <name>_parseStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="167" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1afb5303092df306f8e1c9fb94fc460ac8" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_score" kindref="compound">Score</ref> *const</type>
        <definition>Score* const Ms::MusicXMLParserPass2::_score</definition>
        <argsstring></argsstring>
        <name>_score</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="168" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a9d4e4155c60a8f72d29c532bbcece353" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_music_x_m_l_parser_pass1" kindref="compound">MusicXMLParserPass1</ref> &amp;</type>
        <definition>MusicXMLParserPass1&amp; Ms::MusicXMLParserPass2::_pass1</definition>
        <argsstring></argsstring>
        <name>_pass1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="169" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a62c6fba680b329f71ffb59a8f6055c5c" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction Ms::MusicXMLParserPass2::_timeSigDura</definition>
        <argsstring></argsstring>
        <name>_timeSigDura</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="176" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a28bee0d5cd28e4950581c6061225d4c4" prot="private" static="no" mutable="no">
        <type>QVector&lt; <ref refid="class_ms_1_1_tuplet" kindref="compound">Tuplet</ref> * &gt;</type>
        <definition>QVector&lt;Tuplet*&gt; Ms::MusicXMLParserPass2::_tuplets</definition>
        <argsstring></argsstring>
        <name>_tuplets</name>
        <briefdescription>
<para>Current tuplet for each track in the current part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="178" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a3b5492f51bd3e51585ddc3e5c21f13d7" prot="private" static="no" mutable="no">
        <type>QVector&lt; bool &gt;</type>
        <definition>QVector&lt;bool&gt; Ms::MusicXMLParserPass2::_tuplImpls</definition>
        <argsstring></argsstring>
        <name>_tuplImpls</name>
        <briefdescription>
<para>Current tuplet implicit flag for each track in the current part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="179" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a86b8d1761413e0691d527e936ce65fe3" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_slur_desc" kindref="compound">SlurDesc</ref></type>
        <definition>SlurDesc Ms::MusicXMLParserPass2::_slur[MAX_NUMBER_LEVEL]</definition>
        <argsstring>[MAX_NUMBER_LEVEL]</argsstring>
        <name>_slur</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="180" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1ad11c8d4e9b932d1ab53dcf1738224a8b" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_trill" kindref="compound">Trill</ref> *</type>
        <definition>Trill* Ms::MusicXMLParserPass2::_trills[MAX_NUMBER_LEVEL]</definition>
        <argsstring>[MAX_NUMBER_LEVEL]</argsstring>
        <name>_trills</name>
        <briefdescription>
<para>Current trills. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="181" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1aea9bebbdb36759e5a6d3bf947685505b" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine* Ms::MusicXMLParserPass2::_brackets[MAX_BRACKETS]</definition>
        <argsstring>[MAX_BRACKETS]</argsstring>
        <name>_brackets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="182" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1ae608a54d221f38095aecbcdeef229b62" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine* Ms::MusicXMLParserPass2::_dashes[MAX_DASHES]</definition>
        <argsstring>[MAX_DASHES]</argsstring>
        <name>_dashes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="183" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a95bfb5dc374e6d543a037e8a28e0a34c" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine* Ms::MusicXMLParserPass2::_ottavas[MAX_NUMBER_LEVEL]</definition>
        <argsstring>[MAX_NUMBER_LEVEL]</argsstring>
        <name>_ottavas</name>
        <briefdescription>
<para>Current ottavas. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="184" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a3bbdc7aa7e308e62b9eabe576f1855dd" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine* Ms::MusicXMLParserPass2::_hairpins[MAX_NUMBER_LEVEL]</definition>
        <argsstring>[MAX_NUMBER_LEVEL]</argsstring>
        <name>_hairpins</name>
        <briefdescription>
<para>Current hairpins. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="185" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1af4076c1cf533b4fa3aa2822400d16b43" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_glissando" kindref="compound">Glissando</ref> *</type>
        <definition>Glissando* Ms::MusicXMLParserPass2::_glissandi[MAX_NUMBER_LEVEL][2]</definition>
        <argsstring>[MAX_NUMBER_LEVEL][2]</argsstring>
        <name>_glissandi</name>
        <briefdescription>
<para>Current slides ([0]) / glissandi ([1]) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="188" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1ae52d308f418b6b65680e72a750d0f95e" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_tie" kindref="compound">Tie</ref> *</type>
        <definition>Tie* Ms::MusicXMLParserPass2::_tie</definition>
        <argsstring></argsstring>
        <name>_tie</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="190" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a0ed087987855b9564b88d212866ee124" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_volta" kindref="compound">Volta</ref> *</type>
        <definition>Volta* Ms::MusicXMLParserPass2::_lastVolta</definition>
        <argsstring></argsstring>
        <name>_lastVolta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="191" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a1a5433c407163e3a76138aaaef736d43" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ms::MusicXMLParserPass2::_hasDrumset</definition>
        <argsstring></argsstring>
        <name>_hasDrumset</name>
        <briefdescription>
<para>drumset defined TODO: move to pass 1 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="192" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a274f2bc1970c16ec05f48fbc94150ee4" prot="private" static="no" mutable="no">
        <type>MusicXmlSpannerMap</type>
        <definition>MusicXmlSpannerMap Ms::MusicXMLParserPass2::_spanners</definition>
        <argsstring></argsstring>
        <name>_spanners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="194" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1acca6ec4818319da6e272148d638d8ace" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine* Ms::MusicXMLParserPass2::_pedal</definition>
        <argsstring></argsstring>
        <name>_pedal</name>
        <briefdescription>
<para>Current pedal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="196" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a05db39333eb9eb19e4231e12b7246c6e" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_pedal" kindref="compound">Pedal</ref> *</type>
        <definition>Pedal* Ms::MusicXMLParserPass2::_pedalContinue</definition>
        <argsstring></argsstring>
        <name>_pedalContinue</name>
        <briefdescription>
<para>Current pedal type=&quot;change&quot; requiring fixup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="197" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1af55527f2d949ba00acac9f1eab142f59" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_harmony" kindref="compound">Harmony</ref> *</type>
        <definition>Harmony* Ms::MusicXMLParserPass2::_harmony</definition>
        <argsstring></argsstring>
        <name>_harmony</name>
        <briefdescription>
<para>Current harmony. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="198" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a0777d177d19d279a225009182f2e4102" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_chord" kindref="compound">Chord</ref> *</type>
        <definition>Chord* Ms::MusicXMLParserPass2::_tremStart</definition>
        <argsstring></argsstring>
        <name>_tremStart</name>
        <briefdescription>
<para>Starting chord for current tremolo. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="199" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a86d0a6af6423aed7469dff1c0fa392c6" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_figured_bass" kindref="compound">FiguredBass</ref> *</type>
        <definition>FiguredBass* Ms::MusicXMLParserPass2::_figBass</definition>
        <argsstring></argsstring>
        <name>_figBass</name>
        <briefdescription>
<para>Current figured bass element (to attach to next note) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="200" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1ae4767ff4983d74cc83c3500caf4d1b04" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ms::MusicXMLParserPass2::_multiMeasureRestCount</definition>
        <argsstring></argsstring>
        <name>_multiMeasureRestCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="201" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ms_1_1_music_x_m_l_parser_pass2_1a06fd0f1267ad02fd3ebdac0c6c52f082" prot="private" static="no" mutable="no">
        <type><ref refid="class_ms_1_1_music_xml_lyrics_extend" kindref="compound">MusicXmlLyricsExtend</ref></type>
        <definition>MusicXmlLyricsExtend Ms::MusicXMLParserPass2::_extendedLyrics</definition>
        <argsstring></argsstring>
        <name>_extendedLyrics</name>
        <briefdescription>
<para><ref refid="class_ms_1_1_lyrics" kindref="compound">Lyrics</ref> with &quot;extend&quot; requiring fixup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="202" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a56e9e309e8dc346213f9be412e57fc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ms::MusicXMLParserPass2::MusicXMLParserPass2</definition>
        <argsstring>(Score *score, MusicXMLParserPass1 &amp;pass1)</argsstring>
        <name>MusicXMLParserPass2</name>
        <param>
          <type><ref refid="class_ms_1_1_score" kindref="compound">Score</ref> *</type>
          <declname>score</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_music_x_m_l_parser_pass1" kindref="compound">MusicXMLParserPass1</ref> &amp;</type>
          <declname>pass1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="103" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1420" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a3c2d4ccceaad560493c5aa8d33bf8946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::initPartState</definition>
        <argsstring>(const QString &amp;partId)</argsstring>
        <name>initPartState</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize members as required for reading the MusicXML part element. TODO: factor out part reading into a separate class TODO: preferably use automatically initialized variables <ref refid="class_ms_1_1_note" kindref="compound">Note</ref> that Qt automatically initializes new elements in QVector (tuplets). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="104" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1437" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aa540cd2d8b4a9ec0cd89dd6c4005901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Score::FileError</type>
        <definition>Score::FileError Ms::MusicXMLParserPass2::parse</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>parse</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse MusicXML in <emphasis>device</emphasis> and extract pass 2 data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="105" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1610" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a95e04fe5031f4c477ad44569980315b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Score::FileError</type>
        <definition>Score::FileError Ms::MusicXMLParserPass2::parse</definition>
        <argsstring>()</argsstring>
        <name>parse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start the parsing process, after verifying the top-level node is score-partwise </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="106" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1627" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1afab0f4e00bcb58b3e0f480663f5a394c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::scorePartwise</definition>
        <argsstring>()</argsstring>
        <name>scorePartwise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the MusicXML top-level (XPath /score-partwise) node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="107" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1658" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a7fb4aa7a1d019dfb68a66885df1b76d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::partList</definition>
        <argsstring>()</argsstring>
        <name>partList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part-list node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="108" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1685" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a2714e367b34679a2b2545c88a7c00d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::scorePart</definition>
        <argsstring>()</argsstring>
        <name>scorePart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="109" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1704" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aabf559efdedce1289a576e8a6f177d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::part</definition>
        <argsstring>()</argsstring>
        <name>part</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="110" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1728" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a2863b334c80325f884359b7498d046a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::measChordNote</definition>
        <argsstring>()</argsstring>
        <name>measChordNote</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a4d0584d9b8be541b7a33d9a9560e5e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::measChordFlush</definition>
        <argsstring>()</argsstring>
        <name>measChordFlush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a0a37fd1f0a5c962fed1c843c00de07aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::measure</definition>
        <argsstring>(const QString &amp;partId, const Fraction time)</argsstring>
        <name>measure</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="113" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2037" bodyend="2190"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1adac6c4f2cd310507980dd7d57aa3c8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::attributes</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const int tick)</argsstring>
        <name>attributes</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>tick</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="114" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2206" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a68076147c3375916ebceb86db3c51456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::measureStyle</definition>
        <argsstring>(Measure *measure)</argsstring>
        <name>measureStyle</name>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/measure-style node. Initializes the &quot;in multi-measure rest&quot; state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="115" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2237" bodyend="2255"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a2bbb76c80c200f8c49119cbcdaf48f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::print</definition>
        <argsstring>(Measure *measure)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/print node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="116" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2266" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a90c030127af7225c2e0f3b51166cc0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::barline</definition>
        <argsstring>(const QString &amp;partId, Measure *measure)</argsstring>
        <name>barline</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/barline node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="117" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3127" bodyend="3205"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1ad3b40065fafd611e568675bd30fed307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::key</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const int tick)</argsstring>
        <name>key</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>tick</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes/key node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="118" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3428" bodyend="3499"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a4f419cca4f66e1c7a3ef9fc795e4d6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::clef</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const int tick)</argsstring>
        <name>clef</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>tick</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes/clef node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="119" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3509" bodyend="3629"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aa5c606224d78e25bbc87cf9683f6705f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::time</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const int tick)</argsstring>
        <name>time</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>tick</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes/time node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="120" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3694" bodyend="3740"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a78630279e14460f929c5c31ed2567fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::divisions</definition>
        <argsstring>()</argsstring>
        <name>divisions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes/divisions node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="121" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3789" bodyend="3796"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a35d97342df1129c8a873332f2126fe23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::transpose</definition>
        <argsstring>(const QString &amp;partId)</argsstring>
        <name>transpose</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/attributes/transpose node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="122" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3750" bodyend="3779"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1acc37a226f30b5759c9ce8306b780b2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_note" kindref="compound">Note</ref> *</type>
        <definition>Note * Ms::MusicXMLParserPass2::note</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const Fraction sTime, const Fraction prevTime, Fraction &amp;dura, QString &amp;currentVoice, GraceChordList &amp;gcl, int &amp;gac, Beam *&amp;beam, FiguredBassList &amp;fbl, int &amp;alt)</argsstring>
        <name>note</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref></type>
          <declname>sTime</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref></type>
          <declname>prevTime</declname>
          <defname>prevSTime</defname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>dura</declname>
        </param>
        <param>
          <type>QString &amp;</type>
          <declname>currentVoice</declname>
        </param>
        <param>
          <type>GraceChordList &amp;</type>
          <declname>gcl</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>gac</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_beam" kindref="compound">Beam</ref> *&amp;</type>
          <declname>beam</declname>
          <defname>currBeam</defname>
        </param>
        <param>
          <type>FiguredBassList &amp;</type>
          <declname>fbl</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>alt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="123" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4082" bodyend="4601"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6aca58f758354d164ddcffbf7ad64fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::notePrintSpacingNo</definition>
        <argsstring>(Fraction &amp;dura)</argsstring>
        <name>notePrintSpacingNo</name>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>dura</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note node for a note with print-spacing=&quot;no&quot;. These are handled like a forward: only moving the time forward. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="126" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4612" bodyend="4642"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a7287a04f8379ee29be57827a5dd2ebe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_figured_bass_item" kindref="compound">FiguredBassItem</ref> *</type>
        <definition>FiguredBassItem * Ms::MusicXMLParserPass2::figure</definition>
        <argsstring>(const int idx, const bool paren)</argsstring>
        <name>figure</name>
        <param>
          <type>const int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>paren</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/harmony/figured-bass/figure node. Return the result as a <ref refid="class_ms_1_1_figured_bass_item" kindref="compound">FiguredBassItem</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="127" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4695" bodyend="4750"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6536c16b7e3cc48c77df3500969b0de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_figured_bass" kindref="compound">FiguredBass</ref> *</type>
        <definition>FiguredBass * Ms::MusicXMLParserPass2::figuredBass</definition>
        <argsstring>()</argsstring>
        <name>figuredBass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/harmony/figured-bass node. TODO check description: Set the <ref refid="class_ms_1_1_figured_bass" kindref="compound">FiguredBass</ref> state based on the MusicXML &lt;figured-bass&gt; node de. <ref refid="class_ms_1_1_note" kindref="compound">Note</ref> that onNote and ticks must be set by the MusicXML importer, as the required context is not present in the items DOM tree. Exception: if a &lt;duration&gt; element is present, tick can be set. Return the result as a <ref refid="class_ms_1_1_figured_bass" kindref="compound">FiguredBass</ref> if valid, non-empty figure(s) are found. Return 0 in case of error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="128" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4767" bodyend="4808"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aad404cfd8fe13a81544bd1e8da795468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_fret_diagram" kindref="compound">FretDiagram</ref> *</type>
        <definition>FretDiagram * Ms::MusicXMLParserPass2::frame</definition>
        <argsstring>()</argsstring>
        <name>frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/harmony/frame node. Return the result as a <ref refid="class_ms_1_1_fret_diagram" kindref="compound">FretDiagram</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="129" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4819" bodyend="4867"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aa6a09ee401d5ac7e335649f3c3266e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::harmony</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const Fraction sTime)</argsstring>
        <name>harmony</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const <ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref></type>
          <declname>sTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/harmony node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="130" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4877" bodyend="5063"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6cecdfbcb5105fedfbe981ea022df7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_accidental" kindref="compound">Accidental</ref> *</type>
        <definition>Accidental * Ms::MusicXMLParserPass2::accidental</definition>
        <argsstring>()</argsstring>
        <name>accidental</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/accidental node. Return the result as an <ref refid="class_ms_1_1_accidental" kindref="compound">Accidental</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="131" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5074" bodyend="5096"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6d5d7103dc2875d9f749f22491452f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::beam</definition>
        <argsstring>(Beam::Mode &amp;beamMode)</argsstring>
        <name>beam</name>
        <param>
          <type>Beam::Mode &amp;</type>
          <declname>beamMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/beam node. Sets beamMode in case of begin, continue or end beam number 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="132" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5107" bodyend="5130"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1abbeef32db00759eb0f1ddb092110456f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::duration</definition>
        <argsstring>(Fraction &amp;dura)</argsstring>
        <name>duration</name>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>dura</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/duration node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="133" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="4669" bodyend="4684"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a5886a697115694a24d2aff200aa47425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::forward</definition>
        <argsstring>(Fraction &amp;dura)</argsstring>
        <name>forward</name>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>dura</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/forward node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="134" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5140" bodyend="5154"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1af1845a2177dfef1e7c41f9b24542e7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::backup</definition>
        <argsstring>(Fraction &amp;dura)</argsstring>
        <name>backup</name>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>dura</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/backup node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="135" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5164" bodyend="5174"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a15374bf1fbe1441af87425e9394bbd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::timeModification</definition>
        <argsstring>(Fraction &amp;timeMod, TDuration &amp;normalType)</argsstring>
        <name>timeModification</name>
        <param>
          <type><ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>timeMod</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_t_duration" kindref="compound">TDuration</ref> &amp;</type>
          <declname>normalType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/time-modification node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="136" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5184" bodyend="5218"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a016fc02bae1bb7486f0b4b4ddf3b4a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::pitch</definition>
        <argsstring>(int &amp;step, int &amp;alter, int &amp;oct, AccidentalType &amp;accid)</argsstring>
        <name>pitch</name>
        <param>
          <type>int &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>alter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>oct</declname>
        </param>
        <param>
          <type>AccidentalType &amp;</type>
          <declname>accid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/pitch node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="137" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5228" bodyend="5274"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a1a33ece7284b3787aadb25575b1d6f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::rest</definition>
        <argsstring>(int &amp;step, int &amp;octave)</argsstring>
        <name>rest</name>
        <param>
          <type>int &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>octave</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/rest node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="138" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5284" bodyend="5289"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a484fe55303c211ed2d17c236976dfedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::lyric</definition>
        <argsstring>(QMap&lt; int, Lyrics *&gt; &amp;numbrdLyrics, QMap&lt; int, Lyrics *&gt; &amp;defyLyrics, QList&lt; Lyrics *&gt; &amp;unNumbrdLyrics, QSet&lt; Lyrics *&gt; &amp;extLyrics)</argsstring>
        <name>lyric</name>
        <param>
          <type>QMap&lt; int, <ref refid="class_ms_1_1_lyrics" kindref="compound">Lyrics</ref> *&gt; &amp;</type>
          <declname>numbrdLyrics</declname>
        </param>
        <param>
          <type>QMap&lt; int, <ref refid="class_ms_1_1_lyrics" kindref="compound">Lyrics</ref> *&gt; &amp;</type>
          <declname>defyLyrics</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_ms_1_1_lyrics" kindref="compound">Lyrics</ref> *&gt; &amp;</type>
          <declname>unNumbrdLyrics</declname>
        </param>
        <param>
          <type>QSet&lt; <ref refid="class_ms_1_1_lyrics" kindref="compound">Lyrics</ref> *&gt; &amp;</type>
          <declname>extLyrics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/lyric node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="139" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5299" bodyend="5388"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1ab712c5ff2628853b9071ef50a3b84bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::notations</definition>
        <argsstring>(Note *note, ChordRest *cr, const int tick, MusicXmlTupletDesc &amp;tupletDesc, bool &amp;lastGraceAFter)</argsstring>
        <name>notations</name>
        <param>
          <type><ref refid="class_ms_1_1_note" kindref="compound">Note</ref> *</type>
          <declname>note</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_chord_rest" kindref="compound">ChordRest</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>tick</declname>
        </param>
        <param>
          <type><ref refid="struct_ms_1_1_music_xml_tuplet_desc" kindref="compound">MusicXmlTupletDesc</ref> &amp;</type>
          <declname>tupletDesc</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>lastGraceAFter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/notations node. <ref refid="class_ms_1_1_note" kindref="compound">Note</ref> that some notations attach to notes only in <ref refid="class_ms_1_1_muse_score" kindref="compound">MuseScore</ref>, which means trying to attach them to a rest will crash, as in that case note is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="141" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5403" bodyend="5898"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1ae0a8ca011a423a2b39dc803e6fb66361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::stem</definition>
        <argsstring>(Direction &amp;sd, bool &amp;nost)</argsstring>
        <name>stem</name>
        <param>
          <type><ref refid="class_ms_1_1_direction" kindref="compound">Direction</ref> &amp;</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>nost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/stem node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="142" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5908" bodyend="5928"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a046b0637cee67d43902bead56c8602eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::fermata</definition>
        <argsstring>(ChordRest *cr)</argsstring>
        <name>fermata</name>
        <param>
          <type><ref refid="class_ms_1_1_chord_rest" kindref="compound">ChordRest</ref> *</type>
          <declname>cr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/notations/fermata node. <ref refid="class_ms_1_1_note" kindref="compound">Note</ref>: MusicXML common.mod: &quot;An empty fermata element represents a normal fermata.&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="143" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5939" bodyend="5954"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a1b43f9277d17fe4dfa909d711c4df21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::tuplet</definition>
        <argsstring>(MusicXmlTupletDesc &amp;tupletDesc)</argsstring>
        <name>tuplet</name>
        <param>
          <type><ref refid="struct_ms_1_1_music_xml_tuplet_desc" kindref="compound">MusicXmlTupletDesc</ref> &amp;</type>
          <declname>tupletDesc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the /score-partwise/part/measure/note/notations/tuplet node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="144" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="5964" bodyend="5997"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1ab35c8808afa7ad2c74c59e93af716b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::doEnding</definition>
        <argsstring>(const QString &amp;partId, Measure *measure, const QString &amp;number, const QString &amp;type, const QString &amp;text)</argsstring>
        <name>doEnding</name>
        <param>
          <type>const QString &amp;</type>
          <declname>partId</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_measure" kindref="compound">Measure</ref> *</type>
          <declname>measure</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="145" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="3211" bodyend="3269"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a57e983b37a5a06f337254e95f88c6be2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString Ms::MusicXMLParserPass2::getParseStatus</definition>
        <argsstring>() const</argsstring>
        <name>getParseStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="146" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a796d6fcbc39dab93597b786c004b8345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::logDebugTrace</definition>
        <argsstring>(const QString &amp;info)</argsstring>
        <name>logDebugTrace</name>
        <param>
          <type>const QString &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6292f48423d6ed5e2dbcae2b43cf906f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::logDebugInfo</definition>
        <argsstring>(const QString &amp;info)</argsstring>
        <name>logDebugInfo</name>
        <param>
          <type>const QString &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Log debug <emphasis>info</emphasis> (non-fatal events relevant for debugging). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="149" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1520" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1af55888c2ddfc198a3b1b7eec352873ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::logError</definition>
        <argsstring>(const QString &amp;error)</argsstring>
        <name>logError</name>
        <param>
          <type>const QString &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Log <emphasis>error</emphasis> (possibly non-fatal but to be reported to the user anyway). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="150" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1534" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a3faf1fc79c6220380fb79e9cf6723863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::skipLogCurrElem</definition>
        <argsstring>()</argsstring>
        <name>skipLogCurrElem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Skip the current element, log debug as info. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="151" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1596" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a43212c21e5c998004246c90586394b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::addSpanner</definition>
        <argsstring>(const MusicXmlSpannerDesc &amp;desc)</argsstring>
        <name>addSpanner</name>
        <param>
          <type>const <ref refid="struct_ms_1_1_music_xml_spanner_desc" kindref="compound">MusicXmlSpannerDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="154" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2948" bodyend="2959"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a37424dae9aca3cc319ba8be99d841892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ms_1_1_s_line" kindref="compound">SLine</ref> *</type>
        <definition>SLine * Ms::MusicXMLParserPass2::getSpanner</definition>
        <argsstring>(const MusicXmlSpannerDesc &amp;desc)</argsstring>
        <name>getSpanner</name>
        <param>
          <type>const <ref refid="struct_ms_1_1_music_xml_spanner_desc" kindref="compound">MusicXmlSpannerDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="155" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2965" bodyend="2977"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1ac396f512b2bfe7fc6025e7bfaee3ab38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::clearSpanner</definition>
        <argsstring>(const MusicXmlSpannerDesc &amp;desc)</argsstring>
        <name>clearSpanner</name>
        <param>
          <type>const <ref refid="struct_ms_1_1_music_xml_spanner_desc" kindref="compound">MusicXmlSpannerDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="156" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="2983" bodyend="2994"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1aad5e88f33bef3012d988e10141c2b3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::MusicXMLParserPass2::setMultiMeasureRestCount</definition>
        <argsstring>(int count)</argsstring>
        <name>setMultiMeasureRestCount</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the multi-measure rest counter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="159" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1490" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_music_x_m_l_parser_pass2_1a6dfc2c4814c754167689df84b9202689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ms::MusicXMLParserPass2::getAndDecMultiMeasureRestCount</definition>
        <argsstring>()</argsstring>
        <name>getAndDecMultiMeasureRestCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return current multi-measure rest counter. Decrement counter if possible (not beyond -1). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mscore/importmxmlpass2.h" line="160" column="1" bodyfile="mscore/importmxmlpass2.cpp" bodystart="1504" bodyend="1510"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="mscore/importmxmlpass2.h" line="101" column="1" bodyfile="mscore/importmxmlpass2.h" bodystart="101" bodyend="203"/>
    <listofallmembers>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aea9bebbdb36759e5a6d3bf947685505b" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_brackets</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ae608a54d221f38095aecbcdeef229b62" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_dashes</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a3375c25642a006e7e58a29dd8316edf7" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_divs</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1af1a1d53274e2ceb84a0c9086649418f7" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_e</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a06fd0f1267ad02fd3ebdac0c6c52f082" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_extendedLyrics</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a86d0a6af6423aed7469dff1c0fa392c6" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_figBass</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1af4076c1cf533b4fa3aa2822400d16b43" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_glissandi</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a3bbdc7aa7e308e62b9eabe576f1855dd" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_hairpins</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1af55527f2d949ba00acac9f1eab142f59" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_harmony</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a1a5433c407163e3a76138aaaef736d43" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_hasDrumset</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a0ed087987855b9564b88d212866ee124" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_lastVolta</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ae4767ff4983d74cc83c3500caf4d1b04" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_multiMeasureRestCount</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a95bfb5dc374e6d543a037e8a28e0a34c" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_ottavas</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ac8ee5bba94c369cb3329a0b69f8866a7" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_parseStatus</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a9d4e4155c60a8f72d29c532bbcece353" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_pass1</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1acca6ec4818319da6e272148d638d8ace" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_pedal</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a05db39333eb9eb19e4231e12b7246c6e" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_pedalContinue</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1afb5303092df306f8e1c9fb94fc460ac8" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_score</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a86b8d1761413e0691d527e936ce65fe3" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_slur</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a274f2bc1970c16ec05f48fbc94150ee4" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_spanners</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ae52d308f418b6b65680e72a750d0f95e" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_tie</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a62c6fba680b329f71ffb59a8f6055c5c" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_timeSigDura</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a0777d177d19d279a225009182f2e4102" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_tremStart</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ad11c8d4e9b932d1ab53dcf1738224a8b" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_trills</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a28bee0d5cd28e4950581c6061225d4c4" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_tuplets</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a3b5492f51bd3e51585ddc3e5c21f13d7" prot="private" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>_tuplImpls</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6cecdfbcb5105fedfbe981ea022df7a8" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>accidental</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a43212c21e5c998004246c90586394b6a" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>addSpanner</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1adac6c4f2cd310507980dd7d57aa3c8e7" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>attributes</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1af1845a2177dfef1e7c41f9b24542e7d4" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>backup</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a90c030127af7225c2e0f3b51166cc0b8" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>barline</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6d5d7103dc2875d9f749f22491452f63" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>beam</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ac396f512b2bfe7fc6025e7bfaee3ab38" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>clearSpanner</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a4f419cca4f66e1c7a3ef9fc795e4d6e1" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>clef</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a78630279e14460f929c5c31ed2567fab" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>divisions</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ab35c8808afa7ad2c74c59e93af716b06" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>doEnding</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1abbeef32db00759eb0f1ddb092110456f" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>duration</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a046b0637cee67d43902bead56c8602eb" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>fermata</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a7287a04f8379ee29be57827a5dd2ebe2" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>figure</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6536c16b7e3cc48c77df3500969b0de6" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>figuredBass</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a5886a697115694a24d2aff200aa47425" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>forward</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aad404cfd8fe13a81544bd1e8da795468" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>frame</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6dfc2c4814c754167689df84b9202689" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>getAndDecMultiMeasureRestCount</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a57e983b37a5a06f337254e95f88c6be2" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>getParseStatus</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a37424dae9aca3cc319ba8be99d841892" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>getSpanner</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aa6a09ee401d5ac7e335649f3c3266e42" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>harmony</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a3c2d4ccceaad560493c5aa8d33bf8946" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>initPartState</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ad3b40065fafd611e568675bd30fed307" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>key</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6292f48423d6ed5e2dbcae2b43cf906f" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>logDebugInfo</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a796d6fcbc39dab93597b786c004b8345" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>logDebugTrace</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1af55888c2ddfc198a3b1b7eec352873ca" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>logError</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a484fe55303c211ed2d17c236976dfedc" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>lyric</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a4d0584d9b8be541b7a33d9a9560e5e60" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>measChordFlush</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a2863b334c80325f884359b7498d046a1" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>measChordNote</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a0a37fd1f0a5c962fed1c843c00de07aa" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>measure</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a68076147c3375916ebceb86db3c51456" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>measureStyle</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a56e9e309e8dc346213f9be412e57fc5d" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>MusicXMLParserPass2</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ab712c5ff2628853b9071ef50a3b84bc4" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>notations</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1acc37a226f30b5759c9ce8306b780b2fc" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>note</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a6aca58f758354d164ddcffbf7ad64fdd" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>notePrintSpacingNo</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aa540cd2d8b4a9ec0cd89dd6c4005901b" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>parse</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a95e04fe5031f4c477ad44569980315b9" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>parse</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aabf559efdedce1289a576e8a6f177d21" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>part</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a7fb4aa7a1d019dfb68a66885df1b76d3" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>partList</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a016fc02bae1bb7486f0b4b4ddf3b4a94" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>pitch</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a2bbb76c80c200f8c49119cbcdaf48f7e" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>print</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a1a33ece7284b3787aadb25575b1d6f45" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>rest</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a2714e367b34679a2b2545c88a7c00d94" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>scorePart</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1afab0f4e00bcb58b3e0f480663f5a394c" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>scorePartwise</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aad5e88f33bef3012d988e10141c2b3a4" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>setMultiMeasureRestCount</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a3faf1fc79c6220380fb79e9cf6723863" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>skipLogCurrElem</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1ae0a8ca011a423a2b39dc803e6fb66361" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>stem</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1aa5c606224d78e25bbc87cf9683f6705f" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>time</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a15374bf1fbe1441af87425e9394bbd3a" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>timeModification</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a35d97342df1129c8a873332f2126fe23" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>transpose</name></member>
      <member refid="class_ms_1_1_music_x_m_l_parser_pass2_1a1b43f9277d17fe4dfa909d711c4df21a" prot="public" virt="non-virtual"><scope>Ms::MusicXMLParserPass2</scope><name>tuplet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
