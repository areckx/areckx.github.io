<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rtf__table_8h" kind="file" language="C++">
    <compoundname>rtf_table.h</compoundname>
    <includes refid="thirdparty_2rtf2html_2config_8h" local="yes">config.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">cmath</includes>
    <includes local="no">list</includes>
    <includes local="no">cstdlib</includes>
    <includedby refid="rtf2html_8cpp" local="yes">thirdparty/rtf2html/rtf2html.cpp</includedby>
    <includedby refid="rtf__table_8cpp" local="yes">thirdparty/rtf2html/rtf_table.cpp</includedby>
    <incdepgraph>
      <node id="93269">
        <label>list</label>
      </node>
      <node id="93266">
        <label>iomanip</label>
      </node>
      <node id="93268">
        <label>cmath</label>
      </node>
      <node id="93264">
        <label>string</label>
      </node>
      <node id="93263">
        <label>common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="93262" relation="include">
        </childnode>
        <childnode refid="93264" relation="include">
        </childnode>
        <childnode refid="93265" relation="include">
        </childnode>
        <childnode refid="93266" relation="include">
        </childnode>
      </node>
      <node id="93262">
        <label>config.h</label>
        <link refid="thirdparty_2rtf2html_2config_8h_source"/>
      </node>
      <node id="93267">
        <label>vector</label>
      </node>
      <node id="93265">
        <label>sstream</label>
      </node>
      <node id="93270">
        <label>cstdlib</label>
      </node>
      <node id="93261">
        <label>thirdparty/rtf2html/rtf_table.h</label>
        <link refid="rtf__table_8h"/>
        <childnode refid="93262" relation="include">
        </childnode>
        <childnode refid="93263" relation="include">
        </childnode>
        <childnode refid="93267" relation="include">
        </childnode>
        <childnode refid="93268" relation="include">
        </childnode>
        <childnode refid="93269" relation="include">
        </childnode>
        <childnode refid="93270" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="93272">
        <label>thirdparty/rtf2html/rtf2html.cpp</label>
        <link refid="rtf2html_8cpp_source"/>
      </node>
      <node id="93271">
        <label>thirdparty/rtf2html/rtf_table.h</label>
        <link refid="rtf__table_8h"/>
        <childnode refid="93272" relation="include">
        </childnode>
        <childnode refid="93273" relation="include">
        </childnode>
      </node>
      <node id="93273">
        <label>thirdparty/rtf2html/rtf_table.cpp</label>
        <link refid="rtf__table_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtable__cell" prot="public">table_cell</innerclass>
    <innerclass refid="structtable__cell__def" prot="public">table_cell_def</innerclass>
    <innerclass refid="classkilling__ptr__vector" prot="public">killing_ptr_vector</innerclass>
    <innerclass refid="structtable__row" prot="public">table_row</innerclass>
    <innerclass refid="classtable" prot="public">table</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rtf__table_8h_1a62084bec6f5573636c35db7b1578053a" prot="public" static="no">
        <type><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector</ref>&lt; <ref refid="structtable__cell" kindref="compound">table_cell</ref> &gt;</type>
        <definition>typedef killing_ptr_vector&lt;table_cell&gt; table_cells</definition>
        <argsstring></argsstring>
        <name>table_cells</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/rtf_table.h" line="51" column="1" bodyfile="thirdparty/rtf2html/rtf_table.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rtf__table_8h_1a8c30ac0dba9abe2bf51fdb8e09a1d6e8" prot="public" static="no">
        <type><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector</ref>&lt; <ref refid="structtable__cell__def" kindref="compound">table_cell_def</ref> &gt;</type>
        <definition>typedef killing_ptr_vector&lt;table_cell_def&gt; table_cell_defs</definition>
        <argsstring></argsstring>
        <name>table_cell_defs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/rtf_table.h" line="52" column="1" bodyfile="thirdparty/rtf2html/rtf_table.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rtf__table_8h_1aa3e7d3a8536140b5c22528ca0aec7082" prot="public" static="no">
        <type>std::list&lt; <ref refid="classkilling__ptr__vector" kindref="compound">table_cell_defs</ref> &gt;</type>
        <definition>typedef std::list&lt;table_cell_defs&gt; table_cell_defs_list</definition>
        <argsstring></argsstring>
        <name>table_cell_defs_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/rtf2html/rtf_table.h" line="54" column="1" bodyfile="thirdparty/rtf2html/rtf_table.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__RTF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__RTF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_STLP_DEBUG)<sp/>&amp;&amp;<sp/>defined<sp/>(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>to<sp/>make<sp/>debug<sp/>version<sp/>of<sp/>STLPort<sp/>work<sp/>under<sp/>BC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structtable__cell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtable__cell" kindref="compound">table_cell</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rowspan;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>Text;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><ref refid="structtable__cell" kindref="compound">table_cell</ref>()<sp/>:<sp/>Rowspan(0)<sp/>{}</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structtable__cell__def" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtable__cell__def" kindref="compound">table_cell_def</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>valign<sp/>{valign_top,<sp/>valign_bottom,<sp/>valign_center};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BorderTop,<sp/>BorderBottom,<sp/>BorderLeft,<sp/>BorderRight;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ActiveBorder;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Right,<sp/>Left;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Merged,<sp/>FirstMerged;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>valign<sp/>VAlign;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><ref refid="structtable__cell__def" kindref="compound">table_cell_def</ref>()</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BorderTop=BorderBottom=BorderLeft=BorderRight=Merged=FirstMerged=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ActiveBorder=NULL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Right=Left=0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VAlign=valign_top;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_equals(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==Right;<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_equals(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x==Left;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="41" refid="classkilling__ptr__vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::vector&lt;T*&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>~<ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector&lt;T&gt;::iterator</ref><sp/>i=this-&gt;begin();<sp/>i!=this-&gt;end();<sp/>++i)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector&lt;table_cell&gt;</ref><sp/><ref refid="classkilling__ptr__vector" kindref="compound">table_cells</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector&lt;table_cell_def&gt;</ref><sp/><ref refid="classkilling__ptr__vector" kindref="compound">table_cell_defs</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;table_cell_defs&gt;<sp/>table_cell_defs_list;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structtable__row" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtable__row" kindref="compound">table_row</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><ref refid="classkilling__ptr__vector" kindref="compound">table_cells</ref><sp/>Cells;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>table_cell_defs_list::iterator<sp/>CellDefs;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Height;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Left;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="structtable__row" kindref="compound">table_row</ref>()<sp/>:<sp/>Height(-1000),<sp/><sp/>Left(-1000)<sp/>{}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classtable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtable" kindref="compound">table</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector</ref>&lt;table_row&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classkilling__ptr__vector" kindref="compound">killing_ptr_vector&lt;table_row&gt;</ref><sp/><ref refid="classkilling__ptr__vector" kindref="compound">base_class</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><ref refid="classtable" kindref="compound">table</ref>()<sp/>:<sp/>base_class()<sp/>{}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>make();</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/rtf2html/rtf_table.h"/>
  </compounddef>
</doxygen>
