<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="inftrees_8c" kind="file" language="C++">
    <compoundname>inftrees.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <includes refid="inftrees_8h" local="yes">inftrees.h</includes>
    <incdepgraph>
      <node id="80084">
        <label>errno.h</label>
      </node>
      <node id="80081">
        <label>zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80082" relation="include">
        </childnode>
        <childnode refid="80084" relation="include">
        </childnode>
      </node>
      <node id="80082">
        <label>zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80083" relation="include">
        </childnode>
      </node>
      <node id="80080">
        <label>thirdparty/freetype/src/gzip/inftrees.c</label>
        <link refid="inftrees_8c"/>
        <childnode refid="80081" relation="include">
        </childnode>
        <childnode refid="80085" relation="include">
        </childnode>
      </node>
      <node id="80085">
        <label>inftrees.h</label>
        <link refid="inftrees_8h_source"/>
      </node>
      <node id="80083">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="inftrees_8c_1a6925fd955d2037d3e4316042050ce51c" prot="public" static="no">
        <name>BUILDFIXED</name>
        <initializer>/* non ANSI compilers may not accept inffixed.h */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="10" column="11" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="26" column="9" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="27" column="9" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1a04cd58bc28249a2827ecb52e0ff15ac3" prot="public" static="no">
        <name>BMAX</name>
        <initializer>15         /* maximum bit length of any code */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="93" column="9" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1ac539c7fe47611738d5320760d4453602" prot="public" static="no">
        <name>C0</name>
        <initializer>*p++ = 0;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="139" column="9"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1ad6fc13322a4f1c314332ff34aa8b3fa0" prot="public" static="no">
        <name>C2</name>
        <initializer>C0 C0 C0 C0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="140" column="9"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1acc39015f57b2efb8810b603f188bdf15" prot="public" static="no">
        <name>C4</name>
        <initializer>C2 C2 C2 C2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="141" column="9"/>
      </memberdef>
      <memberdef kind="define" id="inftrees_8c_1ab91483aa2b813a3e35d99fed28684e9c" prot="public" static="no">
        <name>FIXEDH</name>
        <initializer>544      /* number of hufts used by fixed tables */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="398" column="9" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="398" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="inftrees_8c_1a7b0550fa47e895f122de86da509ecbde" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt cplens[31]</definition>
        <argsstring>[31]</argsstring>
        <name>cplens</name>
        <initializer>= { 
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="43" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a2a93691ad68902de110061b0eff1374c" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt cplext[31]</definition>
        <argsstring>[31]</argsstring>
        <name>cplext</name>
        <initializer>= { 
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="47" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a2928e450745536e59eacbf5ace5698ad" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt cpdist[30]</definition>
        <argsstring>[30]</argsstring>
        <name>cpdist</name>
        <initializer>= { 
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        8193, 12289, 16385, 24577}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="50" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a57b478cf38d2e184a590d671225fce36" prot="public" static="no" mutable="no">
        <type>local const uInt</type>
        <definition>local const uInt cpdext[30]</definition>
        <argsstring>[30]</argsstring>
        <name>cpdext</name>
        <initializer>= { 
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        12, 12, 13, 13}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="54" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a12bb5b1103ed9c74d4f3e2508c286f91" prot="public" static="no" mutable="no">
        <type>local int</type>
        <definition>local int fixed_built</definition>
        <argsstring></argsstring>
        <name>fixed_built</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="397" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a212dc76d2082cc8e557146873ecb7841" prot="public" static="no" mutable="no">
        <type>local inflate_huft</type>
        <definition>local inflate_huft fixed_mem[FIXEDH]</definition>
        <argsstring>[FIXEDH]</argsstring>
        <name>fixed_mem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="399" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a75254457776a846abde31cc40a3a96f6" prot="public" static="no" mutable="no">
        <type>local uInt</type>
        <definition>local uInt fixed_bl</definition>
        <argsstring></argsstring>
        <name>fixed_bl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="400" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a965f1c307a31c6faf12885dea3a5dcf7" prot="public" static="no" mutable="no">
        <type>local uInt</type>
        <definition>local uInt fixed_bd</definition>
        <argsstring></argsstring>
        <name>fixed_bd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="401" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1a55a2b903fb88e66ed3eb210fd70f5544" prot="public" static="no" mutable="no">
        <type>local inflate_huft *</type>
        <definition>local inflate_huft* fixed_tl</definition>
        <argsstring></argsstring>
        <name>fixed_tl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="402" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="inftrees_8c_1aa3c69f2cb22245b394b0972c3ca33de0" prot="public" static="no" mutable="no">
        <type>local inflate_huft *</type>
        <definition>local inflate_huft* fixed_td</definition>
        <argsstring></argsstring>
        <name>fixed_td</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="403" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="403" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="inftrees_8c_1ad6af7488631b50bb4d89d54b5c5740d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int huft_build</type>
        <definition>local int huft_build OF</definition>
        <argsstring>((uIntf *, uInt, uInt, const uIntf *, const uIntf *, inflate_huft *FAR *, uIntf *, inflate_huft *, uInt *, uIntf *))</argsstring>
        <name>OF</name>
        <param>
          <type>(uIntf *, uInt, uInt, const uIntf *, const uIntf *, inflate_huft *FAR *, uIntf *, inflate_huft *, uInt *, uIntf *)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inftrees_8c_1aeded1cc83a682c206e0c1119891b1df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int huft_build</definition>
        <argsstring>(uIntf *b, uInt n, uInt s, const uIntf *d, const uIntf *e, inflate_huft *FAR *t, uIntf *m, inflate_huft *hp, uInt *hn, uIntf *v)</argsstring>
        <name>huft_build</name>
        <param>
          <type>uIntf *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const uIntf *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uIntf *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>inflate_huft *FAR *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>inflate_huft *</type>
          <declname>hp</declname>
        </param>
        <param>
          <type>uInt *</type>
          <declname>hn</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="95" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="95" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="inftrees_8c_1a2a22d1c289664c43da04193c8f5298db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_trees_bits</definition>
        <argsstring>(uIntf *c, uIntf *bb, inflate_huft *FAR *tb, inflate_huft *hp, z_streamp z)</argsstring>
        <name>inflate_trees_bits</name>
        <param>
          <type>uIntf *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>inflate_huft *FAR *</type>
          <declname>tb</declname>
        </param>
        <param>
          <type>inflate_huft *</type>
          <declname>hp</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="299" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="299" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="inftrees_8c_1a810ebfaf65e66cc2b951af8418f60d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_trees_dynamic</definition>
        <argsstring>(uInt nl, uInt nd, uIntf *c, uIntf *bl, uIntf *bd, inflate_huft *FAR *tl, inflate_huft *FAR *td, inflate_huft *hp, z_streamp z)</argsstring>
        <name>inflate_trees_dynamic</name>
        <param>
          <type>uInt</type>
          <declname>nl</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>nd</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>inflate_huft *FAR *</type>
          <declname>tl</declname>
        </param>
        <param>
          <type>inflate_huft *FAR *</type>
          <declname>td</declname>
        </param>
        <param>
          <type>inflate_huft *</type>
          <declname>hp</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="327" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="327" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="inftrees_8c_1a069c7e7a0e5cf63533c9362b845fa60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>local int</type>
        <definition>local int inflate_trees_fixed</definition>
        <argsstring>(uIntf *bl, uIntf *bd, const inflate_huft *FAR *tl, const inflate_huft *FAR *td, z_streamp z)</argsstring>
        <name>inflate_trees_fixed</name>
        <param>
          <type>uIntf *</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>uIntf *</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>const inflate_huft *FAR *</type>
          <declname>tl</declname>
        </param>
        <param>
          <type>const inflate_huft *FAR *</type>
          <declname>td</declname>
        </param>
        <param>
          <type>z_streamp</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/inftrees.c" line="409" column="1" bodyfile="thirdparty/freetype/src/gzip/inftrees.c" bodystart="409" bodyend="468"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>inftrees.c<sp/>--<sp/>generate<sp/>Huffman<sp/>trees<sp/>for<sp/>efficient<sp/>decoding</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inftrees.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BUILDFIXED)<sp/>&amp;&amp;<sp/>!defined(STDC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BUILDFIXED<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>non<sp/>ANSI<sp/>compilers<sp/>may<sp/>not<sp/>accept<sp/>inffixed.h<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inflate_copyright[]<sp/>=</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>inflate<sp/>1.1.4<sp/>Copyright<sp/>1995-2002<sp/>Mark<sp/>Adler<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>If<sp/>you<sp/>use<sp/>the<sp/>zlib<sp/>library<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>is<sp/>welcome</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>documentation<sp/>of<sp/>your<sp/>product.<sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>cannot</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>include<sp/>such<sp/>an<sp/>acknowledgment,<sp/>I<sp/>would<sp/>appreciate<sp/>that<sp/>you<sp/>keep<sp/>this</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>copyright<sp/>string<sp/>in<sp/>the<sp/>executable<sp/>of<sp/>your<sp/>product.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huft_build<sp/>OF((</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>uIntf<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>lengths<sp/>in<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>&quot;simple&quot;<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uIntf<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>base<sp/>values<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uIntf<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>extra<sp/>bits<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_huft<sp/>*<sp/>FAR*,</highlight><highlight class="comment">/*<sp/>result:<sp/>starting<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>uIntf<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>lookup<sp/>bits<sp/>(returns<sp/>actual)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_huft<sp/>*,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>uIntf<sp/>*<sp/>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tables<sp/>for<sp/>deflate<sp/>from<sp/>PKZIP&apos;s<sp/>appnote.txt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cplens[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>lengths<sp/>for<sp/>literal<sp/>codes<sp/>257..285<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>13,<sp/>15,<sp/>17,<sp/>19,<sp/>23,<sp/>27,<sp/>31,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35,<sp/>43,<sp/>51,<sp/>59,<sp/>67,<sp/>83,<sp/>99,<sp/>115,<sp/>131,<sp/>163,<sp/>195,<sp/>227,<sp/>258,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>note<sp/>#13<sp/>above<sp/>about<sp/>258<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cplext[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Extra<sp/>bits<sp/>for<sp/>literal<sp/>codes<sp/>257..285<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>4,<sp/>4,<sp/>4,<sp/>4,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>0,<sp/>112,<sp/>112};<sp/></highlight><highlight class="comment">/*<sp/>112==invalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cpdist[30]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>offsets<sp/>for<sp/>distance<sp/>codes<sp/>0..29<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>7,<sp/>9,<sp/>13,<sp/>17,<sp/>25,<sp/>33,<sp/>49,<sp/>65,<sp/>97,<sp/>129,<sp/>193,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257,<sp/>385,<sp/>513,<sp/>769,<sp/>1025,<sp/>1537,<sp/>2049,<sp/>3073,<sp/>4097,<sp/>6145,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8193,<sp/>12289,<sp/>16385,<sp/>24577};</highlight></codeline>
<codeline lineno="54"><highlight class="normal">local<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cpdext[30]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Extra<sp/>bits<sp/>for<sp/>distance<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>6,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,<sp/>7,<sp/>8,<sp/>8,<sp/>9,<sp/>9,<sp/>10,<sp/>10,<sp/>11,<sp/>11,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12,<sp/>12,<sp/>13,<sp/>13};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>code<sp/>decoding<sp/>is<sp/>performed<sp/>using<sp/>a<sp/>multi-level<sp/>table<sp/>lookup.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>The<sp/>fastest<sp/>way<sp/>to<sp/>decode<sp/>is<sp/>to<sp/>simply<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>whose</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>size<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>longest<sp/>code.<sp/><sp/>However,<sp/>the<sp/>time<sp/>it<sp/>takes</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>to<sp/>build<sp/>this<sp/>table<sp/>can<sp/>also<sp/>be<sp/>a<sp/>factor<sp/>if<sp/>the<sp/>data<sp/>being<sp/>decoded</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>is<sp/>not<sp/>very<sp/>long.<sp/><sp/>The<sp/>most<sp/>common<sp/>codes<sp/>are<sp/>necessarily<sp/>the</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>shortest<sp/>codes,<sp/>so<sp/>those<sp/>codes<sp/>dominate<sp/>the<sp/>decoding<sp/>time,<sp/>and<sp/>hence</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>the<sp/>speed.<sp/><sp/>The<sp/>idea<sp/>is<sp/>you<sp/>can<sp/>have<sp/>a<sp/>shorter<sp/>table<sp/>that<sp/>decodes<sp/>the</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>shorter,<sp/>more<sp/>probable<sp/>codes,<sp/>and<sp/>then<sp/>point<sp/>to<sp/>subsidiary<sp/>tables<sp/>for</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>the<sp/>longer<sp/>codes.<sp/><sp/>The<sp/>time<sp/>it<sp/>costs<sp/>to<sp/>decode<sp/>the<sp/>longer<sp/>codes<sp/>is</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>then<sp/>traded<sp/>against<sp/>the<sp/>time<sp/>it<sp/>takes<sp/>to<sp/>make<sp/>longer<sp/>tables.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>This<sp/>results<sp/>of<sp/>this<sp/>trade<sp/>are<sp/>in<sp/>the<sp/>variables<sp/>lbits<sp/>and<sp/>dbits</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>below.<sp/><sp/>lbits<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>the<sp/>first<sp/>level<sp/>table<sp/>for<sp/>literal/</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>length<sp/>codes<sp/>can<sp/>decode<sp/>in<sp/>one<sp/>step,<sp/>and<sp/>dbits<sp/>is<sp/>the<sp/>same<sp/>thing<sp/>for</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>the<sp/>distance<sp/>codes.<sp/><sp/>Subsequent<sp/>tables<sp/>are<sp/>also<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>those<sp/>sizes.<sp/><sp/>These<sp/>values<sp/>may<sp/>be<sp/>adjusted<sp/>either<sp/>when<sp/>all<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>codes<sp/>are<sp/>shorter<sp/>than<sp/>that,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>longest<sp/>code<sp/>length<sp/>in</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>bits<sp/>is<sp/>used,<sp/>or<sp/>when<sp/>the<sp/>shortest<sp/>code<sp/>is<sp/>*longer*<sp/>than<sp/>the<sp/>requested</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/>table<sp/>size,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>length<sp/>of<sp/>the<sp/>shortest<sp/>code<sp/>in<sp/>bits<sp/>is</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>used.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>There<sp/>are<sp/>two<sp/>different<sp/>values<sp/>for<sp/>the<sp/>two<sp/>tables,<sp/>since<sp/>they<sp/>code<sp/>a</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>different<sp/>number<sp/>of<sp/>possibilities<sp/>each.<sp/><sp/>The<sp/>literal/length<sp/>table</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>codes<sp/>286<sp/>possible<sp/>values,<sp/>or<sp/>in<sp/>a<sp/>flat<sp/>code,<sp/>a<sp/>little<sp/>over<sp/>eight</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>bits.<sp/><sp/>The<sp/>distance<sp/>table<sp/>codes<sp/>30<sp/>possible<sp/>values,<sp/>or<sp/>a<sp/>little<sp/>less</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>than<sp/>five<sp/>bits,<sp/>flat.<sp/><sp/>The<sp/>optimum<sp/>values<sp/>for<sp/>speed<sp/>end<sp/>up<sp/>being</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>about<sp/>one<sp/>bit<sp/>more<sp/>than<sp/>those,<sp/>so<sp/>lbits<sp/>is<sp/>8+1<sp/>and<sp/>dbits<sp/>is<sp/>5+1.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>The<sp/>optimum<sp/>values<sp/>may<sp/>differ<sp/>though<sp/>from<sp/>machine<sp/>to<sp/>machine,<sp/>and</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>possibly<sp/>even<sp/>between<sp/>compilers.<sp/><sp/>Your<sp/>mileage<sp/>may<sp/>vary.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>BMAX<sp/>needs<sp/>to<sp/>be<sp/>larger<sp/>than<sp/>16,<sp/>then<sp/>h<sp/>and<sp/>x[]<sp/>should<sp/>be<sp/>uLong.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMAX<sp/>15<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>bit<sp/>length<sp/>of<sp/>any<sp/>code<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huft_build(<sp/></highlight><highlight class="comment">/*<sp/>b,<sp/>n,<sp/>s,<sp/>d,<sp/>e,<sp/>t,<sp/>m,<sp/>hp,<sp/>hn,<sp/>v)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">uIntf<sp/>*b,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>lengths<sp/>in<sp/>bits<sp/>(all<sp/>assumed<sp/>&lt;=<sp/>BMAX)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">uInt<sp/>n,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>(assumed<sp/>&lt;=<sp/>288)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">uInt<sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>simple-valued<sp/>codes<sp/>(0..s-1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uIntf<sp/>*d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>base<sp/>values<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uIntf<sp/>*e,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>extra<sp/>bits<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">inflate_huft<sp/>*<sp/>FAR<sp/>*t,<sp/><sp/></highlight><highlight class="comment">/*<sp/>result:<sp/>starting<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">uIntf<sp/>*m,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>lookup<sp/>bits,<sp/>returns<sp/>actual<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">inflate_huft<sp/>*hp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">uInt<sp/>*hn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">uIntf<sp/>*v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>working<sp/>area:<sp/>values<sp/>in<sp/>order<sp/>of<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Given<sp/>a<sp/>list<sp/>of<sp/>code<sp/>lengths<sp/>and<sp/>a<sp/>maximum<sp/>table<sp/>size,<sp/>make<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>tables<sp/>to<sp/>decode<sp/>that<sp/>set<sp/>of<sp/>codes.<sp/><sp/>Return<sp/>Z_OK<sp/>on<sp/>success,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>given<sp/>code<sp/>set<sp/>is<sp/>incomplete<sp/>(the<sp/>tables<sp/>are<sp/>still<sp/>built<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>case),<sp/>or<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>uInt<sp/>a;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter<sp/>for<sp/>codes<sp/>of<sp/>length<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>uInt<sp/>c[BMAX+1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>count<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>uInt<sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i<sp/>repeats<sp/>in<sp/>table<sp/>every<sp/>f<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>uInt<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter,<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>uInt<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>per<sp/>table<sp/>(returned<sp/>in<sp/>m)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>uInt<sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1,<sp/>to<sp/>avoid<sp/>cc<sp/>-O<sp/>bug<sp/>on<sp/>HP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>uIntf<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>into<sp/>c[],<sp/>b[],<sp/>or<sp/>v[]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>inflate_huft<sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>current<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__huft__s" kindref="compound">inflate_huft_s</ref><sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>entry<sp/>for<sp/>structure<sp/>assignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>inflate_huft<sp/>*u[BMAX];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>before<sp/>this<sp/>table<sp/>==<sp/>(l<sp/>*<sp/>h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uInt<sp/>x[BMAX+1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>offsets,<sp/>then<sp/>code<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>uIntf<sp/>*xp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>into<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>dummy<sp/>codes<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>uInt<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>current<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>r.base<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>counts<sp/>for<sp/>each<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C0<sp/>*p++<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C2<sp/>C0<sp/>C0<sp/>C0<sp/>C0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C4<sp/>C2<sp/>C2<sp/>C2<sp/>C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>C4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>c[]--assume<sp/>BMAX+1<sp/>is<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>b;<sp/><sp/>i<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>c[*p++]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>all<sp/>entries<sp/>&lt;=<sp/>BMAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--i);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[0]<sp/>==<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>input--all<sp/>zero<sp/>length<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>(inflate_huft<sp/>*)Z_NULL;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>*m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>minimum<sp/>and<sp/>maximum<sp/>length,<sp/>bound<sp/>*m<sp/>by<sp/>those<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>*m;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>BMAX;<sp/>j++)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[j])</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uInt)l<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>BMAX;<sp/>i;<sp/>i--)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[i])</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uInt)l<sp/>&gt;<sp/>i)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>*m<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>last<sp/>length<sp/>count<sp/>to<sp/>fill<sp/>out<sp/>codes,<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>j;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++,<sp/>y<sp/>&lt;&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>-=<sp/>c[j])<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>-=<sp/>c[i])<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>c[i]<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>starting<sp/>offsets<sp/>into<sp/>the<sp/>value<sp/>table<sp/>for<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>x[1]<sp/>=<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>c<sp/>+<sp/>1;<sp/><sp/>xp<sp/>=<sp/>x<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>i<sp/>==<sp/>g<sp/>from<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>*xp++<sp/>=<sp/>(j<sp/>+=<sp/>*p++);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>a<sp/>table<sp/>of<sp/>values<sp/>in<sp/>order<sp/>of<sp/>bit<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>b;<sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>=<sp/>*p++)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[x[j]++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;<sp/>n);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>x[g];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>n<sp/>to<sp/>length<sp/>of<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>the<sp/>Huffman<sp/>codes<sp/>and<sp/>for<sp/>each,<sp/>make<sp/>the<sp/>table<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>i<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>Huffman<sp/>code<sp/>is<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>grab<sp/>values<sp/>in<sp/>bit<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>tables<sp/>yet--level<sp/>-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>-l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>decoded<sp/>==<sp/>(l<sp/>*<sp/>h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>u[0]<sp/>=<sp/>(inflate_huft<sp/>*)Z_NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>keep<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>(inflate_huft<sp/>*)Z_NULL;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ditto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ditto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>through<sp/>the<sp/>bit<sp/>lengths<sp/>(k<sp/>already<sp/>is<sp/>bits<sp/>in<sp/>shortest<sp/>code)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;=<sp/>g;<sp/>k++)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>c[k];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a--)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>here<sp/>i<sp/>is<sp/>the<sp/>Huffman<sp/>code<sp/>of<sp/>length<sp/>k<sp/>bits<sp/>for<sp/>value<sp/>*p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>tables<sp/>up<sp/>to<sp/>required<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>w<sp/>+<sp/>l)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h++;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>+=<sp/>l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>previous<sp/>table<sp/>always<sp/>l<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>minimum<sp/>size<sp/>table<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>l<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>g<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>&gt;<sp/>(uInt)l<sp/>?<sp/>(uInt)l<sp/>:<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>size<sp/>upper<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(j<sp/>=<sp/>k<sp/>-<sp/>w))<sp/>&gt;<sp/>a<sp/>+<sp/>1)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>a<sp/>k-w<sp/>bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>too<sp/>few<sp/>codes<sp/>for<sp/>k-w<sp/>bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-=<sp/>a<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deduct<sp/>codes<sp/>from<sp/>patterns<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xp<sp/>=<sp/>c<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>z)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++j<sp/>&lt;<sp/>z)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>smaller<sp/>tables<sp/>up<sp/>to<sp/>z<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>&lt;&lt;=<sp/>1)<sp/>&lt;=<sp/>*++xp)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enough<sp/>codes<sp/>to<sp/>use<sp/>up<sp/>j<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-=<sp/>*xp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>else<sp/>deduct<sp/>codes<sp/>from<sp/>patterns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>entries<sp/>for<sp/>j-bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>new<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*hn<sp/>+<sp/>z<sp/>&gt;<sp/>MANY)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(note:<sp/>doesn&apos;t<sp/>matter<sp/>for<sp/>fixed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;<sp/><sp/></highlight><highlight class="comment">/*<sp/>overflow<sp/>of<sp/>MANY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[h]<sp/>=<sp/>q<sp/>=<sp/>hp<sp/>+<sp/>*hn;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*hn<sp/>+=<sp/>z;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>connect<sp/>to<sp/>last<sp/>table,<sp/>if<sp/>there<sp/>is<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[h]<sp/>=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>pattern<sp/>for<sp/>backing<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.bits<sp/>=<sp/>(Byte)l;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>to<sp/>dump<sp/>before<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)j;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i<sp/>&gt;&gt;<sp/>(w<sp/>-<sp/>l);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>(uInt)(q<sp/>-<sp/>u[h-1]<sp/>-<sp/>j);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>to<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[h-1][j]<sp/>=<sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>connect<sp/>to<sp/>last<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>table<sp/>is<sp/>returned<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>table<sp/>entry<sp/>in<sp/>r<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.bits<sp/>=<sp/>(Byte)(k<sp/>-<sp/>w);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;=<sp/>v<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>128<sp/>+<sp/>64;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>values--invalid<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>&lt;<sp/>s)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)(*p<sp/>&lt;<sp/>256<sp/>?<sp/>0<sp/>:<sp/>32<sp/>+<sp/>64);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>256<sp/>is<sp/>end-of-block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>*p++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>simple<sp/>code<sp/>is<sp/>just<sp/>the<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)(e[*p<sp/>-<sp/>s]<sp/>+<sp/>16<sp/>+<sp/>64);</highlight><highlight class="comment">/*<sp/>non-simple--look<sp/>up<sp/>in<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>d[*p++<sp/>-<sp/>s];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>code-like<sp/>entries<sp/>with<sp/>r<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(k<sp/>-<sp/>w);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>&gt;&gt;<sp/>w;<sp/>j<sp/>&lt;<sp/>z;<sp/>j<sp/>+=<sp/>f)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[j]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backwards<sp/>increment<sp/>the<sp/>k-bit<sp/>code<sp/>i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(k<sp/>-<sp/>1);<sp/>i<sp/>&amp;<sp/>j;<sp/>j<sp/>&gt;&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>^=<sp/>j;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>^=<sp/>j;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backup<sp/>over<sp/>finished<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>needed<sp/>on<sp/>HP,<sp/>cc<sp/>-O<sp/>bug<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>mask)<sp/>!=<sp/>x[h])</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>need<sp/>to<sp/>update<sp/>q<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>-=<sp/>l;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>Z_BUF_ERROR<sp/>if<sp/>we<sp/>were<sp/>given<sp/>an<sp/>incomplete<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>g<sp/>!=<sp/>1<sp/>?<sp/>Z_BUF_ERROR<sp/>:<sp/>Z_OK;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_bits(<sp/></highlight><highlight class="comment">/*<sp/>c,<sp/>bb,<sp/>tb,<sp/>hp,<sp/>z)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">uIntf<sp/>*c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>19<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">uIntf<sp/>*bb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>tree<sp/>desired/actual<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">inflate_huft<sp/>*<sp/>FAR<sp/>*tb,<sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">inflate_huft<sp/>*hp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">z_streamp<sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>uInt<sp/>hn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>uIntf<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>area<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>=<sp/>(uIntf*)ZALLOC(z,<sp/>19,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c,<sp/>19,<sp/>19,<sp/>(uIntf*)Z_NULL,<sp/>(uIntf*)Z_NULL,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tb,<sp/>bb,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_BUF_ERROR<sp/>||<sp/>*bb<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_dynamic(<sp/></highlight><highlight class="comment">/*<sp/>nl,<sp/>nd,<sp/>c,<sp/>bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>hp,<sp/>z)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">uInt<sp/>nl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>literal/length<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">uInt<sp/>nd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>distance<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">uIntf<sp/>*c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>that<sp/>many<sp/>(total)<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">uIntf<sp/>*bl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">uIntf<sp/>*bd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">inflate_huft<sp/>*<sp/>FAR<sp/>*tl,<sp/></highlight><highlight class="comment">/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">inflate_huft<sp/>*<sp/>FAR<sp/>*td,<sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">inflate_huft<sp/>*hp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">z_streamp<sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>uInt<sp/>hn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>uIntf<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>area<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>work<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>=<sp/>(uIntf*)ZALLOC(z,<sp/>288,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>literal/length<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c,<sp/>nl,<sp/>257,<sp/>cplens,<sp/>cplext,<sp/>tl,<sp/>bl,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_OK<sp/>||<sp/>*bl<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>literal/length<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_MEM_ERROR)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>literal/length<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c<sp/>+<sp/>nl,<sp/>nd,<sp/>0,<sp/>cpdist,<sp/>cpdext,<sp/>td,<sp/>bd,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_OK<sp/>||<sp/>(*bd<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>nl<sp/>&gt;<sp/>257))</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>distance<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_BUF_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PKZIP_BUG_WORKAROUND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>distance<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_MEM_ERROR)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;empty<sp/>distance<sp/>tree<sp/>with<sp/>lengths&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>build<sp/>fixed<sp/>tables<sp/>only<sp/>once--keep<sp/>them<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILDFIXED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fixed_built<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIXEDH<sp/>544<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>hufts<sp/>used<sp/>by<sp/>fixed<sp/>tables<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">local<sp/>inflate_huft<sp/>fixed_mem[FIXEDH];</highlight></codeline>
<codeline lineno="400"><highlight class="normal">local<sp/>uInt<sp/>fixed_bl;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">local<sp/>uInt<sp/>fixed_bd;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">local<sp/>inflate_huft<sp/>*fixed_tl;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">local<sp/>inflate_huft<sp/>*fixed_td;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inffixed.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_fixed(<sp/></highlight><highlight class="comment">/*<sp/>bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>z)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">uIntf<sp/>*bl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">uIntf<sp/>*bd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inflate_huft<sp/>*<sp/>FAR<sp/>*tl,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inflate_huft<sp/>*<sp/>FAR<sp/>*td,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">z_streamp<sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>memory<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILDFIXED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>fixed<sp/>tables<sp/>if<sp/>not<sp/>already<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fixed_built)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>f<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>hufts<sp/>used<sp/>in<sp/>fixed_mem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>uIntf<sp/>*c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>list<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>uIntf<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>area<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>(uIntf*)ZALLOC(z,<sp/>288,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>=<sp/>(uIntf*)ZALLOC(z,<sp/>288,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>c);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>144;<sp/>k++)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;<sp/>256;<sp/>k++)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;<sp/>280;<sp/>k++)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;<sp/>288;<sp/>k++)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>fixed_bl<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>huft_build(c,<sp/>288,<sp/>257,<sp/>cplens,<sp/>cplext,<sp/>&amp;fixed_tl,<sp/>&amp;fixed_bl,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_mem,<sp/>&amp;f,<sp/>v);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>30;<sp/>k++)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>fixed_bd<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>huft_build(c,<sp/>30,<sp/>0,<sp/>cpdist,<sp/>cpdext,<sp/>&amp;fixed_td,<sp/>&amp;fixed_bd,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_mem,<sp/>&amp;f,<sp/>v);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>c);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>fixed_built<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>FT_UNUSED(z);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>*bl<sp/>=<sp/>fixed_bl;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>*bd<sp/>=<sp/>fixed_bd;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>*tl<sp/>=<sp/>fixed_tl;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>*td<sp/>=<sp/>fixed_td;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/inftrees.c"/>
  </compounddef>
</doxygen>
