<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="finddefault_8c" kind="file" language="C++">
    <compoundname>finddefault.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="portmidi_8h" local="yes">portmidi.h</includes>
    <includes refid="pmmacosxcm_8h" local="yes">pmmacosxcm.h</includes>
    <includes refid="readbinaryplist_8h" local="yes">readbinaryplist.h</includes>
    <incdepgraph>
      <node id="92946">
        <label>stdint.h</label>
      </node>
      <node id="92941">
        <label>stdlib.h</label>
      </node>
      <node id="92945">
        <label>readbinaryplist.h</label>
        <link refid="readbinaryplist_8h_source"/>
        <childnode refid="92946" relation="include">
        </childnode>
      </node>
      <node id="92943">
        <label>portmidi.h</label>
        <link refid="portmidi_8h_source"/>
      </node>
      <node id="92942">
        <label>string.h</label>
      </node>
      <node id="92944">
        <label>pmmacosxcm.h</label>
        <link refid="pmmacosxcm_8h_source"/>
      </node>
      <node id="92940">
        <label>thirdparty/portmidi/pm_mac/finddefault.c</label>
        <link refid="finddefault_8c"/>
        <childnode refid="92941" relation="include">
        </childnode>
        <childnode refid="92942" relation="include">
        </childnode>
        <childnode refid="92943" relation="include">
        </childnode>
        <childnode refid="92944" relation="include">
        </childnode>
        <childnode refid="92945" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="finddefault_8c_1a8e39a278d0d62cddbbe92d16022a97ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmDeviceID</type>
        <definition>PmDeviceID find_default_device</definition>
        <argsstring>(char *path, int input, PmDeviceID id)</argsstring>
        <name>find_default_device</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input</declname>
        </param>
        <param>
          <type>PmDeviceID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_mac/finddefault.c" line="18" column="1" bodyfile="thirdparty/portmidi/pm_mac/finddefault.c" bodystart="18" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>finddefault.c<sp/>--<sp/>find_default_device()<sp/>implementation</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>Roger<sp/>Dannenberg,<sp/>June<sp/>2008</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;portmidi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pmmacosxcm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;readbinaryplist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>preference<sp/>files,<sp/>find<sp/>default<sp/>device,<sp/>search<sp/>devices<sp/>--</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>This<sp/>parses<sp/>the<sp/>preference<sp/>file(s)<sp/>once<sp/>for<sp/>input<sp/>and<sp/>once<sp/>for</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>output,<sp/>which<sp/>is<sp/>inefficient<sp/>but<sp/>much<sp/>simpler<sp/>to<sp/>manage.<sp/>Note</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>that<sp/>using<sp/>the<sp/>readbinaryplist.c<sp/>module,<sp/>you<sp/>cannot<sp/>keep<sp/>two</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>plist<sp/>files<sp/>(user<sp/>and<sp/>system)<sp/>open<sp/>at<sp/>once<sp/>(due<sp/>to<sp/>a<sp/>simple</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>memory<sp/>management<sp/>scheme).</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">PmDeviceID<sp/>find_default_device(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input,<sp/>PmDeviceID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>path<sp/>--<sp/>the<sp/>name<sp/>of<sp/>the<sp/>preference<sp/>we<sp/>are<sp/>searching<sp/>for</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>input<sp/>--<sp/>true<sp/>iff<sp/>this<sp/>is<sp/>an<sp/>input<sp/>device</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>id<sp/>--<sp/>current<sp/>default<sp/>device<sp/>id</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>returns<sp/>matching<sp/>device<sp/>id<sp/>if<sp/>found,<sp/>otherwise<sp/>id</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pref_file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;com.apple.java.util.prefs.plist&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pref_str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>device<sp/>preferences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>prefs<sp/>=<sp/>bplist_read_user_pref(pref_file);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefs)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>pref_val<sp/>=<sp/>value_dict_lookup_using_path(prefs,<sp/>path);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pref_val)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pref_str<sp/>=<sp/>value_get_asciistring(pref_val);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pref_str)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist_free_data();<sp/></highlight><highlight class="comment">/*<sp/>look<sp/>elsewhere<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefs<sp/>=<sp/>bplist_read_system_pref(pref_file);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefs)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>pref_val<sp/>=<sp/>value_dict_lookup_using_path(prefs,<sp/>path);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pref_val)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pref_str<sp/>=<sp/>value_get_asciistring(pref_val);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pref_str)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>search<sp/>devices<sp/>for<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>Pm_CountDevices();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>parse<sp/>pref_str<sp/>into<sp/>name,<sp/>interf<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interf_pref<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>initially<sp/>assume<sp/>it<sp/>is<sp/>not<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_pref<sp/>=<sp/>strstr(pref_str,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name_pref)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>found<sp/>separator,<sp/>adjust<sp/>the<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interf_pref<sp/>=<sp/>pref_str;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>modify<sp/>the<sp/>string<sp/>to<sp/>split<sp/>into<sp/>two<sp/>parts.<sp/>This<sp/>write<sp/>goes</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>the<sp/>way<sp/>into<sp/>the<sp/>prev_val<sp/>data<sp/>structure,<sp/>but<sp/>since</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noone<sp/>else<sp/>is<sp/>going<sp/>to<sp/>use<sp/>the<sp/>string,<sp/>it&apos;s<sp/>ok<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interf_pref<sp/>=<sp/>pref_str;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_pref[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_pref<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_pref<sp/>=<sp/>pref_str;<sp/></highlight><highlight class="comment">/*<sp/>whole<sp/>string<sp/>is<sp/>the<sp/>name<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref><sp/>*info<sp/>=<sp/>Pm_GetDeviceInfo(i);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;input<sp/>==<sp/>input<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strstr(info-&gt;name,<sp/>name_pref)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strstr(info-&gt;interf,<sp/>interf_pref))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefs)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist_free_data();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_mac/finddefault.c"/>
  </compounddef>
</doxygen>
