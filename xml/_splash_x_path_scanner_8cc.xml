<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_splash_x_path_scanner_8cc" kind="file" language="C++">
    <compoundname>SplashXPathScanner.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_splash_math_8h" local="yes">SplashMath.h</includes>
    <includes refid="_splash_x_path_8h" local="yes">SplashXPath.h</includes>
    <includes refid="_splash_bitmap_8h" local="yes">SplashBitmap.h</includes>
    <includes refid="_splash_x_path_scanner_8h" local="yes">SplashXPathScanner.h</includes>
    <incdepgraph>
      <node id="92857">
        <label>stdarg.h</label>
      </node>
      <node id="92865">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="92849" relation="include">
        </childnode>
        <childnode refid="92853" relation="include">
        </childnode>
        <childnode refid="92854" relation="include">
        </childnode>
      </node>
      <node id="92866">
        <label>assert.h</label>
      </node>
      <node id="92852">
        <label>poppler/GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92849" relation="include">
        </childnode>
        <childnode refid="92853" relation="include">
        </childnode>
        <childnode refid="92865" relation="include">
        </childnode>
        <childnode refid="92866" relation="include">
        </childnode>
        <childnode refid="92867" relation="include">
        </childnode>
      </node>
      <node id="92840">
        <label>stdlib.h</label>
      </node>
      <node id="92843">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="92844" relation="include">
        </childnode>
        <childnode refid="92845" relation="include">
        </childnode>
      </node>
      <node id="92860">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92853" relation="include">
        </childnode>
        <childnode refid="92861" relation="include">
        </childnode>
      </node>
      <node id="92867">
        <label>map</label>
      </node>
      <node id="92859">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="92857" relation="include">
        </childnode>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92849" relation="include">
        </childnode>
        <childnode refid="92855" relation="include">
        </childnode>
      </node>
      <node id="92863">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92853" relation="include">
        </childnode>
        <childnode refid="92861" relation="include">
        </childnode>
      </node>
      <node id="92856">
        <label>limits.h</label>
      </node>
      <node id="92845">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="92844" relation="include">
        </childnode>
      </node>
      <node id="92858">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="92864">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92844" relation="include">
        </childnode>
        <childnode refid="92849" relation="include">
        </childnode>
        <childnode refid="92853" relation="include">
        </childnode>
        <childnode refid="92861" relation="include">
        </childnode>
      </node>
      <node id="92862">
        <label>pthread.h</label>
      </node>
      <node id="92868">
        <label>SplashXPathScanner.h</label>
        <link refid="_splash_x_path_scanner_8h_source"/>
        <childnode refid="92848" relation="include">
        </childnode>
      </node>
      <node id="92841">
        <label>string.h</label>
      </node>
      <node id="92855">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="92856" relation="include">
        </childnode>
        <childnode refid="92857" relation="include">
        </childnode>
        <childnode refid="92840" relation="include">
        </childnode>
        <childnode refid="92849" relation="include">
        </childnode>
      </node>
      <node id="92853">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="92854" relation="include">
        </childnode>
        <childnode refid="92844" relation="include">
        </childnode>
        <childnode refid="92841" relation="include">
        </childnode>
        <childnode refid="92849" relation="include">
        </childnode>
        <childnode refid="92843" relation="include">
        </childnode>
        <childnode refid="92855" relation="include">
        </childnode>
        <childnode refid="92858" relation="include">
        </childnode>
        <childnode refid="92859" relation="include">
        </childnode>
        <childnode refid="92860" relation="include">
        </childnode>
        <childnode refid="92863" relation="include">
        </childnode>
        <childnode refid="92864" relation="include">
        </childnode>
      </node>
      <node id="92846">
        <label>SplashMath.h</label>
        <link refid="_splash_math_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
        <childnode refid="92847" relation="include">
        </childnode>
        <childnode refid="92848" relation="include">
        </childnode>
      </node>
      <node id="92851">
        <label>SplashBitmap.h</label>
        <link refid="_splash_bitmap_8h_source"/>
        <childnode refid="92848" relation="include">
        </childnode>
        <childnode refid="92852" relation="include">
        </childnode>
        <childnode refid="92844" relation="include">
        </childnode>
      </node>
      <node id="92847">
        <label>math.h</label>
      </node>
      <node id="92861">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="92862" relation="include">
        </childnode>
      </node>
      <node id="92848">
        <label>SplashTypes.h</label>
        <link refid="_splash_types_8h_source"/>
        <childnode refid="92849" relation="include">
        </childnode>
      </node>
      <node id="92849">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="92845" relation="include">
        </childnode>
      </node>
      <node id="92850">
        <label>SplashXPath.h</label>
        <link refid="_splash_x_path_8h_source"/>
        <childnode refid="92848" relation="include">
        </childnode>
      </node>
      <node id="92838">
        <label>thirdparty/poppler/splash/SplashXPathScanner.cc</label>
        <link refid="_splash_x_path_scanner_8cc"/>
        <childnode refid="92839" relation="include">
        </childnode>
        <childnode refid="92840" relation="include">
        </childnode>
        <childnode refid="92841" relation="include">
        </childnode>
        <childnode refid="92842" relation="include">
        </childnode>
        <childnode refid="92843" relation="include">
        </childnode>
        <childnode refid="92846" relation="include">
        </childnode>
        <childnode refid="92850" relation="include">
        </childnode>
        <childnode refid="92851" relation="include">
        </childnode>
        <childnode refid="92868" relation="include">
        </childnode>
      </node>
      <node id="92854">
        <label>set</label>
      </node>
      <node id="92839">
        <label>config.h</label>
      </node>
      <node id="92842">
        <label>algorithm</label>
      </node>
      <node id="92844">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_splash_intersect" prot="public">SplashIntersect</innerclass>
    <innerclass refid="structcmp_intersect_functor" prot="public">cmpIntersectFunctor</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashXPathScanner.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010,<sp/>2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Paweł<sp/>Wiejacha<sp/>&lt;pawel.wiejacha@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013,<sp/>2014<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashXPath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashXPathScanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="struct_splash_intersect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/>x1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersection<sp/>of<sp/>segment<sp/>with<sp/>[y,<sp/>y+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EO/NZWN<sp/>counter<sp/>increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structcmp_intersect_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcmp_intersect_functor" kindref="compound">cmpIntersectFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref><sp/>&amp;i0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref><sp/>&amp;i1)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i0.y<sp/>!=<sp/>i1.y)<sp/>?<sp/>(i0.y<sp/>&lt;<sp/>i1.y)<sp/>:<sp/>(i0.x0<sp/>&lt;<sp/>i1.x0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashXPathScanner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">SplashXPathScanner::SplashXPathScanner(<ref refid="class_splash_x_path" kindref="compound">SplashXPath</ref><sp/>*xPathA,<sp/>GBool<sp/>eoA,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clipYMin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clipYMax)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_x_path_seg" kindref="compound">SplashXPathSeg</ref><sp/>*seg;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>xMinFP,<sp/>yMinFP,<sp/>xMaxFP,<sp/>yMaxFP;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>xPath<sp/>=<sp/>xPathA;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>eo<sp/>=<sp/>eoA;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>partialClip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xPath-&gt;length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>yMin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>yMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>seg<sp/>=<sp/>&amp;xPath-&gt;segs[0];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x0<sp/>&lt;=<sp/>seg-&gt;x1)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMinFP<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMaxFP<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMinFP<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMaxFP<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;flags<sp/>&amp;<sp/>splashXPathFlip)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMinFP<sp/>=<sp/>seg-&gt;y1;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMaxFP<sp/>=<sp/>seg-&gt;y0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMinFP<sp/>=<sp/>seg-&gt;y0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMaxFP<sp/>=<sp/>seg-&gt;y1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>xPath-&gt;length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seg<sp/>=<sp/>&amp;xPath-&gt;segs[i];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x0<sp/>&lt;<sp/>xMinFP)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>xMinFP<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x0<sp/>&gt;<sp/>xMaxFP)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>xMaxFP<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x1<sp/>&lt;<sp/>xMinFP)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>xMinFP<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x1<sp/>&gt;<sp/>xMaxFP)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>xMaxFP<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;flags<sp/>&amp;<sp/>splashXPathFlip)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;y0<sp/>&gt;<sp/>yMaxFP)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMaxFP<sp/>=<sp/>seg-&gt;y0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;y1<sp/>&gt;<sp/>yMaxFP)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMaxFP<sp/>=<sp/>seg-&gt;y1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>splashFloor(xMinFP);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>splashFloor(xMaxFP);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>splashFloor(yMinFP);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>splashFloor(yMaxFP);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipYMin<sp/>&gt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>clipYMin;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partialClip<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipYMax<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>clipYMax;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partialClip<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>allInter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>inter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>computeIntersections();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>interY<sp/>=<sp/>yMin<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">SplashXPathScanner::~SplashXPathScanner()<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>gfree(inter);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>gfree(allInter);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashXPathScanner::getBBoxAA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*xMinA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yMinA,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*xMaxA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yMaxA)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>*xMinA<sp/>=<sp/>xMin<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>*yMinA<sp/>=<sp/>yMin<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>*xMaxA<sp/>=<sp/>xMax<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>*yMaxA<sp/>=<sp/>yMax<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashXPathScanner::getSpanBounds(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*spanXMin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*spanXMax)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interBegin,<sp/>interEnd,<sp/>xx,<sp/>i;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin<sp/>||<sp/>y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>interBegin<sp/>=<sp/>interEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>interBegin<sp/>=<sp/>inter[y<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[y<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interBegin<sp/>&lt;<sp/>interEnd)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>*spanXMin<sp/>=<sp/>allInter[interBegin].x0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>allInter[interBegin].x1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>interBegin<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>interEnd;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[i].x1<sp/>&gt;<sp/>xx)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>allInter[i].x1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>*spanXMax<sp/>=<sp/>xx;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>*spanXMin<sp/>=<sp/>xMax<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>*spanXMax<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">GBool<sp/>SplashXPathScanner::test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interBegin,<sp/>interEnd,<sp/>count,<sp/>i;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin<sp/>||<sp/>y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>interBegin<sp/>=<sp/>inter[y<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>interEnd<sp/>=<sp/>inter[y<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>interBegin;<sp/>i<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;<sp/>allInter[i].x0<sp/>&lt;=<sp/>x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>allInter[i].x1)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>allInter[i].count;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eo<sp/>?<sp/>(count<sp/>&amp;<sp/>1)<sp/>:<sp/>(count<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">GBool<sp/>SplashXPathScanner::testSpan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interBegin,<sp/>interEnd,<sp/>count,<sp/>xx1,<sp/>i;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin<sp/>||<sp/>y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>interBegin<sp/>=<sp/>inter[y<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>interEnd<sp/>=<sp/>inter[y<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>interBegin;<sp/>i<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;<sp/>allInter[i].x1<sp/>&lt;<sp/>x0;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>allInter[i].count;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:<sp/>the<sp/>subspan<sp/>[x0,xx1]<sp/>is<sp/>inside<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>xx1<sp/>=<sp/>x0<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(xx1<sp/>&lt;<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>interEnd)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[i].x0<sp/>&gt;<sp/>xx1<sp/>+<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>!(eo<sp/>?<sp/>(count<sp/>&amp;<sp/>1)<sp/>:<sp/>(count<sp/>!=<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[i].x1<sp/>&gt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[i].x1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>allInter[i].count;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">GBool<sp/>SplashXPathScanner::getNextSpan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x1)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interEnd,<sp/>xx0,<sp/>xx1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin<sp/>||<sp/>y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interY<sp/>!=<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>interY<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>inter[y<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>interCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>interEnd<sp/>=<sp/>inter[y<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interIdx<sp/>&gt;=<sp/>interEnd)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>xx0<sp/>=<sp/>allInter[interIdx].x0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interIdx<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(allInter[interIdx].x0<sp/>&lt;=<sp/>xx1<sp/>||</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(eo<sp/>?<sp/>(interCount<sp/>&amp;<sp/>1)<sp/>:<sp/>(interCount<sp/>!=<sp/>0))))<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[interIdx].x1<sp/>&gt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>*x0<sp/>=<sp/>xx0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>*x1<sp/>=<sp/>xx1;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashXPathScanner::computeIntersections()<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_x_path_seg" kindref="compound">SplashXPathSeg</ref><sp/>*seg;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>segXMin,<sp/>segXMax,<sp/>segYMin,<sp/>segYMax,<sp/>xx0,<sp/>xx1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>y0,<sp/>y1,<sp/>i;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>list<sp/>of<sp/>all<sp/>intersections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>allInterLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>allInterSize<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>allInter<sp/>=<sp/>(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref><sp/>*)gmallocn(allInterSize,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref>));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xPath-&gt;length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>seg<sp/>=<sp/>&amp;xPath-&gt;segs[i];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;flags<sp/>&amp;<sp/>splashXPathFlip)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segYMin<sp/>=<sp/>seg-&gt;y1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segYMax<sp/>=<sp/>seg-&gt;y0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segYMin<sp/>=<sp/>seg-&gt;y0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segYMax<sp/>=<sp/>seg-&gt;y1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;flags<sp/>&amp;<sp/>splashXPathHoriz)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>splashFloor(seg-&gt;y0);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>yMin<sp/>&amp;&amp;<sp/>y<sp/>&lt;=<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addIntersection(segYMin,<sp/>segYMax,<sp/>seg-&gt;flags,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,<sp/>splashFloor(seg-&gt;x0),<sp/>splashFloor(seg-&gt;x1)))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;flags<sp/>&amp;<sp/>splashXPathVert)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>splashFloor(segYMin);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>splashFloor(segYMax);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>splashFloor(seg-&gt;x0);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y0;<sp/>y<sp/>&lt;=<sp/>y1;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addIntersection(segYMin,<sp/>segYMax,<sp/>seg-&gt;flags,<sp/>y,<sp/>x,<sp/>x))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg-&gt;x0<sp/>&lt;<sp/>seg-&gt;x1)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>segXMin<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>segXMax<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>segXMin<sp/>=<sp/>seg-&gt;x1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>segXMax<sp/>=<sp/>seg-&gt;x0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>splashFloor(segYMin);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>splashFloor(segYMax);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>loop<sp/>could<sp/>just<sp/>add<sp/>seg-&gt;dxdy<sp/>to<sp/>xx1<sp/>on<sp/>each<sp/>iteration,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>that<sp/>introduces<sp/>numerical<sp/>accuracy<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>seg-&gt;x0<sp/>+<sp/>((SplashCoord)y0<sp/>-<sp/>seg-&gt;y0)<sp/>*<sp/>seg-&gt;dxdy;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y0;<sp/>y<sp/>&lt;=<sp/>y1;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>xx1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>seg-&gt;x0<sp/>+<sp/>((SplashCoord)(y<sp/>+<sp/>1)<sp/>-<sp/>seg-&gt;y0)<sp/>*<sp/>seg-&gt;dxdy;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>segment<sp/>may<sp/>not<sp/>actually<sp/>extend<sp/>to<sp/>the<sp/>top<sp/>and/or<sp/>bottom<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(xx0<sp/>&lt;<sp/>segXMin)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>segXMin;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&gt;<sp/>segXMax)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>segXMax;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx1<sp/>&lt;<sp/>segXMin)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>segXMin;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx1<sp/>&gt;<sp/>segXMax)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>segXMax;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addIntersection(segYMin,<sp/>segYMax,<sp/>seg-&gt;flags,<sp/>y,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splashFloor(xx0),<sp/>splashFloor(xx1)))</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>std::sort(allInter,<sp/>allInter<sp/>+<sp/>allInterLen,<sp/><ref refid="structcmp_intersect_functor" kindref="compound">cmpIntersectFunctor</ref>());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>list<sp/>of<sp/>y<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>inter<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(yMax<sp/>-<sp/>yMin<sp/>+<sp/>2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>yMin;<sp/>y<sp/>&lt;=<sp/>yMax;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>inter[y<sp/>-<sp/>yMin]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>allInterLen<sp/>&amp;&amp;<sp/>allInter[i].y<sp/>&lt;=<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>inter[yMax<sp/>-<sp/>yMin<sp/>+<sp/>1]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">GBool<sp/>SplashXPathScanner::addIntersection(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>segYMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>segYMax,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>segFlags,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInterLen<sp/>==<sp/>allInterSize)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newInterSize<sp/>=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>allInterSize<sp/>*<sp/>2<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref>))<sp/>?<sp/>allInterSize<sp/>+<sp/>32768<sp/>:<sp/>allInterSize<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newInterSize<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref>))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bogus<sp/>memory<sp/>allocation<sp/>size<sp/>in<sp/>SplashXPathScanner::addIntersection<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>newInterSize);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>allInterSize<sp/>=<sp/>newInterSize;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter<sp/>=<sp/>(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref><sp/>*)greallocn(allInter,<sp/>newInterSize,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_splash_intersect" kindref="compound">SplashIntersect</ref>));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>allInter[allInterLen].y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].x0<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].x1<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].x0<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].x1<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segYMin<sp/>&lt;=<sp/>y<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)y<sp/>&lt;<sp/>segYMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(segFlags<sp/>&amp;<sp/>splashXPathHoriz))<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].count<sp/>=<sp/>eo<sp/>?<sp/>1</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(segFlags<sp/>&amp;<sp/>splashXPathFlip)<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>allInter[allInterLen].count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>++allInterLen;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashXPathScanner::renderAALine(<ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*aaBuf,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>GBool<sp/>adjustVertLine)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx0,<sp/>xx1,<sp/>xx,<sp/>xxMin,<sp/>xxMax,<sp/>yy,<sp/>interEnd;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>Guchar<sp/>mask;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>memset(aaBuf-&gt;getDataPtr(),<sp/>0,<sp/>aaBuf-&gt;getRowSize()<sp/>*<sp/>aaBuf-&gt;getHeight());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>xxMin<sp/>=<sp/>aaBuf-&gt;getWidth();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>xxMax<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&lt;=<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>inter[0];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>inter[yMax<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>inter[splashAASize<sp/>*<sp/>y<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>0;<sp/>yy<sp/>&lt;<sp/>splashAASize;<sp/>++yy)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[0];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[yMax<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interIdx<sp/>&lt;<sp/>interEnd)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>allInter[interIdx].x0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interIdx<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(allInter[interIdx].x0<sp/>&lt;=<sp/>xx1<sp/>||</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eo<sp/>?<sp/>(interCount<sp/>&amp;<sp/>1)<sp/>:<sp/>(interCount<sp/>!=<sp/>0))))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[interIdx].x1<sp/>&gt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>++xx1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx1<sp/>&gt;<sp/>aaBuf-&gt;getWidth())<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>aaBuf-&gt;getWidth();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>[xx0,<sp/>xx1)<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&lt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>xx0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>aaBuf-&gt;getDataPtr()<sp/>+<sp/>yy<sp/>*<sp/>aaBuf-&gt;getRowSize()<sp/>+<sp/>(xx<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&amp;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>adjustVertLine<sp/>?<sp/>0xff<sp/>:<sp/>0xff<sp/>&gt;&gt;<sp/>(xx<sp/>&amp;<sp/>7);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!adjustVertLine<sp/>&amp;&amp;<sp/>(xx<sp/>&amp;<sp/>~7)<sp/>==<sp/>(xx1<sp/>&amp;<sp/>~7))<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>(Guchar)(0xff00<sp/>&gt;&gt;<sp/>(xx1<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>(xx<sp/>&amp;<sp/>~7)<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>xx<sp/>+<sp/>7<sp/>&lt;<sp/>xx1;<sp/>xx<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>|=<sp/>0xff;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>|=<sp/>adjustVertLine<sp/>?<sp/>0xff<sp/>:<sp/>(Guchar)(0xff00<sp/>&gt;&gt;<sp/>(xx1<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&lt;<sp/>xxMin)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xxMin<sp/>=<sp/>xx0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx1<sp/>&gt;<sp/>xxMax)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xxMax<sp/>=<sp/>xx1;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xxMin<sp/>&gt;<sp/>xxMax)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>xxMin<sp/>=<sp/>xxMax;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>*x0<sp/>=<sp/>xxMin<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>*x1<sp/>=<sp/>(xxMax<sp/>-<sp/>1)<sp/>/<sp/>splashAASize;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashXPathScanner::clipAALine(<ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*aaBuf,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx0,<sp/>xx1,<sp/>xx,<sp/>yy,<sp/>interEnd;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>Guchar<sp/>mask;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>0;<sp/>yy<sp/>&lt;<sp/>splashAASize;<sp/>++yy)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>*x0<sp/>*<sp/>splashAASize;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&lt;=<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>interEnd<sp/>=<sp/>inter[0];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>interEnd<sp/>=<sp/>inter[yMax<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>interIdx<sp/>=<sp/>inter[splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>-<sp/>yMin];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[yMax<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interEnd<sp/>=<sp/>inter[splashAASize<sp/>*<sp/>y<sp/>+<sp/>yy<sp/>-<sp/>yMin<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interIdx<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;<sp/>xx<sp/>&lt;<sp/>(*x1<sp/>+<sp/>1)<sp/>*<sp/>splashAASize)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>allInter[interIdx].x0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interIdx<sp/>&lt;<sp/>interEnd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(allInter[interIdx].x0<sp/>&lt;=<sp/>xx1<sp/>||</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eo<sp/>?<sp/>(interCount<sp/>&amp;<sp/>1)<sp/>:<sp/>(interCount<sp/>!=<sp/>0))))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allInter[interIdx].x1<sp/>&gt;<sp/>xx1)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>allInter[interIdx].x1;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interCount<sp/>+=<sp/>allInter[interIdx].count;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++interIdx;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&gt;<sp/>aaBuf-&gt;getWidth())<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>aaBuf-&gt;getWidth();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>[xx,<sp/>xx0)<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>xx0)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>aaBuf-&gt;getDataPtr()<sp/>+<sp/>yy<sp/>*<sp/>aaBuf-&gt;getRowSize()<sp/>+<sp/>(xx<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&amp;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(Guchar)(0xff00<sp/>&gt;&gt;<sp/>(xx<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xx<sp/>&amp;<sp/>~7)<sp/>==<sp/>(xx0<sp/>&amp;<sp/>~7))<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>|=<sp/>0xff<sp/>&gt;&gt;<sp/>(xx0<sp/>&amp;<sp/>7);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>(xx<sp/>&amp;<sp/>~7)<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>xx<sp/>+<sp/>7<sp/>&lt;<sp/>xx0;<sp/>xx<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>xx0)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>&amp;=<sp/>0xff<sp/>&gt;&gt;<sp/>(xx0<sp/>&amp;<sp/>7);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx1<sp/>&gt;=<sp/>xx)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>xx1<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>(*x1<sp/>+<sp/>1)<sp/>*<sp/>splashAASize;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx0<sp/>&gt;<sp/>aaBuf-&gt;getWidth())<sp/>xx0<sp/>=<sp/>aaBuf-&gt;getWidth();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>[xx,<sp/>xx0)<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>xx0<sp/>&amp;&amp;<sp/>xx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>aaBuf-&gt;getDataPtr()<sp/>+<sp/>yy<sp/>*<sp/>aaBuf-&gt;getRowSize()<sp/>+<sp/>(xx<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&amp;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(Guchar)(0xff00<sp/>&gt;&gt;<sp/>(xx<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xx<sp/>&amp;<sp/>~7)<sp/>==<sp/>(xx0<sp/>&amp;<sp/>~7))<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>0xff<sp/>&gt;&gt;<sp/>(xx0<sp/>&amp;<sp/>7);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>(xx<sp/>&amp;<sp/>~7)<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>xx<sp/>+<sp/>7<sp/>&lt;<sp/>xx0;<sp/>xx<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>xx0)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>&amp;=<sp/>0xff<sp/>&gt;&gt;<sp/>(xx0<sp/>&amp;<sp/>7);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/splash/SplashXPathScanner.cc"/>
  </compounddef>
</doxygen>
