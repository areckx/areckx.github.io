<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="zutil_8c" kind="file" language="C++">
    <compoundname>zutil.c</compoundname>
    <includes refid="zutil_8h" local="yes">zutil.h</includes>
    <incdepgraph>
      <node id="80142">
        <label>errno.h</label>
      </node>
      <node id="80138">
        <label>thirdparty/freetype/src/gzip/zutil.c</label>
        <link refid="zutil_8c"/>
        <childnode refid="80139" relation="include">
        </childnode>
      </node>
      <node id="80139">
        <label>zutil.h</label>
        <link refid="zutil_8h_source"/>
        <childnode refid="80140" relation="include">
        </childnode>
        <childnode refid="80142" relation="include">
        </childnode>
      </node>
      <node id="80140">
        <label>zlib.h</label>
        <link refid="zlib_8h_source"/>
        <childnode refid="80141" relation="include">
        </childnode>
      </node>
      <node id="80141">
        <label>zconf.h</label>
        <link refid="zconf_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="zutil_8c_1a9ce6c3c4eb6728edb95d89def6782a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void exit</type>
        <definition>void exit OF</definition>
        <argsstring>((int))</argsstring>
        <name>OF</name>
        <param>
          <type>(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1aaeaf4c4bfd0bbb073ce42fe420bb828a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmemcpy</definition>
        <argsstring>(Bytef *dest, const Bytef *source, uInt len)</argsstring>
        <name>zmemcpy</name>
        <param>
          <type>Bytef *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const Bytef *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="17" column="1" bodyfile="thirdparty/freetype/src/gzip/zutil.c" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a6590fb2f333a07dc593b873440d7c6ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int zmemcmp</definition>
        <argsstring>(Bytef *s1, const Bytef *s2, uInt len) const</argsstring>
        <name>zmemcmp</name>
        <param>
          <type>Bytef *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const Bytef *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="28" column="1" bodyfile="thirdparty/freetype/src/gzip/zutil.c" bodystart="28" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1ae92187bde62d7c4e84b231576d291881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmemzero</definition>
        <argsstring>(Bytef *dest, uInt len)</argsstring>
        <name>zmemzero</name>
        <param>
          <type>Bytef *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="41" column="1" bodyfile="thirdparty/freetype/src/gzip/zutil.c" bodystart="41" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1a23f4895eb16ad1e8f45bb11b7312e72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>voidp ft_scalloc</type>
        <definition>voidp ft_scalloc OF</definition>
        <argsstring>((uInt items, uInt size))</argsstring>
        <name>OF</name>
        <param>
          <type>(uInt items, uInt size)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1aea740873c364e33d6ebdf9a80f89417b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void ft_sfree</type>
        <definition>void ft_sfree OF</definition>
        <argsstring>((voidpf ptr))</argsstring>
        <name>OF</name>
        <param>
          <type>(voidpf ptr)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1acd6de6ee77b7c44353e61511b6eb1d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>voidpf</type>
        <definition>voidpf zcalloc</definition>
        <argsstring>(voidpf opaque, unsigned items, unsigned size)</argsstring>
        <name>zcalloc</name>
        <param>
          <type>voidpf</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>items</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="164" column="1" bodyfile="thirdparty/freetype/src/gzip/zutil.c" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="zutil_8c_1ac5167b77f4a79cb68ba27c598b52485e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zcfree</definition>
        <argsstring>(voidpf opaque, voidpf ptr)</argsstring>
        <name>zcfree</name>
        <param>
          <type>voidpf</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>voidpf</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/freetype/src/gzip/zutil.c" line="173" column="1" bodyfile="thirdparty/freetype/src/gzip/zutil.c" bodystart="173" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>zutil.c<sp/>--<sp/>target<sp/>dependent<sp/>utility<sp/>functions<sp/>for<sp/>the<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-2002<sp/>Jean-loup<sp/>Gailly.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exit<sp/>OF((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MEMCPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zmemcpy(dest,<sp/>source,<sp/>len)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Bytef*<sp/>dest;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef*<sp/>source;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>len;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*source++;<sp/></highlight><highlight class="comment">/*<sp/>???<sp/>to<sp/>be<sp/>unrolled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zmemcmp(s1,<sp/>s2,<sp/>len)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef*<sp/>s1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef*<sp/>s2;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>len;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>j;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s1[j]<sp/>!=<sp/>s2[j])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2*(s1[j]<sp/>&gt;<sp/>s2[j])-1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zmemzero(dest,<sp/>len)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>Bytef*<sp/>dest;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>len;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>???<sp/>to<sp/>be<sp/>unrolled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>MSDOS<sp/>)<sp/>&amp;&amp;<sp/>defined(<sp/>__TURBOC__<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>MY_ZCALLOC<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(<sp/>__BORLANDC__)<sp/>||<sp/>!defined(SMALL_MEDIUM))<sp/>&amp;&amp;<sp/>!defined(__32BIT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Small<sp/>and<sp/>medium<sp/>model<sp/>in<sp/>Turbo<sp/>C<sp/>are<sp/>for<sp/>now<sp/>limited<sp/>to<sp/>near<sp/>allocation</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>with<sp/>reduced<sp/>MAX_WBITS<sp/>and<sp/>MAX_MEM_LEVEL</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MY_ZCALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Turbo<sp/>C<sp/>malloc()<sp/>does<sp/>not<sp/>allow<sp/>dynamic<sp/>allocation<sp/>of<sp/>64K<sp/>bytes</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>and<sp/>farmalloc(64K)<sp/>returns<sp/>a<sp/>pointer<sp/>with<sp/>an<sp/>offset<sp/>of<sp/>8,<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>must<sp/>fix<sp/>the<sp/>pointer.<sp/>Warning:<sp/>the<sp/>pointer<sp/>must<sp/>be<sp/>put<sp/>back<sp/>to<sp/>its</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>original<sp/>form<sp/>in<sp/>order<sp/>to<sp/>free<sp/>it,<sp/>use<sp/>zcfree().</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_PTR<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>10*64K<sp/>=<sp/>640K<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ptr_table_s<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>org_ptr;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>new_ptr;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/>ptr_table;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">local<sp/>ptr_table<sp/><ref refid="classtable" kindref="compound">table</ref>[MAX_PTR];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>table<sp/>is<sp/>used<sp/>to<sp/>remember<sp/>the<sp/>original<sp/>form<sp/>of<sp/>pointers</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>to<sp/>large<sp/>buffers<sp/>(64K).<sp/>Such<sp/>pointers<sp/>are<sp/>normalized<sp/>with<sp/>a<sp/>zero<sp/>offset.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>Since<sp/>MSDOS<sp/>is<sp/>not<sp/>a<sp/>preemptive<sp/>multitasking<sp/>OS,<sp/>this<sp/>table<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>protected<sp/>from<sp/>concurrent<sp/>access.<sp/>This<sp/>hack<sp/>doesn&apos;t<sp/>work<sp/>anyway<sp/>on</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>a<sp/>protected<sp/>system<sp/>like<sp/>OS/2.<sp/>Use<sp/>Microsoft<sp/>C<sp/>instead.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">voidpf<sp/>zcalloc<sp/>(voidpf<sp/>opaque,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>buf<sp/>=<sp/>opaque;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>make<sp/>some<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ulg<sp/>bsize<sp/>=<sp/>(ulg)items*size;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>allocate<sp/>less<sp/>than<sp/>65520<sp/>bytes,<sp/>we<sp/>assume<sp/>that<sp/>farmalloc</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>return<sp/>a<sp/>usable<sp/>pointer<sp/>which<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be<sp/>normalized.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bsize<sp/>&lt;<sp/>65520L)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>farmalloc(bsize);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(ush*)&amp;buf<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>farmalloc(bsize<sp/>+<sp/>16L);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>NULL<sp/>||<sp/>next_ptr<sp/>&gt;=<sp/>MAX_PTR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>table[next_ptr].org_ptr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>the<sp/>pointer<sp/>to<sp/>seg:0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>*((ush*)&amp;buf+1)<sp/>+=<sp/>((ush)((uch*)buf-0)<sp/>+<sp/>15)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ush*)&amp;buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>table[next_ptr++].new_ptr<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>zcfree<sp/>(voidpf<sp/>opaque,<sp/>voidpf<sp/>ptr)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(ush*)&amp;ptr<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>object<sp/>&lt;<sp/>64K<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farfree(ptr);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>original<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>next_ptr;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>table[n].new_ptr)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farfree(table[n].org_ptr);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++n<sp/>&lt;<sp/>next_ptr)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table[n-1]<sp/>=<sp/>table[n];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ptr--;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>opaque;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>make<sp/>some<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(0,<sp/></highlight><highlight class="stringliteral">&quot;zcfree:<sp/>ptr<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MSDOS<sp/>&amp;&amp;<sp/>__TURBOC__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(M_I86)<sp/>&amp;&amp;<sp/>!defined(__32BIT__)<sp/>&amp;&amp;<sp/>!defined(<sp/>MY_ZCALLOC<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Microsoft<sp/>C<sp/>in<sp/>16-bit<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MY_ZCALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(_MSC_VER)<sp/>||<sp/>(_MSC_VER<sp/>&lt;=<sp/>600))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_halloc<sp/><sp/>halloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_hfree<sp/><sp/><sp/>hfree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">voidpf<sp/>zcalloc<sp/>(voidpf<sp/>opaque,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>opaque<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_halloc((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)items,<sp/>size);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>zcfree<sp/>(voidpf<sp/>opaque,<sp/>voidpf<sp/>ptr)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>opaque<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>_hfree(ptr);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MSC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MY_ZCALLOC<sp/></highlight><highlight class="comment">/*<sp/>Any<sp/>system<sp/>without<sp/>a<sp/>special<sp/>alloc<sp/>function<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STDC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>voidp<sp/><sp/>ft_scalloc<sp/>OF((uInt<sp/>items,<sp/>uInt<sp/>size));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>ft_sfree<sp/><sp/><sp/>OF((voidpf<sp/>ptr));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">voidpf<sp/>zcalloc<sp/>(opaque,<sp/>items,<sp/>size)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>opaque;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>items<sp/>+=<sp/>size<sp/>-<sp/>size;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(voidpf)ft_scalloc(items,<sp/>size);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>zcfree<sp/>(opaque,<sp/>ptr)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>opaque;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>voidpf<sp/>ptr;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ft_sfree(ptr);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MY_ZCALLOC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/freetype/src/gzip/zutil.c"/>
  </compounddef>
</doxygen>
