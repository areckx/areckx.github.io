<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_splash_math_8h" kind="file" language="C++">
    <compoundname>SplashMath.h</compoundname>
    <includes refid="poppler-config_8h" local="yes">poppler-config.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="_splash_types_8h" local="yes">SplashTypes.h</includes>
    <includedby refid="_splash_8cc" local="yes">thirdparty/poppler/splash/Splash.cc</includedby>
    <includedby refid="_splash_clip_8h" local="yes">thirdparty/poppler/splash/SplashClip.h</includedby>
    <includedby refid="_splash_font_8cc" local="yes">thirdparty/poppler/splash/SplashFont.cc</includedby>
    <includedby refid="_splash_font_engine_8cc" local="yes">thirdparty/poppler/splash/SplashFontEngine.cc</includedby>
    <includedby refid="_splash_pattern_8cc" local="yes">thirdparty/poppler/splash/SplashPattern.cc</includedby>
    <includedby refid="_splash_screen_8cc" local="yes">thirdparty/poppler/splash/SplashScreen.cc</includedby>
    <includedby refid="_splash_x_path_8cc" local="yes">thirdparty/poppler/splash/SplashXPath.cc</includedby>
    <includedby refid="_splash_x_path_scanner_8cc" local="yes">thirdparty/poppler/splash/SplashXPathScanner.cc</includedby>
    <incdepgraph>
      <node id="92628">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="92629" relation="include">
        </childnode>
      </node>
      <node id="92627">
        <label>thirdparty/poppler/splash/SplashMath.h</label>
        <link refid="_splash_math_8h"/>
        <childnode refid="92628" relation="include">
        </childnode>
        <childnode refid="92630" relation="include">
        </childnode>
        <childnode refid="92631" relation="include">
        </childnode>
      </node>
      <node id="92630">
        <label>math.h</label>
      </node>
      <node id="92631">
        <label>SplashTypes.h</label>
        <link refid="_splash_types_8h_source"/>
        <childnode refid="92632" relation="include">
        </childnode>
      </node>
      <node id="92632">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="92628" relation="include">
        </childnode>
      </node>
      <node id="92629">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="92639">
        <label>thirdparty/poppler/splash/SplashFontEngine.cc</label>
        <link refid="_splash_font_engine_8cc_source"/>
      </node>
      <node id="92645">
        <label>thirdparty/poppler/splash/SplashXPath.cc</label>
        <link refid="_splash_x_path_8cc_source"/>
      </node>
      <node id="92636">
        <label>thirdparty/poppler/splash/SplashFont.h</label>
        <link refid="_splash_font_8h_source"/>
        <childnode refid="92637" relation="include">
        </childnode>
        <childnode refid="92634" relation="include">
        </childnode>
        <childnode refid="92638" relation="include">
        </childnode>
        <childnode refid="92639" relation="include">
        </childnode>
      </node>
      <node id="92643">
        <label>thirdparty/poppler/splash/SplashPattern.cc</label>
        <link refid="_splash_pattern_8cc_source"/>
      </node>
      <node id="92634">
        <label>thirdparty/poppler/splash/Splash.cc</label>
        <link refid="_splash_8cc_source"/>
      </node>
      <node id="92644">
        <label>thirdparty/poppler/splash/SplashScreen.cc</label>
        <link refid="_splash_screen_8cc_source"/>
      </node>
      <node id="92641">
        <label>thirdparty/poppler/splash/SplashClip.cc</label>
        <link refid="_splash_clip_8cc_source"/>
      </node>
      <node id="92640">
        <label>thirdparty/poppler/splash/Splash.h</label>
        <link refid="_splash_8h_source"/>
        <childnode refid="92637" relation="include">
        </childnode>
        <childnode refid="92634" relation="include">
        </childnode>
      </node>
      <node id="92633">
        <label>thirdparty/poppler/splash/SplashMath.h</label>
        <link refid="_splash_math_8h"/>
        <childnode refid="92634" relation="include">
        </childnode>
        <childnode refid="92635" relation="include">
        </childnode>
        <childnode refid="92638" relation="include">
        </childnode>
        <childnode refid="92639" relation="include">
        </childnode>
        <childnode refid="92643" relation="include">
        </childnode>
        <childnode refid="92644" relation="include">
        </childnode>
        <childnode refid="92645" relation="include">
        </childnode>
        <childnode refid="92646" relation="include">
        </childnode>
      </node>
      <node id="92637">
        <label>thirdparty/poppler/poppler/SplashOutputDev.cc</label>
        <link refid="_splash_output_dev_8cc_source"/>
      </node>
      <node id="92635">
        <label>thirdparty/poppler/splash/SplashClip.h</label>
        <link refid="_splash_clip_8h_source"/>
        <childnode refid="92636" relation="include">
        </childnode>
        <childnode refid="92640" relation="include">
        </childnode>
        <childnode refid="92641" relation="include">
        </childnode>
        <childnode refid="92642" relation="include">
        </childnode>
      </node>
      <node id="92646">
        <label>thirdparty/poppler/splash/SplashXPathScanner.cc</label>
        <link refid="_splash_x_path_scanner_8cc_source"/>
      </node>
      <node id="92642">
        <label>thirdparty/poppler/splash/SplashState.cc</label>
        <link refid="_splash_state_8cc_source"/>
      </node>
      <node id="92638">
        <label>thirdparty/poppler/splash/SplashFont.cc</label>
        <link refid="_splash_font_8cc_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_splash_math_8h_1a15b22eaa5b0fe919cb7ef09b53dfb8dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SplashCoord</type>
        <definition>static SplashCoord splashAbs</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashAbs</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="33" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="33" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1acf505bcf47f361a6b5a1625f16dac7ba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashFloor</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashFloor</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="43" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="43" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1a7c137464668e24765ceac6d6b3d8c7ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashCeil</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashCeil</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="90" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="90" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1a1c7d2c6e053a4d52747b8de1beab46b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashRound</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashRound</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="136" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="136" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1a248721342e6ccd89c5a915adefafc7a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SplashCoord</type>
        <definition>static SplashCoord splashAvg</definition>
        <argsstring>(SplashCoord x, SplashCoord y)</argsstring>
        <name>splashAvg</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="182" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1a14566df282c56b2f07c205f4a025d3dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SplashCoord</type>
        <definition>static SplashCoord splashSqrt</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashSqrt</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="190" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1a353fac44b918a50610109cf153eea493" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SplashCoord</type>
        <definition>static SplashCoord splashPow</definition>
        <argsstring>(SplashCoord x, SplashCoord y)</argsstring>
        <name>splashPow</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="200" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="200" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1afb54658b9658fc6d9846962ff40a8352" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SplashCoord</type>
        <definition>static SplashCoord splashDist</definition>
        <argsstring>(SplashCoord x0, SplashCoord y0, SplashCoord x1, SplashCoord y1)</argsstring>
        <name>splashDist</name>
        <param>
          <type>SplashCoord</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="210" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="210" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="_splash_math_8h_1ae2339cac24d0885231488d5c9e2f0955" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool splashCheckDet</definition>
        <argsstring>(SplashCoord m11, SplashCoord m12, SplashCoord m21, SplashCoord m22, SplashCoord epsilon)</argsstring>
        <name>splashCheckDet</name>
        <param>
          <type>SplashCoord</type>
          <declname>m11</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>m12</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>m21</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>m22</declname>
        </param>
        <param>
          <type>SplashCoord</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/splash/SplashMath.h" line="235" column="1" bodyfile="thirdparty/poppler/splash/SplashMath.h" bodystart="235" bodyend="243"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashMath.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009-2011<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SPLASHMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPLASHMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;poppler-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/FixedPoint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SplashCoord<sp/>splashAbs(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::abs(x);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(x);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(x);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashFloor(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::floor(x);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floorf(x);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>__GNUC__<sp/>&amp;&amp;<sp/>__i386__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>floor()<sp/>and<sp/>(int)()<sp/>are<sp/>implemented<sp/>separately,<sp/>which<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>changing<sp/>the<sp/>FPCW<sp/>multiple<sp/>times<sp/>-<sp/>so<sp/>we<sp/>optimize<sp/>it<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>inline<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW,<sp/>t;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fldl<sp/><sp/><sp/>%4\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fnstcw<sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%0,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;andw<sp/><sp/><sp/>$0xf3ff,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;orw<sp/><sp/><sp/><sp/>$0x0400,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%3,<sp/>%1\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fistpl<sp/>%2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(oldCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(newCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(t)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(x));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(WIN32)<sp/>&amp;&amp;<sp/>defined(_M_IX86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>floor()<sp/>and<sp/>(int)()<sp/>are<sp/>implemented<sp/>separately,<sp/>which<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>changing<sp/>the<sp/>FPCW<sp/>multiple<sp/>times<sp/>-<sp/>so<sp/>we<sp/>optimize<sp/>it<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>inline<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>fld<sp/>QWORD<sp/>PTR<sp/>x</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>fnstcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>mov<sp/>ax,<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>and<sp/>ax,<sp/>0xf3ff</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>or<sp/>ax,<sp/>0x0400</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>mov<sp/>WORD<sp/>PTR<sp/>newCW,<sp/>ax<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>newCW</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>fistp<sp/>DWORD<sp/>PTR<sp/>result</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)x;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(x);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashCeil(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::ceil(x);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceilf(x);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>&amp;&amp;<sp/>__i386__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ceil()<sp/>and<sp/>(int)()<sp/>are<sp/>implemented<sp/>separately,<sp/>which<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>changing<sp/>the<sp/>FPCW<sp/>multiple<sp/>times<sp/>-<sp/>so<sp/>we<sp/>optimize<sp/>it<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>inline<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW,<sp/>t;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fldl<sp/><sp/><sp/>%4\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fnstcw<sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%0,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;andw<sp/><sp/><sp/>$0xf3ff,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;orw<sp/><sp/><sp/><sp/>$0x0800,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%3,<sp/>%1\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fistpl<sp/>%2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(oldCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(newCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(t)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(x));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/>&amp;&amp;<sp/>defined(_M_IX86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ceil()<sp/>and<sp/>(int)()<sp/>are<sp/>implemented<sp/>separately,<sp/>which<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>changing<sp/>the<sp/>FPCW<sp/>multiple<sp/>times<sp/>-<sp/>so<sp/>we<sp/>optimize<sp/>it<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>inline<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>__asm<sp/>fld<sp/>QWORD<sp/>PTR<sp/>x</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>__asm<sp/>fnstcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>__asm<sp/>mov<sp/>ax,<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>__asm<sp/>and<sp/>ax,<sp/>0xf3ff</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>__asm<sp/>or<sp/>ax,<sp/>0x0800</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>__asm<sp/>mov<sp/>WORD<sp/>PTR<sp/>newCW,<sp/>ax<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>newCW</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>__asm<sp/>fistp<sp/>DWORD<sp/>PTR<sp/>result</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(x);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashRound(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::round(x);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>&amp;&amp;<sp/>__i386__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>could<sp/>use<sp/>round-to-nearest<sp/>mode<sp/>and<sp/>avoid<sp/>the<sp/>&quot;+0.5&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>that<sp/>produces<sp/>slightly<sp/>different<sp/>results<sp/>(because<sp/>i+0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>rounds<sp/>up<sp/>and<sp/>sometimes<sp/>down<sp/>using<sp/>the<sp/>even<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW,<sp/>t;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>x<sp/>+=<sp/>0.5;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fldl<sp/><sp/><sp/>%4\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fnstcw<sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%0,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;andw<sp/><sp/><sp/>$0xf3ff,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;orw<sp/><sp/><sp/><sp/>$0x0400,<sp/>%3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movw<sp/><sp/><sp/>%3,<sp/>%1\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fistpl<sp/>%2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fldcw<sp/><sp/>%0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(oldCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(newCW),<sp/></highlight><highlight class="stringliteral">&quot;=m&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(t)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(x));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/>&amp;&amp;<sp/>defined(_M_IX86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>could<sp/>use<sp/>round-to-nearest<sp/>mode<sp/>and<sp/>avoid<sp/>the<sp/>&quot;+0.5&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>that<sp/>produces<sp/>slightly<sp/>different<sp/>results<sp/>(because<sp/>i+0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>rounds<sp/>up<sp/>and<sp/>sometimes<sp/>down<sp/>using<sp/>the<sp/>even<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>Gushort<sp/>oldCW,<sp/>newCW;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>x<sp/>+=<sp/>0.5;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>__asm<sp/>fld<sp/>QWORD<sp/>PTR<sp/>x</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>__asm<sp/>fnstcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>__asm<sp/>mov<sp/>ax,<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>__asm<sp/>and<sp/>ax,<sp/>0xf3ff</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>__asm<sp/>or<sp/>ax,<sp/>0x0400</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>__asm<sp/>mov<sp/>WORD<sp/>PTR<sp/>newCW,<sp/>ax<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>newCW</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>__asm<sp/>fistp<sp/>DWORD<sp/>PTR<sp/>result</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>__asm<sp/>fldcw<sp/>WORD<sp/>PTR<sp/>oldCW</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)splashFloor(x<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SplashCoord<sp/>splashAvg(SplashCoord<sp/>x,<sp/>SplashCoord<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::avg(x,<sp/>y);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5<sp/>*<sp/>(x<sp/>+<sp/>y);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SplashCoord<sp/>splashSqrt(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::sqrt(x);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrtf(x);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(x);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SplashCoord<sp/>splashPow(SplashCoord<sp/>x,<sp/>SplashCoord<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::pow(x,<sp/>y);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>powf(x,<sp/>y);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(x,<sp/>y);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SplashCoord<sp/>splashDist(SplashCoord<sp/>x0,<sp/>SplashCoord<sp/>y0,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashCoord<sp/>x1,<sp/>SplashCoord<sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>dx,<sp/>dy;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>handles<sp/>the<sp/>situation<sp/>where<sp/>dx*dx<sp/>or<sp/>dy*dy<sp/>is<sp/>too<sp/>large<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fit<sp/>in<sp/>the<sp/>16.16<sp/>fixed<sp/>point<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>dxa,<sp/>dya,<sp/>d;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>dxa<sp/>=<sp/>splashAbs(dx);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>dya<sp/>=<sp/>splashAbs(dy);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxa<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>dya<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxa<sp/>&gt;<sp/>dya)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>dya<sp/>/<sp/>dxa;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dxa<sp/>*<sp/>FixedPoint::sqrt(d*d<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>dxa<sp/>/<sp/>dya;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dya<sp/>*<sp/>FixedPoint::sqrt(d*d<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>splashSqrt(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GBool<sp/>splashCheckDet(SplashCoord<sp/>m11,<sp/>SplashCoord<sp/>m12,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashCoord<sp/>m21,<sp/>SplashCoord<sp/>m22,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashCoord<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FixedPoint::checkDet(m11,<sp/>m12,<sp/>m21,<sp/>m22,<sp/>epsilon);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(m11<sp/>*<sp/>m22<sp/>-<sp/>m12<sp/>*<sp/>m21)<sp/>&gt;=<sp/>epsilon;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/splash/SplashMath.h"/>
  </compounddef>
</doxygen>
