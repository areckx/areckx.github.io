<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="portmidi_8h" kind="file" language="C++">
    <compoundname>portmidi.h</compoundname>
    <includedby refid="pm_8h" local="no">mscore/pm.h</includedby>
    <includedby refid="pmutil_8c" local="yes">thirdparty/portmidi/pm_common/pmutil.c</includedby>
    <includedby refid="portmidi_8c" local="yes">thirdparty/portmidi/pm_common/portmidi.c</includedby>
    <includedby refid="finddefault_8c" local="yes">thirdparty/portmidi/pm_mac/finddefault.c</includedby>
    <includedby refid="pmmac_8c" local="yes">thirdparty/portmidi/pm_mac/pmmac.c</includedby>
    <includedby refid="pmmacosxcm_8c" local="yes">thirdparty/portmidi/pm_mac/pmmacosxcm.c</includedby>
    <includedby refid="latency_8c" local="yes">thirdparty/portmidi/pm_test/latency.c</includedby>
    <includedby refid="midithread_8c" local="yes">thirdparty/portmidi/pm_test/midithread.c</includedby>
    <includedby refid="midithru_8c" local="yes">thirdparty/portmidi/pm_test/midithru.c</includedby>
    <includedby refid="mm_8c" local="yes">thirdparty/portmidi/pm_test/mm.c</includedby>
    <includedby refid="qtest_8c" local="yes">thirdparty/portmidi/pm_test/qtest.c</includedby>
    <includedby refid="sysex_8c" local="yes">thirdparty/portmidi/pm_test/sysex.c</includedby>
    <includedby refid="test_8c" local="yes">thirdparty/portmidi/pm_test/test.c</includedby>
    <includedby refid="pmwin_8c" local="yes">thirdparty/portmidi/pm_win/pmwin.c</includedby>
    <includedby refid="pmwinmm_8c" local="yes">thirdparty/portmidi/pm_win/pmwinmm.c</includedby>
    <invincdepgraph>
      <node id="92929">
        <label>thirdparty/portmidi/pm_mac/pmmac.c</label>
        <link refid="pmmac_8c_source"/>
      </node>
      <node id="92934">
        <label>thirdparty/portmidi/pm_test/mm.c</label>
        <link refid="mm_8c_source"/>
      </node>
      <node id="92935">
        <label>thirdparty/portmidi/pm_test/qtest.c</label>
        <link refid="qtest_8c_source"/>
      </node>
      <node id="92933">
        <label>thirdparty/portmidi/pm_test/midithru.c</label>
        <link refid="midithru_8c_source"/>
      </node>
      <node id="92924">
        <label>mscore/pm.h</label>
        <link refid="pm_8h_source"/>
        <childnode refid="92925" relation="include">
        </childnode>
      </node>
      <node id="92927">
        <label>thirdparty/portmidi/pm_common/portmidi.c</label>
        <link refid="portmidi_8c_source"/>
      </node>
      <node id="92938">
        <label>thirdparty/portmidi/pm_win/pmwin.c</label>
        <link refid="pmwin_8c_source"/>
      </node>
      <node id="92923">
        <label>thirdparty/portmidi/pm_common/portmidi.h</label>
        <link refid="portmidi_8h"/>
        <childnode refid="92924" relation="include">
        </childnode>
        <childnode refid="92926" relation="include">
        </childnode>
        <childnode refid="92927" relation="include">
        </childnode>
        <childnode refid="92928" relation="include">
        </childnode>
        <childnode refid="92929" relation="include">
        </childnode>
        <childnode refid="92930" relation="include">
        </childnode>
        <childnode refid="92931" relation="include">
        </childnode>
        <childnode refid="92932" relation="include">
        </childnode>
        <childnode refid="92933" relation="include">
        </childnode>
        <childnode refid="92934" relation="include">
        </childnode>
        <childnode refid="92935" relation="include">
        </childnode>
        <childnode refid="92936" relation="include">
        </childnode>
        <childnode refid="92937" relation="include">
        </childnode>
        <childnode refid="92938" relation="include">
        </childnode>
        <childnode refid="92939" relation="include">
        </childnode>
      </node>
      <node id="92930">
        <label>thirdparty/portmidi/pm_mac/pmmacosxcm.c</label>
        <link refid="pmmacosxcm_8c_source"/>
      </node>
      <node id="92926">
        <label>thirdparty/portmidi/pm_common/pmutil.c</label>
        <link refid="pmutil_8c_source"/>
      </node>
      <node id="92937">
        <label>thirdparty/portmidi/pm_test/test.c</label>
        <link refid="test_8c_source"/>
      </node>
      <node id="92928">
        <label>thirdparty/portmidi/pm_mac/finddefault.c</label>
        <link refid="finddefault_8c_source"/>
      </node>
      <node id="92936">
        <label>thirdparty/portmidi/pm_test/sysex.c</label>
        <link refid="sysex_8c_source"/>
      </node>
      <node id="92931">
        <label>thirdparty/portmidi/pm_test/latency.c</label>
        <link refid="latency_8c_source"/>
      </node>
      <node id="92932">
        <label>thirdparty/portmidi/pm_test/midithread.c</label>
        <link refid="midithread_8c_source"/>
      </node>
      <node id="92939">
        <label>thirdparty/portmidi/pm_win/pmwinmm.c</label>
        <link refid="pmwinmm_8c_source"/>
      </node>
      <node id="92925">
        <label>mscore/pm.cpp</label>
        <link refid="pm_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_pm_device_info" prot="public">PmDeviceInfo</innerclass>
    <innerclass refid="struct_pm_event" prot="public">PmEvent</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="portmidi_8h_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="101" column="13" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="104" column="13" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a22eb909045c1638449c78e8a6207611b" prot="public" static="no">
        <name>PM_DEFAULT_SYSEX_BUFFER_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="108" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a00ffab472a8cb21bd3511721c9474658" prot="public" static="no">
        <name>PmStream</name>
        <initializer>PortMidiStream</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="148" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a7f7daa7a8b8333f92e64ab554fc11caf" prot="public" static="no">
        <name>HDRLENGTH</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="179" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a40b1b3ff3147b3e0dff5843911345c8e" prot="public" static="no">
        <name>PM_HOST_ERROR_MSG_LEN</name>
        <initializer>256u /* any host error msg will occupy less 
                                      than this number of characters */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="181" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1acffb28dc8bc99dcae9f6a7f35945e1b5" prot="public" static="no">
        <name>pmNoDevice</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="190" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1ab9a101a9e6d0ca59e02ec6ba40618e41" prot="public" static="no">
        <name>PmBefore</name>
        <param><defname>t1</defname></param>
        <param><defname>t2</defname></param>
        <initializer>((t1-t2) &lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="256" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a14df46b4e5e3aa265dc8dee06df8ce19" prot="public" static="no">
        <name>PM_FILT_ACTIVE</name>
        <initializer>(1 &lt;&lt; 0x0E)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="363" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a3ef53d51914740bb7746e017b5a44402" prot="public" static="no">
        <name>PM_FILT_SYSEX</name>
        <initializer>(1 &lt;&lt; 0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="365" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1af6d54a9ff867bab06ee18bc637887834" prot="public" static="no">
        <name>PM_FILT_CLOCK</name>
        <initializer>(1 &lt;&lt; 0x08)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="367" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1ae8733c7af01f94015043c8926076557a" prot="public" static="no">
        <name>PM_FILT_PLAY</name>
        <initializer>((1 &lt;&lt; 0x0A) | (1 &lt;&lt; 0x0C) | (1 &lt;&lt; 0x0B))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="369" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1aa4de938a93a84d9d06cc5173f4277595" prot="public" static="no">
        <name>PM_FILT_TICK</name>
        <initializer>(1 &lt;&lt; 0x09)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="371" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1aea41a2172d5c7382f6b9d7df85c62a7c" prot="public" static="no">
        <name>PM_FILT_FD</name>
        <initializer>(1 &lt;&lt; 0x0D)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="373" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a4ee575e9f8ba7bf24e53919cfe81edab" prot="public" static="no">
        <name>PM_FILT_UNDEFINED</name>
        <initializer>PM_FILT_FD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="375" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1af398203a8c838897bd07dc356cd9ed54" prot="public" static="no">
        <name>PM_FILT_RESET</name>
        <initializer>(1 &lt;&lt; 0x0F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="377" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a20f84601b1fc10c18339cf85bf9b91e9" prot="public" static="no">
        <name>PM_FILT_REALTIME</name>
        <initializer>(PM_FILT_ACTIVE | PM_FILT_SYSEX | PM_FILT_CLOCK | \
    PM_FILT_PLAY | PM_FILT_UNDEFINED | PM_FILT_RESET | PM_FILT_TICK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="379" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a27d37f62f7ab2674c5c6626a15630b48" prot="public" static="no">
        <name>PM_FILT_NOTE</name>
        <initializer>((1 &lt;&lt; 0x19) | (1 &lt;&lt; 0x18))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="382" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1af26195f93ad34640136d893fd4729a31" prot="public" static="no">
        <name>PM_FILT_CHANNEL_AFTERTOUCH</name>
        <initializer>(1 &lt;&lt; 0x1D)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="384" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a1b300264b36000d2f1aceb990a1aeb1d" prot="public" static="no">
        <name>PM_FILT_POLY_AFTERTOUCH</name>
        <initializer>(1 &lt;&lt; 0x1A)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="386" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a4f2cf0d7c7de4318c0750b80098031da" prot="public" static="no">
        <name>PM_FILT_AFTERTOUCH</name>
        <initializer>(PM_FILT_CHANNEL_AFTERTOUCH | PM_FILT_POLY_AFTERTOUCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="388" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1ade6cc12acc0eed1bbff2ead41cdc1ba4" prot="public" static="no">
        <name>PM_FILT_PROGRAM</name>
        <initializer>(1 &lt;&lt; 0x1C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="390" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1ab37c64bd527f54ec37fb312dabda16b1" prot="public" static="no">
        <name>PM_FILT_CONTROL</name>
        <initializer>(1 &lt;&lt; 0x1B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="392" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1ae6615da402e1a1a82b7833c7a30415e4" prot="public" static="no">
        <name>PM_FILT_PITCHBEND</name>
        <initializer>(1 &lt;&lt; 0x1E)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="394" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a9209ea350d58f2d1bc404bc1deecce0f" prot="public" static="no">
        <name>PM_FILT_MTC</name>
        <initializer>(1 &lt;&lt; 0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="396" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a830ecd4a62070c6e76352eea4524f537" prot="public" static="no">
        <name>PM_FILT_SONG_POSITION</name>
        <initializer>(1 &lt;&lt; 0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="398" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a45af83115b0e12767e99f619801f49b5" prot="public" static="no">
        <name>PM_FILT_SONG_SELECT</name>
        <initializer>(1 &lt;&lt; 0x03)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="400" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a96a486160895ec39c1f74611149e6bdd" prot="public" static="no">
        <name>PM_FILT_TUNE</name>
        <initializer>(1 &lt;&lt; 0x06)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="402" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a9f87e719897a7be9e0c17ea2c60c0171" prot="public" static="no">
        <name>PM_FILT_SYSTEMCOMMON</name>
        <initializer>(PM_FILT_MTC | PM_FILT_SONG_POSITION | PM_FILT_SONG_SELECT | PM_FILT_TUNE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="404" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a33262c53c6591f143fc61e12a8e2205c" prot="public" static="no">
        <name>Pm_Channel</name>
        <param><defname>channel</defname></param>
        <initializer>(1&lt;&lt;(channel))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="420" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1af1c22515214f7a2cbb1e1e8fb02602bd" prot="public" static="no">
        <name>Pm_Message</name>
        <param><defname>status</defname></param>
        <param><defname>data1</defname></param>
        <param><defname>data2</defname></param>
        <initializer>((((data2) &lt;&lt; 16) &amp; 0xFF0000) | \
          (((data1) &lt;&lt; 8) &amp; 0xFF00) | \
          ((status) &amp; 0xFF))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="448" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a729fed9ce1244a4052ef68527706eaf9" prot="public" static="no">
        <name>Pm_MessageStatus</name>
        <param><defname>msg</defname></param>
        <initializer>((msg) &amp; 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="452" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1a9b7776c54c8c7a1ce68101070ecb9c19" prot="public" static="no">
        <name>Pm_MessageData1</name>
        <param><defname>msg</defname></param>
        <initializer>(((msg) &gt;&gt; 8) &amp; 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="453" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portmidi_8h_1aefddbd9fdc825fe9e107e935eae17811" prot="public" static="no">
        <name>Pm_MessageData2</name>
        <param><defname>msg</defname></param>
        <initializer>(((msg) &gt;&gt; 16) &amp; 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="454" column="9" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" prot="public" static="no">
        <name>PmError</name>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a9545ea325397bd81d2d81bdd7d92cba4" prot="public">
          <name>pmNoError</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a63a88f49973a34b3e5c4ea0f4b5707b1" prot="public">
          <name>pmNoData</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a590ef425ab5bbe59658a08e551f1ad42" prot="public">
          <name>pmGotData</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a29400da63af0c60becca3e04a2c75fe5" prot="public">
          <name>pmHostError</name>
          <initializer>= -10000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a629c26e14c9bdac6e1688803f28ecd80" prot="public">
          <name>pmInvalidDeviceId</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a2cd8d4985678f6c92748dcc1177a2512" prot="public">
          <name>pmInsufficientMemory</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a841c43f85852dadb379f564e431b1c8e" prot="public">
          <name>pmBufferTooSmall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a3f41a487d89c058e39108822b2648695" prot="public">
          <name>pmBufferOverflow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9ad918f36038e977eb97cd15daa851670c" prot="public">
          <name>pmBadPtr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9afbf8f78a5f50d032831a97bc40477451" prot="public">
          <name>pmBadData</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9a0336e20f5dbbfada95d2f24f71807c5c" prot="public">
          <name>pmInternalError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9abb1810fb6d5f45ea7c3a6098d5a4853d" prot="public">
          <name>pmBufferMaxSize</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="111" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="111" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="portmidi_8h_1af4949219ee1bb0afc857cb242d123914" prot="public" static="no">
        <type>void</type>
        <definition>typedef void PortMidiStream</definition>
        <argsstring></argsstring>
        <name>PortMidiStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="147" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="portmidi_8h_1a696cc4d4360bb8513f13df4bb134098a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int PmDeviceID</definition>
        <argsstring></argsstring>
        <name>PmDeviceID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="189" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="portmidi_8h_1affff2df81f0cc034f43e1fe47d953579" prot="public" static="no">
        <type>long</type>
        <definition>typedef long PmTimestamp</definition>
        <argsstring></argsstring>
        <name>PmTimestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="252" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="portmidi_8h_1a86cdcb85cfa72e067bc2fd1b96fca05d" prot="public" static="no">
        <type>PmTimestamp(*</type>
        <definition>typedef PmTimestamp(* PmTimeProcPtr) (void *time_info)</definition>
        <argsstring>)(void *time_info)</argsstring>
        <name>PmTimeProcPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="253" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="portmidi_8h_1a5e4ff2b1f4d8ae84ddeaa6465d5de5db" prot="public" static="no">
        <type>long</type>
        <definition>typedef long PmMessage</definition>
        <argsstring></argsstring>
        <name>PmMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="520" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="portmidi_8h_1adaac16c5c9b218573bc204d1506a4b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Initialize</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_Initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="136" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="290" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a0c592864b369ed8ee6aee6cbab1f995d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Terminate</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_Terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="143" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="301" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a18e624339d87fce4a91735a38afbdeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_HasHostError</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_HasHostError</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="164" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="274" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1aa037d9d85af5791caea645d6c1f07e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Pm_GetErrorText</definition>
        <argsstring>(PmError errnum)</argsstring>
        <name>Pm_GetErrorText</name>
        <param>
          <type>PmError</type>
          <declname>errnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="171" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="213" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1aee6913b9bd3ade651fb3c8fc00c2446e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Pm_GetHostErrorText</definition>
        <argsstring>(char *msg, unsigned int len)</argsstring>
        <name>Pm_GetHostErrorText</name>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="177" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="259" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1ac26fa03acd656577936afbe02fd852ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_CountDevices</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_CountDevices</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="202" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a05d42cf171b3e3d2eb9824be3c2e30e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmDeviceID</type>
        <definition>PmDeviceID Pm_GetDefaultInputDeviceID</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_GetDefaultInputDeviceID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="245" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1aa7ad91cfdeacfb252ae34493e9cebc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmDeviceID</type>
        <definition>PmDeviceID Pm_GetDefaultOutputDeviceID</definition>
        <argsstring>(void)</argsstring>
        <name>Pm_GetDefaultOutputDeviceID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="246" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1abd2eeda58af466e49f25ecd595c07014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref> *</type>
        <definition>const PmDeviceInfo* Pm_GetDeviceInfo</definition>
        <argsstring>(PmDeviceID id)</argsstring>
        <name>Pm_GetDeviceInfo</name>
        <param>
          <type>PmDeviceID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="267" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a2e778a55f5376c3ae19b943899adc36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_OpenInput</definition>
        <argsstring>(PortMidiStream **stream, PmDeviceID inputDevice, void *inputDriverInfo, long bufferSize, PmTimeProcPtr time_proc, void *time_info)</argsstring>
        <name>Pm_OpenInput</name>
        <param>
          <type>PortMidiStream **</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmDeviceID</type>
          <declname>inputDevice</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>inputDriverInfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>PmTimeProcPtr</type>
          <declname>time_proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="333" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="633" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1adfe8b99bd94eb9ffe383ab2545cd454a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_OpenOutput</definition>
        <argsstring>(PortMidiStream **stream, PmDeviceID outputDevice, void *outputDriverInfo, long bufferSize, PmTimeProcPtr time_proc, void *time_info, long latency)</argsstring>
        <name>Pm_OpenOutput</name>
        <param>
          <type>PortMidiStream **</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmDeviceID</type>
          <declname>outputDevice</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>outputDriverInfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>PmTimeProcPtr</type>
          <declname>time_proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>time_info</declname>
        </param>
        <param>
          <type>long</type>
          <declname>latency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="340" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="716" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a908c2e5c214440c243d7449dedbc4b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_SetFilter</definition>
        <argsstring>(PortMidiStream *stream, long filters)</argsstring>
        <name>Pm_SetFilter</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>long</type>
          <declname>filters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="407" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="809" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a9e8f7dc292b1ebdadec533b843d6d8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_SetChannelMask</definition>
        <argsstring>(PortMidiStream *stream, int mask)</argsstring>
        <name>Pm_SetChannelMask</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="422" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="795" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a3fb1cc76afc7637231a99b06c8849268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Abort</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Abort</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="432" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="857" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a1917f3f56a38f5496363c5bd5e0085ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Close</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Close</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="439" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="824" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1ae88e6c682ee3550defdd0c74bcbdd508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Pm_Read</definition>
        <argsstring>(PortMidiStream *stream, PmEvent *buffer, long length)</argsstring>
        <name>Pm_Read</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="550" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="321" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a344e6ba3edb14d560ccb074d66b56590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Poll</definition>
        <argsstring>(PortMidiStream *stream)</argsstring>
        <name>Pm_Poll</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="556" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="362" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a9257b8cddc72ae5a1e142dc0ab478ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_Write</definition>
        <argsstring>(PortMidiStream *stream, PmEvent *buffer, long length)</argsstring>
        <name>Pm_Write</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="571" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="412" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a0e9ced23664e9adb2a8fe9749426cbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_WriteShort</definition>
        <argsstring>(PortMidiStream *stream, PmTimestamp when, long msg)</argsstring>
        <name>Pm_WriteShort</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>when</declname>
        </param>
        <param>
          <type>long</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="579" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="545" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="portmidi_8h_1a825d5174ef7df9e804483a80a846b436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError Pm_WriteSysEx</definition>
        <argsstring>(PortMidiStream *stream, PmTimestamp when, unsigned char *msg)</argsstring>
        <name>Pm_WriteSysEx</name>
        <param>
          <type>PortMidiStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>when</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/portmidi.h" line="584" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="555" bodyend="629"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PORT_MIDI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PORT_MIDI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>PortMidi<sp/>Portable<sp/>Real-Time<sp/>MIDI<sp/>Library</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>PortMidi<sp/>API<sp/>Header<sp/>File</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Latest<sp/>version<sp/>available<sp/>at:<sp/>http://www.cs.cmu.edu/~music/portmidi/</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2000<sp/>Ross<sp/>Bencina<sp/>and<sp/>Phil<sp/>Burk</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2006<sp/>Roger<sp/>B.<sp/>Dannenberg</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Latest<sp/>version<sp/>available<sp/>at:<sp/>http://www.cs.cmu.edu/~music/portmidi/</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2000<sp/>Ross<sp/>Bencina<sp/>and<sp/>Phil<sp/>Burk</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2006<sp/>Roger<sp/>B.<sp/>Dannenberg</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>The<sp/>text<sp/>above<sp/>constitutes<sp/>the<sp/>entire<sp/>PortMidi<sp/>license;<sp/>however,<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>the<sp/>PortMusic<sp/>community<sp/>also<sp/>makes<sp/>the<sp/>following<sp/>non-binding<sp/>requests:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Any<sp/>person<sp/>wishing<sp/>to<sp/>distribute<sp/>modifications<sp/>to<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>requested<sp/>to<sp/>send<sp/>the<sp/>modifications<sp/>to<sp/>the<sp/>original<sp/>developer<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>they<sp/>can<sp/>be<sp/>incorporated<sp/>into<sp/>the<sp/>canonical<sp/>version.<sp/>It<sp/>is<sp/>also</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>requested<sp/>that<sp/>these<sp/>non-binding<sp/>requests<sp/>be<sp/>included<sp/>along<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>license<sp/>above.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CHANGELOG<sp/>FOR<sp/>PORTMIDI</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>(see<sp/>../CHANGELOG.txt)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>NOTES<sp/>ON<sp/>HOST<sp/>ERROR<sp/>REPORTING:<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>PortMidi<sp/>errors<sp/>(of<sp/>type<sp/>PmError)<sp/>are<sp/>generic,<sp/>system-independent<sp/>errors.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>When<sp/>an<sp/>error<sp/>does<sp/>not<sp/>map<sp/>to<sp/>one<sp/>of<sp/>the<sp/>more<sp/>specific<sp/>PmErrors,<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>catch-all<sp/>code<sp/>pmHostError<sp/>is<sp/>returned.<sp/>This<sp/>means<sp/>that<sp/>PortMidi<sp/>has</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>retained<sp/>a<sp/>more<sp/>specific<sp/>system-dependent<sp/>error<sp/>code.<sp/>The<sp/>caller<sp/>can</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>get<sp/>more<sp/>information<sp/>by<sp/>calling<sp/>Pm_HasHostError()<sp/>to<sp/>test<sp/>if<sp/>there<sp/>is</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>pending<sp/>host<sp/>error,<sp/>and<sp/>Pm_GetHostErrorText()<sp/>to<sp/>get<sp/>a<sp/>text<sp/>string</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>describing<sp/>the<sp/>error.<sp/>Host<sp/>errors<sp/>are<sp/>reported<sp/>on<sp/>a<sp/>per-device<sp/>basis<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>because<sp/>only<sp/>after<sp/>you<sp/>open<sp/>a<sp/>device<sp/>does<sp/>PortMidi<sp/>have<sp/>a<sp/>place<sp/>to<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>record<sp/>the<sp/>host<sp/>error<sp/>code.<sp/>I.e.<sp/>only<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>those<sp/>routines<sp/>that<sp/>receive<sp/>a<sp/>(PortMidiStream<sp/>*)<sp/>argument<sp/>check<sp/>and<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>report<sp/>errors.<sp/>One<sp/>exception<sp/>to<sp/>this<sp/>is<sp/>that<sp/>Pm_OpenInput()<sp/>and<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Pm_OpenOutput()<sp/>can<sp/>report<sp/>errors<sp/>even<sp/>though<sp/>when<sp/>an<sp/>error<sp/>occurs,</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>PortMidiStream*<sp/>to<sp/>hold<sp/>the<sp/>error.<sp/>Fortunately,<sp/>both</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>these<sp/>functions<sp/>return<sp/>any<sp/>error<sp/>immediately,<sp/>so<sp/>we<sp/>do<sp/>not<sp/>really</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>need<sp/>per-device<sp/>error<sp/>memory.<sp/>Instead,<sp/>any<sp/>host<sp/>error<sp/>code<sp/>is<sp/>stored</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>in<sp/>a<sp/>global,<sp/>pmHostError<sp/>is<sp/>returned,<sp/>and<sp/>the<sp/>user<sp/>can<sp/>call<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Pm_GetHostErrorText()<sp/>to<sp/>get<sp/>the<sp/>error<sp/>message<sp/>(and<sp/>the<sp/>invalid<sp/>stream</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>parameter<sp/>will<sp/>be<sp/>ignored.)<sp/>The<sp/>functions<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>pm_init<sp/>and<sp/>pm_term<sp/>do<sp/>not<sp/>fail<sp/>or<sp/>raise</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>errors.<sp/>The<sp/>job<sp/>of<sp/>pm_init<sp/>is<sp/>to<sp/>locate<sp/>all<sp/>available<sp/>devices<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>caller<sp/>can<sp/>get<sp/>information<sp/>via<sp/>PmDeviceInfo().<sp/>If<sp/>an<sp/>error<sp/>occurs,</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>device<sp/>is<sp/>simply<sp/>not<sp/>listed<sp/>as<sp/>available.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Host<sp/>errors<sp/>come<sp/>in<sp/>two<sp/>flavors:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>a)<sp/>host<sp/>error<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>b)<sp/>host<sp/>error<sp/>during<sp/>callback</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>These<sp/>can<sp/>occur<sp/>w/midi<sp/>input<sp/>or<sp/>output<sp/>devices.<sp/>(b)<sp/>can<sp/>only<sp/>happen<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>asynchronously<sp/>(during<sp/>callback<sp/>routines),<sp/>whereas<sp/>(a)<sp/>only<sp/>occurs<sp/>while</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>synchronously<sp/>running<sp/>PortMidi<sp/>and<sp/>any<sp/>resulting<sp/>system<sp/>dependent<sp/>calls.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Both<sp/>(a)<sp/>and<sp/>(b)<sp/>are<sp/>reported<sp/>by<sp/>the<sp/>next<sp/>read<sp/>or<sp/>write<sp/>call.<sp/>You<sp/>can</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>also<sp/>query<sp/>for<sp/>asynchronous<sp/>errors<sp/>(b)<sp/>at<sp/>any<sp/>time<sp/>by<sp/>calling</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Pm_HasHostError().</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>NOTES<sp/>ON<sp/>COMPILE-TIME<sp/>SWITCHES</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>DEBUG<sp/>assumes<sp/>stdio<sp/>and<sp/>a<sp/>console.<sp/>Use<sp/>this<sp/>if<sp/>you<sp/>want<sp/>automatic,<sp/>simple</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>reporting,<sp/>e.g.<sp/>for<sp/>prototyping.<sp/>If<sp/>you<sp/>are<sp/>using<sp/>MFC<sp/>or<sp/>some<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>graphical<sp/>interface<sp/>with<sp/>no<sp/>console,<sp/>DEBUG<sp/>probably<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undefined.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>PM_CHECK_ERRORS<sp/>more-or-less<sp/>takes<sp/>over<sp/>error<sp/>checking<sp/>for<sp/>return<sp/>values,</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopping<sp/>your<sp/>program<sp/>and<sp/>printing<sp/>error<sp/>messages<sp/>when<sp/>an<sp/>error</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>occurs.<sp/>This<sp/>also<sp/>uses<sp/>stdio<sp/>for<sp/>console<sp/>text<sp/>I/O.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>default<sp/>size<sp/>of<sp/>buffers<sp/>for<sp/>sysex<sp/>transmission:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_DEFAULT_SYSEX_BUFFER_SIZE<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>pmNoError<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pmNoData<sp/>=<sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>A<sp/>&quot;no<sp/>error&quot;<sp/>return<sp/>that<sp/>also<sp/>indicates<sp/>no<sp/>data<sp/>avail.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>pmGotData<sp/>=<sp/>1,<sp/></highlight><highlight class="comment">/*<sp/>A<sp/>&quot;no<sp/>error&quot;<sp/>return<sp/>that<sp/>also<sp/>indicates<sp/>data<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>pmHostError<sp/>=<sp/>-10000,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>pmInvalidDeviceId,<sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>range<sp/>or<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>output<sp/>device<sp/>when<sp/>input<sp/>is<sp/>requested<sp/>or<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>input<sp/>device<sp/>when<sp/>output<sp/>is<sp/>requested<sp/>or</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>device<sp/>is<sp/>already<sp/>opened<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>pmInsufficientMemory,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>pmBufferTooSmall,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>pmBufferOverflow,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>pmBadPtr,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>pmBadData,<sp/></highlight><highlight class="comment">/*<sp/>illegal<sp/>midi<sp/>data,<sp/>e.g.<sp/>missing<sp/>EOX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>pmInternalError,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>pmBufferMaxSize<sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>is<sp/>already<sp/>as<sp/>large<sp/>as<sp/>it<sp/>can<sp/>be<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>If<sp/>you<sp/>add<sp/>a<sp/>new<sp/>error<sp/>type,<sp/>be<sp/>sure<sp/>to<sp/>update<sp/>Pm_GetErrorText()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}<sp/>PmError;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Initialize()<sp/>is<sp/>the<sp/>library<sp/>initialisation<sp/>function<sp/>-<sp/>call<sp/>this<sp/>before</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">PmError<sp/>Pm_Initialize(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Terminate()<sp/>is<sp/>the<sp/>library<sp/>termination<sp/>function<sp/>-<sp/>call<sp/>this<sp/>after</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">PmError<sp/>Pm_Terminate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>A<sp/>single<sp/>PortMidiStream<sp/>is<sp/>a<sp/>descriptor<sp/>for<sp/>an<sp/>open<sp/>MIDI<sp/>device.</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PortMidiStream;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PmStream<sp/>PortMidiStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>Test<sp/>whether<sp/>stream<sp/>has<sp/>a<sp/>pending<sp/>host<sp/>error.<sp/>Normally,<sp/>the<sp/>client<sp/>finds</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>out<sp/>about<sp/>errors<sp/>through<sp/>returned<sp/>error<sp/>codes,<sp/>but<sp/>some<sp/>errors<sp/>can<sp/>occur</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>asynchronously<sp/>where<sp/>the<sp/>client<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>explicitly<sp/>call<sp/>a<sp/>function,<sp/>and<sp/>therefore<sp/>cannot<sp/>receive<sp/>an<sp/>error<sp/>code.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>client<sp/>can<sp/>test<sp/>for<sp/>a<sp/>pending<sp/>error<sp/>using<sp/>Pm_HasHostError().<sp/>If<sp/>true,</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>error<sp/>can<sp/>be<sp/>accessed<sp/>and<sp/>cleared<sp/>by<sp/>calling<sp/>Pm_GetErrorText().<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>Errors<sp/>are<sp/>also<sp/>cleared<sp/>by<sp/>calling<sp/>other<sp/>functions<sp/>that<sp/>can<sp/>return</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>errors,<sp/>e.g.<sp/>Pm_OpenInput(),<sp/>Pm_OpenOutput(),<sp/>Pm_Read(),<sp/>Pm_Write().<sp/>The</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>client<sp/>does<sp/>not<sp/>need<sp/>to<sp/>call<sp/>Pm_HasHostError().<sp/>Any<sp/>pending<sp/>error<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>reported<sp/>the<sp/>next<sp/>time<sp/>the<sp/>client<sp/>performs<sp/>an<sp/>explicit<sp/>function<sp/>call<sp/>on<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>stream,<sp/>e.g.<sp/>an<sp/>input<sp/>or<sp/>output<sp/>operation.<sp/>Until<sp/>the<sp/>error<sp/>is<sp/>cleared,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>no<sp/>new<sp/>error<sp/>codes<sp/>will<sp/>be<sp/>obtained,<sp/>even<sp/>for<sp/>a<sp/>different<sp/>stream.</highlight></codeline>
<codeline lineno="163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_HasHostError(<sp/>PortMidiStream<sp/>*<sp/>stream<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Translate<sp/>portmidi<sp/>error<sp/>number<sp/>into<sp/>human<sp/>readable<sp/>message.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>strings<sp/>are<sp/>constants<sp/>(set<sp/>at<sp/>compile<sp/>time)<sp/>so<sp/>client<sp/>has<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>no<sp/>need<sp/>to<sp/>allocate<sp/>storage</highlight></codeline>
<codeline lineno="170"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pm_GetErrorText(<sp/>PmError<sp/>errnum<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Translate<sp/>portmidi<sp/>host<sp/>error<sp/>into<sp/>human<sp/>readable<sp/>message.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>strings<sp/>are<sp/>computed<sp/>at<sp/>run<sp/>time,<sp/>so<sp/>client<sp/>has<sp/>to<sp/>allocate<sp/>storage.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>After<sp/>this<sp/>routine<sp/>executes,<sp/>the<sp/>host<sp/>error<sp/>is<sp/>cleared.<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pm_GetHostErrorText(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>msg,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HDRLENGTH<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_HOST_ERROR_MSG_LEN<sp/>256u<sp/></highlight><highlight class="comment">/*<sp/>any<sp/>host<sp/>error<sp/>msg<sp/>will<sp/>occupy<sp/>less<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>this<sp/>number<sp/>of<sp/>characters<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>Device<sp/>enumeration<sp/>mechanism.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>Device<sp/>ids<sp/>range<sp/>from<sp/>0<sp/>to<sp/>Pm_CountDevices()-1.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PmDeviceID;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pmNoDevice<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="struct_pm_device_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>structVersion;<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interf;<sp/></highlight><highlight class="comment">/*<sp/>underlying<sp/>MIDI<sp/>API,<sp/>e.g.<sp/>MMSystem<sp/>or<sp/>DirectX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>device<sp/>name,<sp/>e.g.<sp/>USB<sp/>MidiSport<sp/>1x1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input;<sp/></highlight><highlight class="comment">/*<sp/>true<sp/>iff<sp/>input<sp/>is<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output;<sp/></highlight><highlight class="comment">/*<sp/>true<sp/>iff<sp/>output<sp/>is<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opened;<sp/></highlight><highlight class="comment">/*<sp/>used<sp/>by<sp/>generic<sp/>PortMidi<sp/>code<sp/>to<sp/>do<sp/>error<sp/>checking<sp/>on<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/><ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_CountDevices(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_GetDefaultInputDeviceID(),<sp/>Pm_GetDefaultOutputDeviceID()</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>default<sp/>device<sp/>ID<sp/>or<sp/>pmNoDevice<sp/>if<sp/>there<sp/>are<sp/>no<sp/>devices.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>result<sp/>(but<sp/>not<sp/>pmNoDevice)<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>Pm_OpenMidi().</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>default<sp/>device<sp/>can<sp/>be<sp/>specified<sp/>using<sp/>a<sp/>small<sp/>application</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>named<sp/>pmdefaults<sp/>that<sp/>is<sp/>part<sp/>of<sp/>the<sp/>PortMidi<sp/>distribution.<sp/>This</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>program<sp/>in<sp/>turn<sp/>uses<sp/>the<sp/>Java<sp/>Preferences<sp/>object<sp/>created<sp/>by</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/>java.util.prefs.Preferences.userRoot().node(&quot;/PortMidi&quot;);<sp/>the</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>preference<sp/>is<sp/>set<sp/>by<sp/>calling<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefs.put(&quot;PM_RECOMMENDED_OUTPUT_DEVICE&quot;,<sp/>prefName);</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/><sp/>prefs.put(&quot;PM_RECOMMENDED_INPUT_DEVICE&quot;,<sp/>prefName);</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>the<sp/>statements<sp/>above,<sp/>prefName<sp/>is<sp/>a<sp/>string<sp/>describing<sp/>the</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>MIDI<sp/>device<sp/>in<sp/>the<sp/>form<sp/>&quot;interf,<sp/>name&quot;<sp/>where<sp/>interf<sp/>identifies</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>underlying<sp/>software<sp/>system<sp/>or<sp/>API<sp/>used<sp/>by<sp/>PortMdi<sp/>to<sp/>access</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>devices<sp/>and<sp/>name<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>device.<sp/>These<sp/>correspond<sp/>to<sp/></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>interf<sp/>and<sp/>name<sp/>fields<sp/>of<sp/>a<sp/>PmDeviceInfo.<sp/>(Currently<sp/>supported</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>interfaces<sp/>are<sp/>&quot;MMSystem&quot;<sp/>for<sp/>Win32,<sp/>&quot;ALSA&quot;<sp/>for<sp/>Linux,<sp/>and<sp/></highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;CoreMIDI&quot;<sp/>for<sp/>OS<sp/>X,<sp/>so<sp/>in<sp/>fact,<sp/>there<sp/>is<sp/>no<sp/>choice<sp/>of<sp/>interface.)</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>&quot;interf,<sp/>name&quot;,<sp/>the<sp/>strings<sp/>are<sp/>actually<sp/>substrings<sp/>of<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>full<sp/>interface<sp/>and<sp/>name<sp/>strings.<sp/>For<sp/>example,<sp/>the<sp/>preference<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;Core,<sp/>Sport&quot;<sp/>will<sp/>match<sp/>a<sp/>device<sp/>with<sp/>interface<sp/>&quot;CoreMIDI&quot;</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>name<sp/>&quot;In<sp/>USB<sp/>MidiSport<sp/>1x1&quot;.<sp/>It<sp/>will<sp/>also<sp/>match<sp/>&quot;CoreMIDI&quot;</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>&quot;In<sp/>USB<sp/>MidiSport<sp/>2x2&quot;.<sp/>The<sp/>devices<sp/>are<sp/>enumerated<sp/>in<sp/>device</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>ID<sp/>order,<sp/>so<sp/>the<sp/>lowest<sp/>device<sp/>ID<sp/>that<sp/>matches<sp/>the<sp/>pattern<sp/>becomes</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>default<sp/>device.<sp/>Finally,<sp/>if<sp/>the<sp/>comma-space<sp/>(&quot;,<sp/>&quot;)<sp/>separator</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>between<sp/>interface<sp/>and<sp/>name<sp/>parts<sp/>of<sp/>the<sp/>preference<sp/>is<sp/>not<sp/>found,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>entire<sp/>preference<sp/>string<sp/>is<sp/>interpreted<sp/>as<sp/>a<sp/>name,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>interface<sp/>part<sp/>is<sp/>the<sp/>empty<sp/>string,<sp/>which<sp/>matches<sp/>anything.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>On<sp/>the<sp/>MAC,<sp/>preferences<sp/>are<sp/>stored<sp/>in<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>/Users/$NAME/Library/Preferences/com.apple.java.util.prefs.plist</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>which<sp/>is<sp/>a<sp/>binary<sp/>file.<sp/>In<sp/>addition<sp/>to<sp/>the<sp/>pmdefaults<sp/>program,</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>there<sp/>are<sp/>utilities<sp/>that<sp/>can<sp/>read<sp/>and<sp/>edit<sp/>this<sp/>preference<sp/>file.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/>On<sp/>the<sp/>PC,<sp/></highlight></codeline>
<codeline lineno="241"><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>On<sp/>Linux,<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">PmDeviceID<sp/>Pm_GetDefaultInputDeviceID(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">PmDeviceID<sp/>Pm_GetDefaultOutputDeviceID(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/>PmTimestamp<sp/>is<sp/>used<sp/>to<sp/>represent<sp/>a<sp/>millisecond<sp/>clock<sp/>with<sp/>arbitrary</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>start<sp/>time.<sp/>The<sp/>type<sp/>is<sp/>used<sp/>for<sp/>all<sp/>MIDI<sp/>timestampes<sp/>and<sp/>clocks.</highlight></codeline>
<codeline lineno="251"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PmTimestamp;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmTimestamp<sp/>(*PmTimeProcPtr)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TRUE<sp/>if<sp/>t1<sp/>before<sp/>t2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PmBefore(t1,t2)<sp/>((t1-t2)<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_GetDeviceInfo()<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>PmDeviceInfo<sp/>structure</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>referring<sp/>to<sp/>the<sp/>device<sp/>specified<sp/>by<sp/>id.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>id<sp/>is<sp/>out<sp/>of<sp/>range<sp/>the<sp/>function<sp/>returns<sp/>NULL.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>returned<sp/>structure<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>PortMidi<sp/>implementation<sp/>and<sp/>must</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>not<sp/>be<sp/>manipulated<sp/>or<sp/>freed.<sp/>The<sp/>pointer<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>valid</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>between<sp/>calls<sp/>to<sp/>Pm_Initialize()<sp/>and<sp/>Pm_Terminate().</highlight></codeline>
<codeline lineno="266"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref>*<sp/>Pm_GetDeviceInfo(<sp/>PmDeviceID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_OpenInput()<sp/>and<sp/>Pm_OpenOutput()<sp/>open<sp/>devices.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/>stream<sp/>is<sp/>the<sp/>address<sp/>of<sp/>a<sp/>PortMidiStream<sp/>pointer<sp/>which<sp/>will<sp/>receive</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>opened<sp/>stream.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>inputDevice<sp/>is<sp/>the<sp/>id<sp/>of<sp/>the<sp/>device<sp/>used<sp/>for<sp/>input<sp/>(see<sp/>PmDeviceID<sp/>above).</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/>inputDriverInfo<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>optional<sp/>driver<sp/>specific<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/>containing<sp/>additional<sp/>information<sp/>for<sp/>device<sp/>setup<sp/>or<sp/>handle<sp/>processing.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/>inputDriverInfo<sp/>is<sp/>never<sp/>required<sp/>for<sp/>correct<sp/>operation.<sp/>If<sp/>not<sp/>used</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>inputDriverInfo<sp/>should<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/>outputDevice<sp/>is<sp/>the<sp/>id<sp/>of<sp/>the<sp/>device<sp/>used<sp/>for<sp/>output<sp/>(see<sp/>PmDeviceID<sp/>above.)</highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/>outputDriverInfo<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>optional<sp/>driver<sp/>specific<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/>containing<sp/>additional<sp/>information<sp/>for<sp/>device<sp/>setup<sp/>or<sp/>handle<sp/>processing.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>outputDriverInfo<sp/>is<sp/>never<sp/>required<sp/>for<sp/>correct<sp/>operation.<sp/>If<sp/>not<sp/>used</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>outputDriverInfo<sp/>should<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>input,<sp/>the<sp/>buffersize<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>input<sp/>events<sp/>to<sp/>be<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>buffered<sp/>waiting<sp/>to<sp/>be<sp/>read<sp/>using<sp/>Pm_Read().<sp/>For<sp/>output,<sp/>buffersize<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>output<sp/>events<sp/>to<sp/>be<sp/>buffered<sp/>waiting<sp/>for<sp/>output.<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/>(In<sp/>some<sp/>cases<sp/>--<sp/>see<sp/>below<sp/>--<sp/>PortMidi<sp/>does<sp/>not<sp/>buffer<sp/>output<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>merely<sp/>passes<sp/>data<sp/>to<sp/>a<sp/>lower-level<sp/>API,<sp/>in<sp/>which<sp/>case<sp/>buffersize</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>ignored.)</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/>latency<sp/>is<sp/>the<sp/>delay<sp/>in<sp/>milliseconds<sp/>applied<sp/>to<sp/>timestamps<sp/>to<sp/>determine<sp/></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/>when<sp/>the<sp/>output<sp/>should<sp/>actually<sp/>occur.<sp/>(If<sp/>latency<sp/>is<sp/>&lt;<sp/>0,<sp/>0<sp/>is<sp/>assumed.)<sp/></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>latency<sp/>is<sp/>zero,<sp/>timestamps<sp/>are<sp/>ignored<sp/>and<sp/>all<sp/>output<sp/>is<sp/>delivered</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>immediately.<sp/>If<sp/>latency<sp/>is<sp/>greater<sp/>than<sp/>zero,<sp/>output<sp/>is<sp/>delayed<sp/>until<sp/>the</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/>message<sp/>timestamp<sp/>plus<sp/>the<sp/>latency.<sp/>(NOTE:<sp/>the<sp/>time<sp/>is<sp/>measured<sp/>relative<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>the<sp/>time<sp/>source<sp/>indicated<sp/>by<sp/>time_proc.<sp/>Timestamps<sp/>are<sp/>absolute,</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>not<sp/>relative<sp/>delays<sp/>or<sp/>offsets.)<sp/>In<sp/>some<sp/>cases,<sp/>PortMidi<sp/>can<sp/>obtain</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/>better<sp/>timing<sp/>than<sp/>your<sp/>application<sp/>by<sp/>passing<sp/>timestamps<sp/>along<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/>device<sp/>driver<sp/>or<sp/>hardware.<sp/>Latency<sp/>may<sp/>also<sp/>help<sp/>you<sp/>to<sp/>synchronize<sp/>midi</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>to<sp/>audio<sp/>data<sp/>by<sp/>matching<sp/>midi<sp/>latency<sp/>to<sp/>the<sp/>audio<sp/>buffer<sp/>latency.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>time_proc<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>procedure<sp/>that<sp/>returns<sp/>time<sp/>in<sp/>milliseconds.<sp/>It</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/>may<sp/>be<sp/>NULL,<sp/>in<sp/>which<sp/>case<sp/>a<sp/>default<sp/>millisecond<sp/>timebase<sp/>(PortTime)<sp/>is<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/>used.<sp/>If<sp/>the<sp/>application<sp/>wants<sp/>to<sp/>use<sp/>PortTime,<sp/>it<sp/>should<sp/>start<sp/>the<sp/>timer</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>(call<sp/>Pt_Start)<sp/>before<sp/>calling<sp/>Pm_OpenInput<sp/>or<sp/>Pm_OpenOutput.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>application<sp/>tries<sp/>to<sp/>start<sp/>the<sp/>timer<sp/>*after*<sp/>Pm_OpenInput<sp/>or<sp/>Pm_OpenOutput,</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>may<sp/>get<sp/>a<sp/>ptAlreadyStarted<sp/>error<sp/>from<sp/>Pt_Start,<sp/>and<sp/>the<sp/>application&apos;s</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/>preferred<sp/>time<sp/>resolution<sp/>and<sp/>callback<sp/>function<sp/>will<sp/>be<sp/>ignored.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/>time_proc<sp/>result<sp/>values<sp/>are<sp/>appended<sp/>to<sp/>incoming<sp/>MIDI<sp/>data,<sp/>and<sp/>time_proc</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/>times<sp/>are<sp/>used<sp/>to<sp/>schedule<sp/>outgoing<sp/>MIDI<sp/>data<sp/>(when<sp/>latency<sp/>is<sp/>non-zero).</highlight></codeline>
<codeline lineno="316"><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>time_info<sp/>is<sp/>a<sp/>pointer<sp/>passed<sp/>to<sp/>time_proc.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>Example:<sp/>If<sp/>I<sp/>provide<sp/>a<sp/>timestamp<sp/>of<sp/>5000,<sp/>latency<sp/>is<sp/>1,<sp/>and<sp/>time_proc</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>returns<sp/>4990,<sp/>then<sp/>the<sp/>desired<sp/>output<sp/>time<sp/>will<sp/>be<sp/>when<sp/>time_proc<sp/>returns</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>timestamp+latency<sp/>=<sp/>5001.<sp/>This<sp/>will<sp/>be<sp/>5001-4990<sp/>=<sp/>11ms<sp/>from<sp/>now.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>value:</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/>Upon<sp/>success<sp/>Pm_Open()<sp/>returns<sp/>PmNoError<sp/>and<sp/>places<sp/>a<sp/>pointer<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>valid<sp/>PortMidiStream<sp/>in<sp/>the<sp/>stream<sp/>argument.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>a<sp/>call<sp/>to<sp/>Pm_Open()<sp/>fails<sp/>a<sp/>nonzero<sp/>error<sp/>code<sp/>is<sp/>returned<sp/>(see</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>PMError<sp/>above)<sp/>and<sp/>the<sp/>value<sp/>of<sp/>port<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/>Any<sp/>stream<sp/>that<sp/>is<sp/>successfully<sp/>opened<sp/>should<sp/>eventually<sp/>be<sp/>closed</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>calling<sp/>Pm_Close().</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">PmError<sp/>Pm_OpenInput(<sp/>PortMidiStream**<sp/>stream,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmDeviceID<sp/>inputDevice,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*inputDriverInfo,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bufferSize,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimeProcPtr<sp/>time_proc,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">PmError<sp/>Pm_OpenOutput(<sp/>PortMidiStream**<sp/>stream,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmDeviceID<sp/>outputDevice,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*outputDriverInfo,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bufferSize,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimeProcPtr<sp/>time_proc,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>latency<sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetFilter()<sp/>sets<sp/>filters<sp/>on<sp/>an<sp/>open<sp/>input<sp/>stream<sp/>to<sp/>drop<sp/>selected</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/>input<sp/>types.<sp/>By<sp/>default,<sp/>only<sp/>active<sp/>sensing<sp/>messages<sp/>are<sp/>filtered.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/>To<sp/>prohibit,<sp/>say,<sp/>active<sp/>sensing<sp/>and<sp/>sysex<sp/>messages,<sp/>call</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetFilter(stream,<sp/>PM_FILT_ACTIVE<sp/>|<sp/>PM_FILT_SYSEX);</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/>Filtering<sp/>is<sp/>useful<sp/>when<sp/>midi<sp/>routing<sp/>or<sp/>midi<sp/>thru<sp/>functionality<sp/>is<sp/>being</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>by<sp/>the<sp/>user<sp/>application.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>you<sp/>may<sp/>want<sp/>to<sp/>exclude<sp/>timing<sp/>messages<sp/>(clock,<sp/>MTC,<sp/>start/stop/continue),</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>allowing<sp/>note-related<sp/>messages<sp/>to<sp/>pass.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/>Or<sp/>you<sp/>may<sp/>be<sp/>using<sp/>a<sp/>sequencer<sp/>or<sp/>drum-machine<sp/>for<sp/>MIDI<sp/>clock<sp/>information<sp/>but<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/>exclude<sp/>any<sp/>notes<sp/>it<sp/>may<sp/>play.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>active<sp/>sensing<sp/>messages<sp/>(0xFE):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_ACTIVE<sp/>(1<sp/>&lt;&lt;<sp/>0x0E)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>system<sp/>exclusive<sp/>messages<sp/>(0xF0):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_SYSEX<sp/>(1<sp/>&lt;&lt;<sp/>0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>MIDI<sp/>clock<sp/>message<sp/>(0xF8)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_CLOCK<sp/>(1<sp/>&lt;&lt;<sp/>0x08)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>play<sp/>messages<sp/>(start<sp/>0xFA,<sp/>stop<sp/>0xFC,<sp/>continue<sp/>0xFB)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_PLAY<sp/>((1<sp/>&lt;&lt;<sp/>0x0A)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>0x0C)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>0x0B))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>tick<sp/>messages<sp/>(0xF9)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_TICK<sp/>(1<sp/>&lt;&lt;<sp/>0x09)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>undefined<sp/>FD<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_FD<sp/>(1<sp/>&lt;&lt;<sp/>0x0D)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>undefined<sp/>real-time<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_UNDEFINED<sp/>PM_FILT_FD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>reset<sp/>messages<sp/>(0xFF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_RESET<sp/>(1<sp/>&lt;&lt;<sp/>0x0F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>all<sp/>real-time<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_REALTIME<sp/>(PM_FILT_ACTIVE<sp/>|<sp/>PM_FILT_SYSEX<sp/>|<sp/>PM_FILT_CLOCK<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PM_FILT_PLAY<sp/>|<sp/>PM_FILT_UNDEFINED<sp/>|<sp/>PM_FILT_RESET<sp/>|<sp/>PM_FILT_TICK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>note-on<sp/>and<sp/>note-off<sp/>(0x90-0x9F<sp/>and<sp/>0x80-0x8F<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_NOTE<sp/>((1<sp/>&lt;&lt;<sp/>0x19)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>0x18))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>channel<sp/>aftertouch<sp/>(most<sp/>midi<sp/>controllers<sp/>use<sp/>this)<sp/>(0xD0-0xDF)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_CHANNEL_AFTERTOUCH<sp/>(1<sp/>&lt;&lt;<sp/>0x1D)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>per-note<sp/>aftertouch<sp/>(0xA0-0xAF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_POLY_AFTERTOUCH<sp/>(1<sp/>&lt;&lt;<sp/>0x1A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>filter<sp/>both<sp/>channel<sp/>and<sp/>poly<sp/>aftertouch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_AFTERTOUCH<sp/>(PM_FILT_CHANNEL_AFTERTOUCH<sp/>|<sp/>PM_FILT_POLY_AFTERTOUCH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Program<sp/>changes<sp/>(0xC0-0xCF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_PROGRAM<sp/>(1<sp/>&lt;&lt;<sp/>0x1C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Control<sp/>Changes<sp/>(CC&apos;s)<sp/>(0xB0-0xBF)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_CONTROL<sp/>(1<sp/>&lt;&lt;<sp/>0x1B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pitch<sp/>Bender<sp/>(0xE0-0xEF*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_PITCHBEND<sp/>(1<sp/>&lt;&lt;<sp/>0x1E)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MIDI<sp/>Time<sp/>Code<sp/>(0xF1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_MTC<sp/>(1<sp/>&lt;&lt;<sp/>0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Song<sp/>Position<sp/>(0xF2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_SONG_POSITION<sp/>(1<sp/>&lt;&lt;<sp/>0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Song<sp/>Select<sp/>(0xF3)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_SONG_SELECT<sp/>(1<sp/>&lt;&lt;<sp/>0x03)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tuning<sp/>request<sp/>(0xF6)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_TUNE<sp/>(1<sp/>&lt;&lt;<sp/>0x06)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>All<sp/>System<sp/>Common<sp/>messages<sp/>(mtc,<sp/>song<sp/>position,<sp/>song<sp/>select,<sp/>tune<sp/>request)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PM_FILT_SYSTEMCOMMON<sp/>(PM_FILT_MTC<sp/>|<sp/>PM_FILT_SONG_POSITION<sp/>|<sp/>PM_FILT_SONG_SELECT<sp/>|<sp/>PM_FILT_TUNE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">PmError<sp/>Pm_SetFilter(<sp/>PortMidiStream*<sp/>stream,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>filters<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetChannelMask()<sp/>filters<sp/>incoming<sp/>messages<sp/>based<sp/>on<sp/>channel.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>mask<sp/>is<sp/>a<sp/>16-bit<sp/>bitfield<sp/>corresponding<sp/>to<sp/>appropriate<sp/>channels</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>Pm_Channel<sp/>macro<sp/>can<sp/>assist<sp/>in<sp/>calling<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/>i.e.<sp/>to<sp/>set<sp/>receive<sp/>only<sp/>input<sp/>on<sp/>channel<sp/>1,<sp/>call<sp/>with</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetChannelMask(Pm_Channel(1));</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/>Multiple<sp/>channels<sp/>should<sp/>be<sp/>OR&apos;d<sp/>together,<sp/>like</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetChannelMask(Pm_Channel(10)<sp/>|<sp/>Pm_Channel(11))</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>channels<sp/>are<sp/>allowed<sp/>by<sp/>default</highlight></codeline>
<codeline lineno="419"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Pm_Channel(channel)<sp/>(1&lt;&lt;(channel))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">PmError<sp/>Pm_SetChannelMask(PortMidiStream<sp/>*stream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Abort()<sp/>terminates<sp/>outgoing<sp/>messages<sp/>immediately</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>caller<sp/>should<sp/>immediately<sp/>close<sp/>the<sp/>output<sp/>port;</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>call<sp/>may<sp/>result<sp/>in<sp/>transmission<sp/>of<sp/>a<sp/>partial<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/>There<sp/>is<sp/>no<sp/>abort<sp/>for<sp/>Midi<sp/>input<sp/>because<sp/>the<sp/>user<sp/>can<sp/>simply</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/>ignore<sp/>messages<sp/>in<sp/>the<sp/>buffer<sp/>and<sp/>close<sp/>an<sp/>input<sp/>device<sp/>at</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/>any<sp/>time.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">PmError<sp/>Pm_Abort(<sp/>PortMidiStream*<sp/>stream<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Close()<sp/>closes<sp/>a<sp/>midi<sp/>stream,<sp/>flushing<sp/>any<sp/>pending<sp/>buffers.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/>(PortMidi<sp/>attempts<sp/>to<sp/>close<sp/>open<sp/>streams<sp/>when<sp/>the<sp/>application<sp/></highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/>exits<sp/>--<sp/>this<sp/>is<sp/>particularly<sp/>difficult<sp/>under<sp/>Windows.)</highlight></codeline>
<codeline lineno="438"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">PmError<sp/>Pm_Close(<sp/>PortMidiStream*<sp/>stream<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Message()<sp/>encodes<sp/>a<sp/>short<sp/>Midi<sp/>message<sp/>into<sp/>a<sp/>long<sp/>word.<sp/>If<sp/>data1</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/>and/or<sp/>data2<sp/>are<sp/>not<sp/>present,<sp/>use<sp/>zero.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_MessageStatus(),<sp/>Pm_MessageData1(),<sp/>and<sp/></highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_MessageData2()<sp/>extract<sp/>fields<sp/>from<sp/>a<sp/>long-encoded<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="447"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Pm_Message(status,<sp/>data1,<sp/>data2)<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((data2)<sp/>&lt;&lt;<sp/>16)<sp/>&amp;<sp/>0xFF0000)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((data1)<sp/>&lt;&lt;<sp/>8)<sp/>&amp;<sp/>0xFF00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((status)<sp/>&amp;<sp/>0xFF))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Pm_MessageStatus(msg)<sp/>((msg)<sp/>&amp;<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Pm_MessageData1(msg)<sp/>(((msg)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Pm_MessageData2(msg)<sp/>(((msg)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>All<sp/>midi<sp/>data<sp/>comes<sp/>in<sp/>the<sp/>form<sp/>of<sp/>PmEvent<sp/>structures.<sp/>A<sp/>sysex</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/>message<sp/>is<sp/>encoded<sp/>as<sp/>a<sp/>sequence<sp/>of<sp/>PmEvent<sp/>structures,<sp/>with<sp/>each</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>structure<sp/>carrying<sp/>4<sp/>bytes<sp/>of<sp/>the<sp/>message,<sp/>i.e.<sp/>only<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/>PmEvent<sp/>carries<sp/>the<sp/>status<sp/>byte.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>MIDI<sp/>allows<sp/>nested<sp/>messages:<sp/>the<sp/>so-called<sp/>&quot;real-time&quot;<sp/>MIDI<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/>messages<sp/>can<sp/>be<sp/>inserted<sp/>into<sp/>the<sp/>MIDI<sp/>byte<sp/>stream<sp/>at<sp/>any<sp/>location,<sp/></highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>including<sp/>within<sp/>a<sp/>sysex<sp/>message.<sp/>MIDI<sp/>real-time<sp/>messages<sp/>are<sp/>one-byte</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/>messages<sp/>used<sp/>mainly<sp/>for<sp/>timing<sp/>(see<sp/>the<sp/>MIDI<sp/>spec).<sp/>PortMidi<sp/>retains<sp/></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/>the<sp/>order<sp/>of<sp/>non-real-time<sp/>MIDI<sp/>messages<sp/>on<sp/>both<sp/>input<sp/>and<sp/>output,<sp/>but<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>it<sp/>does<sp/>not<sp/>specify<sp/>exactly<sp/>how<sp/>real-time<sp/>messages<sp/>are<sp/>processed.<sp/>This</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>is<sp/>particulary<sp/>problematic<sp/>for<sp/>MIDI<sp/>input,<sp/>because<sp/>the<sp/>input<sp/>parser<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>must<sp/>either<sp/>prepare<sp/>to<sp/>buffer<sp/>an<sp/>unlimited<sp/>number<sp/>of<sp/>sysex<sp/>message<sp/></highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/>bytes<sp/>or<sp/>to<sp/>buffer<sp/>an<sp/>unlimited<sp/>number<sp/>of<sp/>real-time<sp/>messages<sp/>that<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/>arrive<sp/>embedded<sp/>in<sp/>a<sp/>long<sp/>sysex<sp/>message.<sp/>To<sp/>simplify<sp/>things,<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/>parser<sp/>is<sp/>allowed<sp/>to<sp/>pass<sp/>real-time<sp/>MIDI<sp/>messages<sp/>embedded<sp/>within<sp/>a<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/>sysex<sp/>message,<sp/>and<sp/>it<sp/>is<sp/>up<sp/>to<sp/>the<sp/>client<sp/>to<sp/>detect,<sp/>process,<sp/>and<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/>remove<sp/>these<sp/>messages<sp/>as<sp/>they<sp/>arrive.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/>When<sp/>receiving<sp/>sysex<sp/>messages,<sp/>the<sp/>sysex<sp/>message<sp/>is<sp/>terminated</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>by<sp/>either<sp/>an<sp/>EOX<sp/>status<sp/>byte<sp/>(anywhere<sp/>in<sp/>the<sp/>4<sp/>byte<sp/>messages)<sp/>or</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>by<sp/>a<sp/>non-real-time<sp/>status<sp/>byte<sp/>in<sp/>the<sp/>low<sp/>order<sp/>byte<sp/>of<sp/>the<sp/>message.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>If<sp/>you<sp/>get<sp/>a<sp/>non-real-time<sp/>status<sp/>byte<sp/>but<sp/>there<sp/>was<sp/>no<sp/>EOX<sp/>byte,<sp/>it<sp/></highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/>means<sp/>the<sp/>sysex<sp/>message<sp/>was<sp/>somehow<sp/>truncated.<sp/>This<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/>considered<sp/>an<sp/>error;<sp/>e.g.,<sp/>a<sp/>missing<sp/>EOX<sp/>can<sp/>result<sp/>from<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>disconnecting<sp/>a<sp/>MIDI<sp/>cable<sp/>during<sp/>sysex<sp/>transmission.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>A<sp/>real-time<sp/>message<sp/>can<sp/>occur<sp/>within<sp/>a<sp/>sysex<sp/>message.<sp/>A<sp/>real-time<sp/></highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>message<sp/>will<sp/>always<sp/>occupy<sp/>a<sp/>full<sp/>PmEvent<sp/>with<sp/>the<sp/>status<sp/>byte<sp/>in<sp/></highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>the<sp/>low-order<sp/>byte<sp/>of<sp/>the<sp/>PmEvent<sp/>message<sp/>field.<sp/>(This<sp/>implies<sp/>that</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte-order<sp/>of<sp/>sysex<sp/>bytes<sp/>and<sp/>real-time<sp/>message<sp/>bytes<sp/>may<sp/>not</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/>be<sp/>preserved<sp/>--<sp/>for<sp/>example,<sp/>if<sp/>a<sp/>real-time<sp/>message<sp/>arrives<sp/>after</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/>3<sp/>bytes<sp/>of<sp/>a<sp/>sysex<sp/>message,<sp/>the<sp/>real-time<sp/>message<sp/>will<sp/>be<sp/>delivered</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/>first.<sp/>The<sp/>first<sp/>word<sp/>of<sp/>the<sp/>sysex<sp/>message<sp/>will<sp/>be<sp/>delivered<sp/>only</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/>after<sp/>the<sp/>4th<sp/>byte<sp/>arrives,<sp/>filling<sp/>the<sp/>4-byte<sp/>PmEvent<sp/>message<sp/>field.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/>The<sp/>timestamp<sp/>field<sp/>is<sp/>observed<sp/>when<sp/>the<sp/>output<sp/>port<sp/>is<sp/>opened<sp/>with</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/>a<sp/>non-zero<sp/>latency.<sp/>A<sp/>timestamp<sp/>of<sp/>zero<sp/>means<sp/>&quot;use<sp/>the<sp/>current<sp/>time&quot;,</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/>which<sp/>in<sp/>turn<sp/>means<sp/>to<sp/>deliver<sp/>the<sp/>message<sp/>with<sp/>a<sp/>delay<sp/>of</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/>latency<sp/>(the<sp/>latency<sp/>parameter<sp/>used<sp/>when<sp/>opening<sp/>the<sp/>output<sp/>port.)</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/>Do<sp/>not<sp/>expect<sp/>PortMidi<sp/>to<sp/>sort<sp/>data<sp/>according<sp/>to<sp/>timestamps<sp/>--<sp/></highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/>messages<sp/>should<sp/>be<sp/>sent<sp/>in<sp/>the<sp/>correct<sp/>order,<sp/>and<sp/>timestamps<sp/>MUST<sp/></highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/>be<sp/>non-decreasing.<sp/>See<sp/>also<sp/>&quot;Example&quot;<sp/>for<sp/>Pm_OpenOutput()<sp/>above.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/>A<sp/>sysex<sp/>message<sp/>will<sp/>generally<sp/>fill<sp/>many<sp/>PmEvent<sp/>structures.<sp/>On<sp/></highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/>output<sp/>to<sp/>a<sp/>PortMidiStream<sp/>with<sp/>non-zero<sp/>latency,<sp/>the<sp/>first<sp/>timestamp</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>on<sp/>sysex<sp/>message<sp/>data<sp/>will<sp/>determine<sp/>the<sp/>time<sp/>to<sp/>begin<sp/>sending<sp/>the<sp/></highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>message.<sp/>PortMidi<sp/>implementations<sp/>may<sp/>ignore<sp/>timestamps<sp/>for<sp/>the<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/>remainder<sp/>of<sp/>the<sp/>sysex<sp/>message.<sp/></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/>On<sp/>input,<sp/>the<sp/>timestamp<sp/>ideally<sp/>denotes<sp/>the<sp/>arrival<sp/>time<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/>status<sp/>byte<sp/>of<sp/>the<sp/>message.<sp/>The<sp/>first<sp/>timestamp<sp/>on<sp/>sysex<sp/>message<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/>data<sp/>will<sp/>be<sp/>valid.<sp/>Subsequent<sp/>timestamps<sp/>may<sp/>denote<sp/></highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/>when<sp/>message<sp/>bytes<sp/>were<sp/>actually<sp/>received,<sp/>or<sp/>they<sp/>may<sp/>be<sp/>simply<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/>copies<sp/>of<sp/>the<sp/>first<sp/>timestamp.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"></highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/>Timestamps<sp/>for<sp/>nested<sp/>messages:<sp/>If<sp/>a<sp/>real-time<sp/>message<sp/>arrives<sp/>in<sp/></highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/>the<sp/>middle<sp/>of<sp/>some<sp/>other<sp/>message,<sp/>it<sp/>is<sp/>enqueued<sp/>immediately<sp/>with<sp/></highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/>the<sp/>timestamp<sp/>corresponding<sp/>to<sp/>its<sp/>arrival<sp/>time.<sp/>The<sp/>interrupted<sp/></highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/>non-real-time<sp/>message<sp/>or<sp/>4-byte<sp/>packet<sp/>of<sp/>sysex<sp/>data<sp/>will<sp/>be<sp/>enqueued<sp/></highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/>later.<sp/>The<sp/>timestamp<sp/>of<sp/>interrupted<sp/>data<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>the<sp/>interrupting<sp/>real-time<sp/>message<sp/>to<sp/>insure<sp/>that<sp/>timestamps<sp/>are</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/>non-decreasing.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PmMessage;</highlight></codeline>
<codeline lineno="521" refid="struct_pm_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>PmMessage<sp/><sp/><sp/><sp/><sp/><sp/>message;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>PmTimestamp<sp/><sp/><sp/><sp/>timestamp;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Read()<sp/>retrieves<sp/>midi<sp/>data<sp/>into<sp/>a<sp/>buffer,<sp/>and<sp/>returns<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>events<sp/>read.<sp/>Result<sp/>is<sp/>a<sp/>non-negative<sp/>number<sp/>unless<sp/>an<sp/>error<sp/>occurs,<sp/></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>which<sp/>case<sp/>a<sp/>PmError<sp/>value<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/><sp/>Buffer<sp/>Overflow</highlight></codeline>
<codeline lineno="532"><highlight class="comment"></highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>problem:<sp/>if<sp/>an<sp/>input<sp/>overflow<sp/>occurs,<sp/>data<sp/>will<sp/>be<sp/>lost,<sp/>ultimately<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/>because<sp/>there<sp/>is<sp/>no<sp/>flow<sp/>control<sp/>all<sp/>the<sp/>way<sp/>back<sp/>to<sp/>the<sp/>data<sp/>source.<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/>When<sp/>data<sp/>is<sp/>lost,<sp/>the<sp/>receiver<sp/>should<sp/>be<sp/>notified<sp/>and<sp/>some<sp/>sort<sp/>of<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/>graceful<sp/>recovery<sp/>should<sp/>take<sp/>place,<sp/>e.g.<sp/>you<sp/>shouldn&apos;t<sp/>resume<sp/>receiving<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>long<sp/>sysex<sp/>message.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/>With<sp/>a<sp/>lock-free<sp/>fifo,<sp/>which<sp/>is<sp/>pretty<sp/>much<sp/>what<sp/>we&apos;re<sp/>stuck<sp/>with<sp/>to<sp/></highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/>enable<sp/>portability<sp/>to<sp/>the<sp/>Mac,<sp/>it&apos;s<sp/>tricky<sp/>for<sp/>the<sp/>producer<sp/>and<sp/>consumer<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>synchronously<sp/>reset<sp/>the<sp/>buffer<sp/>and<sp/>resume<sp/>normal<sp/>operation.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/>Solution:<sp/>the<sp/>buffer<sp/>managed<sp/>by<sp/>PortMidi<sp/>will<sp/>be<sp/>flushed<sp/>when<sp/>an<sp/>overflow</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/>occurs.<sp/>The<sp/>consumer<sp/>(Pm_Read())<sp/>gets<sp/>an<sp/>error<sp/>message<sp/>(pmBufferOverflow)</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>ordinary<sp/>processing<sp/>resumes<sp/>as<sp/>soon<sp/>as<sp/>a<sp/>new<sp/>message<sp/>arrives.<sp/>The</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/>remainder<sp/>of<sp/>a<sp/>partial<sp/>sysex<sp/>message<sp/>is<sp/>not<sp/>considered<sp/>to<sp/>be<sp/>a<sp/>&quot;new</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/>message&quot;<sp/>and<sp/>will<sp/>be<sp/>flushed<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"></highlight></codeline>
<codeline lineno="549"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Pm_Read(<sp/>PortMidiStream<sp/>*stream,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Poll()<sp/>tests<sp/>whether<sp/>input<sp/>is<sp/>available,<sp/></highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/>returning<sp/>TRUE,<sp/>FALSE,<sp/>or<sp/>an<sp/>error<sp/>value.</highlight></codeline>
<codeline lineno="555"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">PmError<sp/>Pm_Poll(<sp/>PortMidiStream<sp/>*stream);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Write()<sp/>writes<sp/>midi<sp/>data<sp/>from<sp/>a<sp/>buffer.<sp/>This<sp/>may<sp/>contain:</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>short<sp/>messages<sp/></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/></highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>sysex<sp/>messages<sp/>that<sp/>are<sp/>converted<sp/>into<sp/>a<sp/>sequence<sp/>of<sp/>PmEvent</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structures,<sp/>e.g.<sp/>sending<sp/>data<sp/>from<sp/>a<sp/>file<sp/>or<sp/>forwarding<sp/>them</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>midi<sp/>input.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"></highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/>Use<sp/>Pm_WriteSysEx()<sp/>to<sp/>write<sp/>a<sp/>sysex<sp/>message<sp/>stored<sp/>as<sp/>a<sp/>contiguous<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>array<sp/>of<sp/>bytes.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/><sp/>Sysex<sp/>data<sp/>may<sp/>contain<sp/>embedded<sp/>real-time<sp/>messages.</highlight></codeline>
<codeline lineno="570"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">PmError<sp/>Pm_Write(<sp/>PortMidiStream<sp/>*stream,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length<sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_WriteShort()<sp/>writes<sp/>a<sp/>timestamped<sp/>non-system-exclusive<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/>Messages<sp/>are<sp/>delivered<sp/>in<sp/>order<sp/>as<sp/>received,<sp/>and<sp/>timestamps<sp/>must<sp/>be<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/>non-decreasing.<sp/>(But<sp/>timestamps<sp/>are<sp/>ignored<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>opened</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/>with<sp/>latency<sp/>=<sp/>0.)</highlight></codeline>
<codeline lineno="578"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">PmError<sp/>Pm_WriteShort(<sp/>PortMidiStream<sp/>*stream,<sp/>PmTimestamp<sp/>when,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msg);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_WriteSysEx()<sp/>writes<sp/>a<sp/>timestamped<sp/>system-exclusive<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="583"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">PmError<sp/>Pm_WriteSysEx(<sp/>PortMidiStream<sp/>*stream,<sp/>PmTimestamp<sp/>when,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PORT_MIDI_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_common/portmidi.h"/>
  </compounddef>
</doxygen>
