<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_p_d_f_doc_8cc" kind="file" language="C++">
    <compoundname>PDFDoc.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">locale.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="gstrtod_8h" local="yes">goo/gstrtod.h</includes>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="poppler-config_8h" local="yes">poppler-config.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_catalog_8h" local="yes">Catalog.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="_linearization_8h" local="yes">Linearization.h</includes>
    <includes refid="_link_8h" local="yes">Link.h</includes>
    <includes refid="_output_dev_8h" local="yes">OutputDev.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_error_codes_8h" local="yes">ErrorCodes.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2lexer_8h" local="yes">Lexer.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2parser_8h" local="yes">Parser.h</includes>
    <includes refid="_security_handler_8h" local="yes">SecurityHandler.h</includes>
    <includes refid="_decrypt_8h" local="yes">Decrypt.h</includes>
    <includes refid="_outline_8h" local="yes">Outline.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <includes refid="_hints_8h" local="yes">Hints.h</includes>
    <incdepgraph>
      <node id="88801">
        <label>sys/stat.h</label>
      </node>
      <node id="88791">
        <label>thirdparty/poppler/poppler/PDFDoc.cc</label>
        <link refid="_p_d_f_doc_8cc"/>
        <childnode refid="88792" relation="include">
        </childnode>
        <childnode refid="88793" relation="include">
        </childnode>
        <childnode refid="88794" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88796" relation="include">
        </childnode>
        <childnode refid="88797" relation="include">
        </childnode>
        <childnode refid="88798" relation="include">
        </childnode>
        <childnode refid="88799" relation="include">
        </childnode>
        <childnode refid="88800" relation="include">
        </childnode>
        <childnode refid="88801" relation="include">
        </childnode>
        <childnode refid="88802" relation="include">
        </childnode>
        <childnode refid="88803" relation="include">
        </childnode>
        <childnode refid="88808" relation="include">
        </childnode>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88811" relation="include">
        </childnode>
        <childnode refid="88816" relation="include">
        </childnode>
        <childnode refid="88825" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
        <childnode refid="88827" relation="include">
        </childnode>
        <childnode refid="88828" relation="include">
        </childnode>
        <childnode refid="88829" relation="include">
        </childnode>
        <childnode refid="88830" relation="include">
        </childnode>
        <childnode refid="88821" relation="include">
        </childnode>
        <childnode refid="88832" relation="include">
        </childnode>
        <childnode refid="88833" relation="include">
        </childnode>
        <childnode refid="88834" relation="include">
        </childnode>
        <childnode refid="88835" relation="include">
        </childnode>
        <childnode refid="88836" relation="include">
        </childnode>
        <childnode refid="88837" relation="include">
        </childnode>
        <childnode refid="88838" relation="include">
        </childnode>
        <childnode refid="88842" relation="include">
        </childnode>
      </node>
      <node id="88805">
        <label>stdarg.h</label>
      </node>
      <node id="88812">
        <label>assert.h</label>
      </node>
      <node id="88827">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
        <childnode refid="88826" relation="include">
        </childnode>
      </node>
      <node id="88808">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88797" relation="include">
        </childnode>
        <childnode refid="88798" relation="include">
        </childnode>
        <childnode refid="88809" relation="include">
        </childnode>
        <childnode refid="88810" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
      </node>
      <node id="88797">
        <label>stdlib.h</label>
      </node>
      <node id="88819">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88807" relation="include">
        </childnode>
      </node>
      <node id="88838">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
        <childnode refid="88827" relation="include">
        </childnode>
        <childnode refid="88825" relation="include">
        </childnode>
        <childnode refid="88816" relation="include">
        </childnode>
        <childnode refid="88839" relation="include">
        </childnode>
        <childnode refid="88840" relation="include">
        </childnode>
        <childnode refid="88841" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
      </node>
      <node id="88837">
        <label>Outline.h</label>
        <link refid="_outline_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88813" relation="include">
        </childnode>
      </node>
      <node id="88822">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
      </node>
      <node id="88825">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
        <childnode refid="88826" relation="include">
        </childnode>
      </node>
      <node id="88796">
        <label>errno.h</label>
      </node>
      <node id="88811">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="88812" relation="include">
        </childnode>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88813" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
      </node>
      <node id="88833">
        <label>Lexer.h</label>
        <link refid="thirdparty_2poppler_2poppler_2lexer_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
      </node>
      <node id="88821">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="88805" relation="include">
        </childnode>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88803" relation="include">
        </childnode>
      </node>
      <node id="88836">
        <label>Decrypt.h</label>
        <link refid="_decrypt_8h_source"/>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88803" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
      </node>
      <node id="88842">
        <label>Hints.h</label>
        <link refid="_hints_8h_source"/>
        <childnode refid="88799" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88826" relation="include">
        </childnode>
        <childnode refid="88838" relation="include">
        </childnode>
      </node>
      <node id="88823">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
      </node>
      <node id="88839">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
      </node>
      <node id="88798">
        <label>stddef.h</label>
      </node>
      <node id="88816">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
      </node>
      <node id="88834">
        <label>Parser.h</label>
        <link refid="thirdparty_2poppler_2poppler_2parser_8h_source"/>
        <childnode refid="88833" relation="include">
        </childnode>
      </node>
      <node id="88804">
        <label>limits.h</label>
      </node>
      <node id="88807">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="88795" relation="include">
        </childnode>
      </node>
      <node id="88820">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="88824">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88814" relation="include">
        </childnode>
      </node>
      <node id="88815">
        <label>pthread.h</label>
      </node>
      <node id="88810">
        <label>sys/types.h</label>
      </node>
      <node id="88831">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
      </node>
      <node id="88799">
        <label>string.h</label>
      </node>
      <node id="88803">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="88804" relation="include">
        </childnode>
        <childnode refid="88805" relation="include">
        </childnode>
        <childnode refid="88797" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
      </node>
      <node id="88832">
        <label>ErrorCodes.h</label>
        <link refid="_error_codes_8h_source"/>
      </node>
      <node id="88840">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88839" relation="include">
        </childnode>
        <childnode refid="88818" relation="include">
        </childnode>
      </node>
      <node id="88829">
        <label>Link.h</label>
        <link refid="_link_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
      </node>
      <node id="88817">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="88818" relation="include">
        </childnode>
        <childnode refid="88795" relation="include">
        </childnode>
        <childnode refid="88799" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88819" relation="include">
        </childnode>
        <childnode refid="88803" relation="include">
        </childnode>
        <childnode refid="88820" relation="include">
        </childnode>
        <childnode refid="88821" relation="include">
        </childnode>
        <childnode refid="88822" relation="include">
        </childnode>
        <childnode refid="88823" relation="include">
        </childnode>
        <childnode refid="88824" relation="include">
        </childnode>
      </node>
      <node id="88809">
        <label>unistd.h</label>
      </node>
      <node id="88826">
        <label>vector</label>
      </node>
      <node id="88802">
        <label>goo/gstrtod.h</label>
        <link refid="gstrtod_8h_source"/>
      </node>
      <node id="88830">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88813" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88831" relation="include">
        </childnode>
      </node>
      <node id="88835">
        <label>SecurityHandler.h</label>
        <link refid="_security_handler_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
      </node>
      <node id="88800">
        <label>time.h</label>
      </node>
      <node id="88828">
        <label>Linearization.h</label>
        <link refid="_linearization_8h_source"/>
        <childnode refid="88806" relation="include">
        </childnode>
        <childnode refid="88817" relation="include">
        </childnode>
      </node>
      <node id="88814">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="88815" relation="include">
        </childnode>
      </node>
      <node id="88813">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="88793">
        <label>ctype.h</label>
      </node>
      <node id="88806">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="88807" relation="include">
        </childnode>
      </node>
      <node id="88818">
        <label>set</label>
      </node>
      <node id="88792">
        <label>config.h</label>
      </node>
      <node id="88841">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="88817" relation="include">
        </childnode>
        <childnode refid="88813" relation="include">
        </childnode>
      </node>
      <node id="88795">
        <label>stdio.h</label>
      </node>
      <node id="88794">
        <label>locale.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_d_f_doc_8cc_1a5634164e812bdcde1a2656f03144de4d" prot="public" static="no">
        <name>pdfdocLocker</name>
        <param></param>
        <initializer><ref refid="class_mutex_locker" kindref="compound">MutexLocker</ref> locker(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="83" column="11" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_f_doc_8cc_1a916eaae1df2c971aafedbb21709b8578" prot="public" static="no">
        <name>headerSearchSize</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="90" column="9" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_f_doc_8cc_1a38719a922326bf118c923df9a9aa5b8d" prot="public" static="no">
        <name>pdfIdLength</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="92" column="9" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_f_doc_8cc_1a706fd445554f675c8475b6e2f3c78fab" prot="public" static="no">
        <name>linearizationSearchSize</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="94" column="9" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_f_doc_8cc_1a42f5c68939c63ec267eebbf22e8f92e6" prot="public" static="no">
        <name>xrefSearchSize</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="98" column="9" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_d_f_doc_8cc_1a7c484ab7455199d46a2ce9a40d02dd58" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool get_id</definition>
        <argsstring>(GooString *encodedidstring, GooString *id)</argsstring>
        <name>get_id</name>
        <param>
          <type><ref refid="class_goo_string" kindref="compound">GooString</ref> *</type>
          <declname>encodedidstring</declname>
        </param>
        <param>
          <type><ref refid="class_goo_string" kindref="compound">GooString</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PDFDoc.cc" line="604" column="1" bodyfile="thirdparty/poppler/poppler/PDFDoc.cc" bodystart="604" bodyend="622"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PDFDoc.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2006,<sp/>2008<sp/>Brad<sp/>Hards<sp/>&lt;bradh@frogmouth.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2007-2009,<sp/>2011-2015<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Julien<sp/>Rebetez<sp/>&lt;julienr@svn.gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010,<sp/>2011<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Eric<sp/>Toombs<sp/>&lt;ewtoombs@uwaterloo.ca&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Kovid<sp/>Goyal<sp/>&lt;kovid@kovidgoyal.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2011<sp/>Axel<sp/>Struebing<sp/>&lt;axel.struebing@freenet.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010-2012,<sp/>2014<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Jakub<sp/>Wilk<sp/>&lt;jwilk@jwilk.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Ilya<sp/>Gorenbein<sp/>&lt;igorenbein@finjan.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Srinivas<sp/>Adicherla<sp/>&lt;srinivas.adicherla@geodesic.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Philip<sp/>Lorenz<sp/>&lt;lorenzph+freedesktop@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011-2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013,<sp/>2014<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Adam<sp/>Reichold<sp/>&lt;adamreichold@myopera.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Bogdan<sp/>Cristea<sp/>&lt;cristeab@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Li<sp/>Junling<sp/>&lt;lijunling@sina.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>André<sp/>Guerreiro<sp/>&lt;aguerreiro1985@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>André<sp/>Esser<sp/>&lt;bepandre@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gstrtod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;poppler-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Catalog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Linearization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Link.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ErrorCodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SecurityHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Decrypt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_OUTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Outline.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hints.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>pdfdocLocker()<sp/><sp/><sp/>MutexLocker<sp/>locker(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>pdfdocLocker()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>headerSearchSize<sp/>1024<sp/><sp/><sp/>//<sp/>read<sp/>this<sp/>many<sp/>bytes<sp/>at<sp/>beginning<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>file<sp/>to<sp/>look<sp/>for<sp/>&apos;%PDF&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pdfIdLength<sp/>32<sp/><sp/><sp/>//<sp/>PDF<sp/>Document<sp/>IDs<sp/>(PermanentId,<sp/>UpdateId)<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>linearizationSearchSize<sp/>1024<sp/><sp/><sp/><sp/>//<sp/>read<sp/>this<sp/>many<sp/>bytes<sp/>at<sp/>beginning<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>to<sp/>look<sp/>for<sp/>linearization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xrefSearchSize<sp/>1024<sp/>//<sp/>read<sp/>this<sp/>many<sp/>bytes<sp/>at<sp/>end<sp/>of<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>to<sp/>look<sp/>for<sp/>&apos;startxref&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PDFDoc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::init()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>errCode<sp/>=<sp/>errNone;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>linearization<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>catalog<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>hints<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_OUTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>outline<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>startXRefPos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>secHdlr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>pageCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">PDFDoc::PDFDoc()</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">PDFDoc::PDFDoc(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileNameA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*guiDataA)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>fileName<sp/>=<sp/>fileNameA;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>guiData<sp/>=<sp/>guiDataA;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>fileName-&gt;getLength();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>fileNameU<sp/>=<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)gmallocn(n<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameU[i]<sp/>=<sp/>(wchar_t)(fileName-&gt;getChar(i)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>fileNameU[n]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>file<sp/>=<sp/>GooFile::open(fileName);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fopen()<sp/>has<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>errno<sp/>returned<sp/>by<sp/>fopen<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>referred<sp/>to<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>fopenErrno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file<sp/>&apos;{0:t}&apos;:<sp/>{1:s}.&quot;</highlight><highlight class="normal">,<sp/>fileName,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errOpenFile;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_stream" kindref="compound">FileStream</ref>(file,<sp/>0,<sp/>gFalse,<sp/>file-&gt;size(),<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>setup(ownerPassword,<sp/>userPassword);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">PDFDoc::PDFDoc(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*fileNameA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fileNameLen,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*guiDataA)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>OSVERSIONINFO<sp/>version;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>guiData<sp/>=<sp/>guiDataA;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>both<sp/>Unicode<sp/>and<sp/>8-bit<sp/>copies<sp/>of<sp/>the<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>fileName<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>fileNameU<sp/>=<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)gmallocn(fileNameLen<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fileNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName-&gt;append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)fileNameA[i]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameU[i]<sp/>=<sp/>fileNameA[i];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>fileNameU[fileNameLen]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>_wfopen<sp/>is<sp/>only<sp/>available<sp/>in<sp/>NT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>version.dwOSVersionInfoSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(version);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>GetVersionEx(&amp;version);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.dwPlatformId<sp/>==<sp/>VER_PLATFORM_WIN32_NT)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>GooFile::open(fileNameU);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>GooFile::open(fileName);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,<sp/>fileName);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errOpenFile;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_stream" kindref="compound">FileStream</ref>(file,<sp/>0,<sp/>gFalse,<sp/>file-&gt;size(),<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>setup(ownerPassword,<sp/>userPassword);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">PDFDoc::PDFDoc(<ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*strA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*guiDataA)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>guiData<sp/>=<sp/>guiDataA;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strA-&gt;getFileName())<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>strA-&gt;getFileName()-&gt;copy();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>fileName-&gt;getLength();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameU<sp/>=<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)gmallocn(n<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileNameU[i]<sp/>=<sp/>(wchar_t)(fileName-&gt;getChar(i)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameU[n]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameU<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>setup(ownerPassword,<sp/>userPassword);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">GBool<sp/>PDFDoc::setup(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>pdfdocLocker();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>str-&gt;setPos(0,<sp/>-1);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;getPos()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Document<sp/>base<sp/>stream<sp/>is<sp/>not<sp/>seekable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>footer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adobe<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>enforce<sp/>%%EOF,<sp/>so<sp/>we<sp/>do<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(!checkFooter())<sp/>return<sp/>gFalse;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>checkHeader();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>GBool<sp/>wasReconstructed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>xref<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>(str,<sp/>getStartXRef(),<sp/>getMainXRefEntriesOffset(),<sp/>&amp;wasReconstructed);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xref-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wasReconstructed)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>xref;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startXRefPos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>(str,<sp/>getStartXRef(gTrue),<sp/>getMainXRefEntriesOffset(gTrue),<sp/>&amp;wasReconstructed);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xref-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>read<sp/>xref<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>xref-&gt;getErrorCode();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>encryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!checkEncryption(ownerPassword,<sp/>userPassword))<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errEncrypted;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>catalog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>catalog<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_catalog" kindref="compound">Catalog</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catalog<sp/>&amp;&amp;<sp/>!catalog-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wasReconstructed)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>one<sp/>more<sp/>time<sp/>to<sp/>contruct<sp/>the<sp/>Catalog,<sp/>maybe<sp/>the<sp/>problem<sp/>is<sp/>damaged<sp/>XRef<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>catalog;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>xref;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>(str,<sp/>0,<sp/>0,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>catalog<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_catalog" kindref="compound">Catalog</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catalog<sp/>&amp;&amp;<sp/>!catalog-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>read<sp/>page<sp/>catalog&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errBadCatalog;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">PDFDoc::~PDFDoc()<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageCache)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNumPages();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageCache[i])<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pageCache[i];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(pageCache);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>secHdlr;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_OUTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outline)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outline;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catalog)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>catalog;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>xref;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hints)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>hints;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearization)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>linearization;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fileName;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileNameU)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fileNameU);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>%%EOF<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">GBool<sp/>PDFDoc::checkFooter()<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>look<sp/>in<sp/>the<sp/>last<sp/>1024<sp/>chars<sp/>because<sp/>Adobe<sp/>does<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*eof<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[1025];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>Goffset<sp/>pos<sp/>=<sp/>str-&gt;getPos();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>str-&gt;setPos(1024,<sp/>-1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ch;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1024;<sp/>i++)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>eof[i]<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>eof[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>i<sp/>-<sp/>5;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp<sp/>(&amp;eof[i],<sp/></highlight><highlight class="stringliteral">&quot;%%EOF&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Document<sp/>has<sp/>not<sp/>the<sp/>mandatory<sp/>ending<sp/>%%EOF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>eof;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>eof;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>str-&gt;setPos(pos);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>PDF<sp/>header<sp/>on<sp/>this<sp/>stream.<sp/><sp/>Skip<sp/>past<sp/>some<sp/>garbage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::checkHeader()<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hdrBuf[headerSearchSize+1];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tokptr;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>pdfMajorVersion<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>pdfMinorVersion<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>headerSearchSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>hdrBuf[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>hdrBuf[headerSearchSize]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>headerSearchSize<sp/>-<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(&amp;hdrBuf[i],<sp/></highlight><highlight class="stringliteral">&quot;%PDF-&quot;</highlight><highlight class="normal">,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>headerSearchSize<sp/>-<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;May<sp/>not<sp/>be<sp/>a<sp/>PDF<sp/>file<sp/>(continuing<sp/>anyway)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>str-&gt;moveStart(i);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>strtok_r(&amp;hdrBuf[i+5],<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r&quot;</highlight><highlight class="normal">,<sp/>&amp;tokptr)))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;May<sp/>not<sp/>be<sp/>a<sp/>PDF<sp/>file<sp/>(continuing<sp/>anyway)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>sscanf(p,<sp/></highlight><highlight class="stringliteral">&quot;%d.%d&quot;</highlight><highlight class="normal">,<sp/>&amp;pdfMajorVersion,<sp/>&amp;pdfMinorVersion);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>do<sp/>the<sp/>version<sp/>check.<sp/>Don&apos;t<sp/>add<sp/>it<sp/>back<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">GBool<sp/>PDFDoc::checkEncryption(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*ownerPassword,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*userPassword)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>encrypt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>GBool<sp/>encrypted;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>GBool<sp/>ret;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>xref-&gt;getTrailerDict()-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Encrypt&quot;</highlight><highlight class="normal">,<sp/>&amp;encrypt);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encrypted<sp/>=<sp/>encrypt.isDict()))<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((secHdlr<sp/>=<sp/>SecurityHandler::make(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;encrypt)))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secHdlr-&gt;isUnencrypted())<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>encryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secHdlr-&gt;checkEncryption(ownerPassword,<sp/>userPassword))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>authorization<sp/>succeeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xref-&gt;setEncryption(secHdlr-&gt;getPermissionFlags(),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getOwnerPasswordOk(),</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getFileKey(),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getFileKeyLength(),</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getEncVersion(),</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getEncRevision(),</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getEncAlgorithm());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>authorization<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>couldn&apos;t<sp/>find<sp/>the<sp/>matching<sp/>security<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>document<sp/>is<sp/>not<sp/>encrypted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>encrypt.free();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">std::vector&lt;FormWidgetSignature*&gt;<sp/>PDFDoc::getSignatureWidgets()</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_pages<sp/>=<sp/>getNumPages();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><ref refid="class_form_page_widgets" kindref="compound">FormPageWidgets</ref><sp/>*page_widgets<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>std::vector&lt;FormWidgetSignature*&gt;<sp/>widget_vector;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num_pages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*p<sp/>=<sp/>getCatalog()-&gt;getPage(i);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page_widgets<sp/>=<sp/>p-&gt;getFormWidgets();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>page_widgets<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>page_widgets-&gt;getNumWidgets();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page_widgets-&gt;getWidget(j)-&gt;getType()<sp/>==<sp/>formSignature)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>widget_vector.push_back(static_cast&lt;FormWidgetSignature*&gt;(page_widgets-&gt;getWidget(j)));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>page_widgets;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>widget_vector;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::displayPage(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPI,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>useMediaBox,<sp/>GBool<sp/>crop,<sp/>GBool<sp/>printing,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbk)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkData,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*annotDisplayDecideCbk)(<ref refid="class_annot" kindref="compound">Annot</ref><sp/>*annot,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*annotDisplayDecideCbkData,<sp/>GBool<sp/>copyXRef)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPrintCommands())<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*****<sp/>page<sp/>%d<sp/>*****\n&quot;</highlight><highlight class="normal">,<sp/>page);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getPage(page))</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>getPage(page)-&gt;display(out,<sp/>hDPI,<sp/>vDPI,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotate,<sp/>useMediaBox,<sp/>crop,<sp/>printing,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abortCheckCbk,<sp/>abortCheckCbkData,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotDisplayDecideCbk,<sp/>annotDisplayDecideCbkData,<sp/>copyXRef);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::displayPages(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstPage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastPage,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPI,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>useMediaBox,<sp/>GBool<sp/>crop,<sp/>GBool<sp/>printing,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbk)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkData,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*annotDisplayDecideCbk)(<ref refid="class_annot" kindref="compound">Annot</ref><sp/>*annot,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data),</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*annotDisplayDecideCbkData)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(page<sp/>=<sp/>firstPage;<sp/>page<sp/>&lt;=<sp/>lastPage;<sp/>++page)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>displayPage(out,<sp/>page,<sp/>hDPI,<sp/>vDPI,<sp/>rotate,<sp/>useMediaBox,<sp/>crop,<sp/>printing,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abortCheckCbk,<sp/>abortCheckCbkData,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotDisplayDecideCbk,<sp/>annotDisplayDecideCbkData);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::displayPageSlice(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPI,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>useMediaBox,<sp/>GBool<sp/>crop,<sp/>GBool<sp/>printing,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceY,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceW,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceH,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbk)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkData,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*annotDisplayDecideCbk)(<ref refid="class_annot" kindref="compound">Annot</ref><sp/>*annot,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data),</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*annotDisplayDecideCbkData,<sp/>GBool<sp/>copyXRef)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getPage(page))</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>getPage(page)-&gt;displaySlice(out,<sp/>hDPI,<sp/>vDPI,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotate,<sp/>useMediaBox,<sp/>crop,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliceX,<sp/>sliceY,<sp/>sliceW,<sp/>sliceH,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printing,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abortCheckCbk,<sp/>abortCheckCbkData,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotDisplayDecideCbk,<sp/>annotDisplayDecideCbkData,<sp/>copyXRef);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><ref refid="class_links" kindref="compound">Links</ref><sp/>*PDFDoc::getLinks(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*p<sp/>=<sp/>getPage(page);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_links" kindref="compound">Links</ref><sp/>(NULL);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;getLinks();</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::processLinks(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getPage(page))</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>getPage(page)-&gt;processLinks(out);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="class_linearization" kindref="compound">Linearization</ref><sp/>*PDFDoc::getLinearization()</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!linearization)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>linearization<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_linearization" kindref="compound">Linearization</ref>(str);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>linearizationState<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>linearization;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">GBool<sp/>PDFDoc::checkLinearization()<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearization<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearizationState<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearizationState<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hints)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>hints<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_hints" kindref="compound">Hints</ref>(str,<sp/>linearization,<sp/>getXRef(),<sp/>secHdlr);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page<sp/>=<sp/>1;<sp/>page<sp/>&lt;=<sp/>linearization-&gt;getNumPages();<sp/>page++)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>pageRef;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>pageRef.num<sp/>=<sp/>hints-&gt;getPageObjectNum(page);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pageRef.num)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearizationState<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>bogus<sp/>ref<sp/>-<sp/>this<sp/>can<sp/>happen<sp/>in<sp/>corrupted<sp/>PDF<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageRef.num<sp/>&lt;<sp/>0<sp/>||<sp/>pageRef.num<sp/>&gt;=<sp/>xref-&gt;getNumObjects())<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearizationState<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>pageRef.gen<sp/>=<sp/>xref-&gt;getEntry(pageRef.num)-&gt;gen;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;fetch(pageRef.num,<sp/>pageRef.gen,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isDict(</highlight><highlight class="stringliteral">&quot;Page&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearizationState<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>linearizationState<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">GBool<sp/>PDFDoc::isLinearized(GBool<sp/>tryingToReconstruct)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((str-&gt;getLength())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(getLinearization()-&gt;getLength()<sp/>==<sp/>str-&gt;getLength()))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tryingToReconstruct)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getLinearization()-&gt;getLength()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool</highlight></codeline>
<codeline lineno="604"><highlight class="normal">get_id<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*encodedidstring,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encodedid<sp/>=<sp/>encodedidstring-&gt;getCString();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pdfid[pdfIdLength<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encodedidstring-&gt;getLength()<sp/>!=<sp/>pdfIdLength<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>sprintf(pdfid,<sp/></highlight><highlight class="stringliteral">&quot;%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodedid[0]<sp/>&amp;<sp/>0xff,<sp/>encodedid[1]<sp/>&amp;<sp/>0xff,<sp/>encodedid[2]<sp/>&amp;<sp/>0xff,<sp/>encodedid[3]<sp/>&amp;<sp/>0xff,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodedid[4]<sp/>&amp;<sp/>0xff,<sp/>encodedid[5]<sp/>&amp;<sp/>0xff,<sp/>encodedid[6]<sp/>&amp;<sp/>0xff,<sp/>encodedid[7]<sp/>&amp;<sp/>0xff,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodedid[8]<sp/>&amp;<sp/>0xff,<sp/>encodedid[9]<sp/>&amp;<sp/>0xff,<sp/>encodedid[10]<sp/>&amp;<sp/>0xff,<sp/>encodedid[11]<sp/>&amp;<sp/>0xff,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodedid[12]<sp/>&amp;<sp/>0xff,<sp/>encodedid[13]<sp/>&amp;<sp/>0xff,<sp/>encodedid[14]<sp/>&amp;<sp/>0xff,<sp/>encodedid[15]<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>pdfIdLength)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;Set(pdfid,<sp/>pdfIdLength);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">GBool<sp/>PDFDoc::getID(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*permanent_id,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*update_id)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>xref-&gt;getTrailerDict()-&gt;dictLookup<sp/>(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isArray()<sp/>&amp;&amp;<sp/>obj.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permanent_id)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.arrayGet(0,<sp/>&amp;obj2)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!get_id<sp/>(obj2.getString(),<sp/>permanent_id))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>permanent<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(update_id)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.arrayGet(1,<sp/>&amp;obj2)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!get_id<sp/>(obj2.getString(),<sp/>update_id))<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>update<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><ref refid="class_hints" kindref="compound">Hints</ref><sp/>*PDFDoc::getHints()</highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hints<sp/>&amp;&amp;<sp/>isLinearized())<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>hints<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_hints" kindref="compound">Hints</ref>(str,<sp/>getLinearization(),<sp/>getXRef(),<sp/>secHdlr);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hints;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::savePageAs(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNo)<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*yRef,<sp/>*countRef;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rootNum<sp/>=<sp/>getXRef()-&gt;getNumObjects()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>special<sp/>flags<sp/>are<sp/>set,<sp/>because<sp/>we<sp/>are<sp/>going<sp/>to<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>objects,<sp/>including<sp/>Unencrypted<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>xref-&gt;scanSpecialFlags();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>Guchar<sp/>*fileKey;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>xref-&gt;getEncryptionParameters(&amp;fileKey,<sp/>&amp;encAlgorithm,<sp/>&amp;keyLength);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageNo<sp/>&lt;<sp/>1<sp/>||<sp/>pageNo<sp/>&gt;<sp/>getNumPages()<sp/>||<sp/>!getCatalog()-&gt;getPage(pageNo))<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>pageNo:<sp/>{0:d}({1:d})&quot;</highlight><highlight class="normal">,<sp/>pageNo,<sp/>getNumPages()<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errOpenFile;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*cropBox<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getCatalog()-&gt;getPage(pageNo)-&gt;isCropped())<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBox<sp/>=<sp/>getCatalog()-&gt;getPage(pageNo)-&gt;getCropBox();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>replacePageDict(pageNo,<sp/></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>getCatalog()-&gt;getPage(pageNo)-&gt;getRotate(),</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>getCatalog()-&gt;getPage(pageNo)-&gt;getMediaBox(),</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBox);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*refPage<sp/>=<sp/>getCatalog()-&gt;getPageRef(pageNo);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>page;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>getXRef()-&gt;fetch(refPage-&gt;num,<sp/>refPage-&gt;gen,<sp/>&amp;page);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>fopen(name-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errOpenFile;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>outStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_out_stream" kindref="compound">FileOutStream</ref>(f,0);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>yRef<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>(getXRef()-&gt;getTrailerDict());</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secHdlr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!secHdlr-&gt;isUnencrypted())<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>yRef-&gt;setEncryption(secHdlr-&gt;getPermissionFlags(),<sp/></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr-&gt;getOwnerPasswordOk(),<sp/>fileKey,<sp/>keyLength,<sp/>secHdlr-&gt;getEncVersion(),<sp/>secHdlr-&gt;getEncRevision(),<sp/>encAlgorithm);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>countRef<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*trailerObj<sp/>=<sp/>getXRef()-&gt;getTrailerDict();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerObj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>markPageObjects(trailerObj-&gt;getDict(),<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>yRef-&gt;add(0,<sp/>65535,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>writeHeader(outStr,<sp/>getPDFMajorVersion(),<sp/>getPDFMinorVersion());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>and<sp/>mark<sp/>info<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>infoObj;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>getXRef()-&gt;getDocInfo(&amp;infoObj);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoObj.isDict())<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*infoDict<sp/>=<sp/>infoObj.getDict();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>markPageObjects(infoDict,<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerObj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict<sp/>=<sp/>trailerObj-&gt;getDict();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>ref;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trailerDict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">,<sp/>&amp;ref);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.isRef())<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yRef-&gt;add(ref.getRef().num,<sp/>ref.getRef().gen,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(ref.getRef().num)-&gt;type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yRef-&gt;getEntry(ref.getRef().num)-&gt;type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.free();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>infoObj.free();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>and<sp/>mark<sp/>output<sp/>intents<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>catObj,<sp/>pagesObj,<sp/>resourcesObj,<sp/>annotsObj,<sp/>afObj;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>getXRef()-&gt;getCatalog(&amp;catObj);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*catDict<sp/>=<sp/>catObj.getDict();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>catDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Pages&quot;</highlight><highlight class="normal">,<sp/>&amp;pagesObj);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>catDict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;AcroForm&quot;</highlight><highlight class="normal">,<sp/>&amp;afObj);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!afObj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>markAcroForm(&amp;afObj,<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>afObj.free();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*pagesDict<sp/>=<sp/>pagesObj.getDict();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>pagesDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resourcesObj);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourcesObj.isDict())</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>markPageObjects(resourcesObj.getDict(),<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>markPageObjects(catDict,<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*pageDict<sp/>=<sp/>page.getDict();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourcesObj.isNull()<sp/>&amp;&amp;<sp/>!pageDict-&gt;hasKey(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resourceDict<sp/>=<sp/>getCatalog()-&gt;getPage(pageNo)-&gt;getResourceDict();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourceDict<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resourcesObj.initDict(resourceDict);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markPageObjects(resourcesObj.getDict(),<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>markPageObjects(pageDict,<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>pageDict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Annots&quot;</highlight><highlight class="normal">,<sp/>&amp;annotsObj);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!annotsObj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>markAnnotations(&amp;annotsObj,<sp/>yRef,<sp/>countRef,<sp/>0,<sp/>refPage-&gt;num,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>annotsObj.free();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>yRef-&gt;markUnencrypted();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>writePageObjects(outStr,<sp/>yRef,<sp/>0);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>yRef-&gt;add(rootNum,0,outStr-&gt;getPos(),gTrue);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>0<sp/>obj\n&quot;</highlight><highlight class="normal">,<sp/>rootNum);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>/Type<sp/>/Catalog<sp/>/Pages<sp/>%d<sp/>0<sp/>R&quot;</highlight><highlight class="normal">,<sp/>rootNum<sp/>+<sp/>1);<sp/></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>catDict-&gt;getLength();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>catDict-&gt;getKey(j);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Catalog&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Pages&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>0)<sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>value;<sp/>catDict-&gt;getValNF(j,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;value,<sp/>outStr,<sp/>getXRef(),<sp/>0,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>catObj.free();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>pagesObj.free();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\nendobj\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>yRef-&gt;add(rootNum<sp/>+<sp/>1,0,outStr-&gt;getPos(),gTrue);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>0<sp/>obj\n&quot;</highlight><highlight class="normal">,<sp/>rootNum<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>/Type<sp/>/Pages<sp/>/Kids<sp/>[<sp/>%d<sp/>0<sp/>R<sp/>]<sp/>/Count<sp/>1<sp/>&quot;</highlight><highlight class="normal">,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourcesObj.isDict())<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/Resources<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>writeObject(&amp;resourcesObj,<sp/>outStr,<sp/>getXRef(),<sp/>0,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>resourcesObj.free();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;endobj\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>yRef-&gt;add(rootNum<sp/>+<sp/>2,0,outStr-&gt;getPos(),gTrue);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>0<sp/>obj\n&quot;</highlight><highlight class="normal">,<sp/>rootNum<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>pageDict-&gt;getLength();<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>pageDict-&gt;getKey(n);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>value;<sp/>pageDict-&gt;getValNF(n,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Parent&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/Parent<sp/>%d<sp/>0<sp/>R&quot;</highlight><highlight class="normal">,<sp/>rootNum<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;value,<sp/>outStr,<sp/>getXRef(),<sp/>0,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;<sp/>&gt;&gt;\nendobj\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>page.free();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>Goffset<sp/>uxrefOffset<sp/>=<sp/>outStr-&gt;getPos();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>ref.num<sp/>=<sp/>rootNum;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>ref.gen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict<sp/>=<sp/>createTrailerDict(rootNum<sp/>+<sp/>3,<sp/>gFalse,<sp/>0,<sp/>&amp;ref,<sp/>getXRef(),</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name-&gt;getCString(),<sp/>uxrefOffset);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>writeXRefTableTrailer(trailerDict,<sp/>yRef,<sp/>gFalse<sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>write<sp/>unnecessary<sp/>entries<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxrefOffset,<sp/>outStr,<sp/>getXRef());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>trailerDict;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>outStr-&gt;close();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>yRef;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>countRef;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outStr;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errNone;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::saveAs(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name,<sp/>PDFWriteMode<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>fopen(name-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errOpenFile;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>outStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_out_stream" kindref="compound">FileOutStream</ref>(f,0);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>saveAs(outStr,<sp/>mode);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outStr;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::saveAs(<ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr,<sp/>PDFWriteMode<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>if<sp/>we<sp/>have<sp/>updated<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>GBool<sp/>updated<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;xref-&gt;getNumObjects();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;getEntry(i)-&gt;getFlag(XRefEntry::Updated))<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updated<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!updated<sp/>&amp;&amp;<sp/>mode<sp/>==<sp/>writeStandard)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simply<sp/>copy<sp/>the<sp/>original<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>saveWithoutChangesAs<sp/>(outStr);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>writeForceRewrite)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>saveCompleteRewrite(outStr);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>saveIncrementalUpdate(outStr);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errNone;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::saveWithoutChangesAs(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>fopen(name-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errOpenFile;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>outStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_out_stream" kindref="compound">FileOutStream</ref>(f,0);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>saveWithoutChangesAs(outStr);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outStr;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::saveWithoutChangesAs(<ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*copyStr<sp/>=<sp/>str-&gt;copy();</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>copyStr-&gt;reset();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>copyStr-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;put(c);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>copyStr-&gt;close();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>copyStr;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errNone;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::saveIncrementalUpdate<sp/>(<ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*uxref;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>original<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*copyStr<sp/>=<sp/>str-&gt;copy();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>copyStr-&gt;reset();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>copyStr-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;put(c);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>copyStr-&gt;close();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>copyStr;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>Guchar<sp/>*fileKey;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>xref-&gt;getEncryptionParameters(&amp;fileKey,<sp/>&amp;encAlgorithm,<sp/>&amp;keyLength);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>uxref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>uxref-&gt;add(0,<sp/>65535,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>xref-&gt;lock();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;xref-&gt;getNumObjects();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xref-&gt;getEntry(i)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xref-&gt;getEntry(i)-&gt;gen<sp/>==<sp/>0))<sp/></highlight><highlight class="comment">//we<sp/>skip<sp/>the<sp/>irrelevant<sp/>free<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;getEntry(i)-&gt;getFlag(XRefEntry::Updated))<sp/>{<sp/></highlight><highlight class="comment">//we<sp/>have<sp/>an<sp/>updated<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>xref-&gt;getEntry(i)-&gt;type<sp/>==<sp/>xrefEntryCompressed<sp/>?<sp/>0<sp/>:<sp/>xref-&gt;getEntry(i)-&gt;gen;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;getEntry(i)-&gt;type<sp/>!=<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xref-&gt;fetch(ref.num,<sp/>ref.gen,<sp/>&amp;obj1,<sp/>1);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>offset<sp/>=<sp/>writeObjectHeader(&amp;ref,<sp/>outStr);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj1,<sp/>outStr,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>ref.num,<sp/>ref.gen);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObjectFooter(outStr);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>offset,<sp/>gTrue);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>xref-&gt;unlock();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uxref-&gt;getNumObjects()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//we<sp/>have<sp/>nothing<sp/>to<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>uxref;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>Goffset<sp/>uxrefOffset<sp/>=<sp/>outStr-&gt;getPos();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjects<sp/>=<sp/>xref-&gt;getNumObjects();</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileNameA<sp/>=<sp/>fileName<sp/>?<sp/>fileName-&gt;getCString()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>rootRef,<sp/>uxrefStreamRef;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>rootRef.num<sp/>=<sp/>getXRef()-&gt;getRootNum();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>rootRef.gen<sp/>=<sp/>getXRef()-&gt;getRootGen();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>a<sp/>xref<sp/>stream<sp/>if<sp/>there<sp/>is<sp/>a<sp/>xref<sp/>stream<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>GBool<sp/>xRefStream<sp/>=<sp/>xref-&gt;isXRefStream();</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRefStream)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>an<sp/>entry<sp/>for<sp/>the<sp/>xref<sp/>stream<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>uxrefStreamRef.num<sp/>=<sp/>numobjects++;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>uxrefStreamRef.gen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>uxref-&gt;add(uxrefStreamRef.num,<sp/>uxrefStreamRef.gen,<sp/>uxrefOffset,<sp/>gTrue);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict<sp/>=<sp/>createTrailerDict(numobjects,<sp/>gTrue,<sp/>getStartXRef(),<sp/>&amp;rootRef,<sp/>getXRef(),<sp/>fileNameA,<sp/>uxrefOffset);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRefStream)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>writeXRefStreamTrailer(trailerDict,<sp/>uxref,<sp/>&amp;uxrefStreamRef,<sp/>uxrefOffset,<sp/>outStr,<sp/>getXRef());</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>writeXRefTableTrailer(trailerDict,<sp/>uxref,<sp/>gFalse,<sp/>uxrefOffset,<sp/>outStr,<sp/>getXRef());</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>trailerDict;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>uxref;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::saveCompleteRewrite<sp/>(<ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>special<sp/>flags<sp/>are<sp/>set,<sp/>because<sp/>we<sp/>are<sp/>going<sp/>to<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>objects,<sp/>including<sp/>Unencrypted<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>xref-&gt;scanSpecialFlags();</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>Guchar<sp/>*fileKey;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>xref-&gt;getEncryptionParameters(&amp;fileKey,<sp/>&amp;encAlgorithm,<sp/>&amp;keyLength);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%%PDF-%d.%d\r\n&quot;</highlight><highlight class="normal">,pdfMajorVersion,pdfMinorVersion);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*uxref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>uxref-&gt;add(0,<sp/>65535,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>xref-&gt;lock();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;xref-&gt;getNumObjects();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>XRefEntryType<sp/>type<sp/>=<sp/>xref-&gt;getEntry(i)-&gt;type;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>xref-&gt;getEntry(i)-&gt;gen;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>XRef<sp/>class<sp/>adds<sp/>a<sp/>lot<sp/>of<sp/>irrelevant<sp/>free<sp/>entries,<sp/>we<sp/>only<sp/>want<sp/>the<sp/>significant<sp/>one</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>we<sp/>don&apos;t<sp/>want<sp/>the<sp/>one<sp/>with<sp/>num=0<sp/>because<sp/>it<sp/>has<sp/>already<sp/>been<sp/>added<sp/>(gen<sp/>=<sp/>65535)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.gen<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>ref.num<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;getEntry(i)-&gt;getFlag(XRefEntry::DontRewrite))<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>entry<sp/>must<sp/>not<sp/>be<sp/>written,<sp/>put<sp/>a<sp/>free<sp/>entry<sp/>instead<sp/>(with<sp/>incremented<sp/>gen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>xref-&gt;getEntry(i)-&gt;gen<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>xrefEntryUncompressed){<sp/></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>xref-&gt;getEntry(i)-&gt;gen;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xref-&gt;fetch(ref.num,<sp/>ref.gen,<sp/>&amp;obj1,<sp/>1);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>offset<sp/>=<sp/>writeObjectHeader(&amp;ref,<sp/>outStr);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>unencrypted<sp/>objects<sp/>in<sp/>unencrypted<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;getEntry(i)-&gt;getFlag(XRefEntry::Unencrypted))<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj1,<sp/>outStr,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj1,<sp/>outStr,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>ref.num,<sp/>ref.gen);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObjectFooter(outStr);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>offset,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//compressed<sp/>entries<sp/>have<sp/>gen<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xref-&gt;fetch(ref.num,<sp/>ref.gen,<sp/>&amp;obj1,<sp/>1);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>offset<sp/>=<sp/>writeObjectHeader(&amp;ref,<sp/>outStr);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj1,<sp/>outStr,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>ref.num,<sp/>ref.gen);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObjectFooter(outStr);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;add(ref.num,<sp/>ref.gen,<sp/>offset,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>xref-&gt;unlock();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>Goffset<sp/>uxrefOffset<sp/>=<sp/>outStr-&gt;getPos();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>writeXRefTableTrailer(uxrefOffset,<sp/>uxref,<sp/>gTrue<sp/></highlight><highlight class="comment">/*<sp/>write<sp/>all<sp/>entries<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxref-&gt;getNumObjects(),<sp/>outStr,<sp/>gFalse<sp/></highlight><highlight class="comment">/*<sp/>complete<sp/>rewrite<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>uxref;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeDictionnary<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref>*<sp/>dict,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/>Guint<sp/>numOffset,<sp/>Guchar<sp/>*fileKey,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&lt;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dict-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>keyName(dict-&gt;getKey(i));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*keyNameToPrint<sp/>=<sp/>keyName.sanitizedName(gFalse<sp/></highlight><highlight class="comment">/*<sp/>non<sp/>ps<sp/>mode<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>keyNameToPrint-&gt;getCString());</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>keyNameToPrint;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>writeObject(dict-&gt;getValNF(i,<sp/>&amp;obj1),<sp/>outStr,<sp/>xRef,<sp/>numOffset,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;&gt;&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeStream<sp/>(<ref refid="class_stream" kindref="compound">Stream</ref>*<sp/>str,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;stream\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=str-&gt;getChar();<sp/>c!=<sp/>EOF;<sp/>c=str-&gt;getChar())<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>c);<sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;\r\nendstream\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeRawStream<sp/>(<ref refid="class_stream" kindref="compound">Stream</ref>*<sp/>str,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>str-&gt;getDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Length&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt()<sp/>&amp;&amp;<sp/>!obj1.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;PDFDoc::writeRawStream,<sp/>no<sp/>Length<sp/>in<sp/>stream<sp/>dict&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>Goffset<sp/>length;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>obj1.getInt64();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;stream\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>str-&gt;unfilteredReset();</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Goffset<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>str-&gt;getUnfilteredChar();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(c<sp/>==<sp/>EOF))<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;PDFDoc::writeRawStream:<sp/>EOF<sp/>reading<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>c);<sp/><sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;\r\nendstream\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeString<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref>*<sp/>s,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/>Guchar<sp/>*fileKey,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Encrypt<sp/>string<sp/>if<sp/>encryption<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*sEnc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileKey)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref><sp/>*enc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref>(s-&gt;getCString(),<sp/>0,<sp/>s-&gt;getLength(),<sp/>obj.initNull()),</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>sEnc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>enc-&gt;reset();</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>enc-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sEnc-&gt;append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)c);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>enc;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sEnc;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;hasUnicodeMarker())<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unicode<sp/>string<sp/>don&apos;t<sp/>necessary<sp/>end<sp/>with<sp/>\0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;s-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>unescaped<sp/>=<sp/>*(c+i)&amp;0x000000ff;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//escape<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>||<sp/>unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>unescaped);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;s-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>unescaped<sp/>=<sp/>*(c+i)&amp;0x000000ff;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//escape<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>||<sp/>unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>unescaped<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>unescaped);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sEnc;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">Goffset<sp/>PDFDoc::writeObjectHeader<sp/>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*ref,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>Goffset<sp/>offset<sp/>=<sp/>outStr-&gt;getPos();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%i<sp/>%i<sp/>obj<sp/>&quot;</highlight><highlight class="normal">,<sp/>ref-&gt;num,<sp/>ref-&gt;gen);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeObject<sp/>(<ref refid="class_object" kindref="compound">Object</ref>*<sp/>obj,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/>Guint<sp/>numOffset,<sp/>Guchar<sp/>*fileKey,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objGen)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*array;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>Goffset<sp/>tmp;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(obj-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objBool:</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getBool()?</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objInt:</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%i<sp/>&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getInt());</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objInt64:</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%lli<sp/>&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getInt64());</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objReal:</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>s;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.appendf(</highlight><highlight class="stringliteral">&quot;{0:.10g}&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getReal());</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>s.getCString());</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objString:</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeString(obj-&gt;getString(),<sp/>outStr,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objName:</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>name(obj-&gt;getName());</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameToPrint<sp/>=<sp/>name.sanitizedName(gFalse<sp/></highlight><highlight class="comment">/*<sp/>non<sp/>ps<sp/>mode<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;/%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>nameToPrint-&gt;getCString());</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>nameToPrint;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objNull:</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objArray:</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>obj-&gt;getArray();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;array-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(array-&gt;getNF(i,<sp/>&amp;obj1),<sp/>outStr,<sp/>xRef,<sp/>numOffset,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objDict:</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeDictionnary<sp/>(obj-&gt;getDict(),<sp/>outStr,<sp/>xRef,<sp/>numOffset,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objStream:<sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>can&apos;t<sp/>modify<sp/>stream<sp/>with<sp/>the<sp/>current<sp/>implementation<sp/>(no<sp/>write<sp/>functions<sp/>in<sp/>Stream<sp/>API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=&gt;<sp/>the<sp/>only<sp/>type<sp/>of<sp/>streams<sp/>which<sp/>that<sp/>have<sp/>been<sp/>modified<sp/>are<sp/>internal<sp/>streams<sp/>(=strWeird)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*stream<sp/>=<sp/>obj-&gt;getStream();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;getKind()<sp/>==<sp/>strWeird<sp/>||<sp/>stream-&gt;getKind()<sp/>==<sp/>strCrypt)<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>write<sp/>the<sp/>stream<sp/>unencoded<sp/>=&gt;<sp/>TODO:<sp/>write<sp/>stream<sp/>encoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encrypt<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref><sp/>*encStream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>removeFilter<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream-&gt;getKind()<sp/>==<sp/>strWeird<sp/>&amp;&amp;<sp/>fileKey)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>filter;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Filter&quot;</highlight><highlight class="normal">,<sp/>&amp;filter);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filter.isName(</highlight><highlight class="stringliteral">&quot;Crypt&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>filter.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>filterEle;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter.arrayGet(i,<sp/>&amp;filterEle);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterEle.isName(</highlight><highlight class="stringliteral">&quot;Crypt&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterEle.free();</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeFilter<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterEle.free();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removeFilter)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref>(stream,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream-&gt;setAutoDelete(gFalse);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>encStream;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref>(stream,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream-&gt;setAutoDelete(gFalse);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>encStream;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeFilter<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter.free();</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileKey<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Encrypt<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_encrypt_stream" kindref="compound">EncryptStream</ref>(stream,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encStream-&gt;setAutoDelete(gFalse);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>encStream;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;reset();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//recalculate<sp/>stream<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=stream-&gt;getChar();<sp/>c!=EOF;<sp/>c=stream-&gt;getChar())<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp++;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.initInt64(tmp);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getDict()-&gt;set(</highlight><highlight class="stringliteral">&quot;Length&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>Stream<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removeFilter)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getDict()-&gt;remove(</highlight><highlight class="stringliteral">&quot;Filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getDict()-&gt;remove(</highlight><highlight class="stringliteral">&quot;DecodeParms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeDictionnary<sp/>(stream-&gt;getDict(),outStr,<sp/>xRef,<sp/>numOffset,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeStream<sp/>(stream,outStr);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>encStream;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//raw<sp/>stream<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref><sp/>*fs<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stream);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*bs<sp/>=<sp/>fs-&gt;getBaseStream();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bs)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>streamEnd;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRef-&gt;getStreamEnd(bs-&gt;getStart(),<sp/>&amp;streamEnd))<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>val;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val.initInt64(streamEnd<sp/>-<sp/>bs-&gt;getStart());</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getDict()-&gt;set(</highlight><highlight class="stringliteral">&quot;Length&quot;</highlight><highlight class="normal">,<sp/>&amp;val);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeDictionnary<sp/>(stream-&gt;getDict(),<sp/>outStr,<sp/>xRef,<sp/>numOffset,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>objNum,<sp/>objGen);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeRawStream<sp/>(stream,<sp/>outStr);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objRef:</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%i<sp/>%i<sp/>R<sp/>&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>obj-&gt;getRef().gen);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objCmd:</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getCmd());</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objError:</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;error\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objEOF:</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;eof\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objNone:</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;none\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errUnimplemented,<sp/>-1,</highlight><highlight class="stringliteral">&quot;Unhandled<sp/>objType<sp/>:<sp/>{0:d},<sp/>please<sp/>report<sp/>a<sp/>bug<sp/>with<sp/>a<sp/>testcase\r\n&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;getType());</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeObjectFooter<sp/>(<ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;endobj\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*PDFDoc::createTrailerDict(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uxrefSize,<sp/>GBool<sp/>incrUpdate,<sp/>Goffset<sp/>startxRef,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*root,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/>Goffset<sp/>fileSize)</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dict" kindref="compound">Dict</ref>(xRef);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>obj1.initInt(uxrefSize);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>new<sp/>ID,<sp/>as<sp/>recommended<sp/>in<sp/>the<sp/>reference,<sp/>uses:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>current<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>file<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>values<sp/>of<sp/>entry<sp/>in<sp/>information<sp/>dictionnary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>message;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%i&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)time(NULL));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>message.append(buffer);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>message.append(fileName);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%lli&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)fileSize);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>message.append(buffer);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//info<sp/>dict<sp/>--<sp/>only<sp/>use<sp/>text<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xRef-&gt;getTrailerDict()-&gt;isNone()<sp/>&amp;&amp;<sp/>xRef-&gt;getDocInfo(&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;obj1.getDict()-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.getDict()-&gt;getVal(i,<sp/>&amp;obj2);<sp/><sp/></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isString())<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.append(obj2.getString());</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>GBool<sp/>hasEncrypt<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xRef-&gt;getTrailerDict()-&gt;isNone())<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>xRef-&gt;getTrailerDict()-&gt;dictLookupNF(</highlight><highlight class="stringliteral">&quot;Encrypt&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Encrypt&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasEncrypt<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>md5<sp/>digest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>Guchar<sp/>digest[16];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>md5((Guchar*)message.getCString(),<sp/>message.getLength(),<sp/>digest);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>obj1.initString(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)digest,<sp/>16));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>ID<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2,obj3,obj5;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>obj2.initArray(xRef);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>encrypted<sp/>files,<sp/>the<sp/>ID<sp/>must<sp/>not<sp/>be<sp/>changed<sp/>because<sp/>it&apos;s<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(incrUpdate<sp/>||<sp/>hasEncrypt)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj4;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//only<sp/>update<sp/>the<sp/>second<sp/>part<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>xRef-&gt;getTrailerDict()-&gt;getDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj4.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;PDFDoc::createTrailerDict<sp/>original<sp/>file&apos;s<sp/>ID<sp/>entry<sp/>isn&apos;t<sp/>an<sp/>array.<sp/>Trying<sp/>to<sp/>continue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj4.arrayGet(0,&amp;obj3);<sp/></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayAdd(&amp;obj3);<sp/></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayAdd(&amp;obj1);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>file<sp/>=&gt;<sp/>same<sp/>values<sp/>for<sp/>the<sp/>two<sp/>identifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayAdd(&amp;obj1);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.initString(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)digest,<sp/>16));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayAdd(&amp;obj1);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>obj1.initRef(root-&gt;num,<sp/>root-&gt;gen);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Root&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(incrUpdate)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.initInt64(startxRef);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Prev&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xRef-&gt;getTrailerDict()-&gt;isNone())<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>xRef-&gt;getDocInfoNF(&amp;obj5);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj5.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trailerDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">,<sp/>&amp;obj5);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trailerDict;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeXRefTableTrailer(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*uxref,<sp/>GBool<sp/>writeAllEntries,<sp/>Goffset<sp/>uxrefOffset,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>uxref-&gt;writeTableToFile(<sp/>outStr,<sp/>writeAllEntries<sp/>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;trailer\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>writeDictionnary(trailerDict,<sp/>outStr,<sp/>xRef,<sp/>0,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;\r\nstartxref\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;%lli\r\n&quot;</highlight><highlight class="normal">,<sp/>uxrefOffset);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;%%%%EOF\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeXRefStreamTrailer<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*trailerDict,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*uxref,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*uxrefStreamRef,<sp/>Goffset<sp/>uxrefOffset,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef)</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>stmData;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>stmData<sp/>and<sp/>some<sp/>trailerDict<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>uxref-&gt;writeStreamToBuffer(&amp;stmData,<sp/>trailerDict,<sp/>xRef);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>XRef<sp/>stream<sp/>object<sp/>and<sp/>write<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref><sp/>*mStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref>(<sp/>stmData.getCString(),<sp/>0,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stmData.getLength(),<sp/>obj1.initDict(trailerDict)<sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>writeObjectHeader(uxrefStreamRef,<sp/>outStr);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>writeObject(obj1.initStream(mStream),<sp/>outStr,<sp/>xRef,<sp/>0,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>writeObjectFooter(outStr);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;startxref\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;%lli\r\n&quot;</highlight><highlight class="normal">,<sp/>uxrefOffset);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(<sp/></highlight><highlight class="stringliteral">&quot;%%%%EOF\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeXRefTableTrailer(Goffset<sp/>uxrefOffset,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*uxref,<sp/>GBool<sp/>writeAllEntries,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uxrefSize,<sp/><ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/>GBool<sp/>incrUpdate)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileNameA<sp/>=<sp/>fileName<sp/>?<sp/>fileName-&gt;getCString()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>size<sp/>(doesn&apos;t<sp/>include<sp/>the<sp/>trailer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fileSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSize++;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>ref.num<sp/>=<sp/>getXRef()-&gt;getRootNum();</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>ref.gen<sp/>=<sp/>getXRef()-&gt;getRootGen();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*<sp/>trailerDict<sp/>=<sp/>createTrailerDict(uxrefSize,<sp/>incrUpdate,<sp/>getStartXRef(),<sp/>&amp;ref,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getXRef(),<sp/>fileNameA,<sp/>fileSize);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>writeXRefTableTrailer(trailerDict,<sp/>uxref,<sp/>writeAllEntries,<sp/>uxrefOffset,<sp/>outStr,<sp/>getXRef());</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>trailerDict;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::writeHeader(<ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>major,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minor)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%%PDF-%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>major,<sp/>minor);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%%\xE2\xE3\xCF\xD3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::markDictionnary<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref>*<sp/>dict,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*<sp/>xRef,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*countRef,<sp/>Guint<sp/>numOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldRefNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRefNum)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;dict-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>dict-&gt;getKey(i);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Annots&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markObject(dict-&gt;getValNF(i,<sp/>&amp;obj1),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>annotsObj;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;getValNF(i,<sp/>&amp;annotsObj);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!annotsObj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markAnnotations(&amp;annotsObj,<sp/>xRef,<sp/>countRef,<sp/>0,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotsObj.free();</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::markObject<sp/>(<ref refid="class_object" kindref="compound">Object</ref>*<sp/>obj,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*countRef,<sp/>Guint<sp/>numOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldRefNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRefNum)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*array;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(obj-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objArray:</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>obj-&gt;getArray();</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;array-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markObject(array-&gt;getNF(i,<sp/>&amp;obj1),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objDict:</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markDictionnary<sp/>(obj-&gt;getDict(),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objStream:<sp/></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*stream<sp/>=<sp/>obj-&gt;getStream();</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markDictionnary<sp/>(stream-&gt;getDict(),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objRef:</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>xRef-&gt;getNumObjects()<sp/>||<sp/>xRef-&gt;getEntry(obj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(obj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>marked<sp/>as<sp/>free<sp/>=&gt;<sp/>should<sp/>be<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;add(obj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>obj-&gt;getRef().gen,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(obj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;getEntry(obj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>countRef-&gt;getNumObjects()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;getEntry(obj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;add(obj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>1,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*entry<sp/>=<sp/>countRef-&gt;getEntry(obj-&gt;getRef().num<sp/>+<sp/>numOffset);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;gen++;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;gen<sp/>&gt;<sp/>9)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getXRef()-&gt;fetch(obj-&gt;getRef().num,<sp/>obj-&gt;getRef().gen,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markObject(&amp;obj1,<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::replacePageDict(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate,</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*mediaBox,<sp/></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*cropBox)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*refPage<sp/>=<sp/>getCatalog()-&gt;getPageRef(pageNo);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>page;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>getXRef()-&gt;fetch(refPage-&gt;num,<sp/>refPage-&gt;gen,<sp/>&amp;page);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*pageDict<sp/>=<sp/>page.getDict();</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;MediaBoxssdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;MediaBox&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;CropBox&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;ArtBox&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;BleedBox&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;TrimBox&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;Rotate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>mediaBoxObj;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>mediaBoxObj.initArray(getXRef());</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>murx;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>murx.initReal(mediaBox-&gt;x1);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>mury;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>mury.initReal(mediaBox-&gt;y1);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>mllx;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>mllx.initReal(mediaBox-&gt;x2);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>mlly;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>mlly.initReal(mediaBox-&gt;y2);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>mediaBoxObj.arrayAdd(&amp;murx);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>mediaBoxObj.arrayAdd(&amp;mury);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>mediaBoxObj.arrayAdd(&amp;mllx);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>mediaBoxObj.arrayAdd(&amp;mlly);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>pageDict-&gt;add(copyString(</highlight><highlight class="stringliteral">&quot;MediaBox&quot;</highlight><highlight class="normal">),<sp/>&amp;mediaBoxObj);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cropBox<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>cropBoxObj;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.initArray(getXRef());</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>curx;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>curx.initReal(cropBox-&gt;x1);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>cury;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>cury.initReal(cropBox-&gt;y1);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>cllx;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>cllx.initReal(cropBox-&gt;x2);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>clly;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>clly.initReal(cropBox-&gt;y2);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.arrayAdd(&amp;curx);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.arrayAdd(&amp;cury);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.arrayAdd(&amp;cllx);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.arrayAdd(&amp;clly);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>pageDict-&gt;add(copyString(</highlight><highlight class="stringliteral">&quot;CropBox&quot;</highlight><highlight class="normal">),<sp/>&amp;cropBoxObj);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>cropBoxObj.getArray()-&gt;incRef();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>pageDict-&gt;add(copyString(</highlight><highlight class="stringliteral">&quot;TrimBox&quot;</highlight><highlight class="normal">),<sp/>&amp;cropBoxObj);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>mediaBoxObj.getArray()-&gt;incRef();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>pageDict-&gt;add(copyString(</highlight><highlight class="stringliteral">&quot;TrimBox&quot;</highlight><highlight class="normal">),<sp/>&amp;mediaBoxObj);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>rotateObj;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>rotateObj.initInt(rotate);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>pageDict-&gt;add(copyString(</highlight><highlight class="stringliteral">&quot;Rotate&quot;</highlight><highlight class="normal">),<sp/>&amp;rotateObj);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>getXRef()-&gt;setModifiedObject(&amp;page,<sp/>*refPage);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>page.free();</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::markPageObjects(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*pageDict,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*countRef,<sp/>Guint<sp/>numOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldRefNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRefNum)<sp/></highlight></codeline>
<codeline lineno="1633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;OpenAction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;Outlines&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>pageDict-&gt;remove(</highlight><highlight class="stringliteral">&quot;StructTreeRoot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>pageDict-&gt;getLength();<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>pageDict-&gt;getKey(n);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>value;<sp/>pageDict-&gt;getValNF(n,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Parent&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Pages&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;AcroForm&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Annots&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;Root&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markObject(&amp;value,<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal">GBool<sp/>PDFDoc::markAnnotations(<ref refid="class_object" kindref="compound">Object</ref><sp/>*annotsObj,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*countRef,<sp/>Guint<sp/>numOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldPageNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newPageNum)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>annots;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>GBool<sp/>modified<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>annotsObj-&gt;fetch(getXRef(),<sp/>&amp;annots);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annots.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*array<sp/>=<sp/>annots.getArray();</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=array-&gt;getLength()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array-&gt;get(i,<sp/>&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>type;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict<sp/>=<sp/>obj1.getDict();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/>&amp;type);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.isName()<sp/>&amp;&amp;<sp/>strcmp(type.getName(),<sp/></highlight><highlight class="stringliteral">&quot;Annot&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.getRef().num<sp/>==<sp/>oldPageNum)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj3;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array-&gt;getNF(i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.isRef())<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*newRef<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref>();</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRef-&gt;initRef(newPageNum,<sp/>0);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;set(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/>newRef);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getXRef()-&gt;setModifiedObject(&amp;obj1,<sp/>obj3.getRef());</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.getRef().num<sp/>==<sp/>newPageNum)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.free();</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>page;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getXRef()-&gt;fetch(obj2.getRef().num,<sp/>obj2.getRef().gen,<sp/>&amp;page);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>pagetype;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict<sp/>=<sp/>page.getDict();</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/>&amp;pagetype);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pagetype.isName()<sp/>||<sp/>strcmp(pagetype.getName(),<sp/></highlight><highlight class="stringliteral">&quot;Page&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.free();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page.free();</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pagetype.free();</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pagetype.free();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page.free();</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.free();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array-&gt;remove(i);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modified<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.free();</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markPageObjects(dict,<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldPageNum,<sp/>newPageNum);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array-&gt;getNF(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isRef())<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>xRef-&gt;getNumObjects()<sp/>||<sp/>xRef-&gt;getEntry(obj1.getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(obj1.getRef().num)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>marked<sp/>as<sp/>free<sp/>=&gt;<sp/>should<sp/>be<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;add(obj1.getRef().num<sp/>+<sp/>numOffset,<sp/>obj1.getRef().gen,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(obj1.getRef().num)-&gt;type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;getEntry(obj1.getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>countRef-&gt;getNumObjects()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;getEntry(obj1.getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;add(obj1.getRef().num<sp/>+<sp/>numOffset,<sp/>1,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*entry<sp/>=<sp/>countRef-&gt;getEntry(obj1.getRef().num<sp/>+<sp/>numOffset);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;gen++;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annotsObj-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annotsObj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>xRef-&gt;getNumObjects()<sp/>||<sp/>xRef-&gt;getEntry(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(annotsObj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modified;<sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>marked<sp/>as<sp/>free<sp/>=&gt;<sp/>should<sp/>be<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;add(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>annotsObj-&gt;getRef().gen,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(annotsObj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;getEntry(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annotsObj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>countRef-&gt;getNumObjects()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;getEntry(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;add(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>1,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*entry<sp/>=<sp/>countRef-&gt;getEntry(annotsObj-&gt;getRef().num<sp/>+<sp/>numOffset);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;gen++;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>getXRef()-&gt;setModifiedObject(&amp;annots,<sp/>annotsObj-&gt;getRef());</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>annots.free();</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modified;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDFDoc::markAcroForm(<ref refid="class_object" kindref="compound">Object</ref><sp/>*afObj,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*countRef,<sp/>Guint<sp/>numOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldRefNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRefNum)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>acroform;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>GBool<sp/>modified<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>afObj-&gt;fetch(getXRef(),<sp/>&amp;acroform);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acroform.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict<sp/>=<sp/>acroform.getDict();</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>dict-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(dict-&gt;getKey(i),<sp/></highlight><highlight class="stringliteral">&quot;Fields&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>fields;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modified<sp/>=<sp/>markAnnotations(dict-&gt;getValNF(i,<sp/>&amp;fields),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields.free();</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markObject(dict-&gt;getValNF(i,<sp/>&amp;obj),<sp/>xRef,<sp/>countRef,<sp/>numOffset,<sp/>oldRefNum,<sp/>newRefNum);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afObj-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afObj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>xRef-&gt;getNumObjects()<sp/>||<sp/>xRef-&gt;getEntry(afObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(afObj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>marked<sp/>as<sp/>free<sp/>=&gt;<sp/>should<sp/>be<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;add(afObj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>afObj-&gt;getRef().gen,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getXRef()-&gt;getEntry(afObj-&gt;getRef().num)-&gt;type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;getEntry(afObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afObj-&gt;getRef().num<sp/>+<sp/>(int)<sp/>numOffset<sp/>&gt;=<sp/>countRef-&gt;getNumObjects()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;getEntry(afObj-&gt;getRef().num<sp/>+<sp/>numOffset)-&gt;type<sp/>==<sp/>xrefEntryFree)</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>countRef-&gt;add(afObj-&gt;getRef().num<sp/>+<sp/>numOffset,<sp/>1,<sp/>0,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*entry<sp/>=<sp/>countRef-&gt;getEntry(afObj-&gt;getRef().num<sp/>+<sp/>numOffset);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;gen++;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modified){</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getXRef()-&gt;setModifiedObject(&amp;acroform,<sp/>afObj-&gt;getRef());</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>acroform.free();</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal">Guint<sp/>PDFDoc::writePageObjects(<ref refid="class_out_stream" kindref="compound">OutStream</ref><sp/>*outStr,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xRef,<sp/>Guint<sp/>numOffset,<sp/>GBool<sp/>combine)<sp/></highlight></codeline>
<codeline lineno="1807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>Guint<sp/>objectsCount<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//count<sp/>the<sp/>number<sp/>of<sp/>objects<sp/>in<sp/>the<sp/>XRef(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>Guchar<sp/>*fileKey;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>CryptAlgorithm<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>xRef-&gt;getEncryptionParameters(&amp;fileKey,<sp/>&amp;encAlgorithm,<sp/>&amp;keyLength);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>numOffset;<sp/>n<sp/>&lt;<sp/>xRef-&gt;getNumObjects();<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRef-&gt;getEntry(n)-&gt;type<sp/>!=<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.num<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.gen<sp/>=<sp/>xRef-&gt;getEntry(n)-&gt;gen;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objectsCount++;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getXRef()-&gt;fetch(ref.num<sp/>-<sp/>numOffset,<sp/>ref.gen,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Goffset<sp/>offset<sp/>=<sp/>writeObjectHeader(&amp;ref,<sp/>outStr);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(combine)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj,<sp/>outStr,<sp/>getXRef(),<sp/>numOffset,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRef-&gt;getEntry(n)-&gt;getFlag(XRefEntry::Unencrypted))<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj,<sp/>outStr,<sp/>NULL,<sp/>cryptRC4,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeObject(&amp;obj,<sp/>outStr,<sp/>fileKey,<sp/>encAlgorithm,<sp/>keyLength,<sp/>ref.num,<sp/>ref.gen);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeObjectFooter(outStr);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRef-&gt;add(ref.num,<sp/>ref.gen,<sp/>offset,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objectsCount;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_OUTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><ref refid="class_outline" kindref="compound">Outline</ref><sp/>*PDFDoc::getOutline()</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!outline)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>pdfdocLocker();</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>outline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>outline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_outline" kindref="compound">Outline</ref>(catalog-&gt;getOutline(),<sp/>xref);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outline;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*PDFDoc::ErrorPDFDoc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorCode,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileNameA)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref>();</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>doc-&gt;errCode<sp/>=<sp/>errorCode;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>doc-&gt;fileName<sp/>=<sp/>fileNameA;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doc;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PDFDoc::strToLongLong(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x,<sp/>d;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>s;<sp/>*p<sp/>&amp;&amp;<sp/>isdigit(*p<sp/>&amp;<sp/>0xff);<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>*p<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>(LLONG_MAX<sp/>-<sp/>d)<sp/>/<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>10<sp/>*<sp/>x<sp/>+<sp/>d;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>&apos;startxref&apos;<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal">Goffset<sp/>PDFDoc::getStartXRef(GBool<sp/>tryingToReconstruct)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startXRefPos<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLinearized(tryingToReconstruct))<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[linearizationSearchSize+1];</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;setPos(0);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>linearizationSearchSize;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>end<sp/>of<sp/>first<sp/>obj<sp/>(linearization<sp/>dictionary)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startXRefPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(</highlight><highlight class="stringliteral">&quot;endobj&quot;</highlight><highlight class="normal">,<sp/>&amp;buf[i],<sp/>6))<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//skip<sp/>whitespace<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buf[i]<sp/>&amp;&amp;<sp/>Lexer::isSpace(buf[i]))<sp/>++i;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startXRefPos<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[xrefSearchSize+1];</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>last<sp/>xrefSearchSize<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segnum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxXRefSearch<sp/>=<sp/>24576;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;getLength()<sp/>&lt;<sp/>maxXRefSearch)<sp/>maxXRefSearch<sp/>=<sp/>str-&gt;getLength();</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>(xrefSearchSize<sp/>-<sp/>16)<sp/>*<sp/>segnum<sp/>&lt;<sp/>maxXRefSearch;<sp/>segnum++)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;setPos((xrefSearchSize<sp/>-<sp/>16)<sp/>*<sp/>segnum<sp/>+<sp/>xrefSearchSize,<sp/>-1);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>xrefSearchSize;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>startxref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>n<sp/>-<sp/>9;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(&amp;buf[i],<sp/></highlight><highlight class="stringliteral">&quot;startxref&quot;</highlight><highlight class="normal">,<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startXRefPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>&amp;buf[i<sp/>+<sp/>9];<sp/>isspace(*p);<sp/>++p);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startXRefPos<sp/>=<sp/>strToLongLong(p);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startXRefPos;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal">Goffset<sp/>PDFDoc::getMainXRefEntriesOffset(GBool<sp/>tryingToReconstruct)</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>Guint<sp/>mainXRefEntriesOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLinearized(tryingToReconstruct))<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>mainXRefEntriesOffset<sp/>=<sp/>getLinearization()-&gt;getMainXRefEntriesOffset();</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mainXRefEntriesOffset;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDFDoc::getNumPages()</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLinearized())<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>getLinearization()-&gt;getNumPages()))<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>catalog-&gt;getNumPages();</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><ref refid="class_page" kindref="compound">Page</ref><sp/>*PDFDoc::parsePage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>pageRef;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*pageDict;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>pageRef.num<sp/>=<sp/>getHints()-&gt;getPageObjectNum(page);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pageRef.num)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>object<sp/>num<sp/>from<sp/>hint<sp/>tables<sp/>for<sp/>page<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>page);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>bogus<sp/>ref<sp/>-<sp/>this<sp/>can<sp/>happen<sp/>in<sp/>corrupted<sp/>PDF<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageRef.num<sp/>&lt;<sp/>0<sp/>||<sp/>pageRef.num<sp/>&gt;=<sp/>xref-&gt;getNumObjects())<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>object<sp/>num<sp/>({0:d})<sp/>for<sp/>page<sp/>{1:d}&quot;</highlight><highlight class="normal">,<sp/>pageRef.num,<sp/>page);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>pageRef.gen<sp/>=<sp/>xref-&gt;getEntry(pageRef.num)-&gt;gen;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>xref-&gt;fetch(pageRef.num,<sp/>pageRef.gen,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isDict(</highlight><highlight class="stringliteral">&quot;Page&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>({0:d}<sp/>{1:d})<sp/>is<sp/>not<sp/>a<sp/>pageDict&quot;</highlight><highlight class="normal">,<sp/>pageRef.num,<sp/>pageRef.gen);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>pageDict<sp/>=<sp/>obj.getDict();</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_page" kindref="compound">Page</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>page,<sp/>pageDict,<sp/>pageRef,</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_page_attrs" kindref="compound">PageAttrs</ref>(NULL,<sp/>pageDict),<sp/>catalog-&gt;getForm());</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><ref refid="class_page" kindref="compound">Page</ref><sp/>*PDFDoc::getPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((page<sp/>&lt;<sp/>1)<sp/>||<sp/>page<sp/>&gt;<sp/>getNumPages())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLinearized()<sp/>&amp;&amp;<sp/>checkLinearization())<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>pdfdocLocker();</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pageCache)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pageCache<sp/>=<sp/>(<ref refid="class_page" kindref="compound">Page</ref><sp/>**)<sp/>gmallocn(getNumPages(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_page" kindref="compound">Page</ref><sp/>*));</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>getNumPages();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pageCache[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pageCache[page-1])<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pageCache[page-1]<sp/>=<sp/>parsePage(page);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageCache[page-1])<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageCache[page-1];</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>parsing<sp/>page<sp/>{0:d}<sp/>using<sp/>hint<sp/>tables&quot;</highlight><highlight class="normal">,<sp/>page);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>catalog-&gt;getPage(page);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/PDFDoc.cc"/>
  </compounddef>
</doxygen>
