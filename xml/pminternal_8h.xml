<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pminternal_8h" kind="file" language="C++">
    <compoundname>pminternal.h</compoundname>
    <includedby refid="pmutil_8c" local="yes">thirdparty/portmidi/pm_common/pmutil.c</includedby>
    <includedby refid="portmidi_8c" local="yes">thirdparty/portmidi/pm_common/portmidi.c</includedby>
    <includedby refid="pmmac_8c" local="yes">thirdparty/portmidi/pm_mac/pmmac.c</includedby>
    <includedby refid="pmmacosxcm_8c" local="yes">thirdparty/portmidi/pm_mac/pmmacosxcm.c</includedby>
    <includedby refid="pmwin_8c" local="yes">thirdparty/portmidi/pm_win/pmwin.c</includedby>
    <includedby refid="pmwinmm_8c" local="yes">thirdparty/portmidi/pm_win/pmwinmm.c</includedby>
    <invincdepgraph>
      <node id="92890">
        <label>thirdparty/portmidi/pm_mac/pmmac.c</label>
        <link refid="pmmac_8c_source"/>
      </node>
      <node id="92887">
        <label>thirdparty/portmidi/pm_common/pminternal.h</label>
        <link refid="pminternal_8h"/>
        <childnode refid="92888" relation="include">
        </childnode>
        <childnode refid="92889" relation="include">
        </childnode>
        <childnode refid="92890" relation="include">
        </childnode>
        <childnode refid="92891" relation="include">
        </childnode>
        <childnode refid="92892" relation="include">
        </childnode>
        <childnode refid="92893" relation="include">
        </childnode>
      </node>
      <node id="92889">
        <label>thirdparty/portmidi/pm_common/portmidi.c</label>
        <link refid="portmidi_8c_source"/>
      </node>
      <node id="92892">
        <label>thirdparty/portmidi/pm_win/pmwin.c</label>
        <link refid="pmwin_8c_source"/>
      </node>
      <node id="92891">
        <label>thirdparty/portmidi/pm_mac/pmmacosxcm.c</label>
        <link refid="pmmacosxcm_8c_source"/>
      </node>
      <node id="92888">
        <label>thirdparty/portmidi/pm_common/pmutil.c</label>
        <link refid="pmutil_8c_source"/>
      </node>
      <node id="92893">
        <label>thirdparty/portmidi/pm_win/pmwinmm.c</label>
        <link refid="pmwinmm_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structpm__fns__node" prot="public">pm_fns_node</innerclass>
    <innerclass refid="structdescriptor__node" prot="public">descriptor_node</innerclass>
    <innerclass refid="structpm__internal__struct" prot="public">pm_internal_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pminternal_8h_1a1381cf29da7767a1db6c268b7941a6f8" prot="public" static="no">
        <name>none_write_flush</name>
        <initializer>pm_fail_timestamp_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="164" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pminternal_8h_1ac44b30c88f5076903c62f9e8fc8c51ec" prot="public" static="no">
        <name>none_sysex</name>
        <initializer>pm_fail_timestamp_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="165" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pminternal_8h_1a7b782f381e349f7b220b925bcdf9c9c1" prot="public" static="no">
        <name>none_poll</name>
        <initializer>pm_fail_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="166" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pminternal_8h_1a82b255eb9e5a1098698166fd974ce265" prot="public" static="no">
        <name>success_poll</name>
        <initializer>pm_success_fn</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="167" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pminternal_8h_1a0436dc8bd66c8c8e58a68b8b3817073d" prot="public" static="no">
        <name>MIDI_REALTIME_MASK</name>
        <initializer>0xf8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="169" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pminternal_8h_1a2f568a0e90e538fe251a2a2fcc1004ec" prot="public" static="no">
        <name>is_real_time</name>
        <param><defname>msg</defname></param>
        <initializer>((Pm_MessageStatus(msg) &amp; MIDI_REALTIME_MASK) == MIDI_REALTIME_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="170" column="9" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pminternal_8h_1ae52df9847c472f718020fed71a94b6cb" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_write_short_fn) (struct pm_internal_struct *midi, PmEvent *buffer)</definition>
        <argsstring>)(struct pm_internal_struct *midi, PmEvent *buffer)</argsstring>
        <name>pm_write_short_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="37" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a3b94c86f5a6c5544d1c037e707a557ff" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_begin_sysex_fn) (struct pm_internal_struct *midi, PmTimestamp timestamp)</definition>
        <argsstring>)(struct pm_internal_struct *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_begin_sysex_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="39" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1af061c571def6637fac1fb2457a9f9f9d" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_end_sysex_fn) (struct pm_internal_struct *midi, PmTimestamp timestamp)</definition>
        <argsstring>)(struct pm_internal_struct *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_end_sysex_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="41" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a86b7abf2ae0e75bbda37777ce113db4a" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_write_byte_fn) (struct pm_internal_struct *midi, unsigned char byte, PmTimestamp timestamp)</definition>
        <argsstring>)(struct pm_internal_struct *midi, unsigned char byte, PmTimestamp timestamp)</argsstring>
        <name>pm_write_byte_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="43" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1ac4d27282ee15bbb9b80782f6012831bf" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_write_realtime_fn) (struct pm_internal_struct *midi, PmEvent *buffer)</definition>
        <argsstring>)(struct pm_internal_struct *midi, PmEvent *buffer)</argsstring>
        <name>pm_write_realtime_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="45" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a701f5f85e2e3302183c8c8dd880660c6" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_write_flush_fn) (struct pm_internal_struct *midi, PmTimestamp timestamp)</definition>
        <argsstring>)(struct pm_internal_struct *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_write_flush_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="47" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a0447341c59b5ba1646366f317b97c084" prot="public" static="no">
        <type>PmTimestamp(*</type>
        <definition>typedef PmTimestamp(* pm_synchronize_fn) (struct pm_internal_struct *midi)</definition>
        <argsstring>)(struct pm_internal_struct *midi)</argsstring>
        <name>pm_synchronize_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="49" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1abd2d46d3317d479f2677a05ec42fa77c" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_open_fn) (struct pm_internal_struct *midi, void *driverInfo)</definition>
        <argsstring>)(struct pm_internal_struct *midi, void *driverInfo)</argsstring>
        <name>pm_open_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="52" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a571c70ad6d36484c088626ea13b8f21f" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_abort_fn) (struct pm_internal_struct *midi)</definition>
        <argsstring>)(struct pm_internal_struct *midi)</argsstring>
        <name>pm_abort_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="54" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a75f26c4833f753c3cd1129c8d27e2d7b" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_close_fn) (struct pm_internal_struct *midi)</definition>
        <argsstring>)(struct pm_internal_struct *midi)</argsstring>
        <name>pm_close_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="57" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a5781c403b3991ebb3e4e4ea896c4fcec" prot="public" static="no">
        <type>PmError(*</type>
        <definition>typedef PmError(* pm_poll_fn) (struct pm_internal_struct *midi)</definition>
        <argsstring>)(struct pm_internal_struct *midi)</argsstring>
        <name>pm_poll_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="58" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a9c36180379b92d20beae06288900a1fd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* pm_host_error_fn) (struct pm_internal_struct *midi, char *msg, unsigned int len)</definition>
        <argsstring>)(struct pm_internal_struct *midi, char *msg, unsigned int len)</argsstring>
        <name>pm_host_error_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="59" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a910e69310618400e71d581f0865194f2" prot="public" static="no">
        <type>unsigned int(*</type>
        <definition>typedef unsigned int(* pm_has_host_error_fn) (struct pm_internal_struct *midi)</definition>
        <argsstring>)(struct pm_internal_struct *midi)</argsstring>
        <name>pm_has_host_error_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="61" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a28b39bba2919ba7ccbe1bfa11443465b" prot="public" static="no">
        <type>struct <ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref> *</type>
        <definition>typedef  struct pm_fns_node * pm_fns_type</definition>
        <argsstring></argsstring>
        <name>pm_fns_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a29d5a895f53cf98108afbfd7379edbb1" prot="public" static="no">
        <type>struct <ref refid="structdescriptor__node" kindref="compound">descriptor_node</ref> *</type>
        <definition>typedef  struct descriptor_node * descriptor_type</definition>
        <argsstring></argsstring>
        <name>descriptor_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1a377d4c3126da957ed68d4d1404bee668" prot="public" static="no">
        <type>unsigned long(*</type>
        <definition>typedef unsigned long(* time_get_proc_type) (void *time_info)</definition>
        <argsstring>)(void *time_info)</argsstring>
        <name>time_get_proc_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="98" column="1" bodyfile="thirdparty/portmidi/pm_common/pminternal.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pminternal_8h_1acb48fe118f5feaf74bc314943658b733" prot="public" static="no">
        <type>struct <ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref></type>
        <definition>typedef struct pm_internal_struct  PmInternal</definition>
        <argsstring></argsstring>
        <name>PmInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pminternal_8h_1ad503ee62c76e6fe2beef957f0fe53488" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_initialized</definition>
        <argsstring></argsstring>
        <name>pm_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="24" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1af455cd83ef19eb07a7996c38dd806ee4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_hosterror</definition>
        <argsstring></argsstring>
        <name>pm_hosterror</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="31" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1ac24a8881f0ef8c3a944349bee479cf05" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char pm_hosterror_text[PM_HOST_ERROR_MSG_LEN]</definition>
        <argsstring>[PM_HOST_ERROR_MSG_LEN]</argsstring>
        <name>pm_hosterror_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="32" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1a8b038edc211455d61f88e5f9c7773496" prot="public" static="no" mutable="no">
        <type><ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref></type>
        <definition>pm_fns_node pm_none_dictionary</definition>
        <argsstring></argsstring>
        <name>pm_none_dictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="83" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1a9ffc95d4de3ed10d1efcac1d79e39f11" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_descriptor_max</definition>
        <argsstring></argsstring>
        <name>pm_descriptor_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="94" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1a8a86f0e79d5794e79c94c3f380a7088c" prot="public" static="no" mutable="no">
        <type><ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref></type>
        <definition>descriptor_type descriptors</definition>
        <argsstring></argsstring>
        <name>descriptors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="95" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pminternal_8h_1abf37b57cc544c04b6d27cf33a02b473f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pm_descriptor_index</definition>
        <argsstring></argsstring>
        <name>pm_descriptor_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="96" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pminternal_8h_1a5e0011f472e9c71efa58816f628eed08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* pm_alloc</definition>
        <argsstring>(size_t s)</argsstring>
        <name>pm_alloc</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="27" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a9ce0079220419af65fc4a78af8d422f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>pm_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="28" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a2f05280c58e66ae51481d75ed4f7c97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_init</definition>
        <argsstring>(void)</argsstring>
        <name>pm_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="146" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="21" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1ae37207f7de0c907cc3eb8f837e91b9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_term</definition>
        <argsstring>(void)</argsstring>
        <name>pm_term</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="147" column="1" bodyfile="thirdparty/portmidi/pm_mac/pmmac.c" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a841d04eb4d4efa3eebfc4e718cf9faa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError none_write_short</definition>
        <argsstring>(PmInternal *midi, PmEvent *buffer)</argsstring>
        <name>none_write_short</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="150" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a2181992bfdc1d719bdd96353763965d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError none_write_byte</definition>
        <argsstring>(PmInternal *midi, unsigned char byte, PmTimestamp timestamp)</argsstring>
        <name>none_write_byte</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="151" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a9128319a3c3cb967bdde782ae9c5c4ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmTimestamp</type>
        <definition>PmTimestamp none_synchronize</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>none_synchronize</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="153" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1aeeae549047bfcfbbe3eff9f3857ff77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_fail_fn</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>pm_fail_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="155" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a36fcdf715926bc285b87c92005c04523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_fail_timestamp_fn</definition>
        <argsstring>(PmInternal *midi, PmTimestamp timestamp)</argsstring>
        <name>pm_fail_timestamp_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="156" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1afe35490233517557ab6ce2a63008c7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_success_fn</definition>
        <argsstring>(PmInternal *midi)</argsstring>
        <name>pm_success_fn</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="157" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a8c66dfe796fb47b3f2a4a195a0529249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PmError</type>
        <definition>PmError pm_add_device</definition>
        <argsstring>(char *interf, char *name, int input, void *descriptor, pm_fns_type dictionary)</argsstring>
        <name>pm_add_device</name>
        <param>
          <type>char *</type>
          <declname>interf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type><ref refid="structpm__fns__node" kindref="compound">pm_fns_type</ref></type>
          <declname>dictionary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="158" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="97" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a5c1f297be147db435e3a524e4d402699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int pm_read_bytes</definition>
        <argsstring>(PmInternal *midi, unsigned char *data, int len, PmTimestamp timestamp)</argsstring>
        <name>pm_read_bytes</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>PmTimestamp</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="160" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="1006" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="pminternal_8h_1a11a153e33a42b3f20df33394ce241005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_read_short</definition>
        <argsstring>(PmInternal *midi, PmEvent *event)</argsstring>
        <name>pm_read_short</name>
        <param>
          <type><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref> *</type>
          <declname>midi</declname>
        </param>
        <param>
          <type><ref refid="struct_pm_event" kindref="compound">PmEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/portmidi/pm_common/pminternal.h" line="162" column="1" bodyfile="thirdparty/portmidi/pm_common/portmidi.c" bodystart="966" bodyend="1000"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>pminternal.h<sp/>--<sp/>header<sp/>for<sp/>interface<sp/>implementations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>file<sp/>is<sp/>included<sp/>by<sp/>files<sp/>that<sp/>implement<sp/>library<sp/>internals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Here<sp/>is<sp/>a<sp/>guide<sp/>to<sp/>implementers:</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>provide<sp/>an<sp/>initialization<sp/>function<sp/>similar<sp/>to<sp/>pm_winmm_init()</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>add<sp/>your<sp/>initialization<sp/>function<sp/>to<sp/>pm_init()</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>your<sp/>init<sp/>function<sp/>should<sp/>never<sp/>require<sp/>not-standard</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>libraries<sp/>or<sp/>fail<sp/>in<sp/>any<sp/>way.<sp/>If<sp/>the<sp/>interface<sp/>is<sp/>not<sp/>available,</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simply<sp/>do<sp/>not<sp/>call<sp/>pm_add_device.<sp/>This<sp/>means<sp/>that<sp/>non-standard</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>libraries<sp/>should<sp/>try<sp/>to<sp/>do<sp/>dynamic<sp/>linking<sp/>at<sp/>runtime<sp/>using<sp/>a<sp/>DLL</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>return<sp/>without<sp/>error<sp/>if<sp/>the<sp/>DLL<sp/>cannot<sp/>be<sp/>found<sp/>or<sp/>if<sp/>there</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>any<sp/>other<sp/>failure.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>implement<sp/>functions<sp/>as<sp/>indicated<sp/>in<sp/>pm_fns_type<sp/>to<sp/>open,<sp/>read,<sp/>write,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close,<sp/>etc.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>call<sp/>pm_add_device()<sp/>for<sp/>each<sp/>input<sp/>and<sp/>output<sp/>device,<sp/>passing<sp/>it<sp/>a</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_fns_type<sp/>structure.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>assumptions<sp/>about<sp/>pm_fns_type<sp/>functions<sp/>are<sp/>given<sp/>below.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_initialized;<sp/></highlight><highlight class="comment">/*<sp/>see<sp/>note<sp/>in<sp/>portmidi.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>defined<sp/>in<sp/>system-specific<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pm_alloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>opening<sp/>or<sp/>closing<sp/>a<sp/>midi<sp/>stream,<sp/>set<sp/>these:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_hosterror;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pm_hosterror_text[PM_HOST_ERROR_MSG_LEN];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>these<sp/>do<sp/>not<sp/>use<sp/>PmInternal<sp/>because<sp/>it<sp/>is<sp/>not<sp/>defined<sp/>yet...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_write_short_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_begin_sysex_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_end_sysex_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_write_byte_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte,<sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_write_realtime_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_write_flush_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmTimestamp<sp/>(*pm_synchronize_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_open_fn<sp/>should<sp/>clean<sp/>up<sp/>all<sp/>memory<sp/>and<sp/>close<sp/>the<sp/>device<sp/>if<sp/>any<sp/>part</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>open<sp/>fails<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_open_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*driverInfo);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_abort_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pm_close_fn<sp/>should<sp/>clean<sp/>up<sp/>all<sp/>memory<sp/>and<sp/>close<sp/>the<sp/>device<sp/>if<sp/>any</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>close<sp/>fails.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_close_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PmError<sp/>(*pm_poll_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*pm_host_error_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>msg,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*pm_has_host_error_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structpm__fns__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_write_short_fn<sp/>write_short;<sp/></highlight><highlight class="comment">/*<sp/>output<sp/>short<sp/>MIDI<sp/>msg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_begin_sysex_fn<sp/>begin_sysex;<sp/></highlight><highlight class="comment">/*<sp/>prepare<sp/>to<sp/>send<sp/>a<sp/>sysex<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_end_sysex_fn<sp/>end_sysex;<sp/></highlight><highlight class="comment">/*<sp/>marks<sp/>end<sp/>of<sp/>sysex<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_write_byte_fn<sp/>write_byte;<sp/></highlight><highlight class="comment">/*<sp/>accumulate<sp/>one<sp/>more<sp/>sysex<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_write_realtime_fn<sp/>write_realtime;<sp/></highlight><highlight class="comment">/*<sp/>send<sp/>real-time<sp/>message<sp/>within<sp/>sysex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_write_flush_fn<sp/>write_flush;<sp/></highlight><highlight class="comment">/*<sp/>send<sp/>any<sp/>accumulated<sp/>but<sp/>unsent<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_synchronize_fn<sp/>synchronize;<sp/></highlight><highlight class="comment">/*<sp/>synchronize<sp/>portmidi<sp/>time<sp/>to<sp/>stream<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_open_fn<sp/>open;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>open<sp/>MIDI<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_abort_fn<sp/>abort;<sp/></highlight><highlight class="comment">/*<sp/>abort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_close_fn<sp/>close;<sp/></highlight><highlight class="comment">/*<sp/>close<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_poll_fn<sp/>poll;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>pending<sp/>midi<sp/>events<sp/>into<sp/>portmidi<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_has_host_error_fn<sp/>has_host_error;<sp/></highlight><highlight class="comment">/*<sp/>true<sp/>when<sp/>device<sp/>has<sp/>had<sp/>host<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_host_error_fn<sp/>host_error;<sp/></highlight><highlight class="comment">/*<sp/>provide<sp/>text<sp/>readable<sp/>host<sp/>error<sp/>message</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>device<sp/>(clears<sp/>and<sp/>resets)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/><ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref>,<sp/>*<ref refid="structpm__fns__node" kindref="compound">pm_fns_type</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>when<sp/>open<sp/>fails,<sp/>the<sp/>dictionary<sp/>gets<sp/>this<sp/>set<sp/>of<sp/>functions:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structpm__fns__node" kindref="compound">pm_fns_node</ref><sp/>pm_none_dictionary;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structdescriptor__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pm_device_info" kindref="compound">PmDeviceInfo</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>some<sp/>portmidi<sp/>state<sp/>also<sp/>saved<sp/>in<sp/>here<sp/>(for<sp/>autmatic</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device<sp/>closing<sp/>(see<sp/>PmDeviceInfo<sp/>struct)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*descriptor;<sp/></highlight><highlight class="comment">/*<sp/>ID<sp/>number<sp/>passed<sp/>to<sp/>win32<sp/>multimedia<sp/>API<sp/>open<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*internalDescriptor;<sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>PmInternal<sp/>device,<sp/>allows<sp/>automatic<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device<sp/>closing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_fns_type<sp/>dictionary;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><ref refid="structdescriptor__node" kindref="compound">descriptor_node</ref>,<sp/>*<ref refid="structdescriptor__node" kindref="compound">descriptor_type</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_descriptor_max;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>descriptor_type<sp/>descriptors;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_descriptor_index;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long<sp/>(*time_get_proc_type)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="structpm__internal__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__internal__struct" kindref="compound">pm_internal_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_id;<sp/></highlight><highlight class="comment">/*<sp/>which<sp/>device<sp/>is<sp/>open<sp/>(index<sp/>to<sp/>descriptors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>write_flag;<sp/></highlight><highlight class="comment">/*<sp/>MIDI_IN,<sp/>or<sp/>MIDI_OUT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>PmTimeProcPtr<sp/>time_proc;<sp/></highlight><highlight class="comment">/*<sp/>where<sp/>to<sp/>get<sp/>the<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_info;<sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>this<sp/>to<sp/>get_time()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buffer_len;<sp/></highlight><highlight class="comment">/*<sp/>how<sp/>big<sp/>is<sp/>the<sp/>buffer<sp/>or<sp/>queue?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>PmQueue<sp/>*queue;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>latency;<sp/></highlight><highlight class="comment">/*<sp/>time<sp/>delay<sp/>in<sp/>ms<sp/>between<sp/>timestamps<sp/>and<sp/>actual<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>to<sp/>zero<sp/>to<sp/>get<sp/>immediate,<sp/>simple<sp/>blocking<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>latency<sp/>is<sp/>zero,<sp/>timestamps<sp/>will<sp/>be<sp/>ignored;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>midi<sp/>input<sp/>device,<sp/>this<sp/>field<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sysex_in_progress;<sp/></highlight><highlight class="comment">/*<sp/>when<sp/>sysex<sp/>status<sp/>is<sp/>seen,<sp/>this<sp/>flag<sp/>becomes</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>true<sp/>until<sp/>EOX<sp/>is<sp/>seen.<sp/>When<sp/>true,<sp/>new<sp/>data<sp/>is<sp/>appended<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stream<sp/>of<sp/>outgoing<sp/>bytes.<sp/>When<sp/>overflow<sp/>occurs,<sp/>sysex<sp/>data<sp/>is<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>dropped<sp/>(until<sp/>an<sp/>EOX<sp/>or<sp/>non-real-timei<sp/>status<sp/>byte<sp/>is<sp/>seen)<sp/>so</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that,<sp/>if<sp/>the<sp/>overflow<sp/>condition<sp/>is<sp/>cleared,<sp/>we<sp/>don&apos;t<sp/>start<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sending<sp/>data<sp/>from<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>sysex<sp/>message.<sp/>If<sp/>a<sp/>sysex</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>message<sp/>is<sp/>filtered,<sp/>sysex_in_progress<sp/>is<sp/>false,<sp/>causing<sp/>the</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>message<sp/>to<sp/>be<sp/>dropped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>PmMessage<sp/>sysex_message;<sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>for<sp/>4<sp/>bytes<sp/>of<sp/>sysex<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sysex_message_count;<sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>bytes<sp/>in<sp/>sysex_message<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>filters;<sp/></highlight><highlight class="comment">/*<sp/>flags<sp/>that<sp/>filter<sp/>incoming<sp/>message<sp/>classes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_mask;<sp/></highlight><highlight class="comment">/*<sp/>flter<sp/>incoming<sp/>messages<sp/>based<sp/>on<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>PmTimestamp<sp/>last_msg_time;<sp/></highlight><highlight class="comment">/*<sp/>timestamp<sp/>of<sp/>last<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>PmTimestamp<sp/>sync_time;<sp/></highlight><highlight class="comment">/*<sp/>time<sp/>of<sp/>last<sp/>synchronization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>PmTimestamp<sp/>now;<sp/></highlight><highlight class="comment">/*<sp/>set<sp/>by<sp/>PmWrite<sp/>to<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_message;<sp/></highlight><highlight class="comment">/*<sp/>initially<sp/>true,<sp/>used<sp/>to<sp/>run<sp/>first<sp/>synchronization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>pm_fns_type<sp/>dictionary;<sp/></highlight><highlight class="comment">/*<sp/>implementation<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*descriptor;<sp/></highlight><highlight class="comment">/*<sp/>system-dependent<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>following<sp/>are<sp/>used<sp/>to<sp/>expedite<sp/>sysex<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>on<sp/>windows,<sp/>in<sp/>debug<sp/>mode,<sp/>based<sp/>on<sp/>some<sp/>profiling,<sp/>these<sp/>optimizations</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>cut<sp/>the<sp/>time<sp/>to<sp/>process<sp/>sysex<sp/>bytes<sp/>from<sp/>about<sp/>7.5<sp/>to<sp/>0.26<sp/>usec/byte,</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>this<sp/>does<sp/>not<sp/>count<sp/>time<sp/>in<sp/>the<sp/>driver,<sp/>so<sp/>I<sp/>don&apos;t<sp/>know<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>important</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fill_base;<sp/></highlight><highlight class="comment">/*<sp/>addr<sp/>of<sp/>ptr<sp/>to<sp/>sysex<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*fill_offset_ptr;<sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>of<sp/>next<sp/>sysex<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill_length;<sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>sysex<sp/>bytes<sp/>to<sp/>write<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>defined<sp/>by<sp/>system<sp/>specific<sp/>implementation,<sp/>e.g.<sp/>pmwinmm,<sp/>used<sp/>by<sp/>PortMidi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_term(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>defined<sp/>by<sp/>portMidi,<sp/>used<sp/>by<sp/>pmwinmm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">PmError<sp/>none_write_short(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">PmError<sp/>none_write_byte(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte,<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">PmTimestamp<sp/>none_synchronize(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">PmError<sp/>pm_fail_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">PmError<sp/>pm_fail_timestamp_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">PmError<sp/>pm_success_fn(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">PmError<sp/>pm_add_device(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*descriptor,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_fns_type<sp/>dictionary);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pm_read_bytes(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PmTimestamp<sp/>timestamp);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pm_read_short(<ref refid="structpm__internal__struct" kindref="compound">PmInternal</ref><sp/>*midi,<sp/><ref refid="struct_pm_event" kindref="compound">PmEvent</ref><sp/>*event);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>none_write_flush<sp/>pm_fail_timestamp_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>none_sysex<sp/>pm_fail_timestamp_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>none_poll<sp/>pm_fail_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>success_poll<sp/>pm_success_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIDI_REALTIME_MASK<sp/>0xf8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_real_time(msg)<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((Pm_MessageStatus(msg)<sp/>&amp;<sp/>MIDI_REALTIME_MASK)<sp/>==<sp/>MIDI_REALTIME_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/portmidi/pm_common/pminternal.h"/>
  </compounddef>
</doxygen>
