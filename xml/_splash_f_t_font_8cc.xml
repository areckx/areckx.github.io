<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_splash_f_t_font_8cc" kind="file" language="C++">
    <compoundname>SplashFTFont.cc</compoundname>
    <includes local="no">config.h</includes>
    <incdepgraph>
      <node id="92601">
        <label>thirdparty/poppler/splash/SplashFTFont.cc</label>
        <link refid="_splash_f_t_font_8cc"/>
        <childnode refid="92602" relation="include">
        </childnode>
      </node>
      <node id="92602">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashFTFont.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2007-2011,<sp/>2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Kristian<sp/>HÃ¸gsberg<sp/>&lt;krh@bitplanet.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Petr<sp/>Gajdos<sp/>&lt;pgajdos@novell.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Suzuki<sp/>Toshiya<sp/>&lt;mpsuzuki@hiroshima-u.ac.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Andreas<sp/>Hartmetz<sp/>&lt;ahartmetz@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ft2build.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>FT_OUTLINE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>FT_SIZES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>FT_GLYPH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashGlyphBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashPath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashFTFontEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashFTFontFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashFTFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathMoveTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathLineTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathConicTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathCubicTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl2,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashFTFont</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">SplashFTFont::SplashFTFont(SplashFTFontFile<sp/>*fontFileA,<sp/>SplashCoord<sp/>*matA,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashCoord<sp/>*textMatA):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="class_splash_font" kindref="compound">SplashFont</ref>(fontFileA,<sp/>matA,<sp/>textMatA,<sp/>fontFileA-&gt;engine-&gt;aa),<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>enableFreeTypeHinting(fontFileA-&gt;engine-&gt;enableFreeTypeHinting),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>enableSlightHinting(fontFileA-&gt;engine-&gt;enableSlightHinting)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>face;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>div;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>scale;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>face<sp/>=<sp/>fontFileA-&gt;face;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_New_Size(face,<sp/>&amp;sizeObj))<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>face-&gt;size<sp/>=<sp/>sizeObj;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>splashRound(splashDist(0,<sp/>0,<sp/>mat[2],<sp/>mat[3]));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Set_Pixel_Sizes(face,<sp/>0,<sp/>size))<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>textMat<sp/>values<sp/>are<sp/>too<sp/>small,<sp/>FreeType&apos;s<sp/>fixed<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arithmetic<sp/>doesn&apos;t<sp/>work<sp/>so<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>textScale<sp/>=<sp/>splashDist(0,<sp/>0,<sp/>textMat[2],<sp/>textMat[3])<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>div<sp/>=<sp/>face-&gt;bbox.xMax<sp/>&gt;<sp/>20000<sp/>?<sp/>65536<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>scale<sp/>=<sp/>(SplashCoord)1<sp/>/<sp/>(SplashCoord)face-&gt;units_per_EM;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the<sp/>font<sp/>bounding<sp/>box<sp/>--<sp/>the<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>max<sp/>values<sp/>form<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>the<sp/>transformed<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMin<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[2]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMin<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMin<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[3]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMin<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMin<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[2]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMax<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMin<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[3]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMax<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMax<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[2]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMin<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMax<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[3]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMin<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMax<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[2]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMax<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.xMax<sp/>/<sp/>div))<sp/>+</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[3]<sp/>*<sp/>(scale<sp/>*<sp/>(face-&gt;bbox.yMax<sp/>/<sp/>div)));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the<sp/>font<sp/>bounding<sp/>box<sp/>--<sp/>the<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>max<sp/>values<sp/>form<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>the<sp/>transformed<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)((mat[0]<sp/>*<sp/>face-&gt;bbox.xMin<sp/>+<sp/>mat[2]<sp/>*<sp/>face-&gt;bbox.yMin)<sp/>/</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)((mat[1]<sp/>*<sp/>face-&gt;bbox.xMin<sp/>+<sp/>mat[3]<sp/>*<sp/>face-&gt;bbox.yMin)<sp/>/</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)((mat[0]<sp/>*<sp/>face-&gt;bbox.xMin<sp/>+<sp/>mat[2]<sp/>*<sp/>face-&gt;bbox.yMax)<sp/>/</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)((mat[1]<sp/>*<sp/>face-&gt;bbox.xMin<sp/>+<sp/>mat[3]<sp/>*<sp/>face-&gt;bbox.yMax)<sp/>/</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)((mat[0]<sp/>*<sp/>face-&gt;bbox.xMax<sp/>+<sp/>mat[2]<sp/>*<sp/>face-&gt;bbox.yMin)<sp/>/</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)((mat[1]<sp/>*<sp/>face-&gt;bbox.xMax<sp/>+<sp/>mat[3]<sp/>*<sp/>face-&gt;bbox.yMin)<sp/>/</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)((mat[0]<sp/>*<sp/>face-&gt;bbox.xMax<sp/>+<sp/>mat[2]<sp/>*<sp/>face-&gt;bbox.yMax)<sp/>/</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)((mat[1]<sp/>*<sp/>face-&gt;bbox.xMax<sp/>+<sp/>mat[3]<sp/>*<sp/>face-&gt;bbox.yMax)<sp/>/</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div<sp/>*<sp/>face-&gt;units_per_EM));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>kludge:<sp/>some<sp/>buggy<sp/>PDF<sp/>generators<sp/>embed<sp/>fonts<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>bounding<sp/>boxes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>==<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>==<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>(int)((SplashCoord)1.2<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_FIXEDPOINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>(FT_Fixed)((mat[0]<sp/>/<sp/>size).get16Dot16());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>(FT_Fixed)((mat[1]<sp/>/<sp/>size).get16Dot16());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>(FT_Fixed)((mat[2]<sp/>/<sp/>size).get16Dot16());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>(FT_Fixed)((mat[3]<sp/>/<sp/>size).get16Dot16());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>textMatrix.xx<sp/>=<sp/>(FT_Fixed)((textMat[0]<sp/>/<sp/>(textScale<sp/>*<sp/>size)).get16Dot16());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>textMatrix.yx<sp/>=<sp/>(FT_Fixed)((textMat[1]<sp/>/<sp/>(textScale<sp/>*<sp/>size)).get16Dot16());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>textMatrix.xy<sp/>=<sp/>(FT_Fixed)((textMat[2]<sp/>/<sp/>(textScale<sp/>*<sp/>size)).get16Dot16());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>textMatrix.yy<sp/>=<sp/>(FT_Fixed)((textMat[3]<sp/>/<sp/>(textScale<sp/>*<sp/>size)).get16Dot16());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>(FT_Fixed)((mat[0]<sp/>/<sp/>size)<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>(FT_Fixed)((mat[1]<sp/>/<sp/>size)<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>(FT_Fixed)((mat[2]<sp/>/<sp/>size)<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>(FT_Fixed)((mat[3]<sp/>/<sp/>size)<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>textMatrix.xx<sp/>=<sp/>(FT_Fixed)((textMat[0]<sp/>/<sp/>(textScale<sp/>*<sp/>size))<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>textMatrix.yx<sp/>=<sp/>(FT_Fixed)((textMat[1]<sp/>/<sp/>(textScale<sp/>*<sp/>size))<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>textMatrix.xy<sp/>=<sp/>(FT_Fixed)((textMat[2]<sp/>/<sp/>(textScale<sp/>*<sp/>size))<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>textMatrix.yy<sp/>=<sp/>(FT_Fixed)((textMat[3]<sp/>/<sp/>(textScale<sp/>*<sp/>size))<sp/>*<sp/>65536);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">SplashFTFont::~SplashFTFont()<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">GBool<sp/>SplashFTFont::getGlyph(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xFrac,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yFrac,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_splash_glyph_bitmap" kindref="compound">SplashGlyphBitmap</ref><sp/>*bitmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/><ref refid="class_splash_clip" kindref="compound">SplashClip</ref><sp/>*clip,<sp/>SplashClipResult<sp/>*clipRes)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SplashFont::getGlyph(c,<sp/>xFrac,<sp/>0,<sp/>bitmap,<sp/>x0,<sp/>y0,<sp/>clip,<sp/>clipRes);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FT_Int32<sp/>getFTLoadFlags(GBool<sp/>type1,<sp/>GBool<sp/>trueType,<sp/>GBool<sp/>aa,<sp/>GBool<sp/>enableFreeTypeHinting,<sp/>GBool<sp/>enableSlightHinting)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>FT_LOAD_DEFAULT;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>FT_LOAD_NO_BITMAP;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableFreeTypeHinting)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableSlightHinting)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>FT_LOAD_TARGET_LIGHT;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trueType)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FT2&apos;s<sp/>autohinting<sp/>doesn&apos;t<sp/>always<sp/>work<sp/>very<sp/>well<sp/>(especially<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>font<sp/>subsets),<sp/>so<sp/>turn<sp/>it<sp/>off<sp/>if<sp/>anti-aliasing<sp/>is<sp/>enabled;<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anti-aliasing<sp/>is<sp/>disabled,<sp/>this<sp/>seems<sp/>to<sp/>be<sp/>a<sp/>tossup<sp/>-<sp/>some<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>better<sp/>with<sp/>hinting,<sp/>some<sp/>without,<sp/>so<sp/>leave<sp/>hinting<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>FT_LOAD_NO_AUTOHINT;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type1)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>1<sp/>fonts<sp/>seem<sp/>to<sp/>look<sp/>better<sp/>with<sp/>&apos;light&apos;<sp/>hinting<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>FT_LOAD_TARGET_LIGHT;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>FT_LOAD_NO_HINTING;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">GBool<sp/>SplashFTFont::makeGlyph(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xFrac,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yFrac,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_splash_glyph_bitmap" kindref="compound">SplashGlyphBitmap</ref><sp/>*bitmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/><ref refid="class_splash_clip" kindref="compound">SplashClip</ref><sp/>*clip,<sp/>SplashClipResult<sp/>*clipRes)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>SplashFTFontFile<sp/>*ff;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>offset;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___glyph_slot_rec__" kindref="compound">FT_GlyphSlot</ref><sp/>slot;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>FT_UInt<sp/>gid;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rowSize;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p,<sp/>*q;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>ff<sp/>=<sp/>(SplashFTFontFile<sp/>*)fontFile;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>ff-&gt;face-&gt;size<sp/>=<sp/>sizeObj;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>offset.x<sp/>=<sp/>(FT_Pos)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)((SplashCoord)xFrac<sp/>*<sp/>splashFontFractionMul<sp/>*<sp/>64);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>offset.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>FT_Set_Transform(ff-&gt;face,<sp/>&amp;matrix,<sp/>&amp;offset);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>slot<sp/>=<sp/>ff-&gt;face-&gt;glyph;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff-&gt;codeToGID<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>ff-&gt;codeToGIDLen<sp/>&amp;&amp;<sp/>c<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)ff-&gt;codeToGID[c];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)c;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Load_Glyph(ff-&gt;face,<sp/>gid,<sp/>getFTLoadFlags(ff-&gt;type1,<sp/>ff-&gt;trueType,<sp/>aa,<sp/>enableFreeTypeHinting,<sp/>enableSlightHinting)))<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prelimirary<sp/>values<sp/>based<sp/>on<sp/>FT_Outline_Get_CBox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>add<sp/>two<sp/>pixels<sp/>to<sp/>each<sp/>side<sp/>to<sp/>be<sp/>in<sp/>the<sp/>safe<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___b_box__" kindref="compound">FT_BBox</ref><sp/>cbox;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>FT_Outline_Get_CBox(&amp;ff-&gt;face-&gt;glyph-&gt;outline,<sp/>&amp;cbox);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>bitmap-&gt;x<sp/>=<sp/>-(cbox.xMin<sp/>/<sp/>64)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>bitmap-&gt;y<sp/>=<sp/><sp/>(cbox.yMax<sp/>/<sp/>64)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>bitmap-&gt;w<sp/>=<sp/>((cbox.xMax<sp/>-<sp/>cbox.xMin)<sp/>/<sp/>64)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>bitmap-&gt;h<sp/>=<sp/>((cbox.yMax<sp/>-<sp/>cbox.yMin)<sp/>/<sp/>64)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>*clipRes<sp/>=<sp/>clip-&gt;testRect(x0<sp/>-<sp/>bitmap-&gt;x,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>-<sp/>bitmap-&gt;y,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>-<sp/>bitmap-&gt;x<sp/>+<sp/>bitmap-&gt;w,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>-<sp/>bitmap-&gt;y<sp/>+<sp/>bitmap-&gt;h);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*clipRes<sp/>==<sp/>splashClipAllOutside)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap-&gt;freeData<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Render_Glyph(slot,<sp/>aa<sp/>?<sp/>ft_render_mode_normal</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ft_render_mode_mono))<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slot-&gt;bitmap.width<sp/>==<sp/>0<sp/>||<sp/>slot-&gt;bitmap.rows<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>happen<sp/>if<sp/>(a)<sp/>the<sp/>glyph<sp/>is<sp/>really<sp/>tiny<sp/>or<sp/>(b)<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>metrics<sp/>in<sp/>the<sp/>TrueType<sp/>file<sp/>are<sp/>broken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>bitmap-&gt;x<sp/>=<sp/>-slot-&gt;bitmap_left;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>bitmap-&gt;y<sp/>=<sp/>slot-&gt;bitmap_top;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>bitmap-&gt;w<sp/>=<sp/>slot-&gt;bitmap.width;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>bitmap-&gt;h<sp/>=<sp/>slot-&gt;bitmap.rows;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>bitmap-&gt;aa<sp/>=<sp/>aa;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>rowSize<sp/>=<sp/>bitmap-&gt;w;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>rowSize<sp/>=<sp/>(bitmap-&gt;w<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>bitmap-&gt;data<sp/>=<sp/>(Guchar<sp/>*)gmallocn_checkoverflow(rowSize,<sp/>bitmap-&gt;h);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitmap-&gt;data)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>bitmap-&gt;freeData<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>p<sp/>=<sp/>bitmap-&gt;data,<sp/>q<sp/>=<sp/>slot-&gt;bitmap.buffer;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>bitmap-&gt;h;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i,<sp/>p<sp/>+=<sp/>rowSize,<sp/>q<sp/>+=<sp/>slot-&gt;bitmap.pitch)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(p,<sp/>q,<sp/>rowSize);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SplashFTFont::getGlyphAdvance(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>SplashFTFontFile<sp/>*ff;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>offset;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>FT_UInt<sp/>gid;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___matrix__" kindref="compound">FT_Matrix</ref><sp/>identityMatrix;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>ff<sp/>=<sp/>(SplashFTFontFile<sp/>*)fontFile;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>identityMatrix.xx<sp/>=<sp/>65536;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>in<sp/>16.16<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>identityMatrix.xy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>identityMatrix.yx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>identityMatrix.yy<sp/>=<sp/>65536;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>in<sp/>16.16<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>the<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>offset.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>offset.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>ff-&gt;face-&gt;size<sp/>=<sp/>sizeObj;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>FT_Set_Transform(ff-&gt;face,<sp/>&amp;identityMatrix,<sp/>&amp;offset);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff-&gt;codeToGID<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>ff-&gt;codeToGIDLen)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)ff-&gt;codeToGID[c];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)c;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Load_Glyph(ff-&gt;face,<sp/>gid,<sp/>getFTLoadFlags(ff-&gt;type1,<sp/>ff-&gt;trueType,<sp/>aa,<sp/>enableFreeTypeHinting,<sp/>enableSlightHinting)))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>64.0<sp/>is<sp/>1<sp/>in<sp/>26.6<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ff-&gt;face-&gt;glyph-&gt;metrics.horiAdvance<sp/>/<sp/>64.0<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SplashFTFontPath<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>textScale;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>GBool<sp/>needClose;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*SplashFTFont::getGlyphPath(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___outline___funcs__" kindref="compound">FT_Outline_Funcs</ref><sp/>outlineFuncs<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FREETYPE_MINOR<sp/>&lt;=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>(int<sp/>(*)(<ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))&amp;glyphPathMoveTo,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>(int<sp/>(*)(<ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))&amp;glyphPathLineTo,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>(int<sp/>(*)(<ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*,<sp/>FT_Vector<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))&amp;glyphPathConicTo,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>(int<sp/>(*)(<ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*,<sp/>FT_Vector<sp/>*,<sp/>FT_Vector<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))&amp;glyphPathCubicTo,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;glyphPathMoveTo,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;glyphPathLineTo,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;glyphPathConicTo,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;glyphPathCubicTo,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>SplashFTFontFile<sp/>*ff;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>SplashFTFontPath<sp/>path;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___glyph_slot_rec__" kindref="compound">FT_GlyphSlot</ref><sp/>slot;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>FT_UInt<sp/>gid;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___glyph_rec__" kindref="compound">FT_Glyph</ref><sp/>glyph;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>ff<sp/>=<sp/>(SplashFTFontFile<sp/>*)fontFile;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>ff-&gt;face-&gt;size<sp/>=<sp/>sizeObj;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>FT_Set_Transform(ff-&gt;face,<sp/>&amp;textMatrix,<sp/>NULL);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>slot<sp/>=<sp/>ff-&gt;face-&gt;glyph;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff-&gt;codeToGID<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>ff-&gt;codeToGIDLen<sp/>&amp;&amp;<sp/>c<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>ff-&gt;codeToGID[c];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)c;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Load_Glyph(ff-&gt;face,<sp/>gid,<sp/>getFTLoadFlags(ff-&gt;type1,<sp/>ff-&gt;trueType,<sp/>aa,<sp/>enableFreeTypeHinting,<sp/>enableSlightHinting)))<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Get_Glyph(slot,<sp/>&amp;glyph))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_Outline_Check(&amp;((<ref refid="struct_f_t___outline_glyph_rec__" kindref="compound">FT_OutlineGlyph</ref>)glyph)-&gt;outline))<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>path.path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>path.textScale<sp/>=<sp/>textScale;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>path.needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>FT_Outline_Decompose(&amp;((<ref refid="struct_f_t___outline_glyph_rec__" kindref="compound">FT_OutlineGlyph</ref>)glyph)-&gt;outline,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;outlineFuncs,<sp/>&amp;path);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.needClose)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>path.path-&gt;close();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>FT_Done_Glyph(glyph);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path.path;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathMoveTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>SplashFTFontPath<sp/>*p<sp/>=<sp/>(SplashFTFontPath<sp/>*)path;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;needClose)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;path-&gt;close();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>p-&gt;path-&gt;moveTo((SplashCoord)pt-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)pt-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathLineTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>SplashFTFontPath<sp/>*p<sp/>=<sp/>(SplashFTFontPath<sp/>*)path;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>p-&gt;path-&gt;lineTo((SplashCoord)pt-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)pt-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>p-&gt;needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathConicTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>SplashFTFontPath<sp/>*p<sp/>=<sp/>(SplashFTFontPath<sp/>*)path;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3,<sp/>xc,<sp/>yc;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p-&gt;path-&gt;getCurPt(&amp;x0,<sp/>&amp;y0))<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>xc<sp/>=<sp/>(SplashCoord)ctrl-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>yc<sp/>=<sp/>(SplashCoord)ctrl-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>(SplashCoord)pt-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>y3<sp/>=<sp/>(SplashCoord)pt-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>second-order<sp/>Bezier<sp/>curve<sp/>is<sp/>defined<sp/>by<sp/>two<sp/>endpoints,<sp/>p0<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>p3,<sp/>and<sp/>one<sp/>control<sp/>point,<sp/>pc:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p(t)<sp/>=<sp/>(1-t)^2*p0<sp/>+<sp/>t*(1-t)*pc<sp/>+<sp/>t^2*p3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>third-order<sp/>Bezier<sp/>curve<sp/>is<sp/>defined<sp/>by<sp/>the<sp/>same<sp/>two<sp/>endpoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>p0<sp/>and<sp/>p3,<sp/>and<sp/>two<sp/>control<sp/>points,<sp/>p1<sp/>and<sp/>p2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p(t)<sp/>=<sp/>(1-t)^3*p0<sp/>+<sp/>3t*(1-t)^2*p1<sp/>+<sp/>3t^2*(1-t)*p2<sp/>+<sp/>t^3*p3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Applying<sp/>some<sp/>algebra,<sp/>we<sp/>can<sp/>convert<sp/>a<sp/>second-order<sp/>curve<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>third-order<sp/>curve:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>(1/3)<sp/>*<sp/>(p0<sp/>+<sp/>2pc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>(1/3)<sp/>*<sp/>(2pc<sp/>+<sp/>p3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>(SplashCoord)(1.0<sp/>/<sp/>3.0)<sp/>*<sp/>(x0<sp/>+<sp/>(SplashCoord)2<sp/>*<sp/>xc);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>(SplashCoord)(1.0<sp/>/<sp/>3.0)<sp/>*<sp/>(y0<sp/>+<sp/>(SplashCoord)2<sp/>*<sp/>yc);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>(SplashCoord)(1.0<sp/>/<sp/>3.0)<sp/>*<sp/>((SplashCoord)2<sp/>*<sp/>xc<sp/>+<sp/>x3);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>(SplashCoord)(1.0<sp/>/<sp/>3.0)<sp/>*<sp/>((SplashCoord)2<sp/>*<sp/>yc<sp/>+<sp/>y3);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>p-&gt;path-&gt;curveTo(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>p-&gt;needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphPathCubicTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*ctrl2,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_t___vector__" kindref="compound">FT_Vector</ref><sp/>*pt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>SplashFTFontPath<sp/>*p<sp/>=<sp/>(SplashFTFontPath<sp/>*)path;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>p-&gt;path-&gt;curveTo((SplashCoord)ctrl1-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)ctrl1-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)ctrl2-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)ctrl2-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)pt-&gt;x<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)pt-&gt;y<sp/>*<sp/>p-&gt;textScale<sp/>/<sp/>64.0);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>p-&gt;needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/splash/SplashFTFont.cc"/>
  </compounddef>
</doxygen>
