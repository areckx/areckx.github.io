<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_xml_stream_writer" kind="class" language="C++" prot="public">
    <compoundname>XmlStreamWriter</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_xml_stream_writer_1a27be551ce0e94a59aa9a8e8f373b1b73" prot="private" static="no" mutable="no">
        <type>QScopedPointer&lt; <ref refid="class_xml_stream_writer_private" kindref="compound">XmlStreamWriterPrivate</ref> &gt;</type>
        <definition>QScopedPointer&lt;XmlStreamWriterPrivate&gt; XmlStreamWriter::d_ptr</definition>
        <argsstring></argsstring>
        <name>d_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="416" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_xml_stream_writer_1acaffb798a42742e6be689bc0cf9b80d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamWriter::XmlStreamWriter</definition>
        <argsstring>()</argsstring>
        <name>XmlStreamWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream writer.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ac03d4a48cc662d5c43a136560f514fd3" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="355" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3195" bodyend="3198"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1adad3a38281bd2eee59f7240098fb0c96" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamWriter::XmlStreamWriter</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>XmlStreamWriter</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream writer that writes into <emphasis>device</emphasis>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="356" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3203" bodyend="3208"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a59044bd63fb4f1bf1c615666a44ea325" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamWriter::XmlStreamWriter</definition>
        <argsstring>(QByteArray *array)</argsstring>
        <name>XmlStreamWriter</name>
        <param>
          <type>QByteArray *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream writer that writes into <emphasis>array</emphasis>. This is the same as creating an xml writer that operates on a QBuffer device which in turn operates on <emphasis>array</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="357" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3214" bodyend="3221"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a149da545bb2fa21dbb6989c0eab6cf99" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamWriter::XmlStreamWriter</definition>
        <argsstring>(QString *string)</argsstring>
        <name>XmlStreamWriter</name>
        <param>
          <type>QString *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream writer that writes into <emphasis>string</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="358" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3226" bodyend="3231"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a0cd28f6b6ce9ad95831b35d6823a8ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamWriter::~XmlStreamWriter</definition>
        <argsstring>()</argsstring>
        <name>~XmlStreamWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="359" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3236" bodyend="3238"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ac03d4a48cc662d5c43a136560f514fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::setDevice</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>setDevice</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current device to <emphasis>device</emphasis>. If you want the stream to write into a QByteArray, you can create a QBuffer device.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a306a738e0aad39898ee318c7b7c8bc3c" kindref="member">device()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="361" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3247" bodyend="3258"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a306a738e0aad39898ee318c7b7c8bc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QIODevice *</type>
        <definition>QIODevice * XmlStreamWriter::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current device associated with the <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref>, or 0 if no device has been assigned.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ac03d4a48cc662d5c43a136560f514fd3" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="362" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3266" bodyend="3270"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ab73a5ee5db6824afd4a2bc66e8f12e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::setCodec</definition>
        <argsstring>(QTextCodec *codec)</argsstring>
        <name>setCodec</name>
        <param>
          <type>QTextCodec *</type>
          <declname>codec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the codec for this stream to <emphasis>codec</emphasis>. The codec is used for encoding any data that is written. By default, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> uses UTF-8.</para><para>The encoding information is stored in the initial xml tag which gets written when you call <ref refid="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" kindref="member">writeStartDocument()</ref>. Call this function before calling <ref refid="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" kindref="member">writeStartDocument()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a08d4e9eddc07ed3682ced34cce8861f9" kindref="member">codec()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="365" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3285" bodyend="3294"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a926ebebdb26125f7423cf579bf07143a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::setCodec</definition>
        <argsstring>(const char *codecName)</argsstring>
        <name>setCodec</name>
        <param>
          <type>const char *</type>
          <declname>codecName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the codec for this stream to the QTextCodec for the encoding specified by <emphasis>codecName</emphasis>. Common values for <computeroutput>codecName</computeroutput> include &quot;ISO 8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding isn&apos;t recognized, nothing happens.</para><para><simplesect kind="see"><para>QTextCodec::codecForName() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="366" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3304" bodyend="3307"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a08d4e9eddc07ed3682ced34cce8861f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QTextCodec *</type>
        <definition>QTextCodec * XmlStreamWriter::codec</definition>
        <argsstring>() const</argsstring>
        <name>codec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the codec that is currently assigned to the stream.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ab73a5ee5db6824afd4a2bc66e8f12e78" kindref="member">setCodec()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="367" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3314" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a537defbbbbbad819448033b22aaf0d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::setAutoFormatting</definition>
        <argsstring>(bool)</argsstring>
        <name>setAutoFormatting</name>
        <param>
          <type>bool</type>
          <defname>enable</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Enables auto formatting if <emphasis>enable</emphasis> is <computeroutput>true</computeroutput>, otherwise disables it.</para><para>The default value is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="370" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3345" bodyend="3349"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a257ecf97cf02f3ca8cb86c2ecf425a8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamWriter::autoFormatting</definition>
        <argsstring>() const</argsstring>
        <name>autoFormatting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4 the auto-formatting flag of the stream writer</para></simplesect>
This property controls whether or not the stream writer automatically formats the generated XML data. If enabled, the writer automatically adds line-breaks and indentation to empty sections between elements (ignorable whitespace). The main purpose of auto-formatting is to split the data into several lines, and to increase readability for a human reader. The indentation depth can be controlled through the  autoFormattingIndent property.</para><para>By default, auto-formatting is disabled.</para><para><simplesect kind="since"><para>4.4</para></simplesect>
Returns <computeroutput>true</computeroutput> if auto formattting is enabled, otherwise <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="371" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3356" bodyend="3360"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a04f90908c7ae4ad5b083d7037a533200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::setAutoFormattingIndent</definition>
        <argsstring>(int spacesOrTabs)</argsstring>
        <name>setAutoFormattingIndent</name>
        <param>
          <type>int</type>
          <declname>spacesOrTabs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="373" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3376" bodyend="3380"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a322ab2c9f7ec4d33ef0fb55cfbdd9d7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int XmlStreamWriter::autoFormattingIndent</definition>
        <argsstring>() const</argsstring>
        <name>autoFormattingIndent</name>
        <briefdescription>
<para>the number of spaces or tabs used for indentation when auto-formatting is enabled. Positive numbers indicate spaces, negative numbers tabs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
The default indentation is 4.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a257ecf97cf02f3ca8cb86c2ecf425a8c" kindref="member">autoFormatting</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="374" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3382" bodyend="3386"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeAttribute</definition>
        <argsstring>(const QString &amp;qualifiedName, const QString &amp;value)</argsstring>
        <name>writeAttribute</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Writes an attribute with <emphasis>qualifiedName</emphasis> and <emphasis>value</emphasis>.</para><para>This function can only be called after <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> before any content is written, or after <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="376" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3408" bodyend="3418"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1abfbab3a6a1ad652db31e46d40e727f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeAttribute</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</argsstring>
        <name>writeAttribute</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes an attribute with <emphasis>name</emphasis> and <emphasis>value</emphasis>, prefixed for the specified <emphasis>namespaceUri</emphasis>. If the namespace has not been declared yet, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> will generate a namespace declaration for it.</para><para>This function can only be called after <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> before any content is written, or after <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="377" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3428" bodyend="3443"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1aaa0061750c74a393ab443af6ddd06db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeAttribute</definition>
        <argsstring>(const XmlStreamAttribute &amp;attribute)</argsstring>
        <name>writeAttribute</name>
        <param>
          <type>const <ref refid="class_xml_stream_attribute" kindref="compound">XmlStreamAttribute</ref> &amp;</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para><para>Writes the <emphasis>attribute</emphasis>.</para><para>This function can only be called after <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> before any content is written, or after <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="378" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3453" bodyend="3462"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a401845495b28fcc27a7f491ac402ea47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeAttributes</definition>
        <argsstring>(const XmlStreamAttributes &amp;attributes)</argsstring>
        <name>writeAttributes</name>
        <param>
          <type>const <ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref> &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the attribute vector <emphasis>attributes</emphasis>. If a namespace referenced in an attribute not been declared yet, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> will generate a namespace declaration for it.</para><para>This function can only be called after <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> before any content is written, or after <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref>, <ref refid="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" kindref="member">writeNamespace()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="379" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3474" bodyend="3481"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a812b894549f810c701ca3826acd9cc65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeCDATA</definition>
        <argsstring>(const QString &amp;text)</argsstring>
        <name>writeCDATA</name>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes <emphasis>text</emphasis> as CDATA section. If <emphasis>text</emphasis> contains the forbidden character sequence &quot;]]&gt;&quot;, it is split into different CDATA sections.</para><para>This function mainly exists for completeness. Normally you should not need use it, because <ref refid="class_xml_stream_writer_1aea9dab80ea787794736d3f2a524780e5" kindref="member">writeCharacters()</ref> automatically escapes all non-content characters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="381" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3492" bodyend="3501"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1aea9dab80ea787794736d3f2a524780e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeCharacters</definition>
        <argsstring>(const QString &amp;text)</argsstring>
        <name>writeCharacters</name>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes <emphasis>text</emphasis>. The characters &quot;&lt;&quot;, &quot;&amp;&quot;, and &quot;\&quot;&quot; are escaped as entity
references &quot;&lt;&quot;, &quot;&amp;, and &quot;&amp;quot;&quot;. To avoid the forbidden sequence &quot;]]&gt;&quot;, &quot;&gt;&quot; is also escaped as &quot;&amp;gt;&quot;.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1aeea05577f7ecd0eaa34b4237fdbe446d" kindref="member">writeEntityReference()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="382" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3510" bodyend="3515"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1aa250fc649bdef6373d1f25d4bc7db431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeComment</definition>
        <argsstring>(const QString &amp;text)</argsstring>
        <name>writeComment</name>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes <emphasis>text</emphasis> as XML comment, where <emphasis>text</emphasis> must not contain the forbidden sequence &quot;--&quot; or end with &quot;-&quot;. Note that XML does not provide any way to escape &quot;-&quot; in a comment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="383" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3522" bodyend="3532"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a6e2b9fe72e7a85b044690cf41aee18fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeDTD</definition>
        <argsstring>(const QString &amp;dtd)</argsstring>
        <name>writeDTD</name>
        <param>
          <type>const QString &amp;</type>
          <declname>dtd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a DTD section. The <emphasis>dtd</emphasis> represents the entire doctypedecl production from the XML 1.0 specification. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="385" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3538" bodyend="3547"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeEmptyElement</definition>
        <argsstring>(const QString &amp;qualifiedName)</argsstring>
        <name>writeEmptyElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Writes an empty element with qualified name <emphasis>qualifiedName</emphasis>. Subsequent calls to <ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref> will add attributes to this element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="387" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3555" bodyend="3561"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ad366e97aa66482054f029843bc982586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeEmptyElement</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name)</argsstring>
        <name>writeEmptyElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes an empty element with <emphasis>name</emphasis>, prefixed for the specified <emphasis>namespaceUri</emphasis>. If the namespace has not been declared, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> will generate a namespace declaration for it. Subsequent calls to <ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref> will add attributes to this element.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" kindref="member">writeNamespace()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="388" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3571" bodyend="3577"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a3c1e28db26255b0a88745ac76e84485e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeTextElement</definition>
        <argsstring>(const QString &amp;qualifiedName, const QString &amp;text)</argsstring>
        <name>writeTextElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Writes a text element with <emphasis>qualifiedName</emphasis> and <emphasis>text</emphasis>.</para><para>This is a convenience function equivalent to: <programlisting></programlisting></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="390" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3588" bodyend="3593"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a378c2645f837b9ea5786648285d4d6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeTextElement</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;text)</argsstring>
        <name>writeTextElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a text element with <emphasis>name</emphasis>, prefixed for the specified <emphasis>namespaceUri</emphasis>, and <emphasis>text</emphasis>. If the namespace has not been declared, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> will generate a namespace declaration for it.</para><para>This is a convenience function equivalent to: <programlisting></programlisting></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="391" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3605" bodyend="3610"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeEndDocument</definition>
        <argsstring>()</argsstring>
        <name>writeEndDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes all remaining open start elements and writes a newline.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" kindref="member">writeStartDocument()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="393" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3618" bodyend="3624"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1add89e8f61a141e2b320cf2b567e7edfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeEndElement</definition>
        <argsstring>()</argsstring>
        <name>writeEndElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the previous start element.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="394" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3631" bodyend="3660"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1aeea05577f7ecd0eaa34b4237fdbe446d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeEntityReference</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>writeEntityReference</name>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the entity reference <emphasis>name</emphasis> to the stream, as &quot;&amp;\a{name};&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="396" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3667" bodyend="3674"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeNamespace</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;prefix=QString())</argsstring>
        <name>writeNamespace</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>prefix</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a namespace declaration for <emphasis>namespaceUri</emphasis> with <emphasis>prefix</emphasis>. If <emphasis>prefix</emphasis> is empty, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> assigns a unique prefix consisting of the letter &apos;n&apos; followed by a number.</para><para>If <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> or <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref> was called, the declaration applies to the current element; otherwise it applies to the next child element.</para><para>Note that the prefix <emphasis>xml</emphasis> is both predefined and reserved for <emphasis><ulink url="http://www.w3.org/XML/1998/namespace,">http://www.w3.org/XML/1998/namespace,</ulink></emphasis> which in turn cannot be bound to any other prefix. The prefix <emphasis>xmlns</emphasis> and its URI <emphasis><ulink url="http://www.w3.org/2000/xmlns/">http://www.w3.org/2000/xmlns/</ulink></emphasis> are used for the namespace mechanism itself and thus completely forbidden in declarations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="397" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3692" bodyend="3708"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ad545600b4e2c9d73ad9e216a20ff081e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeDefaultNamespace</definition>
        <argsstring>(const QString &amp;namespaceUri)</argsstring>
        <name>writeDefaultNamespace</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a default namespace declaration for <emphasis>namespaceUri</emphasis>.</para><para>If <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> or <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref> was called, the declaration applies to the current element; otherwise it applies to the next child element.</para><para>Note that the namespaces <emphasis><ulink url="http://www.w3.org/XML/1998/namespace">http://www.w3.org/XML/1998/namespace</ulink></emphasis> (bound to <emphasis>xmlns</emphasis>) and <emphasis><ulink url="http://www.w3.org/2000/xmlns/">http://www.w3.org/2000/xmlns/</ulink></emphasis> (bound to <emphasis>xml</emphasis>) by definition cannot be declared as default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="398" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3721" bodyend="3731"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a5b31ab7e5667538264c8d8fa8de79eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeProcessingInstruction</definition>
        <argsstring>(const QString &amp;target, const QString &amp;data=QString())</argsstring>
        <name>writeProcessingInstruction</name>
        <param>
          <type>const QString &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes an XML processing instruction with <emphasis>target</emphasis> and <emphasis>data</emphasis>, where <emphasis>data</emphasis> must not contain the sequence &quot;?&gt;&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="399" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3738" bodyend="3751"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeStartDocument</definition>
        <argsstring>()</argsstring>
        <name>writeStartDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para><para>Writes a document start with XML version number &quot;1.0&quot;. This also writes the encoding information.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" kindref="member">writeEndDocument()</ref>, <ref refid="class_xml_stream_writer_1ab73a5ee5db6824afd4a2bc66e8f12e78" kindref="member">setCodec()</ref> </para></simplesect>
<simplesect kind="since"><para>4.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="401" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3763" bodyend="3766"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1affda139fb2d91c8893615b6ca6b9570a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeStartDocument</definition>
        <argsstring>(const QString &amp;version)</argsstring>
        <name>writeStartDocument</name>
        <param>
          <type>const QString &amp;</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a document start with the XML version number <emphasis>version</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" kindref="member">writeEndDocument()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="402" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3774" bodyend="3789"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1af7df556ca625050ceba8041b9e71654b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeStartDocument</definition>
        <argsstring>(const QString &amp;version, bool standalone)</argsstring>
        <name>writeStartDocument</name>
        <param>
          <type>const QString &amp;</type>
          <declname>version</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standalone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a document start with the XML version number <emphasis>version</emphasis> and a standalone attribute <emphasis>standalone</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" kindref="member">writeEndDocument()</ref> </para></simplesect>
<simplesect kind="since"><para>4.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="403" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3797" bodyend="3815"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeStartElement</definition>
        <argsstring>(const QString &amp;qualifiedName)</argsstring>
        <name>writeStartElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para><para>Writes a start element with <emphasis>qualifiedName</emphasis>. Subsequent calls to <ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref> will add attributes to this element.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1add89e8f61a141e2b320cf2b567e7edfb" kindref="member">writeEndElement()</ref>, <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="404" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3825" bodyend="3830"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ab8d06c59d1684e88d2bd820c72baf7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeStartElement</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name)</argsstring>
        <name>writeStartElement</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a start element with <emphasis>name</emphasis>, prefixed for the specified <emphasis>namespaceUri</emphasis>. If the namespace has not been declared yet, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> will generate a namespace declaration for it. Subsequent calls to <ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref> will add attributes to this element.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" kindref="member">writeNamespace()</ref>, <ref refid="class_xml_stream_writer_1add89e8f61a141e2b320cf2b567e7edfb" kindref="member">writeEndElement()</ref>, <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="405" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3841" bodyend="3846"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1ad3fc36a8359435e85bb0fa85dc785d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamWriter::writeCurrentToken</definition>
        <argsstring>(const XmlStreamReader &amp;reader)</argsstring>
        <name>writeCurrentToken</name>
        <param>
          <type>const <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> &amp;</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the current state of the <emphasis>reader</emphasis>. All possible valid states are supported.</para><para>The purpose of this function is to support chained processing of XML data.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">XmlStreamReader::tokenType()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="408" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3877" bodyend="3925"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_writer_1a8a336415622c257d2df545b088e38eef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamWriter::hasError</definition>
        <argsstring>() const</argsstring>
        <name>hasError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the stream failed to write to the underlying device.</para><para>The error status is never reset. Writes happening after the error occurred are ignored, even if the error condition is cleared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="411" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="3394" bodyend="3398"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> class provides an XML writer with a simple streaming API. </para>    </briefdescription>
    <detaileddescription>
<para>QtCore <simplesect kind="since"><para>4.3 </para></simplesect>
<ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> is the counterpart to <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> for writing XML. Like its related class, it operates on a QIODevice specified with <ref refid="class_xml_stream_writer_1ac03d4a48cc662d5c43a136560f514fd3" kindref="member">setDevice()</ref>. The API is simple and straightforward: for every XML token or event you want to write, the writer provides a specialized function.</para><para>You start a document with <ref refid="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" kindref="member">writeStartDocument()</ref> and end it with <ref refid="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" kindref="member">writeEndDocument()</ref>. This will implicitly close all remaining open tags.</para><para>Element tags are opened with <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref> followed by <ref refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" kindref="member">writeAttribute()</ref> or <ref refid="class_xml_stream_writer_1a401845495b28fcc27a7f491ac402ea47" kindref="member">writeAttributes()</ref>, element content, and then <ref refid="class_xml_stream_writer_1add89e8f61a141e2b320cf2b567e7edfb" kindref="member">writeEndElement()</ref>. A shorter form <ref refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" kindref="member">writeEmptyElement()</ref> can be used to write empty elements, followed by <ref refid="class_xml_stream_writer_1a401845495b28fcc27a7f491ac402ea47" kindref="member">writeAttributes()</ref>.</para><para>Element content consists of either characters, entity references or nested elements. It is written with <ref refid="class_xml_stream_writer_1aea9dab80ea787794736d3f2a524780e5" kindref="member">writeCharacters()</ref>, which also takes care of escaping all forbidden characters and character sequences, <ref refid="class_xml_stream_writer_1aeea05577f7ecd0eaa34b4237fdbe446d" kindref="member">writeEntityReference()</ref>, or subsequent calls to <ref refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" kindref="member">writeStartElement()</ref>. A convenience method <ref refid="class_xml_stream_writer_1a3c1e28db26255b0a88745ac76e84485e" kindref="member">writeTextElement()</ref> can be used for writing terminal elements that contain nothing but text.</para><para>The following abridged code snippet shows the basic use of the class to write formatted XML with indentation:</para><para><programlisting></programlisting> <programlisting></programlisting> <programlisting></programlisting> <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> takes care of prefixing namespaces, all you have to do is specify the <computeroutput>namespaceUri</computeroutput> when writing elements or attributes. If you must conform to certain prefixes, you can force the writer to use them by declaring the namespaces manually with either <ref refid="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" kindref="member">writeNamespace()</ref> or <ref refid="class_xml_stream_writer_1ad545600b4e2c9d73ad9e216a20ff081e" kindref="member">writeDefaultNamespace()</ref>. Alternatively, you can bypass the stream writer&apos;s namespace support and use overloaded methods that take a qualified name instead. The namespace <emphasis><ulink url="http://www.w3.org/XML/1998/namespace">http://www.w3.org/XML/1998/namespace</ulink></emphasis> is implicit and mapped to the prefix <emphasis>xml</emphasis>.</para><para>The stream writer can automatically format the generated XML data by adding line-breaks and indentation to empty sections between elements, making the XML data more readable for humans and easier to work with for most source code management systems. The feature can be turned on with the  autoFormatting property, and customized with the  autoFormattingIndent property.</para><para>Other functions are <ref refid="class_xml_stream_writer_1a812b894549f810c701ca3826acd9cc65" kindref="member">writeCDATA()</ref>, <ref refid="class_xml_stream_writer_1aa250fc649bdef6373d1f25d4bc7db431" kindref="member">writeComment()</ref>, <ref refid="class_xml_stream_writer_1a5b31ab7e5667538264c8d8fa8de79eda" kindref="member">writeProcessingInstruction()</ref>, and <ref refid="class_xml_stream_writer_1a6e2b9fe72e7a85b044690cf41aee18fe" kindref="member">writeDTD()</ref>. Chaining of XML streams is supported with <ref refid="class_xml_stream_writer_1ad3fc36a8359435e85bb0fa85dc785d70" kindref="member">writeCurrentToken()</ref>.</para><para>By default, <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> encodes XML in UTF-8. Different encodings can be enforced using <ref refid="class_xml_stream_writer_1ab73a5ee5db6824afd4a2bc66e8f12e78" kindref="member">setCodec()</ref>.</para><para>If an error occurs while writing to the underlying device, <ref refid="class_xml_stream_writer_1a8a336415622c257d2df545b088e38eef" kindref="member">hasError()</ref> starts returning true and subsequent writes are ignored.</para><para>The {<ref refid="class_xml_stream" kindref="compound">XmlStream</ref> Bookmarks Example} illustrates how to use a stream writer to write an XML bookmark file (XBEL) that was previously read in by a <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref>. </para>    </detaileddescription>
    <location file="thirdparty/xmlstream/xmlstream.h" line="351" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="350" bodyend="417"/>
    <listofallmembers>
      <member refid="class_xml_stream_writer_1a257ecf97cf02f3ca8cb86c2ecf425a8c" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>autoFormatting</name></member>
      <member refid="class_xml_stream_writer_1a322ab2c9f7ec4d33ef0fb55cfbdd9d7d" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>autoFormattingIndent</name></member>
      <member refid="class_xml_stream_writer_1a08d4e9eddc07ed3682ced34cce8861f9" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>codec</name></member>
      <member refid="class_xml_stream_writer_1a27be551ce0e94a59aa9a8e8f373b1b73" prot="private" virt="non-virtual"><scope>XmlStreamWriter</scope><name>d_ptr</name></member>
      <member refid="class_xml_stream_writer_1a306a738e0aad39898ee318c7b7c8bc3c" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>device</name></member>
      <member refid="class_xml_stream_writer_1a8a336415622c257d2df545b088e38eef" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>hasError</name></member>
      <member refid="class_xml_stream_writer_1a537defbbbbbad819448033b22aaf0d28" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>setAutoFormatting</name></member>
      <member refid="class_xml_stream_writer_1a04f90908c7ae4ad5b083d7037a533200" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>setAutoFormattingIndent</name></member>
      <member refid="class_xml_stream_writer_1ab73a5ee5db6824afd4a2bc66e8f12e78" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>setCodec</name></member>
      <member refid="class_xml_stream_writer_1a926ebebdb26125f7423cf579bf07143a" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>setCodec</name></member>
      <member refid="class_xml_stream_writer_1ac03d4a48cc662d5c43a136560f514fd3" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>setDevice</name></member>
      <member refid="class_xml_stream_writer_1a685d12dc71870e20e835085b6326787b" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeAttribute</name></member>
      <member refid="class_xml_stream_writer_1abfbab3a6a1ad652db31e46d40e727f84" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeAttribute</name></member>
      <member refid="class_xml_stream_writer_1aaa0061750c74a393ab443af6ddd06db5" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeAttribute</name></member>
      <member refid="class_xml_stream_writer_1a401845495b28fcc27a7f491ac402ea47" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeAttributes</name></member>
      <member refid="class_xml_stream_writer_1a812b894549f810c701ca3826acd9cc65" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeCDATA</name></member>
      <member refid="class_xml_stream_writer_1aea9dab80ea787794736d3f2a524780e5" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeCharacters</name></member>
      <member refid="class_xml_stream_writer_1aa250fc649bdef6373d1f25d4bc7db431" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeComment</name></member>
      <member refid="class_xml_stream_writer_1ad3fc36a8359435e85bb0fa85dc785d70" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeCurrentToken</name></member>
      <member refid="class_xml_stream_writer_1ad545600b4e2c9d73ad9e216a20ff081e" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeDefaultNamespace</name></member>
      <member refid="class_xml_stream_writer_1a6e2b9fe72e7a85b044690cf41aee18fe" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeDTD</name></member>
      <member refid="class_xml_stream_writer_1a07e058f896327e9236e7c19132842cf2" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeEmptyElement</name></member>
      <member refid="class_xml_stream_writer_1ad366e97aa66482054f029843bc982586" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeEmptyElement</name></member>
      <member refid="class_xml_stream_writer_1a4fa078ed52892cec544e890efb1c3b50" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeEndDocument</name></member>
      <member refid="class_xml_stream_writer_1add89e8f61a141e2b320cf2b567e7edfb" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeEndElement</name></member>
      <member refid="class_xml_stream_writer_1aeea05577f7ecd0eaa34b4237fdbe446d" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeEntityReference</name></member>
      <member refid="class_xml_stream_writer_1ae04b7c7035435fd98cc625257776e732" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeNamespace</name></member>
      <member refid="class_xml_stream_writer_1a5b31ab7e5667538264c8d8fa8de79eda" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeProcessingInstruction</name></member>
      <member refid="class_xml_stream_writer_1ae9d5ccf2e94485352e4c1c8843dc0641" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeStartDocument</name></member>
      <member refid="class_xml_stream_writer_1affda139fb2d91c8893615b6ca6b9570a" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeStartDocument</name></member>
      <member refid="class_xml_stream_writer_1af7df556ca625050ceba8041b9e71654b" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeStartDocument</name></member>
      <member refid="class_xml_stream_writer_1aa001c660c1df012b4e37773aa219c379" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeStartElement</name></member>
      <member refid="class_xml_stream_writer_1ab8d06c59d1684e88d2bd820c72baf7bc" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeStartElement</name></member>
      <member refid="class_xml_stream_writer_1a3c1e28db26255b0a88745ac76e84485e" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeTextElement</name></member>
      <member refid="class_xml_stream_writer_1a378c2645f837b9ea5786648285d4d6f4" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>writeTextElement</name></member>
      <member refid="class_xml_stream_writer_1acaffb798a42742e6be689bc0cf9b80d9" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>XmlStreamWriter</name></member>
      <member refid="class_xml_stream_writer_1adad3a38281bd2eee59f7240098fb0c96" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>XmlStreamWriter</name></member>
      <member refid="class_xml_stream_writer_1a59044bd63fb4f1bf1c615666a44ea325" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>XmlStreamWriter</name></member>
      <member refid="class_xml_stream_writer_1a149da545bb2fa21dbb6989c0eab6cf99" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>XmlStreamWriter</name></member>
      <member refid="class_xml_stream_writer_1a0cd28f6b6ce9ad95831b35d6823a8ecb" prot="public" virt="non-virtual"><scope>XmlStreamWriter</scope><name>~XmlStreamWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
