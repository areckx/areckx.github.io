<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_cairo_output_dev_8cc" kind="file" language="C++">
    <compoundname>CairoOutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">cairo.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="gtypes__p_8h" local="yes">goo/gtypes_p.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_link_8h" local="yes">Link.h</includes>
    <includes refid="_font_encoding_tables_8h" local="yes">FontEncodingTables.h</includes>
    <includes refid="_p_d_f_doc_encoding_8h" local="yes">PDFDocEncoding.h</includes>
    <includes refid="_fo_fi_true_type_8h" local="no">fofi/FoFiTrueType.h</includes>
    <includes refid="_splash_bitmap_8h" local="no">splash/SplashBitmap.h</includes>
    <includes refid="_cairo_output_dev_8h" local="yes">CairoOutputDev.h</includes>
    <includes refid="_cairo_font_engine_8h" local="yes">CairoFontEngine.h</includes>
    <includes refid="_cairo_rescale_box_8h" local="yes">CairoRescaleBox.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_j_b_i_g2_stream_8h" local="yes">JBIG2Stream.h</includes>
    <incdepgraph>
      <node id="85757">
        <label>TextOutputDev.h</label>
        <link refid="_text_output_dev_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85745" relation="include">
        </childnode>
        <childnode refid="85740" relation="include">
        </childnode>
        <childnode refid="85756" relation="include">
        </childnode>
      </node>
      <node id="85767">
        <label>JBIG2Stream.h</label>
        <link refid="_j_b_i_g2_stream_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85737" relation="include">
        </childnode>
      </node>
      <node id="85728">
        <label>stdarg.h</label>
      </node>
      <node id="85741">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85732" relation="include">
        </childnode>
      </node>
      <node id="85712">
        <label>assert.h</label>
      </node>
      <node id="85760">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85737" relation="include">
        </childnode>
        <childnode refid="85744" relation="include">
        </childnode>
      </node>
      <node id="85740">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85741" relation="include">
        </childnode>
        <childnode refid="85712" relation="include">
        </childnode>
        <childnode refid="85742" relation="include">
        </childnode>
      </node>
      <node id="85714">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85717" relation="include">
        </childnode>
        <childnode refid="85718" relation="include">
        </childnode>
        <childnode refid="85719" relation="include">
        </childnode>
        <childnode refid="85720" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
      </node>
      <node id="85745">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85729" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85724" relation="include">
        </childnode>
      </node>
      <node id="85717">
        <label>stdlib.h</label>
      </node>
      <node id="85733">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85715" relation="include">
        </childnode>
      </node>
      <node id="85759">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
        <childnode refid="85760" relation="include">
        </childnode>
        <childnode refid="85761" relation="include">
        </childnode>
        <childnode refid="85746" relation="include">
        </childnode>
        <childnode refid="85762" relation="include">
        </childnode>
        <childnode refid="85763" relation="include">
        </childnode>
        <childnode refid="85764" relation="include">
        </childnode>
        <childnode refid="85737" relation="include">
        </childnode>
      </node>
      <node id="85735">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85761">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
        <childnode refid="85744" relation="include">
        </childnode>
      </node>
      <node id="85748">
        <label>FontEncodingTables.h</label>
        <link refid="_font_encoding_tables_8h_source"/>
      </node>
      <node id="85723">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="85712" relation="include">
        </childnode>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85724" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85742">
        <label>map</label>
      </node>
      <node id="85727">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="85728" relation="include">
        </childnode>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85729" relation="include">
        </childnode>
      </node>
      <node id="85738">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85739" relation="include">
        </childnode>
        <childnode refid="85740" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85743" relation="include">
        </childnode>
        <childnode refid="85744" relation="include">
        </childnode>
      </node>
      <node id="85739">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
      </node>
      <node id="85736">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85762">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="85731" relation="include">
        </childnode>
      </node>
      <node id="85718">
        <label>stddef.h</label>
      </node>
      <node id="85746">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85730">
        <label>limits.h</label>
      </node>
      <node id="85755">
        <label>cairo-ft.h</label>
      </node>
      <node id="85715">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="85716" relation="include">
        </childnode>
      </node>
      <node id="85734">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="85708">
        <label>thirdparty/poppler/poppler/CairoOutputDev.cc</label>
        <link refid="_cairo_output_dev_8cc"/>
        <childnode refid="85709" relation="include">
        </childnode>
        <childnode refid="85710" relation="include">
        </childnode>
        <childnode refid="85711" relation="include">
        </childnode>
        <childnode refid="85712" relation="include">
        </childnode>
        <childnode refid="85713" relation="include">
        </childnode>
        <childnode refid="85714" relation="include">
        </childnode>
        <childnode refid="85722" relation="include">
        </childnode>
        <childnode refid="85723" relation="include">
        </childnode>
        <childnode refid="85727" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85738" relation="include">
        </childnode>
        <childnode refid="85740" relation="include">
        </childnode>
        <childnode refid="85745" relation="include">
        </childnode>
        <childnode refid="85746" relation="include">
        </childnode>
        <childnode refid="85747" relation="include">
        </childnode>
        <childnode refid="85748" relation="include">
        </childnode>
        <childnode refid="85749" relation="include">
        </childnode>
        <childnode refid="85750" relation="include">
        </childnode>
        <childnode refid="85752" relation="include">
        </childnode>
        <childnode refid="85754" relation="include">
        </childnode>
        <childnode refid="85758" relation="include">
        </childnode>
        <childnode refid="85765" relation="include">
        </childnode>
        <childnode refid="85766" relation="include">
        </childnode>
        <childnode refid="85767" relation="include">
        </childnode>
      </node>
      <node id="85765">
        <label>CairoRescaleBox.h</label>
        <link refid="_cairo_rescale_box_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85713" relation="include">
        </childnode>
      </node>
      <node id="85737">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85726">
        <label>pthread.h</label>
      </node>
      <node id="85720">
        <label>sys/types.h</label>
      </node>
      <node id="85743">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="85731" relation="include">
        </childnode>
      </node>
      <node id="85751">
        <label>FoFiBase.h</label>
        <link refid="_fo_fi_base_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
      </node>
      <node id="85710">
        <label>string.h</label>
      </node>
      <node id="85729">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="85730" relation="include">
        </childnode>
        <childnode refid="85728" relation="include">
        </childnode>
        <childnode refid="85717" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
      </node>
      <node id="85763">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85762" relation="include">
        </childnode>
        <childnode refid="85732" relation="include">
        </childnode>
      </node>
      <node id="85747">
        <label>Link.h</label>
        <link refid="_link_8h_source"/>
        <childnode refid="85731" relation="include">
        </childnode>
      </node>
      <node id="85731">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="85732" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
        <childnode refid="85710" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85733" relation="include">
        </childnode>
        <childnode refid="85729" relation="include">
        </childnode>
        <childnode refid="85734" relation="include">
        </childnode>
        <childnode refid="85727" relation="include">
        </childnode>
        <childnode refid="85735" relation="include">
        </childnode>
        <childnode refid="85736" relation="include">
        </childnode>
        <childnode refid="85737" relation="include">
        </childnode>
      </node>
      <node id="85719">
        <label>unistd.h</label>
      </node>
      <node id="85744">
        <label>vector</label>
      </node>
      <node id="85750">
        <label>fofi/FoFiTrueType.h</label>
        <link refid="_fo_fi_true_type_8h_source"/>
        <childnode refid="85718" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85751" relation="include">
        </childnode>
      </node>
      <node id="85754">
        <label>CairoOutputDev.h</label>
        <link refid="_cairo_output_dev_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85755" relation="include">
        </childnode>
        <childnode refid="85756" relation="include">
        </childnode>
        <childnode refid="85757" relation="include">
        </childnode>
        <childnode refid="85740" relation="include">
        </childnode>
      </node>
      <node id="85752">
        <label>splash/SplashBitmap.h</label>
        <link refid="_splash_bitmap_8h_source"/>
        <childnode refid="85753" relation="include">
        </childnode>
        <childnode refid="85740" relation="include">
        </childnode>
        <childnode refid="85716" relation="include">
        </childnode>
      </node>
      <node id="85756">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85724" relation="include">
        </childnode>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85743" relation="include">
        </childnode>
      </node>
      <node id="85711">
        <label>math.h</label>
      </node>
      <node id="85725">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="85726" relation="include">
        </childnode>
      </node>
      <node id="85724">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="85753">
        <label>SplashTypes.h</label>
        <link refid="_splash_types_8h_source"/>
        <childnode refid="85721" relation="include">
        </childnode>
      </node>
      <node id="85721">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
      </node>
      <node id="85722">
        <label>goo/gtypes_p.h</label>
        <link refid="gtypes__p_8h_source"/>
        <childnode refid="85709" relation="include">
        </childnode>
      </node>
      <node id="85766">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85724" relation="include">
        </childnode>
        <childnode refid="85725" relation="include">
        </childnode>
      </node>
      <node id="85749">
        <label>PDFDocEncoding.h</label>
        <link refid="_p_d_f_doc_encoding_8h_source"/>
        <childnode refid="85724" relation="include">
        </childnode>
      </node>
      <node id="85732">
        <label>set</label>
      </node>
      <node id="85709">
        <label>config.h</label>
      </node>
      <node id="85764">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="85731" relation="include">
        </childnode>
        <childnode refid="85724" relation="include">
        </childnode>
      </node>
      <node id="85716">
        <label>stdio.h</label>
      </node>
      <node id="85713">
        <label>cairo.h</label>
      </node>
      <node id="85758">
        <label>CairoFontEngine.h</label>
        <link refid="_cairo_font_engine_8h_source"/>
        <childnode refid="85715" relation="include">
        </childnode>
        <childnode refid="85721" relation="include">
        </childnode>
        <childnode refid="85755" relation="include">
        </childnode>
        <childnode refid="85745" relation="include">
        </childnode>
        <childnode refid="85759" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_rescale_draw_image" prot="public">RescaleDrawImage</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_cairo_output_dev_8cc_1af855c94dc540e943632089ce7496faac" prot="public" static="no">
        <name>LOG</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="75" column="10" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_cairo_output_dev_8cc_1a3acffbd305ee72dcd4593c0d8af64a4f" prot="public" static="no">
        <name>MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &lt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="85" column="9" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_cairo_output_dev_8cc_1afa99ec4acc4ecb2dc3c2d05da15d0e3f" prot="public" static="no">
        <name>MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &gt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="86" column="9" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_cairo_output_dev_8cc_1ab9e3417aaf5d7a696588f2974f24a6a0" prot="public" static="no">
        <name>STROKE_COORD_TOLERANCE</name>
        <initializer>0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="708" column="9" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="708" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_cairo_output_dev_8cc_1a0239a17214139019563dd3ea0bc06d7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void printMatrix</definition>
        <argsstring>(cairo_matrix_t *matrix)</argsstring>
        <name>printMatrix</name>
        <param>
          <type>cairo_matrix_t *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="78" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1a1c7d2c6e053a4d52747b8de1beab46b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashRound</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashRound</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1587" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1587" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1a7c137464668e24765ceac6d6b3d8c7ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashCeil</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashCeil</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1591" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1591" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1acf505bcf47f361a6b5a1625f16dac7ba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int splashFloor</definition>
        <argsstring>(SplashCoord x)</argsstring>
        <name>splashFloor</name>
        <param>
          <type>SplashCoord</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1595" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1595" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1ad00850e5ec63fc88c8ec51b3775a5981" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cairo_surface_t *</type>
        <definition>static cairo_surface_t* cairo_surface_create_similar_clip</definition>
        <argsstring>(cairo_t *cairo, cairo_content_t content)</argsstring>
        <name>cairo_surface_create_similar_clip</name>
        <param>
          <type>cairo_t *</type>
          <declname>cairo</declname>
        </param>
        <param>
          <type>cairo_content_t</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1600" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1600" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1afb9532e38ebcb76caeafdcafc5bd50d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int luminocity</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>luminocity</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1732" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1732" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1a8e551834ee0b3aba7fe49f03fff9c64d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void get_singular_values</definition>
        <argsstring>(const cairo_matrix_t *matrix, double *major, double *minor)</argsstring>
        <name>get_singular_values</name>
        <param>
          <type>const cairo_matrix_t *</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>minor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="1889" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="1889" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1ab0cb9a707a73b9298c04a09d5019094a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool colorMapHasIdentityDecodeMap</definition>
        <argsstring>(GfxImageColorMap *colorMap)</argsstring>
        <name>colorMapHasIdentityDecodeMap</name>
        <param>
          <type><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref> *</type>
          <declname>colorMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="2852" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="2852" bodyend="2859"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_output_dev_8cc_1a00bede35f98e3c11532bc6771970609a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cairo_status_t</type>
        <definition>static cairo_status_t setMimeIdFromRef</definition>
        <argsstring>(cairo_surface_t *surface, const char *mime_type, const char *mime_id_prefix, Ref ref)</argsstring>
        <name>setMimeIdFromRef</name>
        <param>
          <type>cairo_surface_t *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mime_id_prefix</declname>
        </param>
        <param>
          <type><ref refid="struct_ref" kindref="compound">Ref</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoOutputDev.cc" line="2862" column="1" bodyfile="thirdparty/poppler/poppler/CairoOutputDev.cc" bodystart="2862" bodyend="2887"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2004<sp/>Red<sp/>Hat,<sp/>Inc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005-2008<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2006<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2009,<sp/>2012<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Nickolay<sp/>V.<sp/>Shmyrev<sp/>&lt;nshmyrev@yandex.ru&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2011,<sp/>2013,<sp/>2014<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Carl<sp/>Worth<sp/>&lt;cworth@cworth.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008-2015<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Michael<sp/>Vrable<sp/>&lt;mvrable@cs.ucsd.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2009<sp/>Chris<sp/>Wilson<sp/>&lt;chris@chris-wilson.co.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2012<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2010<sp/>David<sp/>Benjamin<sp/>&lt;davidben@mit.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Patrick<sp/>Pfeifer<sp/>&lt;p2000@mailinator.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2015,<sp/>2016<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Suzuki<sp/>Toshiya<sp/>&lt;mpsuzuki@hiroshima-u.ac.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cairo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gtypes_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Link.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FontEncodingTables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDocEncoding.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fofi/FoFiTrueType.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;splash/SplashBitmap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CairoOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CairoFontEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CairoRescaleBox.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JBIG2Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>LOG_CAIRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LOG_CAIRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printMatrix(cairo_matrix_t<sp/>*matrix){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f<sp/>%f,<sp/>%f<sp/>%f<sp/>(%f<sp/>%f)\n&quot;</highlight><highlight class="normal">,<sp/>matrix-&gt;xx,<sp/>matrix-&gt;yx,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;xy,<sp/>matrix-&gt;yy,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;x0,<sp/>matrix-&gt;y0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(a,b)<sp/>(((a)<sp/>&lt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(a,b)<sp/>(((a)<sp/>&gt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoImage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">CairoImage::CairoImage<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>this-&gt;image<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>this-&gt;x1<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>this-&gt;y1<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>this-&gt;x2<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>this-&gt;y2<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">CairoImage::~CairoImage<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(image)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImage::setImage<sp/>(cairo_surface_t<sp/>*image)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;image)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(this-&gt;image);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>this-&gt;image<sp/>=<sp/>cairo_surface_reference<sp/>(image);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>tie<sp/>the<sp/>lifetime<sp/>of<sp/>an<sp/>FT_Library<sp/>object<sp/>to<sp/>that<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoOutputDev,<sp/>since<sp/>any<sp/>FT_Faces<sp/>created<sp/>with<sp/>it<sp/>may<sp/>end<sp/>up<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>by<sp/>Cairo<sp/>which<sp/>can<sp/>be<sp/>held<sp/>long<sp/>after<sp/>the<sp/>CairoOutputDev<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deleted.<sp/><sp/>The<sp/>simplest<sp/>way<sp/>to<sp/>avoid<sp/>problems<sp/>is<sp/>to<sp/>never<sp/>tear<sp/>down<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FT_Library<sp/>instance;<sp/>to<sp/>avoid<sp/>leaks,<sp/>just<sp/>use<sp/>a<sp/>single<sp/>global<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialized<sp/>the<sp/>first<sp/>time<sp/>it<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>CairoOutputDev::ft_lib;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">GBool<sp/>CairoOutputDev::ft_lib_initialized<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">CairoOutputDev::CairoOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ft_lib_initialized)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Init_FreeType(&amp;ft_lib);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ft_lib_initialized<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>fontEngine<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>fontEngine_owner<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>glyphs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>fill_color.r<sp/>=<sp/>fill_color.g<sp/>=<sp/>fill_color.b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>stroke_pattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>stroke_color.r<sp/>=<sp/>stroke_color.g<sp/>=<sp/>stroke_color.b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>stroke_opacity<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>fill_opacity<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>textClipPath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>strokePathClip<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>cairo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>currentFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>prescaleImages<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>printing<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>use_show_text_glyphs<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>t3_glyph_has_bbox<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>text_matrix_valid<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>groupColorSpaceStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>maskStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>group<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>cairo_shape<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>knockoutCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>SA<sp/>parameter<sp/>supposedly<sp/>defaults<sp/>to<sp/>false,<sp/>but<sp/>Acrobat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apparently<sp/>hardwires<sp/>it<sp/>to<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>stroke_adjust<sp/>=<sp/>globalParams-&gt;getStrokeAdjust();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>align_stroke_coords<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>adjusted_stroke_width<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">CairoOutputDev::~CairoOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontEngine_owner<sp/>&amp;&amp;<sp/>fontEngine)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontEngine;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cairo);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(stroke_pattern);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(group);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(mask);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(shape);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualText)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;<sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setCairo(cairo_t<sp/>*cairo)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;cairo<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_status_t<sp/>status<sp/>=<sp/>cairo_status<sp/>(this-&gt;cairo);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;cairo<sp/>context<sp/>error:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>cairo_status_to_string(status));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(this-&gt;cairo);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!cairo_shape);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cairo<sp/>=<sp/>cairo_reference<sp/>(cairo);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>the<sp/>initial<sp/>matrix<sp/>so<sp/>that<sp/>we<sp/>can<sp/>use<sp/>it<sp/>for<sp/>type3<sp/>fonts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>is<sp/>this<sp/>sufficient?<sp/>could<sp/>we<sp/>miss<sp/>changes<sp/>to<sp/>the<sp/>matrix<sp/>somehow?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;orig_matrix);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>setAntialias(cairo,<sp/>antialias);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cairo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cairo_shape<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setTextPage(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*text)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;text)<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;text-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualText)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;text<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;text-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>actualText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_actual_text" kindref="compound">ActualText</ref>(text);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;text<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>actualText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setAntialias(cairo_antialias_t<sp/>antialias)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>this-&gt;antialias<sp/>=<sp/>antialias;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>setAntialias<sp/>(cairo,<sp/>antialias);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>setAntialias<sp/>(cairo_shape,<sp/>antialias);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setAntialias(cairo_t<sp/>*cr,<sp/>cairo_antialias_t<sp/>antialias)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>cairo_font_options_t<sp/>*font_options;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>cairo_set_antialias<sp/>(cairo,<sp/>antialias);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>font_options<sp/>=<sp/>cairo_font_options_create<sp/>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>cairo_get_font_options<sp/>(cr,<sp/>font_options);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>cairo_font_options_set_antialias<sp/>(font_options,<sp/>antialias);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>cairo_set_font_options<sp/>(cr,<sp/>font_options);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>cairo_font_options_destroy<sp/>(font_options);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::startDoc(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cairo_font_engine" kindref="compound">CairoFontEngine</ref><sp/>*parentFontEngine)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parentFontEngine)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>fontEngine<sp/>=<sp/>parentFontEngine;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontEngine)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontEngine;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>fontEngine<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_font_engine" kindref="compound">CairoFontEngine</ref>(ft_lib);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>fontEngine_owner<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>doc-&gt;getXRef();</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xrefA)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>some<sp/>per<sp/>page<sp/>defaults<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(stroke_pattern);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_rgb(0.,<sp/>0.,<sp/>0.);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>fill_color.r<sp/>=<sp/>fill_color.g<sp/>=<sp/>fill_color.b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>stroke_pattern<sp/>=<sp/>cairo_pattern_reference(fill_pattern);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>stroke_color.r<sp/>=<sp/>stroke_color.g<sp/>=<sp/>stroke_color.b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;startPage(state);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xrefA<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>xref<sp/>=<sp/>xrefA;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endPage()<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;endPage();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;coalesce(gTrue,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::saveState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;save\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>MaskStack<sp/>*ms<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MaskStack;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ms-&gt;mask<sp/>=<sp/>cairo_pattern_reference(mask);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>ms-&gt;mask_matrix<sp/>=<sp/>mask_matrix;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>ms-&gt;next<sp/>=<sp/>maskStack;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>maskStack<sp/>=<sp/>ms;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>strokePathClip-&gt;ref_count++;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::restoreState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;restore\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>text_matrix_valid<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>aren&apos;t<sp/>restored<sp/>by<sp/>cairo_restore()<sp/>since<sp/>we<sp/>keep<sp/>them<sp/>in</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>output<sp/>device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>updateFillColor(state);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>updateStrokeColor(state);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>updateFillOpacity(state);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>updateStrokeOpacity(state);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>updateBlendMode(state);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>MaskStack*<sp/>ms<sp/>=<sp/>maskStack;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ms)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_destroy(mask);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>ms-&gt;mask;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_matrix<sp/>=<sp/>ms-&gt;mask_matrix;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStack<sp/>=<sp/>ms-&gt;next;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ms;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip<sp/>&amp;&amp;<sp/>--strokePathClip-&gt;ref_count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>strokePathClip-&gt;path;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip-&gt;dashes)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree<sp/>(strokePathClip-&gt;dashes);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(strokePathClip);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>strokePathClip<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateAll(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>updateLineDash(state);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>updateLineJoin(state);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>updateLineCap(state);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>updateLineWidth(state);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>updateFlatness(state);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>updateMiterLimit(state);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>updateFillColor(state);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>updateStrokeColor(state);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>updateFillOpacity(state);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>updateStrokeOpacity(state);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>updateBlendMode(state);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setDefaultCTM(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>ctm[2];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>ctm[3];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>matrix.x0<sp/>=<sp/>ctm[4];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>matrix.y0<sp/>=<sp/>ctm[5];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>cairo_transform<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_transform<sp/>(cairo_shape,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>OutputDev::setDefaultCTM(ctm);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateCTM(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m31,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m32)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix,<sp/>invert_matrix;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>m11;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>m12;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>m21;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>m22;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>matrix.x0<sp/>=<sp/>m31;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>matrix.y0<sp/>=<sp/>m32;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>matrix<sp/>is<sp/>invertible<sp/>before<sp/>setting<sp/>it.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/>*<sp/>cairo<sp/>will<sp/>blow<sp/>up<sp/>if<sp/>we<sp/>give<sp/>it<sp/>a<sp/>matrix<sp/>that&apos;s<sp/>not</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/>*<sp/>invertible,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>check<sp/>before<sp/>passing<sp/>it</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>cairo_transform.<sp/>Ignoring<sp/>it<sp/>is<sp/>likely<sp/>to<sp/>give<sp/>better</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/>*<sp/>results<sp/>than<sp/>not<sp/>rendering<sp/>anything<sp/>at<sp/>all.<sp/>See<sp/>#14398</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Ideally,<sp/>we<sp/>could<sp/>do<sp/>the<sp/>cairo_transform</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>then<sp/>check<sp/>if<sp/>anything<sp/>went<sp/>wrong<sp/>and<sp/>fix<sp/>it<sp/>then</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/>*<sp/>instead<sp/>of<sp/>having<sp/>to<sp/>invert<sp/>the<sp/>matrix.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>invert_matrix<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_matrix_invert(&amp;invert_matrix))<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;matrix<sp/>not<sp/>invertible\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>cairo_transform<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_transform<sp/>(cairo_shape,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>updateLineDash(state);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>updateLineJoin(state);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>updateLineCap(state);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>updateLineWidth(state);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateLineDash(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dashPattern;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dashLength;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dashStart;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>state-&gt;getLineDash(&amp;dashPattern,<sp/>&amp;dashLength,<sp/>&amp;dashStart);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>cairo_set_dash<sp/>(cairo,<sp/>dashPattern,<sp/>dashLength,<sp/>dashStart);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_dash<sp/>(cairo_shape,<sp/>dashPattern,<sp/>dashLength,<sp/>dashStart);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateFlatness(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cairo_set_tolerance<sp/>(cairo,<sp/>state-&gt;getFlatness());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateLineJoin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state-&gt;getLineJoin())<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_join<sp/>(cairo,<sp/>CAIRO_LINE_JOIN_MITER);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_join<sp/>(cairo,<sp/>CAIRO_LINE_JOIN_ROUND);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_join<sp/>(cairo,<sp/>CAIRO_LINE_JOIN_BEVEL);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_join<sp/>(cairo_shape,<sp/>cairo_get_line_join(cairo));</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateLineCap(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state-&gt;getLineCap())<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_cap<sp/>(cairo,<sp/>CAIRO_LINE_CAP_BUTT);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_cap<sp/>(cairo,<sp/>CAIRO_LINE_CAP_ROUND);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_cap<sp/>(cairo,<sp/>CAIRO_LINE_CAP_SQUARE);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_cap<sp/>(cairo_shape,<sp/>cairo_get_line_cap(cairo));</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateMiterLimit(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>cairo_set_miter_limit<sp/>(cairo,<sp/>state-&gt;getMiterLimit());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_miter_limit<sp/>(cairo_shape,<sp/>state-&gt;getMiterLimit());</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateLineWidth(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;line<sp/>width:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getLineWidth()));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>adjusted_stroke_width<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>state-&gt;getLineWidth();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stroke_adjust<sp/>&amp;&amp;<sp/>!printing)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>out<sp/>line<sp/>width<sp/>in<sp/>device<sp/>units<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device_distance(cairo,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(x)<sp/>&lt;=<sp/>1.0<sp/>&amp;&amp;<sp/>fabs(y)<sp/>&lt;=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>adjust<sp/>width<sp/>to<sp/>at<sp/>least<sp/>one<sp/>device<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_device_to_user_distance(cairo,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>MIN(fabs(x),fabs(y));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adjusted_stroke_width<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cairo<sp/>does<sp/>not<sp/>support<sp/>0<sp/>line<sp/>width<sp/>==<sp/>1<sp/>device<sp/>pixel.<sp/>Find<sp/>out</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>how<sp/>big<sp/>pixels<sp/>(device<sp/>unit)<sp/>are<sp/>in<sp/>the<sp/>x<sp/>and<sp/>y</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>directions.<sp/>Choose<sp/>the<sp/>smaller<sp/>of<sp/>the<sp/>two<sp/>as<sp/>our<sp/>line<sp/>width.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1.0,<sp/>y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printing)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>printer<sp/>pixel<sp/>size<sp/>is<sp/>1/600<sp/>inch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>72.0/600;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>72.0/600;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_device_to_user_distance(cairo,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>MIN(fabs(x),fabs(y));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>cairo_set_line_width<sp/>(cairo,<sp/>width);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_line_width<sp/>(cairo_shape,<sp/>cairo_get_line_width<sp/>(cairo));</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateFillColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/><ref refid="structcolor" kindref="compound">color</ref><sp/>=<sp/>fill_color;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>state-&gt;getFillRGB(&amp;fill_color);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_get_type<sp/>(fill_pattern)<sp/>!=<sp/>CAIRO_PATTERN_TYPE_SOLID<sp/>||</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.r<sp/>!=<sp/>fill_color.r<sp/>||</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.g<sp/>!=<sp/>fill_color.g<sp/>||</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.b<sp/>!=<sp/>fill_color.b)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_rgba(colToDbl(fill_color.r),</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.g),</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.b),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_opacity);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill<sp/>color:<sp/>%d<sp/>%d<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_color.r,<sp/>fill_color.g,<sp/>fill_color.b));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateStrokeColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>color<sp/>=<sp/>stroke_color;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>state-&gt;getStrokeRGB(&amp;stroke_color);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_get_type<sp/>(fill_pattern)<sp/>!=<sp/>CAIRO_PATTERN_TYPE_SOLID<sp/>||</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.r<sp/>!=<sp/>stroke_color.r<sp/>||</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.g<sp/>!=<sp/>stroke_color.g<sp/>||</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.b<sp/>!=<sp/>stroke_color.b)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(stroke_pattern);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>stroke_pattern<sp/>=<sp/>cairo_pattern_create_rgba(colToDbl(stroke_color.r),</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(stroke_color.g),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(stroke_color.b),</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stroke_opacity);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;stroke<sp/>color:<sp/>%d<sp/>%d<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stroke_color.r,<sp/>stroke_color.g,<sp/>stroke_color.b));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateFillOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>opacity<sp/>=<sp/>fill_opacity;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>fill_opacity<sp/>=<sp/>state-&gt;getFillOpacity();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opacity<sp/>!=<sp/>fill_opacity)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_rgba(colToDbl(fill_color.r),</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.g),</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.b),</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_opacity);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill<sp/>opacity:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>fill_opacity));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateStrokeOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>opacity<sp/>=<sp/>stroke_opacity;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>stroke_opacity<sp/>=<sp/>state-&gt;getStrokeOpacity();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opacity<sp/>!=<sp/>stroke_opacity)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(stroke_pattern);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>stroke_pattern<sp/>=<sp/>cairo_pattern_create_rgba(colToDbl(stroke_color.r),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(stroke_color.g),</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(stroke_color.b),</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stroke_opacity);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;stroke<sp/>opacity:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>stroke_opacity));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateFillColorStop(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>state-&gt;getFillRGB(&amp;fill_color);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>cairo_pattern_add_color_stop_rgba(fill_pattern,<sp/>offset,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.r),</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.g),</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(fill_color.b),</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_opacity);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill<sp/>color<sp/>stop:<sp/>%f<sp/>(%d,<sp/>%d,<sp/>%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>fill_color.r,<sp/>fill_color.g,<sp/>fill_color.b));</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateBlendMode(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state-&gt;getBlendMode())<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendNormal:</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_OVER);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendMultiply:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_MULTIPLY);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendScreen:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_SCREEN);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendOverlay:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_OVERLAY);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendDarken:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_DARKEN);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendLighten:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_LIGHTEN);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendColorDodge:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_COLOR_DODGE);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendColorBurn:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_COLOR_BURN);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendHardLight:</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_HARD_LIGHT);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendSoftLight:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_SOFT_LIGHT);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendDifference:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_DIFFERENCE);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendExclusion:</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_EXCLUSION);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendHue:</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_HSL_HUE);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendSaturation:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_HSL_SATURATION);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendColor:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_HSL_COLOR);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxBlendLuminosity:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_HSL_LUMINOSITY);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;blend<sp/>mode:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)state-&gt;getBlendMode()));</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::updateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>cairo_font_face_t<sp/>*font_face;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix,<sp/>invert_matrix;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;updateFont()<sp/>font=%s\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getFont()-&gt;getName()-&gt;getCString()));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME:<sp/>use<sp/>cairo<sp/>font<sp/>engine?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>currentFont<sp/>=<sp/>fontEngine-&gt;getFont<sp/>(state-&gt;getFont(),<sp/>doc,<sp/>printing,<sp/>xref);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentFont)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>font_face<sp/>=<sp/>currentFont-&gt;getFontFace();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>cairo_set_font_face<sp/>(cairo,<sp/>font_face);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>use_show_text_glyphs<sp/>=<sp/>state-&gt;getFont()-&gt;hasToUnicodeCMap()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_has_show_text_glyphs<sp/>(cairo_get_target<sp/>(cairo));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSize<sp/>=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m<sp/>=<sp/>state-&gt;getTextMat();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>adjusting<sp/>by<sp/>a<sp/>constant<sp/>is<sp/>hack.<sp/>The<sp/>correct<sp/>solution</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>probably<sp/>to<sp/>use<sp/>user-fonts<sp/>and<sp/>compute<sp/>the<sp/>scale<sp/>on<sp/>a<sp/>per</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/>*<sp/>glyph<sp/>basis<sp/>instead<sp/>of<sp/>for<sp/>the<sp/>entire<sp/>font<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>currentFont-&gt;getSubstitutionCorrection(state-&gt;getFont());</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>m[0]<sp/>*<sp/>fontSize<sp/>*<sp/>state-&gt;getHorizScaling()<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>m[1]<sp/>*<sp/>fontSize<sp/>*<sp/>state-&gt;getHorizScaling()<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>-m[2]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>-m[3]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>matrix.x0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>matrix.y0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;font<sp/>matrix:<sp/>%f<sp/>%f<sp/>%f<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>matrix.xx,<sp/>matrix.yx,<sp/>matrix.xy,<sp/>matrix.yy));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>font<sp/>matrix<sp/>is<sp/>invertible<sp/>before<sp/>setting<sp/>it.<sp/><sp/>cairo</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/>*<sp/>will<sp/>blow<sp/>up<sp/>if<sp/>we<sp/>give<sp/>it<sp/>a<sp/>matrix<sp/>that&apos;s<sp/>not<sp/>invertible,<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/>*<sp/>need<sp/>to<sp/>check<sp/>before<sp/>passing<sp/>it<sp/>to<sp/>cairo_set_font_matrix.<sp/>Ignoring<sp/>it</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/>*<sp/>is<sp/>likely<sp/>to<sp/>give<sp/>better<sp/>results<sp/>than<sp/>not<sp/>rendering<sp/>anything<sp/>at</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/>*<sp/>all.<sp/>See<sp/>#18254.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>invert_matrix<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_matrix_invert(&amp;invert_matrix))<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;font<sp/>matrix<sp/>not<sp/>invertible&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>text_matrix_valid<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>cairo_set_font_matrix<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>text_matrix_valid<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tolerance<sp/>in<sp/>pixels<sp/>for<sp/>checking<sp/>if<sp/>strokes<sp/>are<sp/>horizontal<sp/>or<sp/>vertical</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>lines<sp/>in<sp/>device<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STROKE_COORD_TOLERANCE<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Align<sp/>stroke<sp/>coordinate<sp/>i<sp/>if<sp/>the<sp/>point<sp/>is<sp/>the<sp/>start<sp/>or<sp/>end<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>horizontal<sp/>or<sp/>vertical<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::alignStrokeCoords(<ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y)</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>GBool<sp/>align<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>subpath-&gt;getX(i);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>subpath-&gt;getY(i);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>cairo_user_to_device<sp/>(cairo,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>the<sp/>current<sp/>coord<sp/>and<sp/>prev<sp/>coord<sp/>form<sp/>a<sp/>horiz<sp/>or<sp/>vert<sp/>line?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!subpath-&gt;getCurve(i<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>subpath-&gt;getX(i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>subpath-&gt;getY(i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device<sp/>(cairo,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(x2<sp/>-<sp/>x1)<sp/>&lt;<sp/>STROKE_COORD_TOLERANCE<sp/>||<sp/>fabs(y2<sp/>-<sp/>y1)<sp/>&lt;<sp/>STROKE_COORD_TOLERANCE)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>the<sp/>current<sp/>coord<sp/>and<sp/>next<sp/>coord<sp/>form<sp/>a<sp/>horiz<sp/>or<sp/>vert<sp/>line?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>subpath-&gt;getNumPoints()<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>!subpath-&gt;getCurve(i<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>subpath-&gt;getX(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>subpath-&gt;getY(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device<sp/>(cairo,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(x2<sp/>-<sp/>x1)<sp/>&lt;<sp/>STROKE_COORD_TOLERANCE<sp/>||<sp/>fabs(y2<sp/>-<sp/>y1)<sp/>&lt;<sp/>STROKE_COORD_TOLERANCE)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>*x<sp/>=<sp/>subpath-&gt;getX(i);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>*y<sp/>=<sp/>subpath-&gt;getY(i);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>http://www.cairographics.org/FAQ/#sharp_lines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device<sp/>(cairo,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>*x<sp/>=<sp/>floor(*x)<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>*y<sp/>=<sp/>floor(*y)<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_device_to_user<sp/>(cairo,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>STROKE_COORD_TOLERANCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::doPath(cairo_t<sp/>*cairo,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>cairo_new_path<sp/>(cairo);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>path-&gt;getNumSubpaths();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(i);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getNumPoints()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_stroke_coords)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignStrokeCoords(subpath,<sp/>0,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>subpath-&gt;getX(0);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>subpath-&gt;getY(0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_move_to<sp/>(cairo,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>subpath-&gt;getNumPoints())<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getCurve(j))<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_stroke_coords)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignStrokeCoords(subpath,<sp/>j<sp/>+<sp/>2,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>subpath-&gt;getX(j+2);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>subpath-&gt;getY(j+2);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_curve_to(<sp/>cairo,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpath-&gt;getX(j),<sp/>subpath-&gt;getY(j),</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpath-&gt;getX(j+1),<sp/>subpath-&gt;getY(j+1),</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_stroke_coords)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignStrokeCoords(subpath,<sp/>j,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>subpath-&gt;getX(j);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>subpath-&gt;getY(j);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_line_to<sp/>(cairo,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;isClosed())<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;close\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_close_path<sp/>(cairo);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::stroke(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inType3Char)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillGray(&amp;gray);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colToDbl(gray)<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adjusted_stroke_width)</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>align_stroke_coords<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>align_stroke_coords<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>stroke_pattern);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;stroke\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_stroke<sp/>(cairo);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pop_group_to_source<sp/>(cairo);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>fillToStrokePathClip<sp/>(state);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_stroke<sp/>(cairo);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>doPath<sp/>(cairo_shape,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_stroke<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::fill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inType3Char)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillGray(&amp;gray);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colToDbl(gray)<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>cairo_set_fill_rule<sp/>(cairo,<sp/>CAIRO_FILL_RULE_WINDING);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>fill_pattern);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>how<sp/>do<sp/>we<sp/>get<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fillToStrokePathClip<sp/>(state);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pop_group_to_source<sp/>(cairo);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>mask);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>fillToStrokePathClip(state);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_fill_rule<sp/>(cairo_shape,<sp/>CAIRO_FILL_RULE_WINDING);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>doPath<sp/>(cairo_shape,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::eoFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>cairo_set_fill_rule<sp/>(cairo,<sp/>CAIRO_FILL_RULE_EVEN_ODD);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>fill_pattern);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill-eo\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>mask);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_fill_rule<sp/>(cairo_shape,<sp/>CAIRO_FILL_RULE_EVEN_ODD);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>doPath<sp/>(cairo_shape,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal">GBool<sp/>CairoOutputDev::tilingPatternFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfxA,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*cat,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tilingType*/</highlight><highlight class="normal">,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*pattern;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>pattern_matrix;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*old_cairo;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surface_width,<sp/>surface_height;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>StrokePathClip<sp/>*strokePathTmp;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>GBool<sp/>adjusted_stroke_width_tmp;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*maskTmp;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>bbox[2]<sp/>-<sp/>bbox[0];</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>bbox[3]<sp/>-<sp/>bbox[1];</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xStep<sp/>!=<sp/>width<sp/>||<sp/>yStep<sp/>!=<sp/>height)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>implement<sp/>the<sp/>other<sp/>cases<sp/>here<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>transformed<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>cairo_matrix_init<sp/>(&amp;pattern_matrix,<sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>cairo_matrix_multiply<sp/>(&amp;matrix,<sp/>&amp;matrix,<sp/>&amp;pattern_matrix);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>widthX<sp/>=<sp/>width,<sp/>widthY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>cairo_matrix_transform_distance<sp/>(&amp;matrix,<sp/>&amp;widthX,<sp/>&amp;widthY);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>surface_width<sp/>=<sp/>ceil<sp/>(sqrt<sp/>(widthX<sp/>*<sp/>widthX<sp/>+<sp/>widthY<sp/>*<sp/>widthY));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>heightX<sp/>=<sp/>0,<sp/>heightY<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>cairo_matrix_transform_distance<sp/>(&amp;matrix,<sp/>&amp;heightX,<sp/>&amp;heightY);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>surface_height<sp/>=<sp/>ceil<sp/>(sqrt<sp/>(heightX<sp/>*<sp/>heightX<sp/>+<sp/>heightY<sp/>*<sp/>heightY));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>surface<sp/>=<sp/>cairo_surface_create_similar<sp/>(cairo_get_target<sp/>(cairo),</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAIRO_CONTENT_COLOR_ALPHA,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface_width,<sp/>surface_height);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(surface))</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>old_cairo<sp/>=<sp/>cairo;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>cairo<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>setAntialias(cairo,<sp/>antialias);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>cairo_scale<sp/>(cairo,<sp/>surface_width<sp/>/<sp/>width,<sp/>surface_height<sp/>/<sp/>height);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];<sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];<sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>strokePathTmp<sp/>=<sp/>strokePathClip;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>strokePathClip<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>adjusted_stroke_width_tmp<sp/>=<sp/>adjusted_stroke_width;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>maskTmp<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>gfxA-&gt;getXRef());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>gfx-&gt;display(str);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>strokePathClip<sp/>=<sp/>strokePathTmp;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>adjusted_stroke_width<sp/>=<sp/>adjusted_stroke_width_tmp;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>maskTmp;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(cairo_get_target<sp/>(cairo));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>cairo_destroy<sp/>(cairo);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>cairo<sp/>=<sp/>old_cairo;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>xMin,<sp/>yMin,<sp/>xMax<sp/>-<sp/>xMin,<sp/>yMax<sp/>-<sp/>yMin);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>cairo_matrix_init_scale<sp/>(&amp;matrix,<sp/>surface_width<sp/>/<sp/>width,<sp/>surface_height<sp/>/<sp/>height);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>cairo_transform<sp/>(cairo,<sp/>&amp;pattern_matrix);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>cairo_pattern_set_extend<sp/>(pattern,<sp/>CAIRO_EXTEND_REPEAT);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>fillToStrokePathClip(state);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>12,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">GBool<sp/>CairoOutputDev::functionShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>shaded<sp/>fills<sp/>are<sp/>subdivided<sp/>to<sp/>rectangles<sp/>that<sp/>are<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>size<sp/>in<sp/>device<sp/>space.<sp/><sp/>Note<sp/>when<sp/>printing<sp/>this<sp/>size<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subdivide_pixels<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_begin,<sp/>x_end,<sp/>x1,<sp/>x2;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_begin,<sp/>y_end,<sp/>y1,<sp/>y2;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_step;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_step;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrix;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>mat;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>matrix<sp/>=<sp/>shading-&gt;getMatrix();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>mat.xx<sp/>=<sp/>matrix[0];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>mat.yx<sp/>=<sp/>matrix[1];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>mat.xy<sp/>=<sp/>matrix[2];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>mat.yy<sp/>=<sp/>matrix[3];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>mat.x0<sp/>=<sp/>matrix[4];</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>mat.y0<sp/>=<sp/>matrix[5];</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_matrix_invert(&amp;mat))<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;matrix<sp/>not<sp/>invertible\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>cell<sp/>size<sp/>in<sp/>pattern<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>x_step<sp/>=<sp/>y_step<sp/>=<sp/>subdivide_pixels;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>cairo_matrix_transform_distance<sp/>(&amp;mat,<sp/>&amp;x_step,<sp/>&amp;y_step);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_mesh<sp/>();</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix(fill_pattern,<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>shading-&gt;getDomain(&amp;x_begin,<sp/>&amp;y_begin,<sp/>&amp;x_end,<sp/>&amp;y_end);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>x_begin;<sp/>x1<sp/>&lt;<sp/>x_end;<sp/>x1<sp/>+=<sp/>x_step)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x1<sp/>+<sp/>x_step;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2<sp/>&gt;<sp/>x_end)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x_end;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y1<sp/>=<sp/>y_begin;<sp/>y1<sp/>&lt;<sp/>y_end;<sp/>y1<sp/>+=<sp/>y_step)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y1<sp/>+<sp/>y_step;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2<sp/>&gt;<sp/>y_end)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y_end;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_begin_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_move_to<sp/>(fill_pattern,<sp/>x1,<sp/>y1);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_line_to<sp/>(fill_pattern,<sp/>x2,<sp/>y1);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_line_to<sp/>(fill_pattern,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_line_to<sp/>(fill_pattern,<sp/>x1,<sp/>y2);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(x1,<sp/>y1,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>0,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(x2,<sp/>y1,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>1,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(x2,<sp/>y2,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>2,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(x1,<sp/>y2,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>3,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_end_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>fill(state);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>12,<sp/>0)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">GBool<sp/>CairoOutputDev::axialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_linear<sp/>(x0<sp/>+<sp/>tMin<sp/>*<sp/>dx,<sp/>y0<sp/>+<sp/>tMin<sp/>*<sp/>dy,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>+<sp/>tMax<sp/>*<sp/>dx,<sp/>y0<sp/>+<sp/>tMax<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>!shading-&gt;getExtend1())</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(fill_pattern,<sp/>CAIRO_EXTEND_NONE);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(fill_pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;axial-sh\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>the<sp/>actual<sp/>stops<sp/>in<sp/>the<sp/>shading<sp/>in<sp/>the<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>linear<sp/>interpolation<sp/>(Type<sp/>2<sp/>Exponential<sp/>functions<sp/>with<sp/>N=1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">GBool<sp/>CairoOutputDev::axialShadedSupportExtend(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(shading-&gt;getExtend0()<sp/>==<sp/>shading-&gt;getExtend1());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">GBool<sp/>CairoOutputDev::radialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>r0,<sp/>x1,<sp/>y1,<sp/>r1;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy,<sp/>dr;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;r0,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;r1);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>dr<sp/>=<sp/>r1<sp/>-<sp/>r0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cairo/pixman<sp/>do<sp/>not<sp/>work<sp/>well<sp/>with<sp/>a<sp/>very<sp/>large<sp/>or<sp/>small<sp/>scaled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix.<sp/><sp/>See<sp/>cairo<sp/>bug<sp/>#81657.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>workaround,<sp/>scale<sp/>the<sp/>pattern<sp/>by<sp/>the<sp/>average<sp/>of<sp/>the<sp/>vertical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>horizontal<sp/>scaling<sp/>of<sp/>the<sp/>current<sp/>transformation<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>scale<sp/>=<sp/>(sqrt(matrix.xx<sp/>*<sp/>matrix.xx<sp/>+<sp/>matrix.yx<sp/>*<sp/>matrix.yx)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sqrt(matrix.xy<sp/>*<sp/>matrix.xy<sp/>+<sp/>matrix.yy<sp/>*<sp/>matrix.yy))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>cairo_matrix_init_scale(&amp;matrix,<sp/>scale,<sp/>scale);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_radial<sp/>((x0<sp/>+<sp/>sMin<sp/>*<sp/>dx)<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(y0<sp/>+<sp/>sMin<sp/>*<sp/>dy)<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(r0<sp/>+<sp/>sMin<sp/>*<sp/>dr)<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x0<sp/>+<sp/>sMax<sp/>*<sp/>dx)<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(y0<sp/>+<sp/>sMax<sp/>*<sp/>dy)<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(r0<sp/>+<sp/>sMax<sp/>*<sp/>dr)<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix(fill_pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>shading-&gt;getExtend1())</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(fill_pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(fill_pattern,<sp/>CAIRO_EXTEND_NONE);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;radial-sh\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">GBool<sp/>CairoOutputDev::radialShadedSupportExtend(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(shading-&gt;getExtend0()<sp/>==<sp/>shading-&gt;getExtend1());</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>12,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">GBool<sp/>CairoOutputDev::gouraudTriangleShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color[3];</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_mesh<sp/>();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNTriangles();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;isParameterized())<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color0,<sp/>color1,<sp/>color2;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">getTriangle</ref>(i,<sp/>&amp;x0,<sp/>&amp;y0,<sp/>&amp;color0,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;color1,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x2,<sp/>&amp;y2,<sp/>&amp;color2);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor(color0,<sp/>&amp;color[0]);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor(color1,<sp/>&amp;color[1]);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor(color2,<sp/>&amp;color[2]);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">getTriangle</ref>(i,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x0,<sp/>&amp;y0,<sp/>&amp;color[0],</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;color[1],</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x2,<sp/>&amp;y2,<sp/>&amp;color[2]);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_begin_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_move_to<sp/>(fill_pattern,<sp/>x0,<sp/>y0);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_line_to<sp/>(fill_pattern,<sp/>x1,<sp/>y1);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_line_to<sp/>(fill_pattern,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color[j],<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>j,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_end_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>fill(state);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal">GBool<sp/>CairoOutputDev::patchMeshShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(fill_pattern);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>fill_pattern<sp/>=<sp/>cairo_pattern_create_mesh<sp/>();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNPatches();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*patch<sp/>=<sp/>shading-&gt;getPatch(i);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_begin_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_move_to<sp/>(fill_pattern,<sp/>patch-&gt;x[0][0],<sp/>patch-&gt;y[0][0]);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_curve_to<sp/>(fill_pattern,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][1],<sp/>patch-&gt;y[0][1],</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][2],<sp/>patch-&gt;y[0][2],</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][3],<sp/>patch-&gt;y[0][3]);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_curve_to<sp/>(fill_pattern,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[1][3],<sp/>patch-&gt;y[1][3],</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[2][3],<sp/>patch-&gt;y[2][3],</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][3],<sp/>patch-&gt;y[3][3]);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_curve_to<sp/>(fill_pattern,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][2],<sp/>patch-&gt;y[3][2],</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][1],<sp/>patch-&gt;y[3][1],</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][0],<sp/>patch-&gt;y[3][0]);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_curve_to<sp/>(fill_pattern,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[2][0],<sp/>patch-&gt;y[2][0],</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[1][0],<sp/>patch-&gt;y[1][0],</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][0],<sp/>patch-&gt;y[0][0]);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_control_point<sp/>(fill_pattern,<sp/>0,<sp/>patch-&gt;x[1][1],<sp/>patch-&gt;y[1][1]);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_control_point<sp/>(fill_pattern,<sp/>1,<sp/>patch-&gt;x[1][2],<sp/>patch-&gt;y[1][2]);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_control_point<sp/>(fill_pattern,<sp/>2,<sp/>patch-&gt;x[2][2],<sp/>patch-&gt;y[2][2]);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_control_point<sp/>(fill_pattern,<sp/>3,<sp/>patch-&gt;x[2][1],<sp/>patch-&gt;y[2][1]);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u,<sp/>v;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(j)<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>0;<sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>0;<sp/>v<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>1;<sp/>v<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>1;<sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;isParameterized())<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor<sp/>(patch-&gt;color[u][v].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[0],<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>shading-&gt;getColorSpace()-&gt;getNComps();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simply<sp/>cast<sp/>to<sp/>the<sp/>desired<sp/>type;<sp/>that&apos;s<sp/>all<sp/>what<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[k]<sp/>=<sp/>GfxColorComp<sp/>(patch-&gt;color[u][v].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[k]);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getRGB(&amp;color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mesh_pattern_set_corner_color_rgb<sp/>(fill_pattern,<sp/>j,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.r),</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.g),</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(rgb.b));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mesh_pattern_end_patch<sp/>(fill_pattern);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>fill(state);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>12,<sp/>0)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::clip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>cairo_set_fill_rule<sp/>(cairo,<sp/>CAIRO_FILL_RULE_WINDING);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;clip\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>doPath<sp/>(cairo_shape,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_fill_rule<sp/>(cairo_shape,<sp/>CAIRO_FILL_RULE_WINDING);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::eoClip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>cairo_set_fill_rule<sp/>(cairo,<sp/>CAIRO_FILL_RULE_EVEN_ODD);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;clip-eo\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>doPath<sp/>(cairo_shape,<sp/>state,<sp/>state-&gt;getPath());</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_fill_rule<sp/>(cairo_shape,<sp/>CAIRO_FILL_RULE_EVEN_ODD);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::clipToStrokePath(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>LOG(printf(</highlight><highlight class="stringliteral">&quot;clip-to-stroke-path\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>strokePathClip<sp/>=<sp/>(StrokePathClip*)gmalloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*strokePathClip));</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;path<sp/>=<sp/>state-&gt;getPath()-&gt;copy();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;strokePathClip-&gt;ctm);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;line_width<sp/>=<sp/>cairo_get_line_width<sp/>(cairo);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;dash_count<sp/>=<sp/>cairo_get_dash_count<sp/>(cairo);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip-&gt;dash_count)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>strokePathClip-&gt;dashes<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>gmallocn<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/>strokePathClip-&gt;dash_count);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_dash<sp/>(cairo,<sp/>strokePathClip-&gt;dashes,<sp/>&amp;strokePathClip-&gt;dash_offset);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>strokePathClip-&gt;dashes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;cap<sp/>=<sp/>cairo_get_line_cap<sp/>(cairo);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;join<sp/>=<sp/>cairo_get_line_join<sp/>(cairo);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;miter<sp/>=<sp/>cairo_get_miter_limit<sp/>(cairo);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>strokePathClip-&gt;ref_count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::fillToStrokePathClip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;strokePathClip-&gt;ctm);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>cairo_set_line_width<sp/>(cairo,<sp/>strokePathClip-&gt;line_width);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>cairo_set_dash<sp/>(cairo,<sp/>strokePathClip-&gt;dashes,<sp/>strokePathClip-&gt;dash_count,<sp/>strokePathClip-&gt;dash_offset);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>cairo_set_line_cap<sp/>(cairo,<sp/>strokePathClip-&gt;cap);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>cairo_set_line_join<sp/>(cairo,<sp/>strokePathClip-&gt;join);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>cairo_set_miter_limit<sp/>(cairo,<sp/>strokePathClip-&gt;miter);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>doPath<sp/>(cairo,<sp/>state,<sp/>strokePathClip-&gt;path);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>cairo_stroke<sp/>(cairo);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::beginString(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needFontUpdate)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>updateFont(state);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentFont)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>glyphs<sp/>=<sp/>(cairo_glyph_t<sp/>*)<sp/>gmallocn<sp/>(len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(cairo_glyph_t));</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>glyphCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_show_text_glyphs)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>clusters<sp/>=<sp/>(cairo_text_cluster_t<sp/>*)<sp/>gmallocn<sp/>(len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(cairo_text_cluster_t));</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8Max<sp/>=<sp/>len*2;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>twice<sp/>the<sp/>number<sp/>of<sp/>glyphs.<sp/>we<sp/>will<sp/>realloc<sp/>if<sp/>we<sp/>need<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>gmalloc<sp/>(utf8Max);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originY,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentFont)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphs[glyphCount].index<sp/>=<sp/>currentFont-&gt;getGlyph<sp/>(code,<sp/>u,<sp/>uLen);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphs[glyphCount].x<sp/>=<sp/>x<sp/>-<sp/>originX;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphs[glyphCount].y<sp/>=<sp/>y<sp/>-<sp/>originY;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphCount++;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_show_text_glyphs)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>enc(</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*utf8Map<sp/>=<sp/>globalParams-&gt;getUnicodeMap(&amp;enc);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8Max<sp/>-<sp/>utf8Count<sp/>&lt;<sp/>uLen*6)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>utf8<sp/>encoded<sp/>characters<sp/>can<sp/>be<sp/>up<sp/>to<sp/>6<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8Max<sp/>&gt;<sp/>uLen*6)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>utf8Max<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>utf8Max<sp/>+=<sp/>2*uLen*6;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>grealloc<sp/>(utf8,<sp/>utf8Max);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusters[clusterCount].num_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>uLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>utf8Map-&gt;mapUnicode(u[i],<sp/>utf8<sp/>+<sp/>utf8Count,<sp/>utf8Max<sp/>-<sp/>utf8Count);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8Count<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>clusters[clusterCount].num_bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusters[clusterCount].num_glyphs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterCount++;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!text)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>actualText-&gt;addChar<sp/>(state,<sp/>x,<sp/>y,<sp/>dx,<sp/>dy,<sp/>code,<sp/>nBytes,<sp/>u,<sp/>uLen);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endString(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>render;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentFont)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>endString<sp/>can<sp/>be<sp/>called<sp/>without<sp/>a<sp/>corresponding<sp/>beginString.<sp/>If<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>happens<sp/>glyphs<sp/>will<sp/>be<sp/>null<sp/>so<sp/>don&apos;t<sp/>draw<sp/>anything,<sp/>just<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>OutputDevs<sp/>should<sp/>probably<sp/>not<sp/>have<sp/>to<sp/>deal<sp/>with<sp/>this...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!glyphs)</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>empty<sp/>strings<sp/>and<sp/>invisible<sp/>text<sp/>--<sp/>this<sp/>is<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Acrobat<sp/>Capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>render<sp/>=<sp/>state-&gt;getRender();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(render<sp/>==<sp/>3<sp/>||<sp/>glyphCount<sp/>==<sp/>0<sp/>||<sp/>!text_matrix_valid)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>finish;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(render<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;fill<sp/>string\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>fill_pattern);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_show_text_glyphs)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_show_text_glyphs<sp/>(cairo,<sp/>utf8,<sp/>utf8Count,<sp/>glyphs,<sp/>glyphCount,<sp/>clusters,<sp/>clusterCount,<sp/>(cairo_text_cluster_flags_t)0);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_show_glyphs<sp/>(cairo,<sp/>glyphs,<sp/>glyphCount);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_show_glyphs<sp/>(cairo_shape,<sp/>glyphs,<sp/>glyphCount);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stroke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((render<sp/>&amp;<sp/>3)<sp/>==<sp/>1<sp/>||<sp/>(render<sp/>&amp;<sp/>3)<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;stroke<sp/>string\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>stroke_pattern);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_glyph_path<sp/>(cairo,<sp/>glyphs,<sp/>glyphCount);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_stroke<sp/>(cairo);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_glyph_path<sp/>(cairo_shape,<sp/>glyphs,<sp/>glyphCount);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_stroke<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((render<sp/>&amp;<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;clip<sp/>string\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>the<sp/>glyph<sp/>path<sp/>to<sp/>textClipPath.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>textClipPath<sp/>as<sp/>the<sp/>currentPath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textClipPath)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_append_path<sp/>(cairo,<sp/>textClipPath);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_append_path<sp/>(cairo_shape,<sp/>textClipPath);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_path_destroy<sp/>(textClipPath);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>the<sp/>glyph<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_glyph_path<sp/>(cairo,<sp/>glyphs,<sp/>glyphCount);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>path<sp/>back<sp/>into<sp/>textClipPath<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>clear<sp/>the<sp/>current<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>textClipPath<sp/>=<sp/>cairo_copy_path<sp/>(cairo);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_new_path<sp/>(cairo);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_new_path<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal">finish:</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>gfree<sp/>(glyphs);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>glyphs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_show_text_glyphs)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(clusters);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>clusters<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(utf8);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal">GBool<sp/>CairoOutputDev::beginType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>code,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>ctm[2];</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>ctm[3];</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>matrix.x0<sp/>=<sp/>ctm[4];</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>matrix.y0<sp/>=<sp/>ctm[5];</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Restore<sp/>the<sp/>original<sp/>matrix<sp/>and<sp/>then<sp/>transform<sp/>to<sp/>matrix<sp/>needed<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/>*<sp/>type3<sp/>font.<sp/>This<sp/>is<sp/>ugly<sp/>but<sp/>seems<sp/>to<sp/>work.<sp/>Perhaps<sp/>there<sp/>is<sp/>a<sp/>better<sp/>way<sp/>to<sp/>do<sp/>it?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>cairo_set_matrix(cairo,<sp/>&amp;orig_matrix);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>cairo_transform(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_matrix(cairo_shape,<sp/>&amp;orig_matrix);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_transform(cairo_shape,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(stroke_pattern);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>cairo_pattern_reference(fill_pattern);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>stroke_pattern<sp/>=<sp/>fill_pattern;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::type3D0(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>t3_glyph_wx<sp/>=<sp/>wx;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>t3_glyph_wy<sp/>=<sp/>wy;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::type3D1(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>llx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lly,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>urx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ury)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>t3_glyph_wx<sp/>=<sp/>wx;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>t3_glyph_wy<sp/>=<sp/>wy;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>t3_glyph_bbox[0]<sp/>=<sp/>llx;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>t3_glyph_bbox[1]<sp/>=<sp/>lly;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>t3_glyph_bbox[2]<sp/>=<sp/>urx;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>t3_glyph_bbox[3]<sp/>=<sp/>ury;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>t3_glyph_has_bbox<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::beginTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textClipPath)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>the<sp/>accumulated<sp/>text<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_append_path<sp/>(cairo,<sp/>textClipPath);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_append_path<sp/>(cairo_shape,<sp/>textClipPath);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_path_destroy<sp/>(textClipPath);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>textClipPath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::beginActualText(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*text)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;text)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>actualText-&gt;begin(state,<sp/>text);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endActualText(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>actualText-&gt;end(state);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashRound(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(x<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashCeil(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(x);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splashFloor(SplashCoord<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(x);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">cairo_surface_t<sp/>*cairo_surface_create_similar_clip<sp/>(cairo_t<sp/>*cairo,<sp/>cairo_content_t<sp/><ref refid="namespacecontent" kindref="compound">content</ref>)</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*pattern;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>cairo_push_group_with_content<sp/>(cairo,<sp/>content);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pop_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>cairo_pattern_get_surface<sp/>(pattern,<sp/>&amp;surface);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>cairo_surface_reference<sp/>(surface);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surface;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::beginTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*bbox*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*<sp/>blendingColorSpace,</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*isolated*/</highlight><highlight class="normal">,<sp/>GBool<sp/>knockout,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>forSoftMask)<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>push<sp/>color<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>ColorSpaceStack*<sp/>css<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ColorSpaceStack;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>css-&gt;cs<sp/>=<sp/>blendingColorSpace;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>css-&gt;knockout<sp/>=<sp/>knockout;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;css-&gt;group_matrix);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>css-&gt;next<sp/>=<sp/>groupColorSpaceStack;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>groupColorSpaceStack<sp/>=<sp/>css;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;begin<sp/>transparency<sp/>group.<sp/>knockout:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>knockout<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(knockout)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>knockoutCount++;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>surface<sp/>for<sp/>tracking<sp/>the<sp/>shape<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_t<sp/>*cairo_shape_surface<sp/>=<sp/>cairo_surface_create_similar_clip<sp/>(cairo,<sp/>CAIRO_CONTENT_ALPHA);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_shape<sp/>=<sp/>cairo_create<sp/>(cairo_shape_surface);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(cairo_shape_surface);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setAntialias(cairo_shape,<sp/>antialias);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>color<sp/>doesn&apos;t<sp/>matter<sp/>as<sp/>long<sp/>as<sp/>it<sp/>is<sp/>opaque<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_source_rgb<sp/>(cairo_shape,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printMatrix(&amp;matrix);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_matrix<sp/>(cairo_shape,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupColorSpaceStack-&gt;next<sp/>&amp;&amp;<sp/>groupColorSpaceStack-&gt;next-&gt;knockout)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>need<sp/>to<sp/>track<sp/>the<sp/>shape<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&amp;&amp;<sp/>forSoftMask)</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group_with_content<sp/>(cairo,<sp/>CAIRO_CONTENT_ALPHA);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>push_group<sp/>has<sp/>an<sp/>implicit<sp/>cairo_save()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(knockout)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*XXX:<sp/>let&apos;s<sp/>hope<sp/>this<sp/>matches<sp/>the<sp/>semantics<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator(cairo,<sp/>CAIRO_OPERATOR_SOURCE);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator(cairo,<sp/>CAIRO_OPERATOR_OVER);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::endTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(group);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>group<sp/>=<sp/>cairo_pop_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;end<sp/>transparency<sp/>group\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupColorSpaceStack-&gt;next<sp/>&amp;&amp;<sp/>groupColorSpaceStack-&gt;next-&gt;knockout)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape)</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_destroy(shape);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>cairo_pop_group<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::paintTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*bbox*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;paint<sp/>transparency<sp/>group\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;groupColorSpaceStack-&gt;group_matrix);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OPERATOR_SOURCE<sp/>w/<sp/>a<sp/>mask<sp/>is<sp/>defined<sp/>as<sp/>(src<sp/>IN<sp/>mask)<sp/>ADD<sp/>(dest<sp/>OUT<sp/>mask)</highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>however<sp/>our<sp/>source<sp/>has<sp/>already<sp/>been<sp/>clipped<sp/>to<sp/>mask<sp/>so<sp/>we<sp/>only<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>do<sp/>ADD<sp/>and<sp/>OUT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>shape<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>shape);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_DEST_OUT);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_paint<sp/>(cairo);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_operator<sp/>(cairo,<sp/>CAIRO_OPERATOR_ADD);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>group);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mask)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_paint_with_alpha<sp/>(cairo,<sp/>fill_opacity);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_status_t<sp/>status<sp/>=<sp/>cairo_status(cairo);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;BAD<sp/>status:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>cairo_status_to_string(status));</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_opacity<sp/>&lt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_push_group(cairo);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save(cairo);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_matrix(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask(cairo,<sp/>mask);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore(cairo);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_opacity<sp/>&lt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pop_group_to_source(cairo);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_paint_with_alpha<sp/>(cairo,<sp/>fill_opacity);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(mask);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo_shape,<sp/>shape);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_paint<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_source_rgb<sp/>(cairo_shape,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(shape);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>popTransparencyGroup();</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>cairo_restore(cairo);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>luminocity(uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>arbitrary<sp/>integer<sp/>approximation<sp/>of<sp/>.3*r<sp/>+<sp/>.59*g<sp/>+<sp/>.11*b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(r*19661+g*38666+b*7209<sp/>+<sp/>32829)&gt;&gt;16;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>XXX:<sp/>do<sp/>we<sp/>need<sp/>to<sp/>deal<sp/>with<sp/>shape<sp/>here?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setSoftMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/>state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>bbox,<sp/>GBool<sp/>alpha,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*<sp/>transferFunc,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*<sp/>backdropColor)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy(mask);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>LOG(printf<sp/>(</highlight><highlight class="stringliteral">&quot;set<sp/>softMask\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alpha<sp/>||<sp/>transferFunc)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>mask<sp/>according<sp/>to<sp/>the<sp/>luminocity<sp/>of<sp/>the<sp/>group.</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>So<sp/>we<sp/>paint<sp/>the<sp/>group<sp/>to<sp/>an<sp/>image<sp/>surface<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>luminocity<sp/>map</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>then<sp/>use<sp/>that<sp/>as<sp/>the<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>clip<sp/>extents<sp/>in<sp/>device<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x_min,<sp/>y_min,<sp/>x_max,<sp/>y_max;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip_extents(cairo,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device(cairo,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device(cairo,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>x_min<sp/>=<sp/>MIN(x1,<sp/>x2);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>y_min<sp/>=<sp/>MIN(y1,<sp/>y2);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>x_max<sp/>=<sp/>MAX(x1,<sp/>x2);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>y_max<sp/>=<sp/>MAX(y1,<sp/>y2);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip_extents(cairo,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device(cairo,<sp/>&amp;x1,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_user_to_device(cairo,<sp/>&amp;x2,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>x_min<sp/>=<sp/>MIN(x_min,MIN(x1,<sp/>x2));</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>y_min<sp/>=<sp/>MIN(y_min,MIN(y1,<sp/>y2));</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>x_max<sp/>=<sp/>MAX(x_max,MAX(x1,<sp/>x2));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>y_max<sp/>=<sp/>MAX(y_max,MAX(y1,<sp/>y2));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>(int)(ceil(x_max)<sp/>-<sp/>floor(x_min));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>(int)(ceil(y_max)<sp/>-<sp/>floor(y_min));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>group<sp/>device<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_offset,<sp/>y_offset;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_get_group_target(cairo)<sp/>==<sp/>cairo_get_target(cairo))<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_get_device_offset(cairo_get_group_target(cairo),<sp/>&amp;x_offset,<sp/>&amp;y_offset);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_t<sp/>*pats;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_get_surface(group,<sp/>&amp;pats);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_get_device_offset(pats,<sp/>&amp;x_offset,<sp/>&amp;y_offset);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>extents<sp/>by<sp/>group<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>x_min<sp/>+=<sp/>x_offset;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>y_min<sp/>+=<sp/>y_offset;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_t<sp/>*source<sp/>=<sp/>cairo_image_surface_create(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_t<sp/>*maskCtx<sp/>=<sp/>cairo_create(source);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>setAntialias(maskCtx,<sp/>antialias);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>hopefully<sp/>this<sp/>uses<sp/>the<sp/>correct<sp/>color<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alpha<sp/>&amp;&amp;<sp/>groupColorSpaceStack-&gt;cs)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>backdropColorRGB;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupColorSpaceStack-&gt;cs-&gt;getRGB(backdropColor,<sp/>&amp;backdropColorRGB);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>paint<sp/>the<sp/>backdrop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_source_rgb(maskCtx,</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(backdropColorRGB.r),</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(backdropColorRGB.g),</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(backdropColorRGB.b));</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_paint(maskCtx);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>source<sp/>ctm<sp/>to<sp/>mask<sp/>ctm<sp/>and<sp/>translate<sp/>origin<sp/>so<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>mask<sp/>appears<sp/>it<sp/>the<sp/>same<sp/>location<sp/>on<sp/>the<sp/>source<sp/>surface.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_t<sp/>mat,<sp/>tmat;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_init_translate(&amp;tmat,<sp/>-x_min,<sp/>-y_min);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_multiply(&amp;mat,<sp/>&amp;mat,<sp/>&amp;tmat);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_matrix(maskCtx,<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>the<sp/>device<sp/>offset<sp/>of<sp/>the<sp/>new<sp/>mask<sp/>match<sp/>that<sp/>of<sp/>the<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_set_device_offset(source,<sp/>x_offset,<sp/>y_offset);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>paint<sp/>the<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source(maskCtx,<sp/>group);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_paint(maskCtx);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX<sp/>status<sp/>=<sp/>cairo_status(maskCtx);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy(maskCtx);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>to<sp/>a<sp/>luminocity<sp/>map<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*source_data<sp/>=<sp/>(uint32_t*)cairo_image_surface_get_data(source);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>stride<sp/>in<sp/>units<sp/>of<sp/>32<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>cairo_image_surface_get_stride(source)/4;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y=0;<sp/>y&lt;height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0;<sp/>x&lt;width;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lum<sp/>=<sp/>alpha<sp/>?<sp/>fill_opacity<sp/>:<sp/>luminocity(source_data[y*stride<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transferFunc)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lum_in,<sp/>lum_out;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum_in<sp/>=<sp/>lum/256.0;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferFunc-&gt;transform(&amp;lum_in,<sp/>&amp;lum_out);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>(int)(lum_out<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_data[y*stride<sp/>+<sp/>x]<sp/>=<sp/>lum<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_mark_dirty<sp/>(source);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>the<sp/>new<sp/>mask<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>cairo_pattern_create_for_surface(source);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_get_group_target(cairo)<sp/>==<sp/>cairo_get_target(cairo))<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_set_matrix(mask,<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_matrix_t<sp/>patMatrix;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_get_matrix(group,<sp/>&amp;patMatrix);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Apply<sp/>x_min,<sp/>y_min<sp/>offset<sp/>to<sp/>it<sp/>appears<sp/>in<sp/>the<sp/>same<sp/>location<sp/>as<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_matrix_multiply(&amp;patMatrix,<sp/>&amp;patMatrix,<sp/>&amp;tmat);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_set_matrix(mask,<sp/>&amp;patMatrix);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy(source);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>cairo_pattern_reference(group);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>popTransparencyGroup();</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::popTransparencyGroup()<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>pop<sp/>color<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>ColorSpaceStack<sp/>*css<sp/>=<sp/>groupColorSpaceStack;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(css-&gt;knockout)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>knockoutCount--;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!knockoutCount)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>track<sp/>the<sp/>shape<sp/>anymore<sp/>because</highlight></codeline>
<codeline lineno="1871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>are<sp/>not<sp/>above<sp/>any<sp/>knockout<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_destroy(cairo_shape);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_shape<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>groupColorSpaceStack<sp/>=<sp/>css-&gt;next;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>css;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::clearSoftMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy(mask);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Taken<sp/>from<sp/>cairo/doc/tutorial/src/singular.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal">get_singular_values<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cairo_matrix_t<sp/>*matrix,</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*major,</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*minor)</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx<sp/>=<sp/>matrix-&gt;xx,<sp/>xy<sp/>=<sp/>matrix-&gt;xy;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yx<sp/>=<sp/>matrix-&gt;yx,<sp/>yy<sp/>=<sp/>matrix-&gt;yy;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>xx*xx+yx*yx;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>xy*xy+yy*yy;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>xx*xy+yx*yy;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>(a+b)<sp/>*<sp/>.5;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>(a-b)<sp/>*<sp/>.5;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>sqrt<sp/>(g*g<sp/>+<sp/>k*k);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(major)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*major<sp/>=<sp/>sqrt<sp/>(f<sp/>+<sp/>delta);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minor)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*minor<sp/>=<sp/>sqrt<sp/>(f<sp/>-<sp/>delta);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::getScaledSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cairo_matrix_t<sp/>*matrix,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig_width,</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig_height,</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*scaledWidth,</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*scaledHeight)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xScale;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yScale;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orig_width<sp/>&gt;<sp/>orig_height)</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>get_singular_values<sp/>(matrix,<sp/>&amp;xScale,<sp/>&amp;yScale);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>get_singular_values<sp/>(matrix,<sp/>&amp;yScale,<sp/>&amp;xScale);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>tx2,<sp/>ty,<sp/>ty2;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>integer<sp/>co-oridinates<sp/>of<sp/>the<sp/>resulting<sp/>image<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xScale<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>splashRound(matrix-&gt;x0<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>tx2<sp/>=<sp/>splashRound(matrix-&gt;x0<sp/>+<sp/>xScale<sp/>+<sp/>0.01)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>splashRound(matrix-&gt;x0<sp/>+<sp/>0.01)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>tx2<sp/>=<sp/>splashRound(matrix-&gt;x0<sp/>+<sp/>xScale<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>*scaledWidth<sp/>=<sp/>abs(tx2<sp/>-<sp/>tx)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//scaledWidth<sp/>=<sp/>splashRound(fabs(xScale));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*scaledWidth<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>technically,<sp/>this<sp/>should<sp/>draw<sp/>nothing,<sp/>but<sp/>it<sp/>generally<sp/>seems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>to<sp/>draw<sp/>a<sp/>one-pixel-wide<sp/>stripe<sp/>rather<sp/>than<sp/>throwing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>*scaledWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yScale<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>splashFloor(matrix-&gt;y0<sp/>+<sp/>0.01);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>ty2<sp/>=<sp/>splashCeil(matrix-&gt;y0<sp/>+<sp/>yScale<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>splashCeil(matrix-&gt;y0<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>ty2<sp/>=<sp/>splashFloor(matrix-&gt;y0<sp/>+<sp/>yScale<sp/>+<sp/>0.01);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>*scaledHeight<sp/>=<sp/>abs(ty2<sp/>-<sp/>ty);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*scaledHeight<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>*scaledHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal">cairo_filter_t</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">CairoOutputDev::getFilterForSurface(cairo_surface_t<sp/>*image,</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate)</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interpolate)</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_FILTER_BILINEAR;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orig_width<sp/>=<sp/>cairo_image_surface_get_width<sp/>(image);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orig_height<sp/>=<sp/>cairo_image_surface_get_height<sp/>(image);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orig_width<sp/>==<sp/>0<sp/>||<sp/>orig_height<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_FILTER_NEAREST;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>printing,<sp/>don&apos;t<sp/>change<sp/>the<sp/>interpolation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printing)</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_FILTER_NEAREST;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaled_width,<sp/>scaled_height;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/>getScaledSize<sp/>(&amp;matrix,<sp/>orig_width,<sp/>orig_height,<sp/>&amp;scaled_width,<sp/>&amp;scaled_height);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>scale<sp/>factor<sp/>is<sp/>&gt;=<sp/>400%<sp/>we<sp/>don&apos;t<sp/>interpolate.<sp/>See<sp/>bugs<sp/>#25268,<sp/>#9860<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaled_width<sp/>/<sp/>orig_width<sp/>&gt;=<sp/>4<sp/>||<sp/>scaled_height<sp/>/<sp/>orig_height<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_FILTER_NEAREST;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_FILTER_BILINEAR;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Doesn&apos;t<sp/>the<sp/>image<sp/>mask<sp/>support<sp/>any<sp/>colorspace?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>fill_pattern);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>around<sp/>a<sp/>cairo<sp/>bug<sp/>when<sp/>scaling<sp/>1x1<sp/>surfaces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>height<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert_bit;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;getPixel(&amp;pix);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>invert_bit<sp/>=<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix<sp/>^<sp/>invert_bit)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>shape<sp/>is<sp/>1.0<sp/>for<sp/>painted<sp/>areas,<sp/>0.0<sp/>for<sp/>unpainted<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>we<sp/>should<sp/>only<sp/>do<sp/>sub<sp/>pixel<sp/>positioning<sp/>if<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>rendering<sp/>fonts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing<sp/>&amp;&amp;<sp/>prescaleImages</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>rotated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>matrix.xy<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>matrix.yx<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>axes<sp/>not<sp/>flipped<sp/>/<sp/>not<sp/>180<sp/>deg<sp/>rotated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>matrix.xx<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(upsideDown()<sp/>?<sp/>-1<sp/>:<sp/>1)<sp/>*<sp/>matrix.yy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>drawImageMaskPrescaled(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>interpolate,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>drawImageMaskRegular(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>interpolate,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>inlineImg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Doesn&apos;t<sp/>the<sp/>image<sp/>mask<sp/>support<sp/>any<sp/>colorspace?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>fill_pattern);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>around<sp/>a<sp/>cairo<sp/>bug<sp/>when<sp/>scaling<sp/>1x1<sp/>surfaces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>height<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert_bit;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;getPixel(&amp;pix);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>invert_bit<sp/>=<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pix<sp/>^<sp/>invert_bit))<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group_with_content<sp/>(cairo,<sp/>CAIRO_CONTENT_ALPHA);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shape<sp/>is<sp/>1.0<sp/>for<sp/>painted<sp/>areas,<sp/>0.0<sp/>for<sp/>unpainted<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>we<sp/>should<sp/>only<sp/>do<sp/>sub<sp/>pixel<sp/>positioning<sp/>if<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>rendering<sp/>fonts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing<sp/>&amp;&amp;<sp/>prescaleImages<sp/>&amp;&amp;<sp/>matrix.xy<sp/>==<sp/>0.0<sp/>&amp;&amp;<sp/>matrix.yx<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drawImageMaskPrescaled(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>gFalse,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drawImageMaskRegular(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>gFalse,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_source_rgb<sp/>(cairo,<sp/>1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>mask);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(mask);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>cairo_pop_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>saveState(state);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bbox[4]<sp/>=<sp/>{0,0,1,1};<sp/></highlight><highlight class="comment">//<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>beginTransparencyGroup(state,<sp/>bbox,<sp/>state-&gt;getFillColorSpace(),</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::unsetSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bbox[4]<sp/>=<sp/>{0,0,1,1};<sp/></highlight><highlight class="comment">//<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>endTransparencyGroup(state);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>restoreState(state);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>paintTransparencyGroup(state,<sp/>bbox);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/>clearSoftMask(state);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawImageMaskRegular(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*image;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*pattern;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>i,<sp/>bit;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>Guchar<sp/>*pix;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert_bit;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_stride;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>filter;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>cache<sp/>these?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_A1,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(image);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(image);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>invert_bit<sp/>=<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>buffer<sp/>+<sp/>y<sp/>*<sp/>row_stride;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>bit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pix[x]<sp/>^<sp/>invert_bit))<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[i]<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>bit));</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[i]<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>bit);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit++;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit<sp/>&gt;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>bit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>filter<sp/>=<sp/>getFilterForSurface<sp/>(image,<sp/>interpolate);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(image);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(image);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;drawImageMask<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height));</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(pattern,<sp/>filter);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;matrix,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;matrix,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>cairo_pattern_reference<sp/>(pattern);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal">cleanup:</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawImageMaskPrescaled(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*image;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*pattern;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>Guchar<sp/>*pix;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert_bit;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_stride;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>cairo<sp/>does<sp/>a<sp/>very<sp/>poor<sp/>job<sp/>of<sp/>scaling<sp/>down<sp/>images<sp/>so<sp/>we<sp/>scale<sp/>them<sp/>ourselves<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;drawImageMaskPrescaled<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height));</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>scaling<sp/>code<sp/>is<sp/>adopted<sp/>from<sp/>the<sp/>splash<sp/>image<sp/>scaling<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[%f<sp/>%f],<sp/>[%f<sp/>%f],<sp/>%f<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>matrix.xx,<sp/>matrix.xy,<sp/>matrix.yx,<sp/>matrix.yy,<sp/>matrix.x0,<sp/>matrix.y0);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>whole<sp/>computation<sp/>should<sp/>be<sp/>factored<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xScale<sp/>=<sp/>matrix.xx;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yScale<sp/>=<sp/>matrix.yy;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>tx2,<sp/>ty,<sp/>ty2;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>integer<sp/>co-oridinates<sp/>of<sp/>the<sp/>resulting<sp/>image<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledHeight;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledWidth;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xScale<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>splashRound(matrix.x0<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>tx2<sp/>=<sp/>splashRound(matrix.x0<sp/>+<sp/>xScale<sp/>+<sp/>0.01)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>splashRound(matrix.x0<sp/>+<sp/>0.01)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>tx2<sp/>=<sp/>splashRound(matrix.x0<sp/>+<sp/>xScale<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>scaledWidth<sp/>=<sp/>abs(tx2<sp/>-<sp/>tx)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//scaledWidth<sp/>=<sp/>splashRound(fabs(xScale));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaledWidth<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>technically,<sp/>this<sp/>should<sp/>draw<sp/>nothing,<sp/>but<sp/>it<sp/>generally<sp/>seems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>to<sp/>draw<sp/>a<sp/>one-pixel-wide<sp/>stripe<sp/>rather<sp/>than<sp/>throwing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>scaledWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yScale<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>splashFloor(matrix.y0<sp/>+<sp/>0.01);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>ty2<sp/>=<sp/>splashCeil(matrix.y0<sp/>+<sp/>yScale<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>splashCeil(matrix.y0<sp/>-<sp/>0.01);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>ty2<sp/>=<sp/>splashFloor(matrix.y0<sp/>+<sp/>yScale<sp/>+<sp/>0.01);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>scaledHeight<sp/>=<sp/>abs(ty2<sp/>-<sp/>ty);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaledHeight<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>scaledHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;xscale:<sp/>%g,<sp/>yscale:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>xScale,<sp/>yScale);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;width:<sp/>%d,<sp/>height:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;scaledWidth:<sp/>%d,<sp/>scaledHeight:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>scaledWidth,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>required<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Padding<sp/>is<sp/>used<sp/>to<sp/>preserve<sp/>the<sp/>aspect<sp/>ratio.</highlight></codeline>
<codeline lineno="2275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>We<sp/>compute<sp/>total_pad<sp/>to<sp/>make<sp/>(height+total_pad)/scaledHeight<sp/>as<sp/>close<sp/>to<sp/>height/yScale<sp/>as<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_pad<sp/>=<sp/>splashRound(height*(scaledHeight/fabs(yScale))<sp/>-<sp/>height);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>two<sp/>pieces<sp/>of<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_pad<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>i&apos;m<sp/>not<sp/>positive<sp/>fabs()<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tail_error<sp/>=<sp/>fabs(matrix.y0<sp/>-<sp/>ty);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>head_error<sp/>=<sp/>fabs(ty2<sp/>-<sp/>(matrix.y0<sp/>+<sp/>yScale));</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tail_fraction<sp/>=<sp/>tail_error/(tail_error<sp/>+<sp/>head_error);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>tail_pad<sp/>=<sp/>splashRound(total_pad*tail_fraction);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>head_pad<sp/>=<sp/>total_pad<sp/>-<sp/>tail_pad;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>tail_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>head_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origHeight<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/>height<sp/>+=<sp/>tail_pad;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/>height<sp/>+=<sp/>head_pad;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;head_pad:<sp/>%d<sp/>tail_pad:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>head_pad,<sp/>tail_pad);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;origHeight:<sp/>%d<sp/>height:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>origHeight,<sp/>height);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ty:<sp/>%d,<sp/>ty2:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>ty,<sp/>ty2);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>cache<sp/>these?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>invert_bit<sp/>=<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_A8,<sp/>scaledWidth,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))<sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(image);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(image);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yp<sp/>=<sp/>height<sp/>/<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yq<sp/>=<sp/>height<sp/>%<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xp<sp/>=<sp/>width<sp/>/<sp/>scaledWidth;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xq<sp/>=<sp/>width<sp/>%<sp/>scaledWidth;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origHeight_c<sp/>=<sp/>origHeight;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>MIN()<sp/>because<sp/>yp<sp/>might<sp/>be<sp/>&gt;<sp/>origHeight<sp/>because<sp/>of<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pixBuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(MIN(yp+1,<sp/>origHeight)*width);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastYStep<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>scaledHeight;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>scale<sp/>Bresenham</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yStep<sp/>=<sp/>yp;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>yt<sp/>+=<sp/>yq;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yt<sp/>&gt;=<sp/>scaledHeight)<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yt<sp/>-=<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++yStep;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>row<sp/>(s)<sp/>from<sp/>image<sp/>ignoring<sp/>the<sp/>padding<sp/>as<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(yp<sp/>&gt;<sp/>0)<sp/>?<sp/>yStep<sp/>:<sp/>lastYStep;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>pixBuf;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_pad_count<sp/>=<sp/>head_pad;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origHeight_count<sp/>=<sp/>origHeight;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail_pad_count<sp/>=<sp/>tail_pad;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head_pad_count)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_pad_count--;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origHeight_count)<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;width;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix[j]<sp/>^<sp/>invert_bit)</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origHeight_count--;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tail_pad_count)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail_pad_count--;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>total);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;over<sp/>run\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>lastYStep<sp/>=<sp/>yStep;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xSrc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>k1;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>yStep<sp/>&gt;<sp/>0<sp/>?<sp/>yStep<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origN<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>size<sp/>of<sp/>padding<sp/>and<sp/>pixels<sp/>that<sp/>will<sp/>be<sp/>used<sp/>for<sp/>this<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_pad_size<sp/>=<sp/>MIN(n,<sp/>head_pad);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>head_pad_size;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>head_pad<sp/>-=<sp/>MIN(head_pad_size,<sp/>yStep);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix_size<sp/>=<sp/>MIN(n,<sp/>origHeight);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>pix_size;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>origHeight<sp/>-=<sp/>MIN(pix_size,<sp/>yStep);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail_pad_size<sp/>=<sp/>MIN(n,<sp/>tail_pad);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>tail_pad_size;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>tail_pad<sp/>-=<sp/>MIN(tail_pad_size,<sp/>yStep);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;n<sp/>=<sp/>%d<sp/>(%d<sp/>%d<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>head_pad_size,<sp/>pix_size,<sp/>tail_pad_size);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>scaledWidth;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xStep<sp/>=<sp/>xp;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xt<sp/>+=<sp/>xq;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xt<sp/>&gt;=<sp/>scaledWidth)<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>xt<sp/>-=<sp/>scaledWidth;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>++xStep;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>xStep<sp/>&gt;<sp/>0<sp/>?<sp/>xStep<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pixAcc0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>could<sp/>m<sp/>*<sp/>head_pad_size<sp/>*<sp/>tail_pad_size<sp/><sp/>overflow?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invert_bit)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>pixAcc0<sp/>+=<sp/>m<sp/>*<sp/>head_pad_size<sp/>*<sp/>tail_pad_size<sp/>*<sp/>255;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>pixAcc0<sp/>+=<sp/>m<sp/>*<sp/>head_pad_size<sp/>*<sp/>tail_pad_size<sp/>*<sp/>0;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Accumulate<sp/>all<sp/>of<sp/>the<sp/>source<sp/>pixels<sp/>for<sp/>the<sp/>destination<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pix_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j&lt;<sp/>m;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xSrc<sp/>+<sp/>i*width<sp/>+<sp/>j<sp/>&gt;<sp/>MIN(yp<sp/>+<sp/>1,<sp/>origHeight_c)*width)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&gt;<sp/>%d<sp/>(%d<sp/>%d<sp/>%d<sp/>%d)<sp/>(%d<sp/>%d<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>xSrc<sp/>+<sp/>i*width<sp/>+<sp/>j,<sp/>MIN(yp<sp/>+<sp/>1,<sp/>origHeight_c)*width,<sp/>xSrc,<sp/>i<sp/>,<sp/>width,<sp/>j,<sp/>yp,<sp/>origHeight_c,<sp/>width);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>head_pad_size,<sp/>pix_size,<sp/>tail_pad_size);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>access\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixAcc0<sp/>+=<sp/>pixBuf[xSrc<sp/>+<sp/>i*width<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[y<sp/>*<sp/>row_stride<sp/>+<sp/>x]<sp/>=<sp/>splashFloor(pixAcc0<sp/>/<sp/>(origN*m));</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xSrc<sp/>+=<sp/>xStep;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>free(pixBuf);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(image);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(image);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>should<sp/>actually<sp/>be<sp/>using<sp/>CAIRO_FILTER_NEAREST<sp/>here.<sp/>However,</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/><sp/><sp/>*<sp/>cairo<sp/>doesn&apos;t<sp/>yet<sp/>do<sp/>minifaction<sp/>filtering<sp/>causing<sp/>scaled<sp/>down</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/><sp/><sp/>*<sp/>images<sp/>with<sp/>CAIRO_FILTER_NEAREST<sp/>to<sp/>look<sp/>really<sp/>bad<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(pattern,</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolate<sp/>?<sp/>CAIRO_FILTER_BEST<sp/>:<sp/>CAIRO_FILTER_FAST);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;matrix,<sp/>0,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_scale<sp/>(&amp;matrix,<sp/>scaledWidth,<sp/>-scaledHeight);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>cairo_pattern_reference<sp/>(pattern);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>modify<sp/>our<sp/>current<sp/>transformation<sp/>so<sp/>that<sp/>the<sp/>prescaled<sp/>image</highlight></codeline>
<codeline lineno="2462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>goes<sp/>where<sp/>it<sp/>is<sp/>supposed<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale(cairo,<sp/>1.0/matrix.xx,<sp/>1.0/matrix.yy);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>integer<sp/>co-ords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cairo,<sp/>tx<sp/>-<sp/>matrix.x0,<sp/>ty2<sp/>-<sp/>matrix.y0);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yScale<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_scale(cairo,<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>scaledWidth,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strokePathClip)<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fillToStrokePathClip<sp/>(state);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_pop_group_to_source<sp/>(cairo);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mask<sp/>at:<sp/>[%f<sp/>%f],<sp/>[%f<sp/>%f],<sp/>%f<sp/>%f\n\n&quot;,<sp/>matrix.xx,<sp/>matrix.xy,<sp/>matrix.yx,<sp/>matrix.yy,<sp/>matrix.x0,<sp/>matrix.y0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore(cairo);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>modify<sp/>our<sp/>current<sp/>transformation<sp/>so<sp/>that<sp/>the<sp/>prescaled<sp/>image</highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>goes<sp/>where<sp/>it<sp/>is<sp/>supposed<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_get_matrix(cairo_shape,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale(cairo_shape,<sp/>1.0/matrix.xx,<sp/>1.0/matrix.yy);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>integer<sp/>co-ords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cairo_shape,<sp/>tx<sp/>-<sp/>matrix.x0,<sp/>ty2<sp/>-<sp/>matrix.y0);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yScale<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_scale(cairo_shape,<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>scaledWidth,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore(cairo_shape);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert,</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)</highlight></codeline>
<codeline lineno="2515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*maskImgStr,<sp/>*imgStr;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_stride;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*maskBuffer,<sp/>*buffer;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*maskDest;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dest;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*maskImage,<sp/>*image;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*maskPattern,<sp/>*pattern;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>maskMatrix;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>Guchar<sp/>*pix;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert_bit;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>filter;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>maskFilter;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>maskImgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>maskImgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>maskImage<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_A8,<sp/>maskWidth,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(maskImage))<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>maskImgStr-&gt;close();</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskImgStr;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>maskBuffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/>invert_bit<sp/>=<sp/>maskInvert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>maskHeight;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>maskImgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDest<sp/>=<sp/>maskBuffer<sp/>+<sp/>y<sp/>*<sp/>row_stride;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>maskWidth;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix[x]<sp/>^<sp/>invert_bit)</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/>*maskDest++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>*maskDest++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>maskImgStr-&gt;close();</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskImgStr;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/>maskFilter<sp/>=<sp/>getFilterForSurface<sp/>(maskImage,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>maskPattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(maskPattern))</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ICCBased<sp/>color<sp/>space<sp/>doesn&apos;t<sp/>do<sp/>any<sp/>color<sp/>correction</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"><sp/><sp/><sp/>*<sp/>so<sp/>check<sp/>its<sp/>underlying<sp/>color<sp/>space<sp/>as<sp/>well<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_identity_transform;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>is_identity_transform<sp/>=<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceRGB<sp/>||</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>*)colorMap-&gt;getColorSpace())-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceRGB);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>cache<sp/>these?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_RGB24,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(image);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(image);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(buffer<sp/>+<sp/>y<sp/>*<sp/>row_stride);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGBLine<sp/>(pix,<sp/>dest,<sp/>width);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/>filter<sp/>=<sp/>getFilterForSurface<sp/>(image,<sp/>interpolate);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(image);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(image);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;drawMaskedImage<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height));</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(pattern,<sp/>filter);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(maskPattern,<sp/>maskFilter);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(maskPattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;matrix,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;matrix,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;maskMatrix,<sp/>0,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;maskMatrix,<sp/>maskWidth,<sp/>-maskHeight);</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(maskPattern,<sp/>&amp;maskMatrix);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(maskPattern))<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>maskPattern);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>maskPattern);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal">cleanup:</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight><highlight class="comment">//XXX:<sp/>is<sp/>this<sp/>affect<sp/>by<sp/>AIS(alpha<sp/>is<sp/>shape)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawSoftMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap,</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)</highlight></codeline>
<codeline lineno="2673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*maskImgStr,<sp/>*imgStr;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_stride;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*maskBuffer,<sp/>*buffer;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*maskDest;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dest;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*maskImage,<sp/>*image;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*maskPattern,<sp/>*pattern;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>maskMatrix,<sp/>matrix;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/>Guchar<sp/>*pix;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>filter;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>maskFilter;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>maskImgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>maskImgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/>maskImage<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_A8,<sp/>maskWidth,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(maskImage))<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>maskImgStr-&gt;close();</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskImgStr;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/>maskBuffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>maskHeight;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDest<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(maskBuffer<sp/>+<sp/>y<sp/>*<sp/>row_stride);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>maskImgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColorMap-&gt;getGrayLine<sp/>(pix,<sp/>maskDest,<sp/>maskWidth);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>maskImgStr-&gt;close();</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskImgStr;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>maskFilter<sp/>=<sp/>getFilterForSurface<sp/>(maskImage,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>maskPattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(maskImage);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(maskPattern))</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ICCBased<sp/>color<sp/>space<sp/>doesn&apos;t<sp/>do<sp/>any<sp/>color<sp/>correction</highlight></codeline>
<codeline lineno="2720"><highlight class="comment"><sp/><sp/><sp/>*<sp/>so<sp/>check<sp/>its<sp/>underlying<sp/>color<sp/>space<sp/>as<sp/>well<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_identity_transform;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/>is_identity_transform<sp/>=<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceRGB<sp/>||</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>*)colorMap-&gt;getColorSpace())-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceRGB);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>cache<sp/>these?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_RGB24,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(image);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>row_stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(image);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(buffer<sp/>+<sp/>y<sp/>*<sp/>row_stride);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGBLine<sp/>(pix,<sp/>dest,<sp/>width);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>filter<sp/>=<sp/>getFilterForSurface<sp/>(image,<sp/>interpolate);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>cairo_surface_mark_dirty<sp/>(image);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>setMimeData(state,<sp/>str,<sp/>ref,<sp/>colorMap,<sp/>image);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(image);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;drawSoftMaskedImage<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height));</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(pattern,<sp/>filter);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(maskPattern,<sp/>maskFilter);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(maskPattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;matrix,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;matrix,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;maskMatrix,<sp/>0,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;maskMatrix,<sp/>maskWidth,<sp/>-maskHeight);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(maskPattern,<sp/>&amp;maskMatrix);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(maskPattern))<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_opacity<sp/>!=<sp/>1.0)</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_push_group<sp/>(cairo);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>maskPattern);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_opacity<sp/>!=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pop_group_to_source<sp/>(cairo);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_paint_with_alpha<sp/>(cairo,<sp/>fill_opacity);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal">cleanup:</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal">GBool<sp/>CairoOutputDev::getStreamData<sp/>(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*length)</highlight></codeline>
<codeline lineno="2828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>i;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strBuffer;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>!=<sp/>EOF)<sp/>len++;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/>strBuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)gmalloc<sp/>(len);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>strBuffer[i]<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/>*buffer<sp/>=<sp/>strBuffer;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/>*length<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool<sp/>colorMapHasIdentityDecodeMap(<ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap)</highlight></codeline>
<codeline lineno="2853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>colorMap-&gt;getNumPixelComps();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getDecodeLow(i)<sp/>!=<sp/>0.0<sp/>||<sp/>colorMap-&gt;getDecodeHigh(i)<sp/>!=<sp/>1.0)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>11,<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cairo_status_t<sp/>setMimeIdFromRef(cairo_surface_t<sp/>*surface,</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type,</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_id_prefix,</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref)</highlight></codeline>
<codeline lineno="2866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*mime_id;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idBuffer;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/>cairo_status_t<sp/>status;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>mime_id<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mime_id_prefix)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>mime_id-&gt;append(mime_id_prefix);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>mime_id-&gt;appendf(</highlight><highlight class="stringliteral">&quot;{0:d}-{1:d}&quot;</highlight><highlight class="normal">,<sp/>ref.gen,<sp/>ref.num);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>idBuffer<sp/>=<sp/>copyString(mime_id-&gt;getCString());</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>cairo_surface_set_mime_data<sp/>(surface,<sp/>mime_type,</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)idBuffer,</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mime_id-&gt;getLength(),</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree,<sp/>idBuffer);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mime_id;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(idBuffer);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>14,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal">GBool<sp/>CairoOutputDev::setMimeDataForJBIG2Globals(<ref refid="class_stream" kindref="compound">Stream</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_surface_t<sp/>*image)</highlight></codeline>
<codeline lineno="2893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><ref refid="class_j_b_i_g2_stream" kindref="compound">JBIG2Stream</ref><sp/>*jb2Str<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_j_b_i_g2_stream" kindref="compound">JBIG2Stream</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref>*<sp/>globalsStr<sp/>=<sp/>jb2Str-&gt;getGlobalsStream();</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*globalsBuffer;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>globalsLength;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do<sp/>for<sp/>JBIG2<sp/>stream<sp/>without<sp/>Globals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!globalsStr-&gt;isStream())</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setMimeIdFromRef(image,<sp/>CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID,<sp/>NULL,</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jb2Str-&gt;getGlobalsStreamRef()))</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getStreamData(globalsStr-&gt;getStream(),<sp/>&amp;globalsBuffer,<sp/>&amp;globalsLength))</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_set_mime_data<sp/>(image,<sp/>CAIRO_MIME_TYPE_JBIG2_GLOBAL,</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)globalsBuffer,</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalsLength,</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)globalsBuffer))</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(globalsBuffer);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::setMimeData(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,<sp/>cairo_surface_t<sp/>*image)</highlight></codeline>
<codeline lineno="2925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strBuffer;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>StreamKind<sp/><sp/>strKind<sp/>=<sp/>str-&gt;getKind();</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(strKind)<sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>strDCT:</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mime_type<sp/>=<sp/>CAIRO_MIME_TYPE_JPEG;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>strJPX:</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mime_type<sp/>=<sp/>CAIRO_MIME_TYPE_JP2;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>14,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>strJBIG2:</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mime_type<sp/>=<sp/>CAIRO_MIME_TYPE_JBIG2;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>str-&gt;getDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;obj,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>state);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>colorspace<sp/>in<sp/>stream<sp/>dict<sp/>may<sp/>be<sp/>different<sp/>from<sp/>colorspace<sp/>in<sp/>jpx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strKind<sp/>==<sp/>strJPX<sp/>&amp;&amp;<sp/>colorSpace)</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>embed<sp/>mime<sp/>data<sp/>for<sp/>gray,<sp/>rgb,<sp/>and<sp/>cmyk<sp/>colorspaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>GfxColorSpaceMode<sp/>mode<sp/>=<sp/>colorSpace-&gt;getMode();</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorSpace;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceGray:</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csCalGray:</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceRGB:</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csCalRGB:</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceCMYK:</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csICCBased:</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csLab:</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceN:</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csPattern:</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!colorMapHasIdentityDecodeMap(colorMap))</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>14,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strKind<sp/>==<sp/>strJBIG2<sp/>&amp;&amp;<sp/>!setMimeDataForJBIG2Globals(str,<sp/>image))</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getStreamData<sp/>(str-&gt;getNextStream(),<sp/>&amp;strBuffer,<sp/>&amp;len))<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_status_t<sp/>status<sp/>=<sp/>CAIRO_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAIRO_VERSION<sp/>&gt;=<sp/>CAIRO_VERSION_ENCODE(1,<sp/>11,<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref<sp/>&amp;&amp;<sp/>ref-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>setMimeIdFromRef(image,<sp/>CAIRO_MIME_TYPE_UNIQUE_ID,</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;poppler-surface-&quot;</highlight><highlight class="normal">,<sp/>ref-&gt;getRef());</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>cairo_surface_set_mime_data<sp/>(image,<sp/>mime_type,</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)strBuffer,<sp/>len,</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree,<sp/>strBuffer);</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree<sp/>(strBuffer);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011" refid="class_rescale_draw_image" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_rescale_draw_image" kindref="compound">RescaleDrawImage</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_cairo_rescale_box" kindref="compound">CairoRescaleBox</ref><sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*lookup;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_row;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>GBool<sp/>imageError;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*getSourceImage(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledHeight,</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>printing,</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMapA,</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColorsA)<sp/>{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_t<sp/>*image<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap<sp/>=<sp/>colorMapA;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColors<sp/>=<sp/>maskColorsA;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>widthA;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>current_row<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>imageError<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>cache<sp/>these?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ICCBased<sp/>color<sp/>space<sp/>doesn&apos;t<sp/>do<sp/>any<sp/>color<sp/>correction</highlight></codeline>
<codeline lineno="3046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>check<sp/>its<sp/>underlying<sp/>color<sp/>space<sp/>as<sp/>well<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_identity_transform;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>is_identity_transform<sp/>=<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceRGB<sp/>||</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref>*)colorMap-&gt;getColorSpace())-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceRGB);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>one-channel<sp/>(monochrome/gray/separation)<sp/>images:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getNumPixelComps()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits();</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookup<sp/>=<sp/>(<ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref>));</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;lookup[i]);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printing<sp/>||<sp/>scaledWidth<sp/>&gt;=<sp/>width<sp/>||<sp/>scaledHeight<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>downscaling.<sp/>Create<sp/>cairo<sp/>image<sp/>containing<sp/>the<sp/>source<sp/>image<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(maskColors<sp/>?</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAIRO_FORMAT_ARGB32<sp/>:</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAIRO_FORMAT_RGB24,</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>cairo_image_surface_get_data<sp/>(image);</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stride<sp/>=<sp/>cairo_image_surface_get_stride<sp/>(image);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dest<sp/>=<sp/>(uint32_t<sp/>*)<sp/>(buffer<sp/>+<sp/>y<sp/>*<sp/>stride);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getRow(y,<sp/>dest);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Downscaling<sp/>required.<sp/>Create<sp/>cairo<sp/>image<sp/>the<sp/>size<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rescaled<sp/>image<sp/>and<sp/>//<sp/>downscale<sp/>the<sp/>source<sp/>image<sp/>data<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cairo<sp/>image.<sp/>downScaleImage()<sp/>will<sp/>call<sp/>getRow()<sp/>to<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>source<sp/>image<sp/>data<sp/>from<sp/>the<sp/>image<sp/>stream.<sp/>This<sp/>avoids<sp/>having</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>create<sp/>an<sp/>image<sp/>the<sp/>size<sp/>of<sp/>the<sp/>source<sp/>image<sp/>which<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exceed<sp/>cairo&apos;s<sp/>32676x32767<sp/>image<sp/>size<sp/>limit<sp/>(and<sp/>also<sp/>saves<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lot<sp/>of<sp/>memory).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>cairo_image_surface_create<sp/>(maskColors<sp/>?</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAIRO_FORMAT_ARGB32<sp/>:</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAIRO_FORMAT_RGB24,</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaledWidth,<sp/>scaledHeight);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_surface_status<sp/>(image))</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>downScaleImage(width,<sp/>height,</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaledWidth,<sp/>scaledHeight,</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>scaledWidth,<sp/>scaledHeight,</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_mark_dirty<sp/>(image);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>cleanup:</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(lookup);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;close();</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getRow(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_num,<sp/>uint32_t<sp/>*row_data)<sp/>{</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*pix;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_num<sp/>&lt;=<sp/>current_row)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_row<sp/><sp/>&lt;<sp/>row_num)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_row++;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(pix<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(row_data,<sp/>0,<sp/>width*4);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!imageError)<sp/>{</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>image<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/>imageError<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lookup)<sp/>{</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*p<sp/>=<sp/>pix;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>width;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb<sp/>=<sp/>lookup[*p];</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_data[i]<sp/>=</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int)<sp/>colToByte(rgb.r)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>colToByte(rgb.g)<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>colToByte(rgb.b)<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getRGBLine<sp/>(pix,<sp/>row_data,<sp/>width);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskColors)<sp/>{</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_opaque<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>colorMap-&gt;getNumPixelComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pix[i]<sp/>&lt;<sp/>maskColors[2*i]<sp/>||</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix[i]<sp/>&gt;<sp/>maskColors[2*i+1])<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_opaque<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_opaque)</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*row_data<sp/>|=<sp/>0xff000000;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*row_data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_data++;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>+=<sp/>colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoOutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heightA,</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/>GBool<sp/>inlineImg)</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*image;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>cairo_pattern_t<sp/>*pattern,<sp/>*maskPattern;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledWidth,<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/>cairo_filter_t<sp/>filter<sp/>=<sp/>CAIRO_FILTER_BILINEAR;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><ref refid="class_rescale_draw_image" kindref="compound">RescaleDrawImage</ref><sp/>rescale;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/>LOG<sp/>(printf<sp/>(</highlight><highlight class="stringliteral">&quot;drawImage<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,<sp/>widthA,<sp/>heightA));</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>cairo_get_matrix(cairo,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>getScaledSize<sp/>(&amp;matrix,<sp/>widthA,<sp/>heightA,<sp/>&amp;scaledWidth,<sp/>&amp;scaledHeight);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/>rescale.getSourceImage(str,<sp/>widthA,<sp/>heightA,<sp/>scaledWidth,<sp/>scaledHeight,<sp/>printing,<sp/>colorMap,<sp/>maskColors);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!image)</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>cairo_image_surface_get_width<sp/>(image);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>cairo_image_surface_get_height<sp/>(image);</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>widthA<sp/>&amp;&amp;<sp/>height<sp/>==<sp/>heightA)</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>getFilterForSurface<sp/>(image,<sp/>interpolate);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inlineImg)<sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>read<sp/>stream<sp/>twice<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>image<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>setMimeData(state,<sp/>str,<sp/>ref,<sp/>colorMap,<sp/>image);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/>pattern<sp/>=<sp/>cairo_pattern_create_for_surface<sp/>(image);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>cairo_surface_destroy<sp/>(image);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>cairo_pattern_set_filter<sp/>(pattern,<sp/>filter);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_set_extend<sp/>(pattern,<sp/>CAIRO_EXTEND_PAD);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/>cairo_matrix_init_translate<sp/>(&amp;matrix,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>cairo_matrix_scale<sp/>(&amp;matrix,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>cairo_pattern_set_matrix<sp/>(pattern,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_pattern_status<sp/>(pattern))<sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mask<sp/>&amp;&amp;<sp/>fill_opacity<sp/>!=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>maskPattern<sp/>=<sp/>cairo_pattern_create_rgba<sp/>(1.,<sp/>1.,<sp/>1.,<sp/>fill_opacity);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)<sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/>maskPattern<sp/>=<sp/>cairo_pattern_reference<sp/>(mask);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/>maskPattern<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/>cairo_save<sp/>(cairo);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>cairo_set_source<sp/>(cairo,<sp/>pattern);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskPattern)<sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printing)</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_clip<sp/>(cairo);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_set_matrix<sp/>(cairo,<sp/>&amp;mask_matrix);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>maskPattern);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printing)</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_paint<sp/>(cairo);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>cairo_restore<sp/>(cairo);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(maskPattern);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_shape)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_save<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_set_source<sp/>(cairo_shape,<sp/>pattern);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printing)<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_paint<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_rectangle<sp/>(cairo_shape,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_fill<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_restore<sp/>(cairo_shape);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>cairo_pattern_destroy<sp/>(pattern);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ImageOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal">CairoImageOutputDev::CairoImageOutputDev()</highlight></codeline>
<codeline lineno="3268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>images<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>numImages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>imgDrawCbk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>imgDrawCbkData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal">CairoImageOutputDev::~CairoImageOutputDev()</highlight></codeline>
<codeline lineno="3277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numImages;<sp/>i++)</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>images[i];</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>gfree<sp/>(images);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::saveImage(<ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image)</highlight></codeline>
<codeline lineno="3286"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numImages<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>images<sp/>=<sp/>(<ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>**)<sp/>greallocn<sp/>(images,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*));</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>images[numImages++]<sp/>=<sp/>image;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::getBBox(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y2)</highlight></codeline>
<codeline lineno="3296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/>cairo_matrix_init(&amp;matrix,</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctm[0],<sp/>ctm[1],</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-ctm[2],<sp/>-ctm[3],</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctm[2]<sp/>+<sp/>ctm[4],<sp/>ctm[3]<sp/>+<sp/>ctm[5]);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scaledWidth,<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>getScaledSize<sp/>(&amp;matrix,<sp/>width,<sp/>height,<sp/>&amp;scaledWidth,<sp/>&amp;scaledHeight);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix.xx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>matrix.x0;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>matrix.x0<sp/>-<sp/>scaledWidth;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>*x2<sp/>=<sp/>*x1<sp/>+<sp/>scaledWidth;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix.yy<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>matrix.y0;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>matrix.y0<sp/>-<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>*y2<sp/>=<sp/>*y1<sp/>+<sp/>scaledHeight;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)</highlight></codeline>
<codeline lineno="3325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*cr;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/>getBBox(state,<sp/>width,<sp/>height,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>saveImage<sp/>(image);</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgDrawCbk<sp/>&amp;&amp;<sp/>imgDrawCbk<sp/>(numImages<sp/>-<sp/>1,<sp/>imgDrawCbkData))<sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(cr);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cr,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale<sp/>(cr,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>CairoOutputDev::drawImageMask(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>interpolate,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;setImage<sp/>(surface);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(NULL);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cr);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::setSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>inlineImg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)</highlight></codeline>
<codeline lineno="3355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*cr;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>getBBox(state,<sp/>width,<sp/>height,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>saveImage<sp/>(image);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgDrawCbk<sp/>&amp;&amp;<sp/>imgDrawCbk<sp/>(numImages<sp/>-<sp/>1,<sp/>imgDrawCbkData))<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(cr);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cr,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale<sp/>(cr,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>CairoOutputDev::drawImageMask(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>inlineImg,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cairo_mask<sp/>(cairo,<sp/>mask);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;setImage<sp/>(surface);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(NULL);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cr);</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/>GBool<sp/>inlineImg)</highlight></codeline>
<codeline lineno="3388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*cr;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/>getBBox(state,<sp/>width,<sp/>height,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/>saveImage<sp/>(image);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgDrawCbk<sp/>&amp;&amp;<sp/>imgDrawCbk<sp/>(numImages<sp/>-<sp/>1,<sp/>imgDrawCbkData))<sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(cr);</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cr,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale<sp/>(cr,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/>CairoOutputDev::drawImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,<sp/>maskColors,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;setImage<sp/>(surface);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(NULL);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cr);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::drawSoftMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap,</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)</highlight></codeline>
<codeline lineno="3423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*cr;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/>getBBox(state,<sp/>width,<sp/>height,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/>saveImage<sp/>(image);</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgDrawCbk<sp/>&amp;&amp;<sp/>imgDrawCbk<sp/>(numImages<sp/>-<sp/>1,<sp/>imgDrawCbkData))<sp/>{</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(cr);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cr,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale<sp/>(cr,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>CairoOutputDev::drawSoftMaskedImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskColorMap,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;setImage<sp/>(surface);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(NULL);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cr);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CairoImageOutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInvert,<sp/>GBool<sp/>maskInterpolate)</highlight></codeline>
<codeline lineno="3458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>cairo_t<sp/>*cr;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>cairo_surface_t<sp/>*surface;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>*image;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>getBBox(state,<sp/>width,<sp/>height,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_image" kindref="compound">CairoImage</ref><sp/>(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>saveImage<sp/>(image);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgDrawCbk<sp/>&amp;&amp;<sp/>imgDrawCbk<sp/>(numImages<sp/>-<sp/>1,<sp/>imgDrawCbkData))<sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>cairo_image_surface_create<sp/>(CAIRO_FORMAT_ARGB32,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>cairo_create<sp/>(surface);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(cr);</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_translate<sp/>(cr,<sp/>0,<sp/>height);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scale<sp/>(cr,<sp/>width,<sp/>-height);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>CairoOutputDev::drawMaskedImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;setImage<sp/>(surface);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>setCairo<sp/>(NULL);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_surface_destroy<sp/>(surface);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_destroy<sp/>(cr);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/CairoOutputDev.cc"/>
  </compounddef>
</doxygen>
