<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_splash_output_dev_8cc" kind="file" language="C++">
    <compoundname>SplashOutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <includes refid="_link_8h" local="yes">Link.h</includes>
    <includes refid="_font_encoding_tables_8h" local="yes">FontEncodingTables.h</includes>
    <includes refid="_fo_fi_true_type_8h" local="yes">fofi/FoFiTrueType.h</includes>
    <includes refid="_splash_bitmap_8h" local="yes">splash/SplashBitmap.h</includes>
    <includes refid="_splash_glyph_bitmap_8h" local="yes">splash/SplashGlyphBitmap.h</includes>
    <includes refid="_splash_pattern_8h" local="yes">splash/SplashPattern.h</includes>
    <includes refid="_splash_screen_8h" local="yes">splash/SplashScreen.h</includes>
    <includes refid="_splash_path_8h" local="yes">splash/SplashPath.h</includes>
    <includes refid="_splash_state_8h" local="yes">splash/SplashState.h</includes>
    <includes refid="_splash_error_codes_8h" local="yes">splash/SplashErrorCodes.h</includes>
    <includes refid="_splash_font_engine_8h" local="yes">splash/SplashFontEngine.h</includes>
    <includes refid="_splash_font_8h" local="yes">splash/SplashFont.h</includes>
    <includes refid="_splash_font_file_8h" local="yes">splash/SplashFontFile.h</includes>
    <includes refid="_splash_font_file_i_d_8h" local="yes">splash/SplashFontFileID.h</includes>
    <includes refid="_splash_8h" local="yes">splash/Splash.h</includes>
    <includes refid="_splash_output_dev_8h" local="yes">SplashOutputDev.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="89809">
        <label>stdarg.h</label>
      </node>
      <node id="89844">
        <label>splash/SplashState.h</label>
        <link refid="_splash_state_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89822">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89813" relation="include">
        </childnode>
      </node>
      <node id="89804">
        <label>assert.h</label>
      </node>
      <node id="89845">
        <label>splash/SplashErrorCodes.h</label>
        <link refid="_splash_error_codes_8h_source"/>
      </node>
      <node id="89829">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89818" relation="include">
        </childnode>
        <childnode refid="89825" relation="include">
        </childnode>
      </node>
      <node id="89842">
        <label>splash/SplashScreen.h</label>
        <link refid="_splash_screen_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89798" relation="include">
        </childnode>
      </node>
      <node id="89821">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89822" relation="include">
        </childnode>
        <childnode refid="89804" relation="include">
        </childnode>
        <childnode refid="89823" relation="include">
        </childnode>
      </node>
      <node id="89795">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89798" relation="include">
        </childnode>
        <childnode refid="89799" relation="include">
        </childnode>
        <childnode refid="89800" relation="include">
        </childnode>
        <childnode refid="89801" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89826">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89810" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89805" relation="include">
        </childnode>
      </node>
      <node id="89852">
        <label>splash/SplashFontFileID.h</label>
        <link refid="_splash_font_file_i_d_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89843">
        <label>splash/SplashPath.h</label>
        <link refid="_splash_path_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89798">
        <label>stdlib.h</label>
      </node>
      <node id="89814">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89796" relation="include">
        </childnode>
      </node>
      <node id="89828">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
        <childnode refid="89829" relation="include">
        </childnode>
        <childnode refid="89830" relation="include">
        </childnode>
        <childnode refid="89827" relation="include">
        </childnode>
        <childnode refid="89831" relation="include">
        </childnode>
        <childnode refid="89832" relation="include">
        </childnode>
        <childnode refid="89833" relation="include">
        </childnode>
        <childnode refid="89818" relation="include">
        </childnode>
      </node>
      <node id="89847">
        <label>splash/SplashFont.h</label>
        <link refid="_splash_font_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89848" relation="include">
        </childnode>
      </node>
      <node id="89816">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
      </node>
      <node id="89830">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
        <childnode refid="89825" relation="include">
        </childnode>
      </node>
      <node id="89835">
        <label>FontEncodingTables.h</label>
        <link refid="_font_encoding_tables_8h_source"/>
      </node>
      <node id="89803">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="89804" relation="include">
        </childnode>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89805" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
      </node>
      <node id="89823">
        <label>map</label>
      </node>
      <node id="89808">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="89809" relation="include">
        </childnode>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89810" relation="include">
        </childnode>
      </node>
      <node id="89819">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89820" relation="include">
        </childnode>
        <childnode refid="89821" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89824" relation="include">
        </childnode>
        <childnode refid="89825" relation="include">
        </childnode>
      </node>
      <node id="89820">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89817">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
      </node>
      <node id="89831">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="89812" relation="include">
        </childnode>
      </node>
      <node id="89799">
        <label>stddef.h</label>
      </node>
      <node id="89827">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
      </node>
      <node id="89811">
        <label>limits.h</label>
      </node>
      <node id="89796">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="89797" relation="include">
        </childnode>
      </node>
      <node id="89851">
        <label>splash/SplashFontFile.h</label>
        <link refid="_splash_font_file_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89815">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="89818">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89806" relation="include">
        </childnode>
      </node>
      <node id="89807">
        <label>pthread.h</label>
      </node>
      <node id="89801">
        <label>sys/types.h</label>
      </node>
      <node id="89850">
        <label>SplashXPathScanner.h</label>
        <link refid="_splash_x_path_scanner_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89824">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="89812" relation="include">
        </childnode>
      </node>
      <node id="89837">
        <label>FoFiBase.h</label>
        <link refid="_fo_fi_base_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89793">
        <label>string.h</label>
      </node>
      <node id="89854">
        <label>SplashOutputDev.h</label>
        <link refid="_splash_output_dev_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89841" relation="include">
        </childnode>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89855" relation="include">
        </childnode>
        <childnode refid="89821" relation="include">
        </childnode>
        <childnode refid="89803" relation="include">
        </childnode>
      </node>
      <node id="89853">
        <label>splash/Splash.h</label>
        <link refid="_splash_8h_source"/>
        <childnode refid="89799" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89848" relation="include">
        </childnode>
        <childnode refid="89841" relation="include">
        </childnode>
      </node>
      <node id="89810">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="89811" relation="include">
        </childnode>
        <childnode refid="89809" relation="include">
        </childnode>
        <childnode refid="89798" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89832">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89831" relation="include">
        </childnode>
        <childnode refid="89813" relation="include">
        </childnode>
      </node>
      <node id="89834">
        <label>Link.h</label>
        <link refid="_link_8h_source"/>
        <childnode refid="89812" relation="include">
        </childnode>
      </node>
      <node id="89812">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="89813" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
        <childnode refid="89793" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89814" relation="include">
        </childnode>
        <childnode refid="89810" relation="include">
        </childnode>
        <childnode refid="89815" relation="include">
        </childnode>
        <childnode refid="89808" relation="include">
        </childnode>
        <childnode refid="89816" relation="include">
        </childnode>
        <childnode refid="89817" relation="include">
        </childnode>
        <childnode refid="89818" relation="include">
        </childnode>
      </node>
      <node id="89800">
        <label>unistd.h</label>
      </node>
      <node id="89825">
        <label>vector</label>
      </node>
      <node id="89836">
        <label>fofi/FoFiTrueType.h</label>
        <link refid="_fo_fi_true_type_8h_source"/>
        <childnode refid="89799" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89837" relation="include">
        </childnode>
      </node>
      <node id="89849">
        <label>SplashMath.h</label>
        <link refid="_splash_math_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89794" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89791">
        <label>thirdparty/poppler/poppler/SplashOutputDev.cc</label>
        <link refid="_splash_output_dev_8cc"/>
        <childnode refid="89792" relation="include">
        </childnode>
        <childnode refid="89793" relation="include">
        </childnode>
        <childnode refid="89794" relation="include">
        </childnode>
        <childnode refid="89795" relation="include">
        </childnode>
        <childnode refid="89803" relation="include">
        </childnode>
        <childnode refid="89808" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89819" relation="include">
        </childnode>
        <childnode refid="89826" relation="include">
        </childnode>
        <childnode refid="89827" relation="include">
        </childnode>
        <childnode refid="89828" relation="include">
        </childnode>
        <childnode refid="89834" relation="include">
        </childnode>
        <childnode refid="89835" relation="include">
        </childnode>
        <childnode refid="89836" relation="include">
        </childnode>
        <childnode refid="89838" relation="include">
        </childnode>
        <childnode refid="89840" relation="include">
        </childnode>
        <childnode refid="89841" relation="include">
        </childnode>
        <childnode refid="89842" relation="include">
        </childnode>
        <childnode refid="89843" relation="include">
        </childnode>
        <childnode refid="89844" relation="include">
        </childnode>
        <childnode refid="89845" relation="include">
        </childnode>
        <childnode refid="89846" relation="include">
        </childnode>
        <childnode refid="89847" relation="include">
        </childnode>
        <childnode refid="89851" relation="include">
        </childnode>
        <childnode refid="89852" relation="include">
        </childnode>
        <childnode refid="89853" relation="include">
        </childnode>
        <childnode refid="89854" relation="include">
        </childnode>
        <childnode refid="89856" relation="include">
        </childnode>
      </node>
      <node id="89838">
        <label>splash/SplashBitmap.h</label>
        <link refid="_splash_bitmap_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89821" relation="include">
        </childnode>
        <childnode refid="89797" relation="include">
        </childnode>
      </node>
      <node id="89848">
        <label>SplashClip.h</label>
        <link refid="_splash_clip_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
        <childnode refid="89849" relation="include">
        </childnode>
        <childnode refid="89850" relation="include">
        </childnode>
      </node>
      <node id="89846">
        <label>splash/SplashFontEngine.h</label>
        <link refid="_splash_font_engine_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89855">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
        <childnode refid="89802" relation="include">
        </childnode>
        <childnode refid="89805" relation="include">
        </childnode>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89824" relation="include">
        </childnode>
      </node>
      <node id="89840">
        <label>splash/SplashGlyphBitmap.h</label>
        <link refid="_splash_glyph_bitmap_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89794">
        <label>math.h</label>
      </node>
      <node id="89841">
        <label>splash/SplashPattern.h</label>
        <link refid="_splash_pattern_8h_source"/>
        <childnode refid="89839" relation="include">
        </childnode>
      </node>
      <node id="89806">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="89807" relation="include">
        </childnode>
      </node>
      <node id="89805">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="89839">
        <label>SplashTypes.h</label>
        <link refid="_splash_types_8h_source"/>
        <childnode refid="89802" relation="include">
        </childnode>
      </node>
      <node id="89802">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="89796" relation="include">
        </childnode>
      </node>
      <node id="89813">
        <label>set</label>
      </node>
      <node id="89792">
        <label>config.h</label>
      </node>
      <node id="89856">
        <label>algorithm</label>
      </node>
      <node id="89833">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="89812" relation="include">
        </childnode>
        <childnode refid="89805" relation="include">
        </childnode>
      </node>
      <node id="89797">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_splash_out_font_file_i_d" prot="public">SplashOutFontFileID</innerclass>
    <innerclass refid="struct_t3_font_cache_tag" prot="public">T3FontCacheTag</innerclass>
    <innerclass refid="class_t3_font_cache" prot="public">T3FontCache</innerclass>
    <innerclass refid="struct_t3_glyph_stack" prot="public">T3GlyphStack</innerclass>
    <innerclass refid="struct_splash_transparency_group" prot="public">SplashTransparencyGroup</innerclass>
    <innerclass refid="struct_splash_out_image_mask_data" prot="public">SplashOutImageMaskData</innerclass>
    <innerclass refid="struct_splash_out_image_data" prot="public">SplashOutImageData</innerclass>
    <innerclass refid="struct_tiling_splash_out_bitmap" prot="public">TilingSplashOutBitmap</innerclass>
    <innerclass refid="struct_splash_out_masked_image_data" prot="public">SplashOutMaskedImageData</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_splash_output_dev_8cc_1a3ffd32730f63e6d5fdc04ca2d8284ada" prot="public" static="no">
        <name>RADIAL_EPSILON</name>
        <initializer>(1. / 1024 / 1024)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="354" column="9" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_splash_output_dev_8cc_1a9a3616daea73d4c357f605c06bd36db4" prot="public" static="no">
        <name>type3FontCacheAssoc</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="504" column="9" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_splash_output_dev_8cc_1ae8c4272bf1385d59ff447be7843a00f2" prot="public" static="no">
        <name>type3FontCacheMaxSets</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="505" column="9" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_splash_output_dev_8cc_1abee79e62d4a5b8712a5e21aea23614f8" prot="public" static="no">
        <name>type3FontCacheSize</name>
        <initializer>(128*1024)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="506" column="9" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="506" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_splash_output_dev_8cc_1a88ab6505b6f8230ae4320b76b5616dac" prot="public" static="yes" mutable="no">
        <type>const SplashBlendFunc</type>
        <definition>const SplashBlendFunc splashOutBlendFuncs[]</definition>
        <argsstring>[]</argsstring>
        <name>splashOutBlendFuncs</name>
        <initializer>= {
  NULL,
  &amp;splashOutBlendMultiply,
  &amp;splashOutBlendScreen,
  &amp;splashOutBlendOverlay,
  &amp;splashOutBlendDarken,
  &amp;splashOutBlendLighten,
  &amp;splashOutBlendColorDodge,
  &amp;splashOutBlendColorBurn,
  &amp;splashOutBlendHardLight,
  &amp;splashOutBlendSoftLight,
  &amp;splashOutBlendDifference,
  &amp;splashOutBlendExclusion,
  &amp;splashOutBlendHue,
  &amp;splashOutBlendSaturation,
  &amp;splashOutBlendColor,
  &amp;splashOutBlendLuminosity
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="1188" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="1188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_splash_output_dev_8cc_1a37a85f33af027d63bfc69c59a3ac83aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void convertGfxColor</definition>
        <argsstring>(SplashColorPtr dest, SplashColorMode colorMode, GfxColorSpace *colorSpace, GfxColor *src)</argsstring>
        <name>convertGfxColor</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>colorMode</declname>
        </param>
        <param>
          <type><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref> *</type>
          <declname>colorSpace</declname>
        </param>
        <param>
          <type><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="105" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="105" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a0cbd970fab14fe0d44f2a584e0f1cba8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void convertGfxShortColor</definition>
        <argsstring>(SplashColorPtr dest, SplashColorMode colorMode, GfxColorSpace *colorSpace, GfxColor *src)</argsstring>
        <name>convertGfxShortColor</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>colorMode</declname>
        </param>
        <param>
          <type><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref> *</type>
          <declname>colorSpace</declname>
        </param>
        <param>
          <type><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="162" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="162" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a34242ac1e909080690a9282414d46688" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar div255</definition>
        <argsstring>(int x)</argsstring>
        <name>div255</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="510" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a176408c878dc93da08b2236777ad43b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendMultiply</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendMultiply</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="566" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="566" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a93665589dd2189fa5c5c6619f3bf3da2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendScreen</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendScreen</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="594" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="594" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1ac7d8d258fe7ccdb269773fa59aa58206" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendOverlay</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendOverlay</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="622" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="622" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a6f78f69abcebdc77bfb185258f408f50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendDarken</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendDarken</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="652" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="652" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a36e5ce42d1efde89710d669222d95193" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendLighten</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendLighten</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="680" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="680" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a410fab1ab819f3aad20592c15a0b32d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendColorDodge</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendColorDodge</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="708" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="708" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a9788abf4526a69c71541cb0029625e13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendColorBurn</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendColorBurn</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="742" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="742" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1ac5d045e914529da01699d5715c221f22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendHardLight</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendHardLight</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="775" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="775" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1aa6da254f24af8ec7e41eff28528ec626" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendSoftLight</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendSoftLight</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="805" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="805" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a92c2fd1585c05e2dd1f4746764d4f907" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendDifference</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendDifference</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="842" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="842" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a0da7a03a39fc063729926f41541b2004" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendExclusion</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendExclusion</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="877" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="877" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a3f6e94d2040e6a0a6aa395137bf49ed3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getLum</definition>
        <argsstring>(int r, int g, int b)</argsstring>
        <name>getLum</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="911" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="911" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a51d8b5d78abcdb46919f44219151bc78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getSat</definition>
        <argsstring>(int r, int g, int b)</argsstring>
        <name>getSat</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="915" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="915" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1ac6451ee4104451ef2877ab91e722c8ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clipColor</definition>
        <argsstring>(int rIn, int gIn, int bIn, Guchar *rOut, Guchar *gOut, Guchar *bOut)</argsstring>
        <name>clipColor</name>
        <param>
          <type>int</type>
          <declname>rIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bIn</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>rOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>gOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>bOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="932" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="932" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1aac8a27ec584e7ab91d87c6920ccc3f55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setLum</definition>
        <argsstring>(Guchar rIn, Guchar gIn, Guchar bIn, int lum, Guchar *rOut, Guchar *gOut, Guchar *bOut)</argsstring>
        <name>setLum</name>
        <param>
          <type>Guchar</type>
          <declname>rIn</declname>
        </param>
        <param>
          <type>Guchar</type>
          <declname>gIn</declname>
        </param>
        <param>
          <type>Guchar</type>
          <declname>bIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lum</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>rOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>gOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>bOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="963" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="963" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a693baf92792472bf22e17e9a4eb11fd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setSat</definition>
        <argsstring>(Guchar rIn, Guchar gIn, Guchar bIn, int sat, Guchar *rOut, Guchar *gOut, Guchar *bOut)</argsstring>
        <name>setSat</name>
        <param>
          <type>Guchar</type>
          <declname>rIn</declname>
        </param>
        <param>
          <type>Guchar</type>
          <declname>gIn</declname>
        </param>
        <param>
          <type>Guchar</type>
          <declname>bIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sat</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>rOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>gOut</declname>
        </param>
        <param>
          <type>Guchar *</type>
          <declname>bOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="971" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="971" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a97282fc40f81162daf254c59f0b10a31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendHue</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendHue</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="1002" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="1002" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1ab5f64a891e27a57c6e049cb6658543cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendSaturation</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendSaturation</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="1051" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="1051" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1a07638098ff8f704b97b43f9bfde95b43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendColor</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendColor</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="1100" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="1100" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1af2c6e99b6c8de4a88a3d1359b52bfa0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splashOutBlendLuminosity</definition>
        <argsstring>(SplashColorPtr src, SplashColorPtr dest, SplashColorPtr blend, SplashColorMode cm)</argsstring>
        <name>splashOutBlendLuminosity</name>
        <param>
          <type>SplashColorPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SplashColorPtr</type>
          <declname>blend</declname>
        </param>
        <param>
          <type>SplashColorMode</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="1143" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="1143" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="_splash_output_dev_8cc_1ad32565519ae6420999bd4954092b3ef0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Guchar</type>
        <definition>static Guchar clip255</definition>
        <argsstring>(int x)</argsstring>
        <name>clip255</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/SplashOutputDev.cc" line="3047" column="1" bodyfile="thirdparty/poppler/poppler/SplashOutputDev.cc" bodystart="3047" bodyend="3049"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Takashi<sp/>Iwai<sp/>&lt;tiwai@suse.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Stefan<sp/>Schweizer<sp/>&lt;genstef@gentoo.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Krzysztof<sp/>Kowalczyk<sp/>&lt;kkowalczyk@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Scott<sp/>Turner<sp/>&lt;scotty1024@mac.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Petr<sp/>Gajdos<sp/>&lt;pgajdos@novell.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009-2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2014-2016<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Patrick<sp/>Spendrin<sp/>&lt;ps_ml@gmx.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Brian<sp/>Cameron<sp/>&lt;brian.cameron@oracle.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Paweł<sp/>Wiejacha<sp/>&lt;pawel.wiejacha@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Christian<sp/>Feuersänger<sp/>&lt;cfeuersaenger@googlemail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Andreas<sp/>Hartmetz<sp/>&lt;ahartmetz@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Andrea<sp/>Canciani<sp/>&lt;ranma42@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011,<sp/>2012<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Lu<sp/>Wang<sp/>&lt;coolwanglu@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Li<sp/>Junling<sp/>&lt;lijunling@sina.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Ed<sp/>Porras<sp/>&lt;ed@moto-research.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Richard<sp/>PALO<sp/>&lt;richard@netbsd.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Tamas<sp/>Szekeres<sp/>&lt;szekerest@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Kenji<sp/>Uno<sp/>&lt;ku@digitaldolphins.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2016<sp/>Takahiro<sp/>Hashimoto<sp/>&lt;kenya888.en@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Link.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FontEncodingTables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fofi/FoFiTrueType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashGlyphBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashPattern.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashScreen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashPath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashErrorCodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashFontEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashFontFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/SplashFontFileID.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;splash/Splash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__VMS_VER<sp/>&lt;<sp/>70000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unlink(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite(x)<sp/>_finite(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__sun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ieeefp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>isfinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite(x)<sp/>finite(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>199711L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>isfinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite(x)<sp/>std::isfinite(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertGfxColor(SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>colorMode,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>SplashColor<sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>color[0]<sp/>=<sp/>color[1]<sp/>=<sp/>color[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>color[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getGray(src,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGB(src,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getCMYK(src,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getDeviceN(src,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SPOT_NCOMPS<sp/>+<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color[i]<sp/>=<sp/>colToByte(deviceN.c[i]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>splashColorCopy(dest,<sp/>color);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy<sp/>a<sp/>color<sp/>according<sp/>to<sp/>the<sp/>color<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>convertGfxShortColor()<sp/>below<sp/>when<sp/>the<sp/>destination<sp/>is<sp/>a<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>overwriting<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>this<sp/>in<sp/>SplashGouraudPattern::getParameterizedColor()<sp/>fixes<sp/>bug<sp/>90570.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>convertGfxColor()<sp/>above<sp/>when<sp/>the<sp/>destination<sp/>is<sp/>an<sp/>array<sp/>of<sp/>SPOT_NCOMPS+4<sp/>bytes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>ensure<sp/>that<sp/>everything<sp/>is<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertGfxShortColor(SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>colorMode,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getGray(src,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[0]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGB(src,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[0]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getCMYK(src,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getDeviceN(src,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SPOT_NCOMPS<sp/>+<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>colToByte(deviceN.c[i]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashGouraudPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">SplashGouraudPattern::SplashGouraudPattern(GBool<sp/>bDirectColorTranslationA,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateA,<sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shadingA,<sp/>SplashColorMode<sp/>modeA)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>SplashColor<sp/>defaultColor;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>srcColor;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>stateA;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/>shadingA;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>mode<sp/>=<sp/>modeA;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>bDirectColorTranslation<sp/>=<sp/>bDirectColorTranslationA;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>shadingA-&gt;getColorSpace()-&gt;getDefaultColor(&amp;srcColor);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>convertGfxColor(defaultColor,<sp/>mode,<sp/>shadingA-&gt;getColorSpace(),<sp/>&amp;srcColor);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>gfxMode<sp/>=<sp/>shadingA-&gt;getColorSpace()-&gt;getMode();</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">SplashGouraudPattern::~SplashGouraudPattern()<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashGouraudPattern::getParameterizedColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>colorinterp,<sp/>SplashColorMode<sp/>mode,<sp/>SplashColorPtr<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>src;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref>*<sp/>srcColorSpace<sp/>=<sp/>shading-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorComps<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>splashModeCMYK8)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>colorComps=4;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>colorComps=4<sp/>+<sp/>SPOT_NCOMPS;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>shading-&gt;getParameterizedColor(colorinterp,<sp/>&amp;src);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bDirectColorTranslation)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>colorComps;<sp/>++m)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[m]<sp/>=<sp/>colToByte(src.c[m]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>convertGfxShortColor(dest,<sp/>mode,<sp/>srcColorSpace,<sp/>&amp;src);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashFunctionPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">SplashFunctionPattern::SplashFunctionPattern(SplashColorMode<sp/>colorModeA,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateA,<sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shadingA)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>ctm;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>SplashColor<sp/>defaultColor;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>srcColor;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrix<sp/>=<sp/>shadingA-&gt;getMatrix();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/>shadingA;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>stateA;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>colorMode<sp/>=<sp/>colorModeA;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>state-&gt;getCTM(&amp;ctm);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>ctm.m[0];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>ctm.m[1];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>ctm.m[2];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>ctm.m[3];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>ctm.m[0]<sp/>=<sp/>matrix[0]<sp/>*<sp/>a1<sp/>+<sp/>matrix[1]<sp/>*<sp/>c1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>ctm.m[1]<sp/>=<sp/>matrix[0]<sp/>*<sp/>b1<sp/>+<sp/>matrix[1]<sp/>*<sp/>d1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ctm.m[2]<sp/>=<sp/>matrix[2]<sp/>*<sp/>a1<sp/>+<sp/>matrix[3]<sp/>*<sp/>c1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>ctm.m[3]<sp/>=<sp/>matrix[2]<sp/>*<sp/>b1<sp/>+<sp/>matrix[3]<sp/>*<sp/>d1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>ctm.m[4]<sp/>=<sp/>matrix[4]<sp/>*<sp/>a1<sp/>+<sp/>matrix[5]<sp/>*<sp/>c1<sp/>+<sp/>ctm.m[4];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>ctm.m[5]<sp/>=<sp/>matrix[4]<sp/>*<sp/>b1<sp/>+<sp/>matrix[5]<sp/>*<sp/>d1<sp/>+<sp/>ctm.m[5];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ctm.invertTo(&amp;ictm);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>gfxMode<sp/>=<sp/>shadingA-&gt;getColorSpace()-&gt;getMode();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>shadingA-&gt;getColorSpace()-&gt;getDefaultColor(&amp;srcColor);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>shadingA-&gt;getDomain(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>convertGfxColor(defaultColor,<sp/>colorModeA,<sp/>shadingA-&gt;getColorSpace(),<sp/>&amp;srcColor);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">SplashFunctionPattern::~SplashFunctionPattern()<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">GBool<sp/>SplashFunctionPattern::getColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>SplashColorPtr<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>gfxColor;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xc,<sp/>yc;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ictm.transform(x,<sp/>y,<sp/>&amp;xc,<sp/>&amp;yc);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xc<sp/>&lt;<sp/>xMin<sp/>||<sp/>xc<sp/>&gt;<sp/>xMax<sp/>||<sp/>yc<sp/>&lt;<sp/>yMin<sp/>||<sp/>yc<sp/>&gt;<sp/>yMax)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(xc,<sp/>yc,<sp/>&amp;gfxColor);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>convertGfxColor(c,<sp/>colorMode,<sp/>shading-&gt;getColorSpace(),<sp/>&amp;gfxColor);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashUnivariatePattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">SplashUnivariatePattern::SplashUnivariatePattern(SplashColorMode<sp/>colorModeA,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateA,<sp/><ref refid="class_gfx_univariate_shading" kindref="compound">GfxUnivariateShading</ref><sp/>*shadingA)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>ctm;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/>shadingA;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>stateA;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>colorMode<sp/>=<sp/>colorModeA;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>state-&gt;getCTM(&amp;ctm);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>ctm.invertTo(&amp;ictm);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>function<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;getDomain0();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;getDomain1();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>dt<sp/>=<sp/>t1<sp/>-<sp/>t0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>stateA-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>shadingA-&gt;setupCache(&amp;ctm,<sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>gfxMode<sp/>=<sp/>shadingA-&gt;getColorSpace()-&gt;getMode();</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">SplashUnivariatePattern::~SplashUnivariatePattern()<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">GBool<sp/>SplashUnivariatePattern::getColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>SplashColorPtr<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>gfxColor;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xc,<sp/>yc,<sp/>t;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>ictm.transform(x,<sp/>y,<sp/>&amp;xc,<sp/>&amp;yc);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>getParameter<sp/>(xc,<sp/>yc,<sp/>&amp;t))</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(t,<sp/>&amp;gfxColor);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>convertGfxColor(c,<sp/>colorMode,<sp/>shading-&gt;getColorSpace(),<sp/>&amp;gfxColor);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">GBool<sp/>SplashUnivariatePattern::testPosition(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xc,<sp/>yc,<sp/>t;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>ictm.transform(x,<sp/>y,<sp/>&amp;xc,<sp/>&amp;yc);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>getParameter<sp/>(xc,<sp/>yc,<sp/>&amp;t))</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>t1)<sp/>?<sp/>(t<sp/>&gt;<sp/>t0<sp/>&amp;&amp;<sp/>t<sp/>&lt;<sp/>t1)<sp/>:<sp/>(t<sp/>&gt;<sp/>t1<sp/>&amp;&amp;<sp/>t<sp/>&lt;<sp/>t0);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashRadialPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RADIAL_EPSILON<sp/>(1.<sp/>/<sp/>1024<sp/>/<sp/>1024)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">SplashRadialPattern::SplashRadialPattern(SplashColorMode<sp/>colorModeA,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateA,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shadingA):</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="class_splash_univariate_pattern" kindref="compound">SplashUnivariatePattern</ref>(colorModeA,<sp/>stateA,<sp/>shadingA)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>SplashColor<sp/>defaultColor;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>srcColor;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>shadingA-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;r0,<sp/>&amp;dx,<sp/>&amp;dy,<sp/>&amp;dr);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>dx<sp/>-=<sp/>x0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>dy<sp/>-=<sp/>y0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>dr<sp/>-=<sp/>r0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>dx*dx<sp/>+<sp/>dy*dy<sp/>-<sp/>dr*dr;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(a)<sp/>&gt;<sp/>RADIAL_EPSILON)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>inva<sp/>=<sp/>1.0<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>shadingA-&gt;getColorSpace()-&gt;getDefaultColor(&amp;srcColor);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>convertGfxColor(defaultColor,<sp/>colorModeA,<sp/>shadingA-&gt;getColorSpace(),<sp/>&amp;srcColor);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">SplashRadialPattern::~SplashRadialPattern()<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">GBool<sp/>SplashRadialPattern::getParameter(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ys,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,<sp/>c,<sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>solve<sp/>this<sp/>system<sp/>of<sp/>equations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>(x<sp/>-<sp/>xc(s))^2<sp/>+<sp/>(y<sp/>-yc(s))^2<sp/>=<sp/>rc(s)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>xc(s)<sp/>=<sp/>x0<sp/>+<sp/>s<sp/>*<sp/>(x1<sp/>-<sp/>xo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>yc(s)<sp/>=<sp/>y0<sp/>+<sp/>s<sp/>*<sp/>(y1<sp/>-<sp/>yo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>rc(s)<sp/>=<sp/>r0<sp/>+<sp/>s<sp/>*<sp/>(r1<sp/>-<sp/>ro)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>simplify<sp/>the<sp/>system<sp/>a<sp/>little,<sp/>we<sp/>translate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>coordinates<sp/>to<sp/>have<sp/>the<sp/>origin<sp/>in<sp/>(x0,y0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>xs<sp/>-=<sp/>x0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>ys<sp/>-=<sp/>y0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>have<sp/>to<sp/>solve<sp/>the<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>A*s^2<sp/>-<sp/>2*B*s<sp/>+<sp/>C<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>A<sp/>=<sp/>dx^2<sp/><sp/>+<sp/>dy^2<sp/><sp/>-<sp/>dr^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>B<sp/>=<sp/>xs*dx<sp/>+<sp/>ys*dy<sp/>+<sp/>r0*dr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>C<sp/>=<sp/>xs^2<sp/><sp/>+<sp/>ys^2<sp/><sp/>-<sp/>r0^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>xs*dx<sp/>+<sp/>ys*dy<sp/>+<sp/>r0*dr;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>xs*xs<sp/>+<sp/>ys*ys<sp/>-<sp/>r0*r0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(a)<sp/>&lt;=<sp/>RADIAL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>is<sp/>0,<sp/>thus<sp/>the<sp/>equation<sp/>simplifies<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-2*B*s<sp/>+<sp/>C<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>B<sp/>is<sp/>0,<sp/>we<sp/>can<sp/>either<sp/>have<sp/>no<sp/>solution<sp/>or<sp/>an<sp/>indeterminate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equation,<sp/>thus<sp/>we<sp/>behave<sp/>as<sp/>if<sp/>we<sp/>had<sp/>an<sp/>invalid<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(b)<sp/>&lt;=<sp/>RADIAL_EPSILON)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>s1<sp/>=<sp/>0.5<sp/>*<sp/>c<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>b*b<sp/>-<sp/>a*c;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>sqrt<sp/>(d);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>b<sp/>+<sp/>d;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>b<sp/>-<sp/>d;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>A<sp/>&lt;<sp/>0,<sp/>one<sp/>of<sp/>the<sp/>two<sp/>solutions<sp/>will<sp/>have<sp/>negative<sp/>radius,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thus<sp/>it<sp/>will<sp/>be<sp/>ignored.<sp/>Otherwise<sp/>we<sp/>know<sp/>that<sp/>s1<sp/>&lt;=<sp/>s0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(because<sp/>d<sp/>&gt;=0<sp/>implies<sp/>b<sp/>-<sp/>d<sp/>&lt;=<sp/>b<sp/>+<sp/>d),<sp/>so<sp/>if<sp/>both<sp/>are<sp/>valid<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>the<sp/>true<sp/>solution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>*=<sp/>inva;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>*=<sp/>inva;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>+<sp/>s0<sp/>*<sp/>dr<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>s0<sp/>&amp;&amp;<sp/>s0<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0<sp/>+<sp/>dt<sp/>*<sp/>s0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s0<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s0<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>+<sp/>s1<sp/>*<sp/>dr<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>s1<sp/>&amp;&amp;<sp/>s1<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0<sp/>+<sp/>dt<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s1<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s1<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RADIAL_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashAxialPattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">SplashAxialPattern::SplashAxialPattern(SplashColorMode<sp/>colorModeA,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateA,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shadingA):</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_splash_univariate_pattern" kindref="compound">SplashUnivariatePattern</ref>(colorModeA,<sp/>stateA,<sp/>shadingA)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>SplashColor<sp/>defaultColor;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>srcColor;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>shadingA-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>mul<sp/>=<sp/>1<sp/>/<sp/>(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>shadingA-&gt;getColorSpace()-&gt;getDefaultColor(&amp;srcColor);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>convertGfxColor(defaultColor,<sp/>colorModeA,<sp/>shadingA-&gt;getColorSpace(),<sp/>&amp;srcColor);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">SplashAxialPattern::~SplashAxialPattern()<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">GBool<sp/>SplashAxialPattern::getParameter(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>xc<sp/>-=<sp/>x0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>yc<sp/>-=<sp/>y0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>(xc<sp/>*<sp/>dx<sp/>+<sp/>yc<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>s<sp/>&amp;&amp;<sp/>s<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0<sp/>+<sp/>dt<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>3<sp/>font<sp/>cache<sp/>size<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>type3FontCacheAssoc<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>type3FontCacheMaxSets<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>type3FontCacheSize<sp/><sp/><sp/><sp/>(128*1024)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Divide<sp/>a<sp/>16-bit<sp/>value<sp/>(in<sp/>[0,<sp/>255*255])<sp/>by<sp/>255,<sp/>returning<sp/>an<sp/>8-bit<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>div255(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Guchar)((x<sp/>+<sp/>(x<sp/>&gt;&gt;<sp/>8)<sp/>+<sp/>0x80)<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState_helpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>for<sp/>Blend<sp/>functions<sp/>(convert<sp/>CMYK<sp/>to<sp/>RGB,<sp/>do<sp/>blend,<sp/>convert<sp/>back)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>in<sp/>GfxState.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cmykToRGB(SplashColorPtr<sp/>cmyk,<sp/>SplashColor<sp/>rgb)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>colToDbl(byteToCol(cmyk[0]));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>colToDbl(byteToCol(cmyk[1]));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>colToDbl(byteToCol(cmyk[2]));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>colToDbl(byteToCol(cmyk[3]));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>c1<sp/>=<sp/>1<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>m1<sp/>=<sp/>1<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>1<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>k1<sp/>=<sp/>1<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>cmykToRGBMatrixMultiplication(c,<sp/>m,<sp/>y,<sp/>k,<sp/>c1,<sp/>m1,<sp/>y1,<sp/>k1,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>rgb[0]<sp/>=<sp/>colToByte(clip01(dblToCol(r)));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>rgb[1]<sp/>=<sp/>colToByte(clip01(dblToCol(g)));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>rgb[2]<sp/>=<sp/>colToByte(clip01(dblToCol(b)));</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rgbToCMYK(SplashColor<sp/>rgb,<sp/>SplashColorPtr<sp/>cmyk)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>byteToCol(rgb[0]));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>byteToCol(rgb[1]));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>clip01(gfxColorComp1<sp/>-<sp/>byteToCol(rgb[2]));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>cmyk[0]<sp/>=<sp/>colToByte(c<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>cmyk[1]<sp/>=<sp/>colToByte(m<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>cmyk[2]<sp/>=<sp/>colToByte(y<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>cmyk[3]<sp/>=<sp/>colToByte(k);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Blend<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendMultiply(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>(dest[i]<sp/>*<sp/>src[i])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendScreen(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>+<sp/>src[i]<sp/>-<sp/>(dest[i]<sp/>*<sp/>src[i])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendOverlay(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>&lt;<sp/>0x80</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(src[i]<sp/>*<sp/>2<sp/>*<sp/>dest[i])<sp/>/<sp/>255</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>255<sp/>-<sp/>2<sp/>*<sp/>((255<sp/>-<sp/>src[i])<sp/>*<sp/>(255<sp/>-<sp/>dest[i]))<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendDarken(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>&lt;<sp/>src[i]<sp/>?<sp/>dest[i]<sp/>:<sp/>src[i];</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendLighten(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>&gt;<sp/>src[i]<sp/>?<sp/>dest[i]<sp/>:<sp/>src[i];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendColorDodge(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>x;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[i]<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(dest[i]<sp/>*<sp/>255)<sp/>/<sp/>(255<sp/>-<sp/>src[i]);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>x<sp/>&lt;=<sp/>255<sp/>?<sp/>x<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendColorBurn(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>x;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((255<sp/>-<sp/>dest[i])<sp/>*<sp/>255)<sp/>/<sp/>src[i];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>x<sp/>&lt;=<sp/>255<sp/>?<sp/>255<sp/>-<sp/>x<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendHardLight(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>src[i]<sp/>&lt;<sp/>0x80</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(dest[i]<sp/>*<sp/>2<sp/>*<sp/>src[i])<sp/>/<sp/>255</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>255<sp/>-<sp/>2<sp/>*<sp/>((255<sp/>-<sp/>dest[i])<sp/>*<sp/>(255<sp/>-<sp/>src[i]))<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendSoftLight(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>x;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[i]<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>-<sp/>(255<sp/>-<sp/>2<sp/>*<sp/>src[i])<sp/>*<sp/>dest[i]<sp/>*<sp/>(255<sp/>-<sp/>dest[i])<sp/>/<sp/>(255<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest[i]<sp/>&lt;<sp/>0x40)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(((((16<sp/>*<sp/>dest[i]<sp/>-<sp/>12<sp/>*<sp/>255)<sp/>*<sp/>dest[i])<sp/>/<sp/>255)<sp/>+<sp/>4<sp/>*<sp/>255)<sp/>*<sp/>dest[i])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(int)sqrt(255.0<sp/>*<sp/>dest[i]);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>+<sp/>(2<sp/>*<sp/>src[i]<sp/>-<sp/>255)<sp/>*<sp/>(x<sp/>-<sp/>dest[i])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendDifference(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>&lt;<sp/>src[i]<sp/>?<sp/>src[i]<sp/>-<sp/>dest[i]<sp/>:<sp/>dest[i]<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest[i]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>src[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendExclusion(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>dest[i]<sp/>+<sp/>src[i]<sp/>-<sp/>(2<sp/>*<sp/>dest[i]<sp/>*<sp/>src[i])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src[i]<sp/>=<sp/>255<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>255<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>==<sp/>splashModeDeviceN8)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[cm];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest[i]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>src[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLum(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(0.3<sp/>*<sp/>r<sp/>+<sp/>0.59<sp/>*<sp/>g<sp/>+<sp/>0.11<sp/>*<sp/>b);</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getSat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rgbMin,<sp/>rgbMax;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>rgbMin<sp/>=<sp/>rgbMax<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&gt;<sp/>rgbMax)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;<sp/>rgbMax)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rgbMax<sp/>-<sp/>rgbMin;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clipColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bIn,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*rOut,<sp/>Guchar<sp/>*gOut,<sp/>Guchar<sp/>*bOut)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lum,<sp/>rgbMin,<sp/>rgbMax;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>lum<sp/>=<sp/>getLum(rIn,<sp/>gIn,<sp/>bIn);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>rgbMin<sp/>=<sp/>rgbMax<sp/>=<sp/>rIn;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gIn<sp/>&lt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>gIn;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gIn<sp/>&gt;<sp/>rgbMax)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>gIn;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIn<sp/>&lt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>bIn;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIn<sp/>&gt;<sp/>rgbMax)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>bIn;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgbMin<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>*rOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((rIn<sp/>-<sp/>lum)<sp/>*<sp/>lum)<sp/>/<sp/>(lum<sp/>-<sp/>rgbMin));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>*gOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((gIn<sp/>-<sp/>lum)<sp/>*<sp/>lum)<sp/>/<sp/>(lum<sp/>-<sp/>rgbMin));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>*bOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((bIn<sp/>-<sp/>lum)<sp/>*<sp/>lum)<sp/>/<sp/>(lum<sp/>-<sp/>rgbMin));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgbMax<sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>*rOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((rIn<sp/>-<sp/>lum)<sp/>*<sp/>(255<sp/>-<sp/>lum))<sp/>/<sp/>(rgbMax<sp/>-<sp/>lum));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>*gOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((gIn<sp/>-<sp/>lum)<sp/>*<sp/>(255<sp/>-<sp/>lum))<sp/>/<sp/>(rgbMax<sp/>-<sp/>lum));</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>*bOut<sp/>=<sp/>(Guchar)(lum<sp/>+<sp/>((bIn<sp/>-<sp/>lum)<sp/>*<sp/>(255<sp/>-<sp/>lum))<sp/>/<sp/>(rgbMax<sp/>-<sp/>lum));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>*rOut<sp/>=<sp/>rIn;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>*gOut<sp/>=<sp/>gIn;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>*bOut<sp/>=<sp/>bIn;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLum(Guchar<sp/>rIn,<sp/>Guchar<sp/>gIn,<sp/>Guchar<sp/>bIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lum,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*rOut,<sp/>Guchar<sp/>*gOut,<sp/>Guchar<sp/>*bOut)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>lum<sp/>-<sp/>getLum(rIn,<sp/>gIn,<sp/>bIn);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>clipColor(rIn<sp/>+<sp/>d,<sp/>gIn<sp/>+<sp/>d,<sp/>bIn<sp/>+<sp/>d,<sp/>rOut,<sp/>gOut,<sp/>bOut);</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSat(Guchar<sp/>rIn,<sp/>Guchar<sp/>gIn,<sp/>Guchar<sp/>bIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sat,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*rOut,<sp/>Guchar<sp/>*gOut,<sp/>Guchar<sp/>*bOut)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rgbMin,<sp/>rgbMid,<sp/>rgbMax;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>Guchar<sp/>*minOut,<sp/>*midOut,<sp/>*maxOut;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rIn<sp/>&lt;<sp/>gIn)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>rIn;<sp/><sp/>minOut<sp/>=<sp/>rOut;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMid<sp/>=<sp/>gIn;<sp/><sp/>midOut<sp/>=<sp/>gOut;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>gIn;<sp/><sp/>minOut<sp/>=<sp/>gOut;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMid<sp/>=<sp/>rIn;<sp/><sp/>midOut<sp/>=<sp/>rOut;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIn<sp/>&gt;<sp/>rgbMid)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>bIn;<sp/><sp/>maxOut<sp/>=<sp/>bOut;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIn<sp/>&gt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>rgbMid;<sp/><sp/>maxOut<sp/>=<sp/>midOut;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMid<sp/>=<sp/>bIn;<sp/><sp/><sp/><sp/><sp/>midOut<sp/>=<sp/>bOut;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMax<sp/>=<sp/>rgbMid;<sp/><sp/>maxOut<sp/>=<sp/>midOut;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMid<sp/>=<sp/>rgbMin;<sp/><sp/>midOut<sp/>=<sp/>minOut;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbMin<sp/>=<sp/>bIn;<sp/><sp/><sp/><sp/><sp/>minOut<sp/>=<sp/>bOut;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgbMax<sp/>&gt;<sp/>rgbMin)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>*midOut<sp/>=<sp/>(Guchar)((rgbMid<sp/>-<sp/>rgbMin)<sp/>*<sp/>sat)<sp/>/<sp/>(rgbMax<sp/>-<sp/>rgbMin);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>*maxOut<sp/>=<sp/>(Guchar)sat;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>*midOut<sp/>=<sp/>*maxOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>*minOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendHue(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>Guchar<sp/>r0,<sp/>g0,<sp/>b0;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>Guchar<sp/>r1,<sp/>g1,<sp/>b1;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>SplashColor<sp/>src2,<sp/>dest2;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cm)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>dest[0];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>src[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>setSat(src[0],<sp/>src[1],<sp/>src[2],<sp/>getSat(dest[0],<sp/>dest[1],<sp/>dest[2]),</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r0,<sp/>&amp;g0,<sp/>&amp;b0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(r0,<sp/>g0,<sp/>b0,<sp/>getLum(dest[0],<sp/>dest[1],<sp/>dest[2]),</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;blend[0],<sp/>&amp;blend[1],<sp/>&amp;blend[2]);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>additive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2[i]<sp/>=<sp/>0xff<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest2[i]<sp/>=<sp/>0xff<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>inputs<sp/>have<sp/>already<sp/>been<sp/>converted<sp/>to<sp/>additive<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>setSat(src2[0],<sp/>src2[1],<sp/>src2[2],<sp/>getSat(dest2[0],<sp/>dest2[1],<sp/>dest2[2]),</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r0,<sp/>&amp;g0,<sp/>&amp;b0);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(r0,<sp/>g0,<sp/>b0,<sp/>getLum(dest2[0],<sp/>dest2[1],<sp/>dest2[2]),</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r1,<sp/>&amp;g1,<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[1]<sp/>=<sp/>g1;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[2]<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[3]<sp/>=<sp/>dest2[3];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>back<sp/>to<sp/>subtractive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0xff<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendSaturation(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>Guchar<sp/>r0,<sp/>g0,<sp/>b0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>Guchar<sp/>r1,<sp/>g1,<sp/>b1;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>SplashColor<sp/>src2,<sp/>dest2;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cm)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>dest[0];</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>src[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>setSat(dest[0],<sp/>dest[1],<sp/>dest[2],<sp/>getSat(src[0],<sp/>src[1],<sp/>src[2]),</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r0,<sp/>&amp;g0,<sp/>&amp;b0);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(r0,<sp/>g0,<sp/>b0,<sp/>getLum(dest[0],<sp/>dest[1],<sp/>dest[2]),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;blend[0],<sp/>&amp;blend[1],<sp/>&amp;blend[2]);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>additive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2[i]<sp/>=<sp/>0xff<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest2[i]<sp/>=<sp/>0xff<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>setSat(dest2[0],<sp/>dest2[1],<sp/>dest2[2],<sp/>getSat(src2[0],<sp/>src2[1],<sp/>src2[2]),</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r0,<sp/>&amp;g0,<sp/>&amp;b0);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(r0,<sp/>g0,<sp/>b0,<sp/>getLum(dest2[0],<sp/>dest2[1],<sp/>dest2[2]),</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r1,<sp/>&amp;g1,<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[1]<sp/>=<sp/>g1;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[2]<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[3]<sp/>=<sp/>dest2[3];</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>back<sp/>to<sp/>subtractive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0xff<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendColor(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,<sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>Guchar<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>SplashColor<sp/>src2,<sp/>dest2;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cm)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>dest[0];</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>src[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(src[0],<sp/>src[1],<sp/>src[2],<sp/>getLum(dest[0],<sp/>dest[1],<sp/>dest[2]),</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;blend[0],<sp/>&amp;blend[1],<sp/>&amp;blend[2]);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>additive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2[i]<sp/>=<sp/>0xff<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest2[i]<sp/>=<sp/>0xff<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(src2[0],<sp/>src2[1],<sp/>src2[2],<sp/>getLum(dest2[0],<sp/>dest2[1],<sp/>dest2[2]),</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r,<sp/>&amp;g,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[3]<sp/>=<sp/>dest2[3];</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>back<sp/>to<sp/>subtractive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0xff<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splashOutBlendLuminosity(SplashColorPtr<sp/>src,<sp/>SplashColorPtr<sp/>dest,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>blend,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorMode<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>Guchar<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>SplashColor<sp/>src2,<sp/>dest2;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cm)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>dest[0];</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>src[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(dest[0],<sp/>dest[1],<sp/>dest[2],<sp/>getLum(src[0],<sp/>src[1],<sp/>src[2]),</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;blend[0],<sp/>&amp;blend[1],<sp/>&amp;blend[2]);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>additive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2[i]<sp/>=<sp/>0xff<sp/>-<sp/>src[i];</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest2[i]<sp/>=<sp/>0xff<sp/>-<sp/>dest[i];</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>setLum(dest2[0],<sp/>dest2[1],<sp/>dest2[2],<sp/>getLum(src2[0],<sp/>src2[1],<sp/>src2[2]),</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;r,<sp/>&amp;g,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>blend[3]<sp/>=<sp/>src2[3];</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>back<sp/>to<sp/>subtractive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blend[i]<sp/>=<sp/>0xff<sp/>-<sp/>blend[i];</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>This<sp/>must<sp/>match<sp/>the<sp/>GfxBlendMode<sp/>enum<sp/>defined<sp/>in<sp/>GfxState.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplashBlendFunc<sp/>splashOutBlendFuncs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendMultiply,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendScreen,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendOverlay,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendDarken,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendLighten,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendColorDodge,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendColorBurn,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendHardLight,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendSoftLight,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendDifference,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendExclusion,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendHue,</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendSaturation,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendColor,</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>&amp;splashOutBlendLuminosity</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashOutFontFileID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211" refid="class_splash_out_font_file_i_d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_splash_font_file_i_d" kindref="compound">SplashFontFileID</ref><sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*rA)<sp/>{<sp/>r<sp/>=<sp/>*rA;<sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>~<ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>GBool<sp/>matches(<ref refid="class_splash_font_file_i_d" kindref="compound">SplashFontFileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref><sp/>*)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)-&gt;r.num<sp/>==<sp/>r.num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref><sp/>*)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)-&gt;r.gen<sp/>==<sp/>r.gen;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T3FontCache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232" refid="struct_t3_font_cache_tag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref><sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>Gushort<sp/>code;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>Gushort<sp/>mru;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>valid<sp/>bit<sp/>(0x8000)<sp/>and<sp/>MRU<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237" refid="class_t3_font_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref><sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*fontID,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12A,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22A,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphYA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphWA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphHA,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>aa,<sp/>GBool<sp/>validBBoxA);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>~<ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref>();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>GBool<sp/>matches(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*idA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12A,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22A)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fontID.num<sp/>==<sp/>idA-&gt;num<sp/>&amp;&amp;<sp/>fontID.gen<sp/>==<sp/>idA-&gt;gen<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m11<sp/>==<sp/>m11A<sp/>&amp;&amp;<sp/>m12<sp/>==<sp/>m12A<sp/>&amp;&amp;<sp/>m21<sp/>==<sp/>m21A<sp/>&amp;&amp;<sp/>m22<sp/>==<sp/>m22A;<sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>fontID;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PDF<sp/>font<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/>m12,<sp/>m21,<sp/>m22;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphX,<sp/>glyphY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pixel<sp/>offset<sp/>of<sp/>glyph<sp/>bitmaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphW,<sp/>glyphH;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>glyph<sp/>bitmaps,<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>GBool<sp/>validBBox;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false<sp/>if<sp/>the<sp/>bbox<sp/>was<sp/>[0<sp/>0<sp/>0<sp/>0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>glyph<sp/>bitmaps,<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSets;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>sets<sp/>in<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheAssoc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>associativity<sp/>(glyphs<sp/>per<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>Guchar<sp/>*cacheData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glyph<sp/>pixmap<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref><sp/>*cacheTags;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>tags,<sp/>i.e.,<sp/>char<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal">T3FontCache::T3FontCache(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*fontIDA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12A,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22A,</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphYA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphWA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glyphHA,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>validBBoxA,<sp/>GBool<sp/>aa)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>fontID<sp/>=<sp/>*fontIDA;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>m11<sp/>=<sp/>m11A;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>m12<sp/>=<sp/>m12A;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>m21<sp/>=<sp/>m21A;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>m22<sp/>=<sp/>m22A;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>glyphX<sp/>=<sp/>glyphXA;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>glyphY<sp/>=<sp/>glyphYA;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>glyphW<sp/>=<sp/>glyphWA;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>glyphH<sp/>=<sp/>glyphHA;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>validBBox<sp/>=<sp/>validBBoxA;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>check<sp/>for<sp/>excessively<sp/>large<sp/>glyphs<sp/>(which<sp/>most<sp/>likely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indicate<sp/>an<sp/>incorrect<sp/>BBox)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>glyphW<sp/>*<sp/>glyphH;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>100000<sp/>||<sp/>glyphW<sp/>&gt;<sp/>INT_MAX<sp/>/<sp/>glyphH<sp/>||<sp/>glyphW<sp/>&lt;=<sp/>0<sp/>||<sp/>glyphH<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphW<sp/>=<sp/>glyphH<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>validBBox<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphSize<sp/>=<sp/>glyphW<sp/>*<sp/>glyphH;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphSize<sp/>=<sp/>((glyphW<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3)<sp/>*<sp/>glyphH;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>cacheAssoc<sp/>=<sp/>type3FontCacheAssoc;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cacheSets<sp/>=<sp/>type3FontCacheMaxSets;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cacheSets<sp/>&gt;<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cacheSets<sp/>*<sp/>cacheAssoc<sp/>*<sp/>glyphSize<sp/>&gt;<sp/>type3FontCacheSize;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cacheSets<sp/>&gt;&gt;=<sp/>1)<sp/>;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glyphSize<sp/>&lt;<sp/>10485760<sp/>/<sp/>cacheAssoc<sp/>/<sp/>cacheSets)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheData<sp/>=<sp/>(Guchar<sp/>*)gmallocn_checkoverflow(cacheSets<sp/>*<sp/>cacheAssoc,<sp/>glyphSize);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>creating<sp/>cacheData<sp/>for<sp/>T3FontCache,<sp/>it<sp/>asked<sp/>for<sp/>too<sp/>much<sp/>memory.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>could<sp/>teoretically<sp/>result<sp/>in<sp/>wrong<sp/>rendering,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>most<sp/>probably<sp/>the<sp/>document<sp/>is<sp/>bogus.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Please<sp/>report<sp/>a<sp/>bug<sp/>if<sp/>you<sp/>think<sp/>the<sp/>rendering<sp/>may<sp/>be<sp/>wrong<sp/>because<sp/>of<sp/>this.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheData<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheTags<sp/>=<sp/>(<ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref><sp/>*)gmallocn(cacheSets<sp/>*<sp/>cacheAssoc,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref>));</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cacheSets<sp/>*<sp/>cacheAssoc;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cacheTags[i].mru<sp/>=<sp/>i<sp/>&amp;<sp/>(cacheAssoc<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheTags<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">T3FontCache::~T3FontCache()<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>gfree(cacheData);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>gfree(cacheTags);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323" refid="struct_t3_glyph_stack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t3_glyph_stack" kindref="compound">T3GlyphStack</ref><sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>Gushort<sp/>code;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>character<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>cache<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref><sp/>*cache;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>font<sp/>cache<sp/>for<sp/>the<sp/>current<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref><sp/>*cacheTag;<sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>cache<sp/>tag<sp/>for<sp/>the<sp/>glyph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>Guchar<sp/>*cacheData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>cache<sp/>data<sp/>for<sp/>the<sp/>glyph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>saved<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*origBitmap;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*origSplash;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>origCTM4,<sp/>origCTM5;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><ref refid="struct_t3_glyph_stack" kindref="compound">T3GlyphStack</ref><sp/>*next;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>object<sp/>on<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashTransparencyGroup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343" refid="struct_splash_transparency_group" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>ty;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translation<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*tBitmap;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitmap<sp/>for<sp/>transparency<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*softmask;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitmap<sp/>for<sp/>softmasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>GBool<sp/>isolated;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>for<sp/>knockout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*shape;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>GBool<sp/>knockout;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>knockoutOpacity;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>GBool<sp/>fontAA;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>saved<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*origBitmap;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*origSplash;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref><sp/>*next;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">SplashOutputDev::SplashOutputDev(SplashColorMode<sp/>colorModeA,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmapRowPadA,</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>reverseVideoA,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>paperColorA,</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>bitmapTopDownA,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashThinLineMode<sp/>thinLineMode,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>overprintPreviewA)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>colorMode<sp/>=<sp/>colorModeA;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>bitmapRowPad<sp/>=<sp/>bitmapRowPadA;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>bitmapTopDown<sp/>=<sp/>bitmapTopDownA;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>bitmapUpsideDown<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>fontAntialias<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>vectorAntialias<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>overprintPreview<sp/>=<sp/>overprintPreviewA;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>enableFreeTypeHinting<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>enableSlightHinting<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>setupScreenParams(72.0,<sp/>72.0);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>reverseVideo<sp/>=<sp/>reverseVideoA;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperColorA<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>splashColorCopy(paperColor,<sp/>paperColorA);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>splashClearColor(paperColor);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>skipHorizText<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>skipRotatedText<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>keepAlphaChannel<sp/>=<sp/>paperColorA<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(1,<sp/>1,<sp/>bitmapRowPad,<sp/>colorMode,</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1,<sp/>bitmapTopDown);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>vectorAntialias,<sp/>&amp;screenParams);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>splash-&gt;setMinLineWidth(globalParams-&gt;getMinLineWidth());</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>splash-&gt;setThinLineMode(thinLineMode);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>splash-&gt;clear(paperColor,<sp/>0);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>fontEngine<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>nT3Fonts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>t3GlyphStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>textClipPath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>transpGroupStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>nestCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setupScreenParams(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPI)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>screenParams.size<sp/>=<sp/>globalParams-&gt;getScreenSize();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>screenParams.dotRadius<sp/>=<sp/>globalParams-&gt;getScreenDotRadius();</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>screenParams.gamma<sp/>=<sp/>(SplashCoord)globalParams-&gt;getScreenGamma();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>screenParams.blackThreshold<sp/>=</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)globalParams-&gt;getScreenBlackThreshold();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>screenParams.whiteThreshold<sp/>=</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)globalParams-&gt;getScreenWhiteThreshold();</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(globalParams-&gt;getScreenType())<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>screenDispersed:</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.type<sp/>=<sp/>splashScreenDispersed;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>screenClustered:</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.type<sp/>=<sp/>splashScreenClustered;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.size<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>screenStochasticClustered:</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.type<sp/>=<sp/>splashScreenStochasticClustered;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.size<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.dotRadius<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.dotRadius<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>screenUnset:</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>clustered<sp/>dithering<sp/>for<sp/>resolution<sp/>&gt;=<sp/>300<sp/>dpi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(compare<sp/>to<sp/>299.9<sp/>to<sp/>avoid<sp/>floating<sp/>point<sp/>issues)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hDPI<sp/>&gt;<sp/>299.9<sp/>&amp;&amp;<sp/>vDPI<sp/>&gt;<sp/>299.9)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.type<sp/>=<sp/>splashScreenStochasticClustered;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.size<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.dotRadius<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.dotRadius<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screenParams.type<sp/>=<sp/>splashScreenDispersed;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(screenParams.size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>screenParams.size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal">SplashOutputDev::~SplashOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nT3Fonts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3FontCache[i];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontEngine)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontEngine;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splash)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splash;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitmap)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitmap;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::startDoc(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontEngine)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontEngine;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>fontEngine<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_font_engine" kindref="compound">SplashFontEngine</ref>(</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>HAVE_T1LIB_H</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalParams-&gt;getEnableT1lib(),</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalParams-&gt;getEnableFreeType(),</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableFreeTypeHinting,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableSlightHinting,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getFontAntialias()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nT3Fonts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3FontCache[i];</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>nT3Fonts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xrefA)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>xrefA;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>setupScreenParams(state-&gt;getHDPI(),<sp/>state-&gt;getVDPI());</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>(int)(state-&gt;getPageWidth()<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(int)(state-&gt;getPageHeight()<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>SplashThinLineMode<sp/>thinLineMode<sp/>=<sp/>splashThinLineDefault;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splash)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>thinLineMode<sp/>=<sp/>splash-&gt;getThinLineMode();</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splash;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>splash<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitmap<sp/>||<sp/>w<sp/>!=<sp/>bitmap-&gt;getWidth()<sp/>||<sp/>h<sp/>!=<sp/>bitmap-&gt;getHeight())<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitmap)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitmap;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(w,<sp/>h,<sp/>bitmapRowPad,<sp/>colorMode,</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1,<sp/>bitmapTopDown);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitmap-&gt;getDataPtr())<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitmap;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(w,<sp/>h,<sp/>bitmapRowPad,<sp/>colorMode,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1,<sp/>bitmapTopDown);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>vectorAntialias,<sp/>&amp;screenParams);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>splash-&gt;setThinLineMode(thinLineMode);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>splash-&gt;setMinLineWidth(globalParams-&gt;getMinLineWidth());</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>(SplashCoord)ctm[0];</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>=<sp/>(SplashCoord)ctm[1];</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>=<sp/>(SplashCoord)ctm[2];</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>=<sp/>(SplashCoord)ctm[3];</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>=<sp/>(SplashCoord)ctm[4];</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>=<sp/>(SplashCoord)ctm[5];</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setMatrix(mat);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>color[1]<sp/>=<sp/>color[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>color[1]<sp/>=<sp/>color[2]<sp/>=<sp/>color[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4<sp/>+<sp/>SPOT_NCOMPS;<sp/>i++)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokePattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>splash-&gt;setFillPattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>splash-&gt;setLineCap(splashLineCapButt);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>splash-&gt;setLineJoin(splashLineJoinMiter);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>splash-&gt;setLineDash(NULL,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>splash-&gt;setMiterLimit(10);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>splash-&gt;setFlatness(1);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>SA<sp/>parameter<sp/>supposedly<sp/>defaults<sp/>to<sp/>false,<sp/>but<sp/>Acrobat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apparently<sp/>hardwires<sp/>it<sp/>to<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokeAdjust(globalParams-&gt;getStrokeAdjust());</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>splash-&gt;clear(paperColor,<sp/>0);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::endPage()<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>!=<sp/>splashModeMono1<sp/>&amp;&amp;<sp/>!keepAlphaChannel)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;compositeBackground(paperColor);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::saveState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>splash-&gt;saveState();</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::restoreState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>splash-&gt;restoreState();</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateAll(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>updateLineDash(state);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>updateLineJoin(state);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>updateLineCap(state);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>updateLineWidth(state);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>updateFlatness(state);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>updateMiterLimit(state);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>updateStrokeAdjust(state);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>updateFillColor(state);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateCTM(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22,</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m31,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m32)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>(SplashCoord)ctm[0];</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>mat[1]<sp/>=<sp/>(SplashCoord)ctm[1];</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>(SplashCoord)ctm[2];</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>(SplashCoord)ctm[3];</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>mat[4]<sp/>=<sp/>(SplashCoord)ctm[4];</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>mat[5]<sp/>=<sp/>(SplashCoord)ctm[5];</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>splash-&gt;setMatrix(mat);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateLineDash(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dashPattern;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dashLength;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dashStart;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>dash[20];</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>state-&gt;getLineDash(&amp;dashPattern,<sp/>&amp;dashLength,<sp/>&amp;dashStart);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dashLength<sp/>&gt;<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>dashLength<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dashLength;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>dash[i]<sp/>=<sp/>(SplashCoord)dashPattern[i];</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dash[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dash[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>splash-&gt;setLineDash(dash,<sp/>dashLength,<sp/>(SplashCoord)dashStart);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFlatness(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>Acrobat<sp/>ignores<sp/>the<sp/>flatness<sp/>setting,<sp/>and<sp/>always<sp/>renders<sp/>curves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>fairly<sp/>small<sp/>flatness<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/>splash-&gt;setFlatness(state-&gt;getFlatness());</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateLineJoin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>splash-&gt;setLineJoin(state-&gt;getLineJoin());</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateLineCap(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>splash-&gt;setLineCap(state-&gt;getLineCap());</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateMiterLimit(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/>splash-&gt;setMiterLimit(state-&gt;getMiterLimit());</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateLineWidth(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>splash-&gt;setLineWidth(state-&gt;getLineWidth());</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateStrokeAdjust(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>the<sp/>SA<sp/>parameter<sp/>supposedly<sp/>defaults<sp/>to<sp/>false,<sp/>but<sp/>Acrobat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apparently<sp/>hardwires<sp/>it<sp/>to<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokeAdjust(state-&gt;getStrokeAdjust());</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFillColorSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateStrokeColorSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFillColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillGray(&amp;gray);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setFillPattern(getColor(gray));</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillRGB(&amp;rgb);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setFillPattern(getColor(&amp;rgb));</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setFillPattern(getColor(&amp;cmyk));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillDeviceN(&amp;deviceN);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setFillPattern(getColor(&amp;deviceN));</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateStrokeColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeGray(&amp;gray);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokePattern(getColor(gray));</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeRGB(&amp;rgb);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokePattern(getColor(&amp;rgb));</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokePattern(getColor(&amp;cmyk));</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeDeviceN(&amp;deviceN);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokePattern(getColor(&amp;deviceN));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><ref refid="class_splash_pattern" kindref="compound">SplashPattern</ref><sp/>*SplashOutputDev::getColor(GfxGray<sp/>gray)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reverseVideo)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gfxColorComp1<sp/>-<sp/>gray;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>color[0]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><ref refid="class_splash_pattern" kindref="compound">SplashPattern</ref><sp/>*SplashOutputDev::getColor(<ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>*rgb)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>GfxColorComp<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reverseVideo)<sp/>{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>gfxColorComp1<sp/>-<sp/>rgb-&gt;r;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>gfxColorComp1<sp/>-<sp/>rgb-&gt;g;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>gfxColorComp1<sp/>-<sp/>rgb-&gt;b;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>rgb-&gt;r;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>rgb-&gt;g;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>rgb-&gt;b;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>color[0]<sp/>=<sp/>colToByte(r);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>color[1]<sp/>=<sp/>colToByte(g);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>color[2]<sp/>=<sp/>colToByte(b);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>color[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><ref refid="class_splash_pattern" kindref="compound">SplashPattern</ref><sp/>*SplashOutputDev::getColor(<ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>*cmyk)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>color[0]<sp/>=<sp/>colToByte(cmyk-&gt;c);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>color[1]<sp/>=<sp/>colToByte(cmyk-&gt;m);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>color[2]<sp/>=<sp/>colToByte(cmyk-&gt;y);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>color[3]<sp/>=<sp/>colToByte(cmyk-&gt;k);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><ref refid="class_splash_pattern" kindref="compound">SplashPattern</ref><sp/>*SplashOutputDev::getColor(<ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*deviceN)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4<sp/>+<sp/>SPOT_NCOMPS;<sp/>i++)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>color[i]<sp/>=<sp/>colToByte(deviceN-&gt;c[i]);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::getMatteColor(SplashColorMode<sp/>colorMode,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*matteColorIn,<sp/>SplashColor<sp/>matteColor)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getGray(matteColorIn,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[0]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getRGB(matteColorIn,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[0]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getRGB(matteColorIn,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[0]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getCMYK(matteColorIn,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getDeviceN(matteColorIn,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matteColor[cp]<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setOverprintMask(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>overprintFlag,</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overprintMode,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*singleColor,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>grayIndexed)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>Guint<sp/>mask;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>GBool<sp/>additive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csIndexed)<sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>setOverprintMask(((<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace)-&gt;getBase(),</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintFlag,</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overprintMode,</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singleColor,</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grayIndexed);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overprintFlag<sp/>&amp;&amp;<sp/>overprintPreview)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>colorSpace-&gt;getOverprintMask();</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(singleColor<sp/>&amp;&amp;<sp/>overprintMode<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getMode()<sp/>==<sp/>csDeviceCMYK)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getCMYK(singleColor,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>~1;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.m<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>~2;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.y<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>~4;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.k<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>~8;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grayIndexed)<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&amp;=<sp/>~7;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*deviceSep<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>deviceSep-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>mask<sp/>==<sp/>0x0f<sp/>&amp;&amp;<sp/>!deviceSep-&gt;isNonMarking();</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*deviceNCS<sp/>=<sp/>(<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>mask<sp/>==<sp/>0x0f<sp/>&amp;&amp;<sp/>!deviceNCS-&gt;isNonMarking();</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>deviceNCS-&gt;getNComps()<sp/>&amp;&amp;<sp/>additive;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceNCS-&gt;getColorantName(i)-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceNCS-&gt;getColorantName(i)-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceNCS-&gt;getColorantName(i)-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceNCS-&gt;getColorantName(i)-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additive<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>splash-&gt;setOverprintMask(mask,<sp/>additive);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateBlendMode(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>splash-&gt;setBlendFunc(splashOutBlendFuncs[state-&gt;getBlendMode()]);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFillOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>splash-&gt;setFillAlpha((SplashCoord)state-&gt;getFillOpacity());</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(SplashCoord)state-&gt;getFillOpacity()<sp/>&lt;<sp/>transpGroupStack-&gt;knockoutOpacity)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;knockoutOpacity<sp/>=<sp/>(SplashCoord)state-&gt;getFillOpacity();</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateStrokeOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokeAlpha((SplashCoord)state-&gt;getStrokeOpacity());</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(SplashCoord)state-&gt;getStrokeOpacity()<sp/>&lt;<sp/>transpGroupStack-&gt;knockoutOpacity)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;knockoutOpacity<sp/>=<sp/>(SplashCoord)state-&gt;getStrokeOpacity();</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updatePatternOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>splash-&gt;setPatternAlpha((SplashCoord)state-&gt;getStrokeOpacity(),<sp/>(SplashCoord)state-&gt;getFillOpacity());</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::clearPatternOpacity(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>splash-&gt;clearPatternAlpha();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFillOverprint(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>splash-&gt;setFillOverprint(state-&gt;getFillOverprint());</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateStrokeOverprint(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokeOverprint(state-&gt;getStrokeOverprint());</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateOverprintMode(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>splash-&gt;setOverprintMode(state-&gt;getOverprintMode());</highlight></codeline>
<codeline lineno="1966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateTransfer(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**transfer;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>Guchar<sp/>red[256],<sp/>green[256],<sp/>blue[256],<sp/>gray[256];</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>transfer<sp/>=<sp/>state-&gt;getTransfer();</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer[0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transfer[0]-&gt;getInputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transfer[0]-&gt;getOutputSize()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[1]-&gt;getInputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[1]-&gt;getOutputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[2]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[2]-&gt;getInputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[2]-&gt;getOutputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[3]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[3]-&gt;getInputSize()<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[3]-&gt;getOutputSize()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>i<sp/>/<sp/>255.0;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[0]-&gt;transform(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>red[i]<sp/>=<sp/>(Guchar)(y<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[1]-&gt;transform(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>green[i]<sp/>=<sp/>(Guchar)(y<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[2]-&gt;transform(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>blue[i]<sp/>=<sp/>(Guchar)(y<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[3]-&gt;transform(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>gray[i]<sp/>=<sp/>(Guchar)(y<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>i<sp/>/<sp/>255.0;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>transfer[0]-&gt;transform(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>red[i]<sp/>=<sp/>green[i]<sp/>=<sp/>blue[i]<sp/>=<sp/>gray[i]<sp/>=<sp/>(Guchar)(y<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>red[i]<sp/>=<sp/>green[i]<sp/>=<sp/>blue[i]<sp/>=<sp/>gray[i]<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>splash-&gt;setTransfer(red,<sp/>green,<sp/>blue,<sp/>gray);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::updateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::doUpdateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font_loc" kindref="compound">GfxFontLoc</ref><sp/>*fontLoc;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/>GfxFontType<sp/>fontType;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><ref refid="class_splash_font_file" kindref="compound">SplashFontFile</ref><sp/>*fontFile;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><ref refid="class_splash_font_src" kindref="compound">SplashFontSrc</ref><sp/>*fontsrc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ff;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>refObj,<sp/>strObj;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmpBuf;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpBufLen;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*textMat;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/>m12,<sp/>m21,<sp/>m22,<sp/>fontSize;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[4];</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>GBool<sp/>recreateFont<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/>GBool<sp/>doAdjustFontMatrix<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/>needFontUpdate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>tmpBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>fontLoc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(gfxFont<sp/>=<sp/>state-&gt;getFont()))<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>fontType<sp/>=<sp/>gfxFont-&gt;getType();</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontType<sp/>==<sp/>fontType3)<sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity-check<sp/>the<sp/>font<sp/>size<sp/>-<sp/>skip<sp/>anything<sp/>larger<sp/>than<sp/>10<sp/>inches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>avoids<sp/>problems<sp/>allocating<sp/>memory<sp/>for<sp/>the<sp/>font<sp/>cache)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getTransformedFontSize()</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>10<sp/>*<sp/>(state-&gt;getHDPI()<sp/>+<sp/>state-&gt;getVDPI()))<sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>font<sp/>file<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal">reload:</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>fontLoc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontsrc<sp/>&amp;&amp;<sp/>!fontsrc-&gt;isFile)</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc-&gt;unref();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_out_font_file_i_d" kindref="compound">SplashOutFontFileID</ref>(gfxFont-&gt;getID());</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontFile<sp/>=<sp/>fontEngine-&gt;getFontFile(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontLoc<sp/>=<sp/>gfxFont-&gt;locateFont((xref)<sp/>?<sp/>xref<sp/>:<sp/>doc-&gt;getXRef(),<sp/>NULL)))<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>embedded<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontLoc-&gt;locType<sp/>==<sp/>gfxFontLocEmbedded)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>an<sp/>embedded<sp/>font,<sp/>read<sp/>it<sp/>to<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpBuf<sp/>=<sp/>gfxFont-&gt;readEmbFontFile((xref)<sp/>?<sp/>xref<sp/>:<sp/>doc-&gt;getXRef(),<sp/>&amp;tmpBufLen);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>tmpBuf)</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>external<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>gfxFontLocExternal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>fontLoc-&gt;path;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontType<sp/>=<sp/>fontLoc-&gt;fontType;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doAdjustFontMatrix<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>fontsrc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_font_src" kindref="compound">SplashFontSrc</ref>;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc-&gt;setFile(fileName,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc-&gt;setBuf(tmpBuf,<sp/>tmpBufLen,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>font<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fontType)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1:</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadType1Font(</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getEncoding())))<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1C:</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadType1CFont(</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getEncoding())))<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1COT:</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadOpenTypeT1CFont(</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getEncoding())))<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueType:</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueTypeOT:</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::load(fileName-&gt;getCString());</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::make(tmpBuf,<sp/>tmpBufLen);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff)<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCodeToGIDMap(ff);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>substituting<sp/>for<sp/>a<sp/>non-TrueType<sp/>font,<sp/>we<sp/>need<sp/>to<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>notdef<sp/>codes<sp/>as<sp/>&quot;do<sp/>not<sp/>draw&quot;<sp/>(rather<sp/>than<sp/>drawing<sp/>TrueType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notdef<sp/>glyphs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;getType()<sp/>!=<sp/>fontTrueType<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getType()<sp/>!=<sp/>fontTrueTypeOT)<sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGID[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadTrueTypeFont(</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>n)))<sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0:</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0C:</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadCIDFont(</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc)))<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0COT:</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID())<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGIDLen();</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(codeToGID,<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadOpenTypeCFFFont(</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>n)))<sp/>{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2:</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2OT:</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID())<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGIDLen();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(codeToGID,<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::load(fileName-&gt;getCString());</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::make(tmpBuf,<sp/>tmpBufLen);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ff)</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCodeToGIDMap(ff,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fontEngine-&gt;loadTrueTypeFont(</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc,</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>n,<sp/>faceIndex)))<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont-&gt;invalidateEmbeddedFont())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>reload;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shouldn&apos;t<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>fontFile-&gt;doAdjustMatrix<sp/>=<sp/>doAdjustFontMatrix;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>font<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/>textMat<sp/>=<sp/>state-&gt;getTextMat();</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/>fontSize<sp/>=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/>m11<sp/>=<sp/>textMat[0]<sp/>*<sp/>fontSize<sp/>*<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>m12<sp/>=<sp/>textMat[1]<sp/>*<sp/>fontSize<sp/>*<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>m21<sp/>=<sp/>textMat[2]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>m22<sp/>=<sp/>textMat[3]<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>scaled<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>m11;<sp/><sp/>mat[1]<sp/>=<sp/>m12;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>m21;<sp/><sp/>mat[3]<sp/>=<sp/>m22;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>fontEngine-&gt;getFont(fontFile,<sp/>mat,<sp/>splash-&gt;getMatrix());</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>substituted<sp/>fonts:<sp/>adjust<sp/>the<sp/>font<sp/>matrix<sp/>--<sp/>compare<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>of<sp/>&apos;m&apos;<sp/>in<sp/>the<sp/>original<sp/>font<sp/>and<sp/>the<sp/>substituted<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontFile-&gt;doAdjustMatrix<sp/>&amp;&amp;<sp/>!gfxFont-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w1,<sp/>w2,<sp/>w3;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>CharCode<sp/>code;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>256;<sp/>++code)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((name<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCharName(code))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(code);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w2<sp/>=<sp/><ref refid="structfont" kindref="compound">font</ref>-&gt;getGlyphAdvance(code);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w3<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(0);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gfxFont-&gt;isSymbolic()<sp/>&amp;&amp;<sp/>w2<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>w1<sp/>&gt;<sp/>w3)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>real<sp/>font<sp/>is<sp/>substantially<sp/>narrower<sp/>than<sp/>substituted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>font,<sp/>reduce<sp/>the<sp/>font<sp/>size<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w1<sp/>&gt;<sp/>0.01<sp/>&amp;&amp;<sp/>w1<sp/>&lt;<sp/>0.9<sp/>*<sp/>w2)<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>/=<sp/>w2;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m11<sp/>*=<sp/>w1;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m21<sp/>*=<sp/>w1;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recreateFont<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recreateFont)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>m11;<sp/><sp/>mat[1]<sp/>=<sp/>m12;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>=<sp/>m21;<sp/><sp/>mat[3]<sp/>=<sp/>m22;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>fontEngine-&gt;getFont(fontFile,<sp/>mat,<sp/>splash-&gt;getMatrix());</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontsrc<sp/>&amp;&amp;<sp/>!fontsrc-&gt;isFile)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc-&gt;unref();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontsrc<sp/>&amp;&amp;<sp/>!fontsrc-&gt;isFile)</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontsrc-&gt;unref();</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::stroke(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;isNonMarking())<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>setOverprintMask(state-&gt;getStrokeColorSpace(),<sp/>state-&gt;getStrokeOverprint(),</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getStrokeColor());</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>splash-&gt;stroke(path);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::fill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;isNonMarking())<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>splash-&gt;fill(path,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::eoFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;isNonMarking())<sp/>{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>splash-&gt;fill(path,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::clip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>splash-&gt;clipToPath(path,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::eoClip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>splash-&gt;clipToPath(path,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::clipToStrokePath(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path,<sp/>*path2;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>path2<sp/>=<sp/>splash-&gt;makeStrokePath(path,<sp/>state-&gt;getLineWidth());</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>splash-&gt;clipToPath(path2,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path2;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*SplashOutputDev::convertPath(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path,</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>dropEmptySubpaths)<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*sPath;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>dropEmptySubpaths<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>sPath<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref>();</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>path-&gt;getNumSubpaths();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(i);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getNumPoints()<sp/>&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sPath-&gt;moveTo((SplashCoord)subpath-&gt;getX(0),</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getY(0));</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>subpath-&gt;getNumPoints())<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getCurve(j))<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sPath-&gt;curveTo((SplashCoord)subpath-&gt;getX(j),</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getY(j),</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getX(j+1),</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getY(j+1),</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getX(j+2),</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getY(j+2));</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sPath-&gt;lineTo((SplashCoord)subpath-&gt;getX(j),</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SplashCoord)subpath-&gt;getY(j));</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;isClosed())<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>sPath-&gt;close();</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sPath;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originY,</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>render;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>GBool<sp/>doFill,<sp/>doStroke,<sp/>doClip,<sp/>strokeAdjust;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[4];</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>GBool<sp/>horiz;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipHorizText<sp/>||<sp/>skipRotatedText)<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFontTransMat(&amp;m[0],<sp/>&amp;m[1],<sp/>&amp;m[2],<sp/>&amp;m[3]);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>m[0]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fabs(m[1])<sp/>&lt;<sp/>0.001<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(m[2])<sp/>&lt;<sp/>0.001<sp/>&amp;&amp;<sp/>m[3]<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((skipHorizText<sp/>&amp;&amp;<sp/>horiz)<sp/>||<sp/>(skipRotatedText<sp/>&amp;&amp;<sp/>!horiz))<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>invisible<sp/>text<sp/>--<sp/>this<sp/>is<sp/>used<sp/>by<sp/>Acrobat<sp/>Capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>render<sp/>=<sp/>state-&gt;getRender();</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(render<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needFontUpdate)<sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>doUpdateFont(state);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structfont" kindref="compound">font</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>x<sp/>-=<sp/>originX;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>y<sp/>-=<sp/>originY;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>doFill<sp/>=<sp/>!(render<sp/>&amp;<sp/>1)<sp/>&amp;&amp;<sp/>!state-&gt;getFillColorSpace()-&gt;isNonMarking();</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>doStroke<sp/>=<sp/>((render<sp/>&amp;<sp/>3)<sp/>==<sp/>1<sp/>||<sp/>(render<sp/>&amp;<sp/>3)<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!state-&gt;getStrokeColorSpace()-&gt;isNonMarking();</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>doClip<sp/>=<sp/>render<sp/>&amp;<sp/>4;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>lineWidth<sp/>=<sp/>splash-&gt;getLineWidth();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doStroke<sp/>&amp;&amp;<sp/>lineWidth<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setLineWidth(1<sp/>/<sp/>state-&gt;getVDPI());</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doStroke<sp/>||<sp/>doClip)<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((path<sp/>=<sp/><ref refid="structfont" kindref="compound">font</ref>-&gt;getGlyphPath(code)))<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;offset((SplashCoord)x,<sp/>(SplashCoord)y);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>use<sp/>stroke<sp/>adjustment<sp/>when<sp/>stroking<sp/>text<sp/>--<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tend<sp/>to<sp/>be<sp/>ugly<sp/>(because<sp/>characters<sp/>with<sp/>horizontal<sp/>upper<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lower<sp/>edges<sp/>get<sp/>misaligned<sp/>relative<sp/>to<sp/>the<sp/>other<sp/>characters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/>strokeAdjust<sp/>=<sp/>gFalse;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doStroke)<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>strokeAdjust<sp/>=<sp/>splash-&gt;getStrokeAdjust();</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokeAdjust(gFalse);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>and<sp/>stroke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doFill<sp/>&amp;&amp;<sp/>doStroke)<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path)<sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>splash-&gt;fill(path,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setOverprintMask(state-&gt;getStrokeColorSpace(),</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeOverprint(),</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeColor());</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>splash-&gt;stroke(path);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doFill)<sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;fillChar((SplashCoord)x,<sp/>(SplashCoord)y,<sp/>code,<sp/><ref refid="structfont" kindref="compound">font</ref>);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stroke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doStroke)<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path)<sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setOverprintMask(state-&gt;getStrokeColorSpace(),</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeOverprint(),</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeColor());</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>splash-&gt;stroke(path);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/>splash-&gt;setLineWidth(lineWidth);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doClip)<sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textClipPath)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>textClipPath-&gt;append(path);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>textClipPath<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doStroke)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setStrokeAdjust(strokeAdjust);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal">GBool<sp/>SplashOutputDev::beginType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>code,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*fontID;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm,<sp/>*bbox;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref><sp/>*t3Font;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><ref refid="struct_t3_glyph_stack" kindref="compound">T3GlyphStack</ref><sp/>*t3gs;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>GBool<sp/>validBBox;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[4];</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/>GBool<sp/>horiz;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>xt,<sp/>yt;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipHorizText<sp/>||<sp/>skipRotatedText)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFontTransMat(&amp;m[0],<sp/>&amp;m[1],<sp/>&amp;m[2],<sp/>&amp;m[3]);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>m[0]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fabs(m[1])<sp/>&lt;<sp/>0.001<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(m[2])<sp/>&lt;<sp/>0.001<sp/>&amp;&amp;<sp/>m[3]<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((skipHorizText<sp/>&amp;&amp;<sp/>horiz)<sp/>||<sp/>(skipRotatedText<sp/>&amp;&amp;<sp/>!horiz))<sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(gfxFont<sp/>=<sp/>state-&gt;getFont()))<sp/>{</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>fontID<sp/>=<sp/>gfxFont-&gt;getID();</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/>state-&gt;transform(0,<sp/>0,<sp/>&amp;xt,<sp/>&amp;yt);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>the<sp/>first<sp/>(MRU)<sp/>font<sp/>in<sp/>the<sp/>cache?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(nT3Fonts<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>t3FontCache[0]-&gt;matches(fontID,<sp/>ctm[0],<sp/>ctm[1],<sp/>ctm[2],<sp/>ctm[3])))<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>font<sp/>elsewhere<sp/>in<sp/>the<sp/>cache?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nT3Fonts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3FontCache[i]-&gt;matches(fontID,<sp/>ctm[0],<sp/>ctm[1],<sp/>ctm[2],<sp/>ctm[3]))<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>t3Font<sp/>=<sp/>t3FontCache[i];</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3FontCache[j]<sp/>=<sp/>t3FontCache[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>t3FontCache[0]<sp/>=<sp/>t3Font;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>nT3Fonts)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>entry<sp/>in<sp/>the<sp/>font<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nT3Fonts<sp/>==<sp/>splashOutT3FontCacheSize)<sp/>{</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>t3gs<sp/>=<sp/>t3GlyphStack;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t3gs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3gs-&gt;cache<sp/>==<sp/>t3FontCache[nT3Fonts<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;t3FontCache<sp/>reaches<sp/>limit<sp/>but<sp/>font<sp/>still<sp/>on<sp/>stack<sp/>in<sp/>SplashOutputDev::beginType3Char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3gs<sp/>=<sp/>t3gs-&gt;next;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3FontCache[nT3Fonts<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>--nT3Fonts;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>nT3Fonts;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>t3FontCache[j]<sp/>=<sp/>t3FontCache[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nT3Fonts;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>gfxFont-&gt;getFontBBox();</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bbox[0]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bbox[1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bbox[2]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bbox[3]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unspecified<sp/>bounding<sp/>box<sp/>--<sp/>just<sp/>take<sp/>a<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xt<sp/>-<sp/>5;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>xMin<sp/>+<sp/>30;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>yt<sp/>+<sp/>15;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>-<sp/>45;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>validBBox<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;transform(bbox[0],<sp/>bbox[1],<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;transform(bbox[0],<sp/>bbox[3],<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;transform(bbox[2],<sp/>bbox[1],<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;transform(bbox[2],<sp/>bbox[3],<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>validBBox<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3FontCache[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref>(fontID,<sp/>ctm[0],<sp/>ctm[1],<sp/>ctm[2],<sp/>ctm[3],</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(xMin<sp/>-<sp/>xt)<sp/>-<sp/>2,</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(yMin<sp/>-<sp/>yt)<sp/>-<sp/>2,</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(xMax)<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(xMin)<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(yMax)<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(yMin)<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validBBox,</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/>t3Font<sp/>=<sp/>t3FontCache[0];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>glyph<sp/>in<sp/>the<sp/>cache?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>(code<sp/>&amp;<sp/>(t3Font-&gt;cacheSets<sp/>-<sp/>1))<sp/>*<sp/>t3Font-&gt;cacheAssoc;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>t3Font-&gt;cacheAssoc;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3Font-&gt;cacheTags<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t3Font-&gt;cacheTags[i+j].mru<sp/>&amp;<sp/>0x8000)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>t3Font-&gt;cacheTags[i+j].code<sp/>==<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawType3Glyph(state,<sp/>t3Font,<sp/>&amp;t3Font-&gt;cacheTags[i+j],</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3Font-&gt;cacheData<sp/>+<sp/>(i+j)<sp/>*<sp/>t3Font-&gt;glyphSize);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>a<sp/>new<sp/>Type<sp/>3<sp/>glyph<sp/>record</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/>t3gs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_t3_glyph_stack" kindref="compound">T3GlyphStack</ref>();</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>t3gs-&gt;next<sp/>=<sp/>t3GlyphStack;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>t3GlyphStack<sp/>=<sp/>t3gs;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;code<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;cache<sp/>=<sp/>t3Font;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;cacheTag<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;cacheData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/>haveT3Dx<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::endType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><ref refid="struct_t3_glyph_stack" kindref="compound">T3GlyphStack</ref><sp/>*t3gs;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3GlyphStack-&gt;cacheTag)<sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>--nestCount;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(t3GlyphStack-&gt;cacheData,<sp/>bitmap-&gt;getDataPtr(),</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;cache-&gt;glyphSize);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitmap;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splash;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/>t3GlyphStack-&gt;origBitmap;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>splash<sp/>=<sp/>t3GlyphStack-&gt;origSplash;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setCTM(ctm[0],<sp/>ctm[1],<sp/>ctm[2],<sp/>ctm[3],</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;origCTM4,<sp/>t3GlyphStack-&gt;origCTM5);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCTM(state,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>drawType3Glyph(state,<sp/>t3GlyphStack-&gt;cache,</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;cacheTag,<sp/>t3GlyphStack-&gt;cacheData);</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/>t3gs<sp/>=<sp/>t3GlyphStack;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/>t3GlyphStack<sp/>=<sp/>t3gs-&gt;next;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3gs;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::type3D0(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>haveT3Dx<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::type3D1(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy,</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>llx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lly,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>urx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ury)<sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref><sp/>*t3Font;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xt,<sp/>yt,<sp/>xMin,<sp/>xMax,<sp/>yMin,<sp/>yMax,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>multiple<sp/>d0/d1<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveT3Dx)<sp/>{</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/>haveT3Dx<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(t3GlyphStack<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;t3GlyphStack<sp/>was<sp/>null<sp/>in<sp/>SplashOutputDev::type3D1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(t3GlyphStack-&gt;origBitmap<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;t3GlyphStack<sp/>origBitmap<sp/>was<sp/>not<sp/>null<sp/>in<sp/>SplashOutputDev::type3D1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(t3GlyphStack-&gt;origSplash<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;t3GlyphStack<sp/>origSplash<sp/>was<sp/>not<sp/>null<sp/>in<sp/>SplashOutputDev::type3D1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>t3Font<sp/>=<sp/>t3GlyphStack-&gt;cache;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>a<sp/>valid<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>state-&gt;transform(0,<sp/>0,<sp/>&amp;xt,<sp/>&amp;yt);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>state-&gt;transform(llx,<sp/>lly,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>state-&gt;transform(llx,<sp/>ury,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>state-&gt;transform(urx,<sp/>lly,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>state-&gt;transform(urx,<sp/>ury,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>-<sp/>xt<sp/>&lt;<sp/>t3Font-&gt;glyphX<sp/>||</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>-<sp/>yt<sp/>&lt;<sp/>t3Font-&gt;glyphY<sp/>||</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>-<sp/>xt<sp/>&gt;<sp/>t3Font-&gt;glyphX<sp/>+<sp/>t3Font-&gt;glyphW<sp/>||</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>-<sp/>yt<sp/>&gt;<sp/>t3Font-&gt;glyphY<sp/>+<sp/>t3Font-&gt;glyphH)<sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3Font-&gt;validBBox)<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>bounding<sp/>box<sp/>in<sp/>Type<sp/>3<sp/>glyph&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3Font-&gt;cacheTags<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>cache<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>(t3GlyphStack-&gt;code<sp/>&amp;<sp/>(t3Font-&gt;cacheSets<sp/>-<sp/>1))<sp/>*<sp/>t3Font-&gt;cacheAssoc;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>t3Font-&gt;cacheAssoc;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t3Font-&gt;cacheTags[i+j].mru<sp/>&amp;<sp/>0x7fff)<sp/>==<sp/>t3Font-&gt;cacheAssoc<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3Font-&gt;cacheTags[i+j].mru<sp/>=<sp/>0x8000;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3Font-&gt;cacheTags[i+j].code<sp/>=<sp/>t3GlyphStack-&gt;code;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;cacheTag<sp/>=<sp/>&amp;t3Font-&gt;cacheTags[i+j];</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;cacheData<sp/>=<sp/>t3Font-&gt;cacheData<sp/>+<sp/>(i+j)<sp/>*<sp/>t3Font-&gt;glyphSize;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++t3Font-&gt;cacheTags[i+j].mru;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;origBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;origSplash<sp/>=<sp/>splash;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;origCTM4<sp/>=<sp/>ctm[4];</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>t3GlyphStack-&gt;origCTM5<sp/>=<sp/>ctm[5];</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>temporary<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeMono1)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(t3Font-&gt;glyphW,<sp/>t3Font-&gt;glyphH,<sp/>1,</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splashModeMono1,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>gFalse,</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;origSplash-&gt;getScreen());</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clear(color);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(t3Font-&gt;glyphW,<sp/>t3Font-&gt;glyphH,<sp/>1,</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splashModeMono8,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>vectorAntialias,</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3GlyphStack-&gt;origSplash-&gt;getScreen());</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clear(color);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/>splash-&gt;setMinLineWidth(globalParams-&gt;getMinLineWidth());</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/>splash-&gt;setThinLineMode(splashThinLineDefault);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/>splash-&gt;setFillPattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color));</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokePattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(color));</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>copy<sp/>other<sp/>state<sp/>from<sp/>t3GlyphStack-&gt;origSplash?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>state-&gt;setCTM(ctm[0],<sp/>ctm[1],<sp/>ctm[2],<sp/>ctm[3],</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-t3Font-&gt;glyphX,<sp/>-t3Font-&gt;glyphY);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>updateCTM(state,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>++nestCount;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawType3Glyph(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_t3_font_cache" kindref="compound">T3FontCache</ref><sp/>*t3Font,</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t3_font_cache_tag" kindref="compound">T3FontCacheTag</ref><sp/>*<sp/></highlight><highlight class="comment">/*tag*/</highlight><highlight class="normal">,<sp/>Guchar<sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_glyph_bitmap" kindref="compound">SplashGlyphBitmap</ref><sp/>glyph;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>glyph.x<sp/>=<sp/>-t3Font-&gt;glyphX;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/>glyph.y<sp/>=<sp/>-t3Font-&gt;glyphY;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>glyph.w<sp/>=<sp/>t3Font-&gt;glyphW;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/>glyph.h<sp/>=<sp/>t3Font-&gt;glyphH;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/>glyph.aa<sp/>=<sp/>colorMode<sp/>!=<sp/>splashModeMono1;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/>glyph.data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/>glyph.freeData<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/>splash-&gt;fillGlyph(0,<sp/>0,<sp/>&amp;glyph);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::beginTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::endTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textClipPath)<sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clipToPath(textClipPath,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>textClipPath;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>textClipPath<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863" refid="struct_splash_out_image_mask_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>GBool<sp/>invert;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height,<sp/>y;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal">GBool<sp/>SplashOutputDev::imageMaskSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>*imgMaskData<sp/>=<sp/>(<ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>q;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgMaskData-&gt;y<sp/>==<sp/>imgMaskData-&gt;height)<sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>imgMaskData-&gt;imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>line;<sp/>x<sp/>&lt;<sp/>imgMaskData-&gt;width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*p++<sp/>^<sp/>imgMaskData-&gt;invert;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>++imgMaskData-&gt;y;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>imgMaskData;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;isNonMarking())<sp/>{</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>setOverprintMask(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/>mat[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>-ctm[2];</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>-ctm[3];</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>mat[4]<sp/>=<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>mat[5]<sp/>=<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>imgMaskData.invert<sp/>=<sp/>invert<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>imgMaskData.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/>imgMaskData.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>imgMaskData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>splash-&gt;fillImageMask(&amp;imageMaskSrc,<sp/>&amp;imgMaskData,<sp/>width,<sp/>height,<sp/>mat,<sp/>t3GlyphStack<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(imgMaskData.y<sp/>&lt;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgMaskData.imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++imgMaskData.y;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgMaskData.imgStr;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>inlineImg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>imgMaskData;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*maskSplash;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/>SplashColor<sp/>maskColor;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bbox[4]<sp/>=<sp/>{0,<sp/>0,<sp/>1,<sp/>1};<sp/></highlight><highlight class="comment">//<sp/>default;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;isNonMarking())<sp/>{</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>beginTransparencyGroup(state,<sp/>bbox,<sp/>NULL,<sp/>gFalse,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>baseMatrix[4]<sp/>-=<sp/>transpGroupStack-&gt;tx;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>baseMatrix[5]<sp/>-=<sp/>transpGroupStack-&gt;ty;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>mat[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>-ctm[2];</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>-ctm[3];</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/>mat[4]<sp/>=<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/>mat[5]<sp/>=<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/>imgMaskData.invert<sp/>=<sp/>invert<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>imgMaskData.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/>imgMaskData.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>imgMaskData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>transpGroupStack-&gt;softmask<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(bitmap-&gt;getWidth(),<sp/>bitmap-&gt;getHeight(),<sp/>1,<sp/>splashModeMono8,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>maskSplash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(transpGroupStack-&gt;softmask,<sp/>vectorAntialias);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/>maskColor[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/>maskSplash-&gt;clear(maskColor);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>maskColor[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>maskSplash-&gt;setFillPattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(maskColor));</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>maskSplash-&gt;fillImageMask(&amp;imageMaskSrc,<sp/>&amp;imgMaskData,<sp/><sp/>width,<sp/>height,<sp/>mat,<sp/>t3GlyphStack<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskSplash;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgMaskData.imgStr;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="2980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::unsetSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bbox[4]<sp/>=<sp/>{0,0,1,1};<sp/></highlight><highlight class="comment">//<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>mask<sp/>to<sp/>alpha<sp/>channel!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memcpy(maskBitmap-&gt;getAlphaPtr(),<sp/>maskBitmap-&gt;getDataPtr(),<sp/>bitmap-&gt;getRowSize()<sp/>*<sp/>bitmap-&gt;getHeight());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memset(maskBitmap-&gt;getDataPtr(),<sp/>0,<sp/>bitmap-&gt;getRowSize()<sp/>*<sp/>bitmap-&gt;getHeight());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack-&gt;softmask<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*dest<sp/>=<sp/>bitmap-&gt;getAlphaPtr();</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*src<sp/>=<sp/>transpGroupStack-&gt;softmask-&gt;getDataPtr();</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=<sp/>0;<sp/>c<sp/>&lt;<sp/>transpGroupStack-&gt;softmask-&gt;getRowSize()<sp/>*<sp/>transpGroupStack-&gt;softmask-&gt;getHeight();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[c]<sp/>=<sp/>src[c];</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transpGroupStack-&gt;softmask;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;softmask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/>endTransparencyGroup(state);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/>baseMatrix[4]<sp/>+=<sp/>transpGroupStack-&gt;tx;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>baseMatrix[5]<sp/>+=<sp/>transpGroupStack-&gt;ty;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>paintTransparencyGroup(state,<sp/>bbox);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003" refid="struct_splash_out_image_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>{</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>lookup;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>colorMode;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height,<sp/>y;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*maskStr;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>SplashColor<sp/>matteColor;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal">GBool<sp/>SplashOutputDev::useIccImageSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!imgData-&gt;lookup<sp/>&amp;&amp;<sp/>imgData-&gt;colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csICCBased)<sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>(<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*)<sp/>imgData-&gt;colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getAlt()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>colorSpace-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceGray)</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getAlt()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>colorSpace-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceRGB)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getAlt()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>colorSpace-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csDeviceCMYK)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clip<sp/>x<sp/>to<sp/>lie<sp/>in<sp/>[0,<sp/>255].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Guchar<sp/>clip255(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>x<sp/>&gt;<sp/>255<sp/>?<sp/>255<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal">GBool<sp/>SplashOutputDev::imageSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>colorLine,</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*<sp/></highlight><highlight class="comment">/*alphaLine*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>q,<sp/>col;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>x;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;height)<sp/>{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>imgData-&gt;imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeRGB8<sp/>||<sp/>imgData-&gt;colorMode<sp/>==<sp/>splashModeBGR8)</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeCMYK8)</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>SPOT_NCOMPS<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(colorLine,<sp/>0,<sp/>imgData-&gt;width<sp/>*<sp/>destComps);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>imgData-&gt;colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;lookup)<sp/>{</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>imgData-&gt;lookup[*p];</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[3<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[3];</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[3];</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[(SPOT_NCOMPS+4)<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[cp];</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getGray(p,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMap-&gt;useRGBLine())<sp/>{</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGBLine(p,<sp/>(Guchar<sp/>*)<sp/>colorLine,<sp/>imgData-&gt;width);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGB(p,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMap-&gt;useRGBLine())<sp/>{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGBXLine(p,<sp/>(Guchar<sp/>*)<sp/>colorLine,<sp/>imgData-&gt;width);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGB(p,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMap-&gt;useCMYKLine())<sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getCMYKLine(p,<sp/>(Guchar<sp/>*)<sp/>colorLine,<sp/>imgData-&gt;width);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getCMYK(p,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMap-&gt;useDeviceNLine())<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getDeviceNLine(p,<sp/>(Guchar<sp/>*)<sp/>colorLine,<sp/>imgData-&gt;width);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getDeviceN(p,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;maskStr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(p<sp/>=<sp/>imgData-&gt;maskStr-&gt;getLine())<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destComps<sp/>=<sp/>splashColorModeNComps[imgData-&gt;colorMode];</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convComps<sp/>=<sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>?<sp/>3<sp/>:<sp/>destComps;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;maskColorMap-&gt;getGrayLine(p,<sp/>p,<sp/>imgData-&gt;width);</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x,<sp/>p++,<sp/>q<sp/>+=<sp/>destComps)<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>convComps;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[cp]<sp/>=<sp/>(*p)<sp/>?<sp/>clip255(imgData-&gt;matteColor[cp]<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(q[cp]<sp/>-<sp/>imgData-&gt;matteColor[cp])<sp/>*<sp/>255<sp/>/<sp/>*p)<sp/>:<sp/>imgData-&gt;matteColor[cp];</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/>++imgData-&gt;y;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal">GBool<sp/>SplashOutputDev::iccImageSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>colorLine,</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*<sp/></highlight><highlight class="comment">/*alphaLine*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;height)<sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>imgData-&gt;imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeRGB8<sp/>||<sp/>imgData-&gt;colorMode<sp/>==<sp/>splashModeBGR8)</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeCMYK8)</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destComps<sp/>=<sp/>SPOT_NCOMPS<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(colorLine,<sp/>0,<sp/>imgData-&gt;width<sp/>*<sp/>destComps);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>{</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>q;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>imgData-&gt;width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>nComps<sp/>=<sp/>imgData-&gt;colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(colorLine,<sp/>p,<sp/>imgData-&gt;width<sp/>*<sp/>nComps);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>++imgData-&gt;y;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::iccTransform(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*bitmap)<sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps<sp/>=<sp/>imgData-&gt;colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>Guchar<sp/>*colorLine<sp/>=<sp/>(Guchar<sp/>*)<sp/>gmalloc(nComps<sp/>*<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>Guchar<sp/>*rgbxLine<sp/>=<sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>?<sp/>(Guchar<sp/>*)<sp/>gmalloc(3<sp/>*<sp/>bitmap-&gt;getWidth())<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bitmap-&gt;getHeight();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>Guchar<sp/>*p<sp/>=<sp/>bitmap-&gt;getDataPtr()<sp/>+<sp/>i<sp/>*<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getGrayLine(p,<sp/>colorLine,<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/>colorLine,<sp/>nComps<sp/>*<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGBLine(p,<sp/>colorLine,<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/>colorLine,<sp/>nComps<sp/>*<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getCMYKLine(p,<sp/>colorLine,<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/>colorLine,<sp/>nComps<sp/>*<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*q;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*b<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>rgbxLine;<sp/>x<sp/>&lt;<sp/>bitmap-&gt;getWidth();<sp/>++x,<sp/>b+=4)<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>b[2];</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>b[1];</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>b[0];</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGBLine(rgbxLine,<sp/>colorLine,<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine;<sp/>x<sp/>&lt;<sp/>bitmap-&gt;getWidth();<sp/>++x,<sp/>b+=4)<sp/>{</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[2]<sp/>=<sp/>*q++;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1]<sp/>=<sp/>*q++;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0]<sp/>=<sp/>*q++;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/>gfree(colorLine);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgbxLine<sp/>!=<sp/>NULL)<sp/></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(rgbxLine);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal">GBool<sp/>SplashOutputDev::alphaImageSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>colorLine,</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*alphaLine)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p,<sp/>*aq;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>q,<sp/>col;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>Guchar<sp/>alpha;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>x,<sp/>i;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;height)<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>imgData-&gt;imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>imgData-&gt;colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine,<sp/>aq<sp/>=<sp/>alphaLine;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>&lt;<sp/>imgData-&gt;width;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i]<sp/>&lt;<sp/>imgData-&gt;maskColors[2*i]<sp/>||</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>&gt;<sp/>imgData-&gt;maskColors[2*i+1])<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;lookup)<sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>imgData-&gt;lookup[*p];</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[3<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[3];</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[(SPOT_NCOMPS+4)<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[cp];</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getGray(p,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGB(p,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getCMYK(p,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getDeviceN(p,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>++imgData-&gt;y;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight></codeline>
<codeline lineno="3411" refid="struct_tiling_splash_out_bitmap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tiling_splash_out_bitmap" kindref="compound">TilingSplashOutBitmap</ref><sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*bitmap;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><ref refid="class_splash_pattern" kindref="compound">SplashPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>colorMode;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeatX;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeatY;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal">GBool<sp/>SplashOutputDev::tilingBitmapSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>colorLine,</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*alphaLine)<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><ref refid="struct_tiling_splash_out_bitmap" kindref="compound">TilingSplashOutBitmap</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_tiling_splash_out_bitmap" kindref="compound">TilingSplashOutBitmap</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;bitmap-&gt;getHeight())<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;repeatY--;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;repeatY<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;paintType<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplashColorMode<sp/>cMode<sp/>=<sp/>imgData-&gt;bitmap-&gt;getMode();</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>q<sp/>=<sp/>colorLine;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>splashModeBGR8<sp/>and<sp/>splashModeXBGR8<sp/>we<sp/>need<sp/>to<sp/>use<sp/>getPixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>others<sp/>we<sp/>can<sp/>use<sp/>raw<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cMode<sp/>==<sp/>splashModeBGR8<sp/>||<sp/>cMode<sp/>==<sp/>splashModeXBGR8)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>imgData-&gt;repeatX;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>imgData-&gt;bitmap-&gt;getWidth();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;bitmap-&gt;getPixel(x,<sp/>imgData-&gt;y,<sp/>q);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>splashColorModeNComps[cMode];</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>imgData-&gt;bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>imgData-&gt;repeatX;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>imgData-&gt;bitmap-&gt;getDataPtr()<sp/>+<sp/>imgData-&gt;y<sp/>*<sp/>imgData-&gt;bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>n;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alphaLine<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>aq<sp/>=<sp/>alphaLine;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>imgData-&gt;bitmap-&gt;getWidth()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>imgData-&gt;repeatX;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>imgData-&gt;bitmap-&gt;getAlphaPtr()<sp/>+<sp/>imgData-&gt;y<sp/>*<sp/>imgData-&gt;bitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>n;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>hack,<sp/>because<sp/>of<sp/>how<sp/>Splash<sp/>antialias<sp/>works<sp/>if<sp/>we<sp/>overwrite<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>alpha<sp/>pixel<sp/>of<sp/>the<sp/>tile<sp/>most/all<sp/>of<sp/>the<sp/>files<sp/>look<sp/>much<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>(n<sp/>==<sp/>0)<sp/>?<sp/>*p<sp/>:<sp/>*(p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashColor<sp/>col,<sp/>pat;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>dest<sp/>=<sp/>colorLine;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>imgData-&gt;repeatX;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>imgData-&gt;bitmap-&gt;getWidth();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;bitmap-&gt;getPixel(x,<sp/>imgData-&gt;y,<sp/>col);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;pattern-&gt;getColor(x,<sp/>imgData-&gt;y,<sp/>pat);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashColorModeNComps[imgData-&gt;colorMode];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>imgData-&gt;colorMode<sp/>==<sp/>splashModeDeviceN8)</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>div255(pat[i]<sp/>*<sp/>(255<sp/>-<sp/>col[0]));</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]<sp/>=<sp/>255<sp/>-<sp/>div255((255<sp/>-<sp/>pat[i])<sp/>*<sp/>(255<sp/>-<sp/>col[0]));</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>+=<sp/>splashColorModeNComps[imgData-&gt;colorMode];</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alphaLine<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;bitmap-&gt;getHeight()<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>imgData-&gt;y<sp/>&gt;<sp/>50)<sp/>?<sp/>imgData-&gt;y<sp/>-<sp/>1<sp/>:<sp/>imgData-&gt;y;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>aq<sp/>=<sp/>alphaLine;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>imgData-&gt;bitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>imgData-&gt;repeatX;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>imgData-&gt;bitmap-&gt;getAlphaPtr()<sp/>+<sp/>y<sp/>*<sp/>imgData-&gt;bitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>n;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>++imgData-&gt;y;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>imgData;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>srcMode;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>SplashImageSource<sp/>src;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>SplashICCTransform<sp/>tf;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/>GBool<sp/>grayIndexed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/>mat[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>-ctm[2];</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>-ctm[3];</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>mat[4]<sp/>=<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/>mat[5]<sp/>=<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/>imgData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/>imgData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/>imgData.colorMap<sp/>=<sp/>colorMap;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>imgData.maskColors<sp/>=<sp/>maskColors;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/>imgData.colorMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>imgData.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/>imgData.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>imgData.maskStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>imgData.maskColorMap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>imgData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>one-channel<sp/>(monochrome/gray/separation)<sp/>images:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>imgData.lookup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getNumPixelComps()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits();</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmalloc(n);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getGray(&amp;pix,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[i]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>3);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grayIndexed<sp/>=<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceGray;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(&amp;pix,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.c<sp/>!=<sp/>0<sp/>||<sp/>cmyk.m<sp/>!=<sp/>0<sp/>||<sp/>cmyk.y<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grayIndexed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grayIndexed<sp/>=<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceGray;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(&amp;pix,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmyk.c<sp/>!=<sp/>0<sp/>||<sp/>cmyk.m<sp/>!=<sp/>0<sp/>||<sp/>cmyk.y<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grayIndexed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDeviceN(&amp;pix,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[(SPOT_NCOMPS+4)*i<sp/>+cp]<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>setOverprintMask(colorMap-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL,<sp/>grayIndexed);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/>setOverprintMask(colorMap-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeMono1)<sp/>{</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>splashModeMono8;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>maskColors<sp/>?<sp/>&amp;alphaImageSrc<sp/>:<sp/>useIccImageSrc(&amp;imgData)<sp/>?<sp/>&amp;iccImageSrc<sp/>:<sp/>&amp;imageSrc;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/>tf<sp/>=<sp/>maskColors<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>useIccImageSrc(&amp;imgData)<sp/>?<sp/>&amp;iccTransform<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>maskColors<sp/>?<sp/>&amp;alphaImageSrc<sp/>:<sp/>&amp;imageSrc;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/>tf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>splash-&gt;drawImage(src,<sp/>tf,<sp/>&amp;imgData,<sp/>srcMode,<sp/>maskColors<sp/>?<sp/>gTrue<sp/>:<sp/>gFalse,</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>mat,<sp/>interpolate);</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(imgData.y<sp/>&lt;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.imgStr-&gt;getLine();</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++imgData.y;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/>gfree(imgData.lookup);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgData.imgStr;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="3652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654" refid="struct_splash_out_masked_image_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_splash_out_masked_image_data" kindref="compound">SplashOutMaskedImageData</ref><sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*mask;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>lookup;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>colorMode;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height,<sp/>y;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal">GBool<sp/>SplashOutputDev::maskedImageSrc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>SplashColorPtr<sp/>colorLine,</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*alphaLine)<sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_masked_image_data" kindref="compound">SplashOutMaskedImageData</ref><sp/>*imgData<sp/>=<sp/>(<ref refid="struct_splash_out_masked_image_data" kindref="compound">SplashOutMaskedImageData</ref><sp/>*)data;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p,<sp/>*aq;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>q,<sp/>col;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/>Guchar<sp/>alpha;</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/>Guchar<sp/>*maskPtr;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskBit;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>x;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;y<sp/>==<sp/>imgData-&gt;height)<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>=<sp/>imgData-&gt;imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>imgData-&gt;colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/>maskPtr<sp/>=<sp/>imgData-&gt;mask-&gt;getDataPtr()<sp/>+</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgData-&gt;y<sp/>*<sp/>imgData-&gt;mask-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>maskBit<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0,<sp/>q<sp/>=<sp/>colorLine,<sp/>aq<sp/>=<sp/>alphaLine;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>&lt;<sp/>imgData-&gt;width;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++x,<sp/>p<sp/>+=<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>(*maskPtr<sp/>&amp;<sp/>maskBit)<sp/>?<sp/>0xff<sp/>:<sp/>0x00;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(maskBit<sp/>&gt;&gt;=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++maskPtr;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskBit<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;lookup)<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>imgData-&gt;lookup[*p];</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[3<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[4<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[0];</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[1];</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[2];</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[3];</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>&amp;imgData-&gt;lookup[(SPOT_NCOMPS+4)<sp/>*<sp/>*p];</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>col[cp];</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getGray(p,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getRGB(p,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgData-&gt;colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>*q++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getCMYK(p,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData-&gt;colorMap-&gt;getDeviceN(p,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*aq++<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>++imgData-&gt;y;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert,</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>maskDecode,<sp/>decodeLow,<sp/>decodeHigh;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_masked_image_data" kindref="compound">SplashOutMaskedImageData</ref><sp/>imgData;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_mask_data" kindref="compound">SplashOutImageMaskData</ref><sp/>imgMaskData;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>srcMode;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*maskBitmap;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*maskSplash;</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/>SplashColor<sp/>maskColor;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/>setOverprintMask(colorMap-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL);</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mask<sp/>is<sp/>higher<sp/>resolution<sp/>than<sp/>the<sp/>image,<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>drawSoftMaskedImage()<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskWidth<sp/>&gt;<sp/>width<sp/>||<sp/>maskHeight<sp/>&gt;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeLow.initInt(maskInvert<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>decodeHigh.initInt(maskInvert<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDecode.initArray((xref)<sp/>?<sp/>xref<sp/>:<sp/>doc-&gt;getXRef());</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDecode.arrayAdd(&amp;decodeLow);</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDecode.arrayAdd(&amp;decodeHigh);</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColorMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref>(1,<sp/>&amp;maskDecode,</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>());</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDecode.free();</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSoftMaskedImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskColorMap,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskColorMap;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----<sp/>scale<sp/>the<sp/>mask<sp/>image<sp/>to<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the<sp/>source<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>(SplashCoord)width;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>=<sp/>(SplashCoord)height;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.invert<sp/>=<sp/>maskInvert<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.width<sp/>=<sp/>maskWidth;</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.height<sp/>=<sp/>maskHeight;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/>maskBitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(width,<sp/>height,<sp/>1,<sp/>splashModeMono1,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!maskBitmap-&gt;getDataPtr())<sp/>{</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskBitmap;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>height<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskBitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(width,<sp/>height,<sp/>1,<sp/>splashModeMono1,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>maskSplash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(maskBitmap,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColor[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>maskSplash-&gt;clear(maskColor);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColor[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>maskSplash-&gt;setFillPattern(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_solid_color" kindref="compound">SplashSolidColor</ref>(maskColor));</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>maskSplash-&gt;fillImageMask(&amp;imageMaskSrc,<sp/>&amp;imgMaskData,</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth,<sp/>maskHeight,<sp/>mat,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgMaskData.imgStr;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr-&gt;close();</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskSplash;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----<sp/>draw<sp/>the<sp/>source<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskBitmap;</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>=<sp/>-ctm[2];</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>=<sp/>-ctm[3];</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>=<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>=<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.colorMap<sp/>=<sp/>colorMap;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.mask<sp/>=<sp/>maskBitmap;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.colorMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>one-channel<sp/>(monochrome/gray/separation)<sp/>images:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getNumPixelComps()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits();</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmalloc(n);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getGray(&amp;pix,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[i]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>3);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[3*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[3*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[3*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(&amp;pix,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDeviceN(&amp;pix,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup[(SPOT_NCOMPS+4)*i<sp/>+<sp/>cp]<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeMono1)<sp/>{</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>splashModeMono8;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;drawImage(&amp;maskedImageSrc,<sp/>NULL,<sp/>&amp;imgData,<sp/>srcMode,<sp/>gTrue,</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>mat,<sp/>interpolate);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskBitmap;</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(imgData.lookup);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgData.imgStr;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::drawSoftMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap,</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>mat[6];</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>imgData;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_out_image_data" kindref="compound">SplashOutImageData</ref><sp/>imgMaskData;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/>SplashColorMode<sp/>srcMode;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*maskBitmap;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*maskSplash;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>SplashColor<sp/>maskColor;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>Guchar<sp/>pix;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>setOverprintMask(colorMap-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/>mat[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/>mat[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>mat[2]<sp/>=<sp/>-ctm[2];</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/>mat[3]<sp/>=<sp/>-ctm[3];</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/>mat[4]<sp/>=<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/>mat[5]<sp/>=<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>set<sp/>up<sp/>the<sp/>soft<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>imgMaskData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/>imgMaskData.colorMap<sp/>=<sp/>maskColorMap;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/>imgMaskData.maskColors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/>imgMaskData.colorMode<sp/>=<sp/>splashModeMono8;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>imgMaskData.width<sp/>=<sp/>maskWidth;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>imgMaskData.height<sp/>=<sp/>maskHeight;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/>imgMaskData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/>imgMaskData.maskStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>imgMaskData.maskColorMap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>maskColorMap-&gt;getBits();</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/>imgMaskData.lookup<sp/>=<sp/>(SplashColorPtr)gmalloc(n);</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColorMap-&gt;getGray(&amp;pix,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/>imgMaskData.lookup[i]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>maskBitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(bitmap-&gt;getWidth(),<sp/>bitmap-&gt;getHeight(),</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>splashModeMono8,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>maskSplash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(maskBitmap,<sp/>vectorAntialias);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>maskColor[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/>maskSplash-&gt;clear(maskColor);</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/>maskSplash-&gt;drawImage(&amp;imageSrc,<sp/>NULL,<sp/>&amp;imgMaskData,<sp/>splashModeMono8,<sp/>gFalse,</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth,<sp/>maskHeight,<sp/>mat,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgMaskData.imgStr;</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>gfree(imgMaskData.lookup);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskSplash;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>splash-&gt;setSoftMask(maskBitmap);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>draw<sp/>the<sp/>source<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>imgData.imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/>imgData.imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>imgData.colorMap<sp/>=<sp/>colorMap;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/>imgData.maskColors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>imgData.colorMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>imgData.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>imgData.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>imgData.maskStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/>imgData.maskColorMap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskColorMap-&gt;getMatteColor()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>getMatteColor(colorMode,<sp/>colorMap,<sp/>maskColorMap-&gt;getMatteColor(),<sp/>imgData.matteColor);</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.maskColorMap<sp/>=<sp/>maskColorMap;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.maskStr-&gt;reset();</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>imgData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>one-channel<sp/>(monochrome/gray/separation)<sp/>images:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/>imgData.lookup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getNumPixelComps()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits();</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmalloc(n);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getGray(&amp;pix,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[i]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>3);</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[3*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getRGB(&amp;pix,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>4);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(&amp;pix,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[4*i+3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgData.lookup<sp/>=<sp/>(SplashColorPtr)gmallocn(n,<sp/>SPOT_NCOMPS+4);</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Guchar)i;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getDeviceN(&amp;pix,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/>imgData.lookup[(SPOT_NCOMPS+4)*i<sp/>+<sp/>cp]<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeMono1)<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>splashModeMono8;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>srcMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>splash-&gt;drawImage(&amp;imageSrc,<sp/>NULL,<sp/>&amp;imgData,<sp/>srcMode,<sp/>gFalse,<sp/>width,<sp/>height,<sp/>mat,<sp/>interpolate);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>splash-&gt;setSoftMask(NULL);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>gfree(imgData.lookup);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgData.maskStr;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgData.imgStr;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/>maskStr-&gt;close();</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="4128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal">GBool<sp/>SplashOutputDev::checkTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/>GBool<sp/>knockout)<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||<sp/></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getAlphaIsShape()<sp/>||</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal<sp/>||</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;getSoftMask()<sp/>!=<sp/>NULL<sp/>||</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/>knockout)<sp/></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpGroupStack<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroupStack-&gt;shape<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::beginTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace,</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>isolated,<sp/>GBool<sp/>knockout,</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>forSoftMask)<sp/>{</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref><sp/>*transpGroup;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>ty,<sp/>w,<sp/>h,<sp/>i;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/>state-&gt;transform(bbox[0],<sp/>bbox[1],<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>state-&gt;transform(bbox[0],<sp/>bbox[3],<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/>state-&gt;transform(bbox[2],<sp/>bbox[1],<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/>state-&gt;transform(bbox[2],<sp/>bbox[3],<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>(int)floor(xMin);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&gt;=<sp/>bitmap-&gt;getWidth())<sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>bitmap-&gt;getWidth()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>(int)floor(yMin);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>&gt;=<sp/>bitmap-&gt;getHeight())<sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>bitmap-&gt;getHeight()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>(int)ceil(xMax)<sp/>-<sp/>tx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>+<sp/>w<sp/>&gt;<sp/>bitmap-&gt;getWidth())<sp/>{</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>bitmap-&gt;getWidth()<sp/>-<sp/>tx;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>(int)ceil(yMax)<sp/>-<sp/>ty<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ty<sp/>+<sp/>h<sp/>&gt;<sp/>bitmap-&gt;getHeight())<sp/>{</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>bitmap-&gt;getHeight()<sp/>-<sp/>ty;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>a<sp/>new<sp/>stack<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>transpGroup<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref>();</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>transpGroup-&gt;softmask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>transpGroup-&gt;tx<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>transpGroup-&gt;ty<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/>transpGroup-&gt;blendingColorSpace<sp/>=<sp/>blendingColorSpace;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/>transpGroup-&gt;isolated<sp/>=<sp/>isolated;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>transpGroup-&gt;shape<sp/>=<sp/>(knockout<sp/>&amp;&amp;<sp/>!isolated)<sp/>?<sp/>SplashBitmap::copy(bitmap)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>transpGroup-&gt;knockout<sp/>=<sp/>(knockout<sp/>&amp;&amp;<sp/>isolated);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/>transpGroup-&gt;knockoutOpacity<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/>transpGroup-&gt;next<sp/>=<sp/>transpGroupStack;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/>transpGroupStack<sp/>=<sp/>transpGroup;</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>transpGroup-&gt;origBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/>transpGroup-&gt;origSplash<sp/>=<sp/>splash;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>transpGroup-&gt;fontAA<sp/>=<sp/>fontEngine-&gt;getAA();</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>handles<sp/>the<sp/>blendingColorSpace<sp/>arg<sp/>for<sp/>soft<sp/>masks,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/><sp/><sp/>not<sp/>yet<sp/>for<sp/>transparency<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>to<sp/>the<sp/>blending<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forSoftMask<sp/>&amp;&amp;<sp/>isolated<sp/>&amp;&amp;<sp/>blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csDeviceGray<sp/>||</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getMode()<sp/>==<sp/>csCalGray<sp/>||</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getNComps()<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>=<sp/>splashModeMono8;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csDeviceRGB<sp/>||</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getMode()<sp/>==<sp/>csCalRGB<sp/>||</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getNComps()<sp/>==<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>does<sp/>this<sp/>need<sp/>to<sp/>use<sp/>BGR8?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>=<sp/>splashModeRGB8;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csDeviceCMYK<sp/>||</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blendingColorSpace-&gt;getMode()<sp/>==<sp/>csICCBased<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getNComps()<sp/>==<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>=<sp/>splashModeCMYK8;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>temporary<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(w,<sp/>h,<sp/>bitmapRowPad,<sp/>colorMode,<sp/>gTrue,</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitmapTopDown,<sp/>bitmap-&gt;getSeparationList());</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bitmap-&gt;getDataPtr())<sp/>{</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bitmap;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(w,<sp/>h,<sp/>bitmapRowPad,<sp/>colorMode,<sp/>gTrue,<sp/>bitmapTopDown);</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>vectorAntialias,</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup-&gt;origSplash-&gt;getScreen());</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroup-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroup-&gt;next-&gt;knockout)<sp/>{</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>fontEngine-&gt;setAA(gFalse);</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>splash-&gt;setThinLineMode(transpGroup-&gt;origSplash-&gt;getThinLineMode());</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>splash-&gt;setMinLineWidth(globalParams-&gt;getMinLineWidth());</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>Acrobat<sp/>apparently<sp/>copies<sp/>at<sp/>least<sp/>the<sp/>fill<sp/>and<sp/>stroke<sp/>colors,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>maybe<sp/>other<sp/>state(?)<sp/>--<sp/>but<sp/>not<sp/>the<sp/>clipping<sp/>path<sp/>(and<sp/>not<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>what<sp/>else)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>[this<sp/>is<sp/>likely<sp/>the<sp/>same<sp/>situation<sp/>as<sp/>in<sp/>type3D1()]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/>splash-&gt;setFillPattern(transpGroup-&gt;origSplash-&gt;getFillPattern()-&gt;copy());</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>splash-&gt;setStrokePattern(</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup-&gt;origSplash-&gt;getStrokePattern()-&gt;copy());</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isolated)<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>splashMaxColorComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMode<sp/>==<sp/>splashModeXBGR8)<sp/>color[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clear(color,<sp/>0);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*shape<sp/>=<sp/>(knockout)<sp/>?<sp/>transpGroup-&gt;shape<sp/>:</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(transpGroup-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroup-&gt;next-&gt;shape<sp/>!=<sp/>NULL)<sp/>?<sp/>transpGroup-&gt;next-&gt;shape<sp/>:<sp/>transpGroup-&gt;origBitmap;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shapeTx<sp/>=<sp/>(knockout)<sp/>?<sp/>tx<sp/>:</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(transpGroup-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroup-&gt;next-&gt;shape<sp/>!=<sp/>NULL)<sp/>?<sp/>transpGroup-&gt;next-&gt;tx<sp/>+<sp/>tx<sp/>:<sp/>tx;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shapeTy<sp/>=<sp/>(knockout)<sp/>?<sp/>ty<sp/>:</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(transpGroup-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroup-&gt;next-&gt;shape<sp/>!=<sp/>NULL)<sp/>?<sp/>transpGroup-&gt;next-&gt;ty<sp/>+<sp/>ty<sp/>:<sp/>ty;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;blitTransparent(transpGroup-&gt;origBitmap,<sp/>tx,<sp/>ty,<sp/>0,<sp/>0,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setInNonIsolatedGroup(shape,<sp/>shapeTx,<sp/>shapeTy);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/>transpGroup-&gt;tBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>state-&gt;shiftCTMAndClip(-tx,<sp/>-ty);</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/>updateCTM(state,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/>++nestCount;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::endTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/>--nestCount;</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splash;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/>transpGroupStack-&gt;origBitmap;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/>colorMode<sp/>=<sp/>bitmap-&gt;getMode();</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/>transpGroupStack-&gt;origSplash;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>state-&gt;shiftCTMAndClip(transpGroupStack-&gt;tx,<sp/>transpGroupStack-&gt;ty);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>updateCTM(state,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::paintTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*tBitmap;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref><sp/>*transpGroup;</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/>GBool<sp/>isolated;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>transpGroupStack-&gt;tx;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>transpGroupStack-&gt;ty;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/>tBitmap<sp/>=<sp/>transpGroupStack-&gt;tBitmap;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/>isolated<sp/>=<sp/>transpGroupStack-&gt;isolated;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>paint<sp/>the<sp/>transparency<sp/>group<sp/>onto<sp/>the<sp/>parent<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>clip<sp/>path<sp/>was<sp/>set<sp/>in<sp/>the<sp/>parent&apos;s<sp/>state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&lt;<sp/>bitmap-&gt;getWidth()<sp/>&amp;&amp;<sp/>ty<sp/>&lt;<sp/>bitmap-&gt;getHeight())<sp/>{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashCoord<sp/>knockoutOpacity<sp/>=<sp/>(transpGroupStack-&gt;next<sp/>!=<sp/>NULL)<sp/>?<sp/>transpGroupStack-&gt;next-&gt;knockoutOpacity</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>transpGroupStack-&gt;knockoutOpacity;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;setOverprintMask(0xffffffff,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;composite(tBitmap,<sp/>0,<sp/>0,<sp/>tx,<sp/>ty,</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tBitmap-&gt;getWidth(),<sp/>tBitmap-&gt;getHeight(),</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,<sp/>!isolated,<sp/>transpGroupStack-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroupStack-&gt;next-&gt;knockout,<sp/>knockoutOpacity);</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FREETYPE_FREETYPE_H<sp/>||<sp/>HAVE_FREETYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/>fontEngine-&gt;setAA(transpGroupStack-&gt;fontAA);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack-&gt;next<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroupStack-&gt;next-&gt;shape<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transpGroupStack-&gt;next-&gt;knockout<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>transpGroup<sp/>=<sp/>transpGroupStack;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/>transpGroupStack<sp/>=<sp/>transpGroup-&gt;next;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>transpGroup-&gt;knockoutOpacity<sp/>&lt;<sp/>transpGroupStack-&gt;knockoutOpacity)<sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;knockoutOpacity<sp/>=<sp/>transpGroup-&gt;knockoutOpacity;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transpGroup-&gt;shape;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transpGroup;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tBitmap;</highlight></codeline>
<codeline lineno="4354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setSoftMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>alpha,<sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*transferFunc,</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*backdropColor)<sp/>{</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*softMask,<sp/>*tBitmap;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*tSplash;</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><ref refid="struct_splash_transparency_group" kindref="compound">SplashTransparencyGroup</ref><sp/>*transpGroup;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>SplashColor<sp/>color;</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/>SplashColorPtr<sp/>p;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>deviceN;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lum,<sp/>lum2;</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/>ty,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>transpGroupStack-&gt;tx;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>transpGroupStack-&gt;ty;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>tBitmap<sp/>=<sp/>transpGroupStack-&gt;tBitmap;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>composite<sp/>with<sp/>backdrop<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alpha<sp/>&amp;&amp;<sp/>tBitmap-&gt;getMode()<sp/>!=<sp/>splashModeMono1)<sp/>{</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>correctly<sp/>handle<sp/>the<sp/>case<sp/>where<sp/>no<sp/>blending<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>space<sp/>is<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack-&gt;blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tSplash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(tBitmap,<sp/>vectorAntialias,</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroupStack-&gt;origSplash-&gt;getScreen());</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tBitmap-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transparency<sp/>is<sp/>not<sp/>supported<sp/>in<sp/>mono1<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;blendingColorSpace-&gt;getGray(backdropColor,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/>tSplash-&gt;compositeBackground(color);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;blendingColorSpace-&gt;getRGB(backdropColor,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(rgb.r);</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/>color[1]<sp/>=<sp/>colToByte(rgb.g);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>color[2]<sp/>=<sp/>colToByte(rgb.b);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/>tSplash-&gt;compositeBackground(color);</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;blendingColorSpace-&gt;getCMYK(backdropColor,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/>color[1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>color[2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>tSplash-&gt;compositeBackground(color);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;blendingColorSpace-&gt;getDeviceN(backdropColor,<sp/>&amp;deviceN);</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp=0;<sp/>cp<sp/>&lt;<sp/>SPOT_NCOMPS+4;<sp/>cp++)</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>color[cp]<sp/>=<sp/>colToByte(deviceN.c[cp]);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/>tSplash-&gt;compositeBackground(color);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tSplash;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/>softMask<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(bitmap-&gt;getWidth(),<sp/>bitmap-&gt;getHeight(),</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>splashModeMono8,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroupStack-&gt;blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/>transpGroupStack-&gt;blendingColorSpace-&gt;getGray(backdropColor,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/>fill<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>memset(softMask-&gt;getDataPtr(),<sp/>fill,</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>softMask-&gt;getRowSize()<sp/>*<sp/>softMask-&gt;getHeight());</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>softMask-&gt;getDataPtr()<sp/>+<sp/>ty<sp/>*<sp/>softMask-&gt;getRowSize()<sp/>+<sp/>tx;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMax<sp/>=<sp/>tBitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMax<sp/>=<sp/>tBitmap-&gt;getHeight();</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>&gt;<sp/>bitmap-&gt;getWidth()<sp/>-<sp/>tx)<sp/>xMax<sp/>=<sp/>bitmap-&gt;getWidth()<sp/>-<sp/>tx;</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>&gt;<sp/>bitmap-&gt;getHeight()<sp/>-<sp/>ty)<sp/>yMax<sp/>=<sp/>bitmap-&gt;getHeight()<sp/>-<sp/>ty;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>yMax;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>xMax;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha)<sp/>{</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transferFunc)<sp/>{</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>tBitmap-&gt;getAlpha(x,<sp/>y)<sp/>/<sp/>255.0;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transferFunc-&gt;transform(&amp;lum,<sp/>&amp;lum2);</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[x]<sp/>=<sp/>(int)(lum2<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[x]<sp/>=<sp/>tBitmap-&gt;getAlpha(x,<sp/>y);</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tBitmap-&gt;getPixel(x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>luminosity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tBitmap-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono1:</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeMono8:</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>color[0]<sp/>/<sp/>255.0;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeXBGR8:</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeBGR8:</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>(0.3<sp/>/<sp/>255.0)<sp/>*<sp/>color[0]<sp/>+</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0.59<sp/>/<sp/>255.0)<sp/>*<sp/>color[1]<sp/>+</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0.11<sp/>/<sp/>255.0)<sp/>*<sp/>color[2];</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>(1<sp/>-<sp/>color[3]<sp/>/<sp/>255.0)</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(0.3<sp/>/<sp/>255.0)<sp/>*<sp/>color[0]</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(0.59<sp/>/<sp/>255.0)<sp/>*<sp/>color[1]</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(0.11<sp/>/<sp/>255.0)<sp/>*<sp/>color[2];</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lum<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transferFunc)<sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transferFunc-&gt;transform(&amp;lum,<sp/>&amp;lum2);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lum2<sp/>=<sp/>lum;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>p[x]<sp/>=<sp/>(int)(lum2<sp/>*<sp/>255.0<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>softMask-&gt;getRowSize();</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>splash-&gt;setSoftMask(softMask);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>transpGroup<sp/>=<sp/>transpGroupStack;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>transpGroupStack<sp/>=<sp/>transpGroup-&gt;next;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>transpGroup;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tBitmap;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::clearSoftMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/>splash-&gt;setSoftMask(NULL);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setPaperColor(SplashColorPtr<sp/>paperColorA)<sp/>{</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/>splashColorCopy(paperColor,<sp/>paperColorA);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SplashOutputDev::getBitmapWidth()<sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="4505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SplashOutputDev::getBitmapHeight()<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitmap-&gt;getHeight();</highlight></codeline>
<codeline lineno="4509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*SplashOutputDev::takeBitmap()<sp/>{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*ret;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(1,<sp/>1,<sp/>bitmapRowPad,<sp/>colorMode,</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMode<sp/>!=<sp/>splashModeMono1,<sp/>bitmapTopDown);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="4518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::getModRegion(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>splash-&gt;getModRegion(xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="4523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::clearModRegion()<sp/>{</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/>splash-&gt;clearModRegion();</highlight></codeline>
<codeline lineno="4527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>//~tmp:<sp/>turn<sp/>off<sp/>anti-aliasing<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal">GBool<sp/>SplashOutputDev::getVectorAntialias()<sp/>{</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>splash-&gt;getVectorAntialias();</highlight></codeline>
<codeline lineno="4532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setVectorAntialias(GBool<sp/>vaa)<sp/>{</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/>vaa<sp/>=<sp/>vaa<sp/>&amp;&amp;<sp/>colorMode<sp/>!=<sp/>splashModeMono1;</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/>vectorAntialias<sp/>=<sp/>vaa;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/>splash-&gt;setVectorAntialias(vaa);</highlight></codeline>
<codeline lineno="4538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplashOutputDev::setFreeTypeHinting(GBool<sp/>enable,<sp/>GBool<sp/>enableSlightHintingA)</highlight></codeline>
<codeline lineno="4542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/>enableFreeTypeHinting<sp/>=<sp/>enable;</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>enableSlightHinting<sp/>=<sp/>enableSlightHintingA;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal">GBool<sp/>SplashOutputDev::tilingPatternFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfxA,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*catalog,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tilingType*/</highlight><highlight class="normal">,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)</highlight></codeline>
<codeline lineno="4552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><ref refid="class_splash" kindref="compound">Splash</ref><sp/>*formerSplash<sp/>=<sp/>splash;</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*formerBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surface_width,<sp/>surface_height,<sp/>result_width,<sp/>result_height,<sp/>i;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeatX,<sp/>repeatY;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>matc[6];</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>m1;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm,<sp/>savedCTM[6];</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kx,<sp/>ky,<sp/>sx,<sp/>sy;</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/>GBool<sp/>retValue<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>bbox[2]<sp/>-<sp/>bbox[0];</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>bbox[3]<sp/>-<sp/>bbox[1];</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xStep<sp/>!=<sp/>width<sp/>||<sp/>yStep<sp/>!=<sp/>height)</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>savedCTM[i]<sp/>=<sp/>ctm[i];</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(1,<sp/>0,<sp/>0,<sp/>1,<sp/>bbox[0],<sp/>bbox[1]);</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(ctm[i]))<sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setCTM(savedCTM[0],<sp/>savedCTM[1],<sp/>savedCTM[2],<sp/>savedCTM[3],<sp/>savedCTM[4],<sp/>savedCTM[5]);</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/>matc[4]<sp/>=<sp/>x0<sp/>*<sp/>xStep<sp/>*<sp/>ctm[0]<sp/>+<sp/>y0<sp/>*<sp/>yStep<sp/>*<sp/>ctm[2]<sp/>+<sp/>ctm[4];</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/>matc[5]<sp/>=<sp/>x0<sp/>*<sp/>xStep<sp/>*<sp/>ctm[1]<sp/>+<sp/>y0<sp/>*<sp/>yStep<sp/>*<sp/>ctm[3]<sp/>+<sp/>ctm[5];</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAbs(ctm[1])<sp/>&gt;<sp/>splashAbs(ctm[0]))<sp/>{</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/>kx<sp/>=<sp/>-ctm[1];</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/>ky<sp/>=<sp/>ctm[2]<sp/>-<sp/>(ctm[0]<sp/>*<sp/>ctm[3])<sp/>/<sp/>ctm[1];</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>kx<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/>ky<sp/>=<sp/>ctm[3]<sp/>-<sp/>(ctm[1]<sp/>*<sp/>ctm[2])<sp/>/<sp/>ctm[0];</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/>result_width<sp/>=<sp/>(int)<sp/>ceil(fabs(kx<sp/>*<sp/>width<sp/>*<sp/>(x1<sp/>-<sp/>x0)));</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/>result_height<sp/>=<sp/>(int)<sp/>ceil(fabs(ky<sp/>*<sp/>height<sp/>*<sp/>(y1<sp/>-<sp/>y0)));</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/>kx<sp/>=<sp/>state-&gt;getHDPI()<sp/>/<sp/>72.0;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>ky<sp/>=<sp/>state-&gt;getVDPI()<sp/>/<sp/>72.0;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>m1.m[0]<sp/>=<sp/>(ptm[0]<sp/>==<sp/>0)<sp/>?<sp/>fabs(ptm[2])<sp/>*<sp/>kx<sp/>:<sp/>fabs(ptm[0])<sp/>*<sp/>kx;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>m1.m[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/>m1.m[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/>m1.m[3]<sp/>=<sp/>(ptm[3]<sp/>==<sp/>0)<sp/>?<sp/>fabs(ptm[1])<sp/>*<sp/>ky<sp/>:<sp/>fabs(ptm[3])<sp/>*<sp/>ky;</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/>m1.m[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>m1.m[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/>m1.transform(width,<sp/>height,<sp/>&amp;kx,<sp/>&amp;ky);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>surface_width<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(kx));</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>surface_height<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(ky));</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>sx<sp/>=<sp/>(double)<sp/>result_width<sp/>/<sp/>(surface_width<sp/>*<sp/>(x1<sp/>-<sp/>x0));</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/>sy<sp/>=<sp/>(double)<sp/>result_height<sp/>/<sp/>(surface_height<sp/>*<sp/>(y1<sp/>-<sp/>y0));</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>m1.m[0]<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>m1.m[3]<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/>m1.transform(width,<sp/>height,<sp/>&amp;kx,<sp/>&amp;ky);</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(kx)<sp/>&lt;<sp/>1<sp/>&amp;&amp;<sp/>fabs(ky)<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>kx<sp/>=<sp/>std::min&lt;double&gt;(kx,<sp/>ky);</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/>ky<sp/>=<sp/>2<sp/>/<sp/>kx;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.m[0]<sp/>*=<sp/>ky;</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.m[3]<sp/>*=<sp/>ky;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.transform(width,<sp/>height,<sp/>&amp;kx,<sp/>&amp;ky);</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>surface_width<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(kx));</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/>surface_height<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(ky));</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>repeatX<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/>repeatY<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>surface_width<sp/>*<sp/>surface_height<sp/>&gt;<sp/>0x800000L)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setCTM(savedCTM[0],<sp/>savedCTM[1],<sp/>savedCTM[2],<sp/>savedCTM[3],<sp/>savedCTM[4],<sp/>savedCTM[5]);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fabs(kx)<sp/>&gt;<sp/>16384<sp/>||<sp/>fabs(ky)<sp/>&gt;<sp/>16384)<sp/>{</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>limit<sp/>pattern<sp/>bitmap<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m1.m[0]<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m1.m[3]<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m1.transform(width,<sp/>height,<sp/>&amp;kx,<sp/>&amp;ky);</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>surface_width<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(kx));</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/>surface_height<sp/>=<sp/>(int)<sp/>ceil<sp/>(fabs(ky));</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>repeat<sp/>values<sp/>to<sp/>completely<sp/>fill<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>repeatX<sp/>=<sp/>result_width<sp/>/<sp/>surface_width;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>repeatY<sp/>=<sp/>result_height<sp/>/<sp/>surface_height;</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface_width<sp/>*<sp/>repeatX<sp/>&lt;<sp/>result_width)</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeatX++;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface_height<sp/>*<sp/>repeatY<sp/>&lt;<sp/>result_height)</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeatY++;</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>-<sp/>x0<sp/>&gt;<sp/>repeatX)</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeatX<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>-<sp/>y0<sp/>&gt;<sp/>repeatY)</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeatY<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>CTM<sp/>and<sp/>calculate<sp/>rotate<sp/>and<sp/>scale<sp/>with<sp/>rounded<sp/>matric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/>state-&gt;setCTM(savedCTM[0],<sp/>savedCTM[1],<sp/>savedCTM[2],<sp/>savedCTM[3],<sp/>savedCTM[4],<sp/>savedCTM[5]);</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(width<sp/>*<sp/>repeatX,<sp/>0,<sp/>0,<sp/>height<sp/>*<sp/>repeatY,<sp/>bbox[0],<sp/>bbox[1]);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>matc[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/>matc[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/>matc[2]<sp/>=<sp/>ctm[2];</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>matc[3]<sp/>=<sp/>ctm[3];</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface_width<sp/>==<sp/>0<sp/>||<sp/>surface_height<sp/>==<sp/>0<sp/>||<sp/>repeatX<sp/>*<sp/>repeatY<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setCTM(savedCTM[0],<sp/>savedCTM[1],<sp/>savedCTM[2],<sp/>savedCTM[3],<sp/>savedCTM[4],<sp/>savedCTM[5]);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/>m1.transform(bbox[0],<sp/>bbox[1],<sp/>&amp;kx,<sp/>&amp;ky);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/>m1.m[4]<sp/>=<sp/>-kx;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/>m1.m[5]<sp/>=<sp/>-ky;</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref>(surface_width,<sp/>surface_height,<sp/>1,</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(paintType<sp/>==<sp/>1)<sp/>?<sp/>colorMode<sp/>:<sp/>splashModeMono8,<sp/>gTrue);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitmap-&gt;getDataPtr()<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*tBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/>formerBitmap;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tBitmap;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setCTM(savedCTM[0],<sp/>savedCTM[1],<sp/>savedCTM[2],<sp/>savedCTM[3],<sp/>savedCTM[4],<sp/>savedCTM[5]);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash" kindref="compound">Splash</ref>(bitmap,<sp/>gTrue);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/>SplashColor<sp/>clearColor;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>clearColor[0]<sp/>=<sp/>(colorMode<sp/>==<sp/>splashModeCMYK8<sp/>||<sp/>colorMode<sp/>==<sp/>splashModeDeviceN8)<sp/>?<sp/>0x00<sp/>:<sp/>0xFF;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>clearColor[0]<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clear(clearColor,<sp/>0);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/>splash-&gt;clear(paperColor,<sp/>0);</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/>splash-&gt;setThinLineMode(formerSplash-&gt;getThinLineMode());</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/>splash-&gt;setMinLineWidth(globalParams-&gt;getMinLineWidth());</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];<sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];<sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>gfxA-&gt;getXRef());</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>pattern<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/>gfx-&gt;getState()-&gt;setCTM(m1.m[0],<sp/>m1.m[1],<sp/>m1.m[2],<sp/>m1.m[3],<sp/>m1.m[4],<sp/>m1.m[5]);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>updateCTM(gfx-&gt;getState(),<sp/>m1.m[0],<sp/>m1.m[1],<sp/>m1.m[2],<sp/>m1.m[3],<sp/>m1.m[4],<sp/>m1.m[5]);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/>gfx-&gt;display(str);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splash;</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>splash<sp/>=<sp/>formerSplash;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><ref refid="struct_tiling_splash_out_bitmap" kindref="compound">TilingSplashOutBitmap</ref><sp/>imgData;</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>imgData.bitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>imgData.paintType<sp/>=<sp/>paintType;</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>imgData.pattern<sp/>=<sp/>splash-&gt;getFillPattern();</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/>imgData.colorMode<sp/>=<sp/>colorMode;</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/>imgData.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/>imgData.repeatX<sp/>=<sp/>repeatX;</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/>imgData.repeatY<sp/>=<sp/>repeatY;</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*tBitmap<sp/>=<sp/>bitmap;</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/>bitmap<sp/>=<sp/>formerBitmap;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/>result_width<sp/>=<sp/>tBitmap-&gt;getWidth()<sp/>*<sp/>imgData.repeatX;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/>result_height<sp/>=<sp/>tBitmap-&gt;getHeight()<sp/>*<sp/>imgData.repeatY;</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splashAbs(matc[1])<sp/>&gt;<sp/>splashAbs(matc[0]))<sp/>{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/>kx<sp/>=<sp/>-matc[1];</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>ky<sp/>=<sp/>matc[2]<sp/>-<sp/>(matc[0]<sp/>*<sp/>matc[3])<sp/>/<sp/>matc[1];</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/>kx<sp/>=<sp/>matc[0];</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>ky<sp/>=<sp/>matc[3]<sp/>-<sp/>(matc[1]<sp/>*<sp/>matc[2])<sp/>/<sp/>matc[0];</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/>kx<sp/>=<sp/>result_width<sp/>/<sp/>(fabs(kx)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/>ky<sp/>=<sp/>result_height<sp/>/<sp/>(fabs(ky)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(kx,<sp/>0,<sp/>0,<sp/>ky,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/>matc[0]<sp/>=<sp/>ctm[0];</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/>matc[1]<sp/>=<sp/>ctm[1];</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/>matc[2]<sp/>=<sp/>ctm[2];</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/>matc[3]<sp/>=<sp/>ctm[3];</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/>GBool<sp/>minorAxisZero<sp/>=<sp/>matc[1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>matc[2]<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matc[0]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>minorAxisZero<sp/>&amp;&amp;<sp/>matc[3]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>tiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>imgData.repeatY;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>imgData.repeatX;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>splashFloor(matc[4])<sp/>+<sp/>x<sp/>*<sp/>tBitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>splashFloor(matc[5])<sp/>+<sp/>y<sp/>*<sp/>tBitmap-&gt;getHeight();</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splash-&gt;blitImage(tBitmap,<sp/>gTrue,<sp/>x0,<sp/>y0);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/>retValue<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>retValue<sp/>=<sp/>splash-&gt;drawImage(&amp;tilingBitmapSrc,<sp/>NULL,<sp/>&amp;imgData,<sp/>colorMode,<sp/>gTrue,<sp/>result_width,<sp/>result_height,<sp/>matc,<sp/>gFalse,<sp/>gTrue)<sp/>==<sp/>splashOk;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tBitmap;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retValue;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal">GBool<sp/>SplashOutputDev::gouraudTriangleShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading)</highlight></codeline>
<codeline lineno="4749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>GfxColorSpaceMode<sp/>shadingMode<sp/>=<sp/>shading-&gt;getColorSpace()-&gt;getMode();</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>GBool<sp/>bDirectColorTranslation<sp/>=<sp/>gFalse;<sp/></highlight><highlight class="comment">//<sp/>triggers<sp/>an<sp/>optimization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorMode)<sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeRGB8:</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bDirectColorTranslation<sp/>=<sp/>(shadingMode<sp/>==<sp/>csDeviceRGB);</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeCMYK8:</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>splashModeDeviceN8:</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bDirectColorTranslation<sp/>=<sp/>(shadingMode<sp/>==<sp/>csDeviceCMYK);</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><ref refid="class_splash_gouraud_color" kindref="compound">SplashGouraudColor</ref><sp/>*splashShading<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_gouraud_pattern" kindref="compound">SplashGouraudPattern</ref>(bDirectColorTranslation,<sp/>state,<sp/>shading,<sp/>colorMode);</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>vector<sp/>antialias<sp/>because<sp/>we<sp/>support<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;isParameterized())<sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>GBool<sp/>vaa<sp/>=<sp/>getVectorAntialias();</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/>GBool<sp/>retVal<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/>setVectorAntialias(gTrue);</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>splash-&gt;gouraudTriangleShadedFill(splashShading);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>setVectorAntialias(vaa);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splashShading;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal">GBool<sp/>SplashOutputDev::univariateShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_splash_univariate_pattern" kindref="compound">SplashUnivariatePattern</ref><sp/>*pattern,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/>GBool<sp/>vaa<sp/>=<sp/>getVectorAntialias();</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>vector<sp/>antialias<sp/>because<sp/>we<sp/>support<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/>setVectorAntialias(gTrue);</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/>GBool<sp/>retVal<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern-&gt;getShading()-&gt;getHasBBox())<sp/>{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern-&gt;getShading()-&gt;getBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>floor<sp/>(xMin);</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>floor<sp/>(yMin);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>ceil<sp/>(xMax);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>ceil<sp/>(yMax);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>ctm,<sp/>ictm;</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[4],<sp/>y[4];</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getCTM(&amp;ctm);</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctm.invertTo(&amp;ictm);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMin,<sp/>yMin,<sp/>&amp;x[0],<sp/>&amp;y[0]);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMax,<sp/>yMin,<sp/>&amp;x[1],<sp/>&amp;y[1]);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMin,<sp/>yMax,<sp/>&amp;x[2],<sp/>&amp;y[2]);</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMax,<sp/>yMax,<sp/>&amp;x[3],<sp/>&amp;y[3]);</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>std::min&lt;double&gt;(xMin,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>std::min&lt;double&gt;(yMin,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>std::max&lt;double&gt;(xMax,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>std::max&lt;double&gt;(yMax,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/>pattern-&gt;getShading()-&gt;getColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/>setOverprintMask(pattern-&gt;getShading()-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL);</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/>retVal<sp/>=<sp/>(splash-&gt;shadedFill(path,<sp/>pattern-&gt;getShading()-&gt;getHasBBox(),<sp/>pattern)<sp/>==<sp/>splashOk);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/>setVectorAntialias(vaa);</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal">GBool<sp/>SplashOutputDev::functionShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><ref refid="class_splash_function_pattern" kindref="compound">SplashFunctionPattern</ref><sp/>*pattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_function_pattern" kindref="compound">SplashFunctionPattern</ref>(colorMode,<sp/>state,<sp/>shading);</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/>GBool<sp/>vaa<sp/>=<sp/>getVectorAntialias();</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>vector<sp/>antialias<sp/>because<sp/>we<sp/>support<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/>setVectorAntialias(gTrue);</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/>GBool<sp/>retVal<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern-&gt;getShading()-&gt;getHasBBox())<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern-&gt;getShading()-&gt;getBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>floor<sp/>(xMin);</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>floor<sp/>(yMin);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>ceil<sp/>(xMax);</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>ceil<sp/>(yMax);</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>ctm,<sp/>ictm;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[4],<sp/>y[4];</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getCTM(&amp;ctm);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctm.invertTo(&amp;ictm);</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMin,<sp/>yMin,<sp/>&amp;x[0],<sp/>&amp;y[0]);</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMax,<sp/>yMin,<sp/>&amp;x[1],<sp/>&amp;y[1]);</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMin,<sp/>yMax,<sp/>&amp;x[2],<sp/>&amp;y[2]);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ictm.transform(xMax,<sp/>yMax,<sp/>&amp;x[3],<sp/>&amp;y[3]);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>std::min&lt;double&gt;(xMin,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>std::min&lt;double&gt;(yMin,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>std::max&lt;double&gt;(xMax,<sp/>x[i]);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>std::max&lt;double&gt;(yMax,<sp/>y[i]);</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>convertPath(state,<sp/>state-&gt;getPath(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/>pattern-&gt;getShading()-&gt;getColorSpace()-&gt;createMapping(bitmap-&gt;getSeparationList(),<sp/>SPOT_NCOMPS);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>setOverprintMask(pattern-&gt;getShading()-&gt;getColorSpace(),<sp/>state-&gt;getFillOverprint(),</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getOverprintMode(),<sp/>NULL);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>retVal<sp/>=<sp/>(splash-&gt;shadedFill(path,<sp/>pattern-&gt;getShading()-&gt;getHasBBox(),<sp/>pattern)<sp/>==<sp/>splashOk);</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/>setVectorAntialias(vaa);</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal">GBool<sp/>SplashOutputDev::axialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><ref refid="class_splash_axial_pattern" kindref="compound">SplashAxialPattern</ref><sp/>*pattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_axial_pattern" kindref="compound">SplashAxialPattern</ref>(colorMode,<sp/>state,<sp/>shading);</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/>GBool<sp/>retVal<sp/>=<sp/>univariateShadedFill(state,<sp/>pattern,<sp/>tMin,<sp/>tMax);</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"></highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"></highlight></codeline>
<codeline lineno="4919"><highlight class="normal">GBool<sp/>SplashOutputDev::radialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><ref refid="class_splash_radial_pattern" kindref="compound">SplashRadialPattern</ref><sp/>*pattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_radial_pattern" kindref="compound">SplashRadialPattern</ref>(colorMode,<sp/>state,<sp/>shading);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/>GBool<sp/>retVal<sp/>=<sp/>univariateShadedFill(state,<sp/>pattern,<sp/>tMin,<sp/>tMax);</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/SplashOutputDev.cc"/>
  </compounddef>
</doxygen>
