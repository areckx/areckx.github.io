<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_cairo_font_engine_8cc" kind="file" language="C++">
    <compoundname>CairoFontEngine.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_cairo_font_engine_8h" local="yes">CairoFontEngine.h</includes>
    <includes refid="_cairo_output_dev_8h" local="yes">CairoOutputDev.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_fo_fi_true_type_8h" local="no">fofi/FoFiTrueType.h</includes>
    <includes refid="_fo_fi_type1_c_8h" local="no">fofi/FoFiType1C.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <incdepgraph>
      <node id="85659">
        <label>TextOutputDev.h</label>
        <link refid="_text_output_dev_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85632" relation="include">
        </childnode>
        <childnode refid="85660" relation="include">
        </childnode>
        <childnode refid="85657" relation="include">
        </childnode>
      </node>
      <node id="85624">
        <label>thirdparty/poppler/poppler/CairoFontEngine.cc</label>
        <link refid="_cairo_font_engine_8cc"/>
        <childnode refid="85625" relation="include">
        </childnode>
        <childnode refid="85626" relation="include">
        </childnode>
        <childnode refid="85627" relation="include">
        </childnode>
        <childnode refid="85656" relation="include">
        </childnode>
        <childnode refid="85664" relation="include">
        </childnode>
        <childnode refid="85665" relation="include">
        </childnode>
        <childnode refid="85668" relation="include">
        </childnode>
        <childnode refid="85669" relation="include">
        </childnode>
        <childnode refid="85641" relation="include">
        </childnode>
        <childnode refid="85649" relation="include">
        </childnode>
        <childnode refid="85672" relation="include">
        </childnode>
        <childnode refid="85652" relation="include">
        </childnode>
      </node>
      <node id="85635">
        <label>stdarg.h</label>
      </node>
      <node id="85661">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85638" relation="include">
        </childnode>
      </node>
      <node id="85662">
        <label>assert.h</label>
      </node>
      <node id="85649">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85646" relation="include">
        </childnode>
        <childnode refid="85650" relation="include">
        </childnode>
      </node>
      <node id="85660">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85661" relation="include">
        </childnode>
        <childnode refid="85662" relation="include">
        </childnode>
        <childnode refid="85663" relation="include">
        </childnode>
      </node>
      <node id="85669">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85636" relation="include">
        </childnode>
        <childnode refid="85666" relation="include">
        </childnode>
        <childnode refid="85670" relation="include">
        </childnode>
        <childnode refid="85671" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
      </node>
      <node id="85632">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85633" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85647" relation="include">
        </childnode>
      </node>
      <node id="85636">
        <label>stdlib.h</label>
      </node>
      <node id="85639">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85628" relation="include">
        </childnode>
      </node>
      <node id="85648">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
        <childnode refid="85649" relation="include">
        </childnode>
        <childnode refid="85651" relation="include">
        </childnode>
        <childnode refid="85652" relation="include">
        </childnode>
        <childnode refid="85653" relation="include">
        </childnode>
        <childnode refid="85654" relation="include">
        </childnode>
        <childnode refid="85655" relation="include">
        </childnode>
        <childnode refid="85646" relation="include">
        </childnode>
      </node>
      <node id="85642">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
      </node>
      <node id="85651">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
        <childnode refid="85650" relation="include">
        </childnode>
      </node>
      <node id="85664">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="85662" relation="include">
        </childnode>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85647" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
      </node>
      <node id="85663">
        <label>map</label>
      </node>
      <node id="85641">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="85635" relation="include">
        </childnode>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85633" relation="include">
        </childnode>
      </node>
      <node id="85672">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85673" relation="include">
        </childnode>
        <childnode refid="85660" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85658" relation="include">
        </childnode>
        <childnode refid="85650" relation="include">
        </childnode>
      </node>
      <node id="85673">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
      </node>
      <node id="85645">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
      </node>
      <node id="85653">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="85637" relation="include">
        </childnode>
      </node>
      <node id="85666">
        <label>stddef.h</label>
      </node>
      <node id="85652">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
      </node>
      <node id="85634">
        <label>limits.h</label>
      </node>
      <node id="85631">
        <label>cairo-ft.h</label>
      </node>
      <node id="85628">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="85629" relation="include">
        </childnode>
      </node>
      <node id="85640">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="85646">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85643" relation="include">
        </childnode>
      </node>
      <node id="85644">
        <label>pthread.h</label>
      </node>
      <node id="85671">
        <label>sys/types.h</label>
      </node>
      <node id="85658">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="85637" relation="include">
        </childnode>
      </node>
      <node id="85667">
        <label>FoFiBase.h</label>
        <link refid="_fo_fi_base_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
      </node>
      <node id="85626">
        <label>string.h</label>
      </node>
      <node id="85633">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="85634" relation="include">
        </childnode>
        <childnode refid="85635" relation="include">
        </childnode>
        <childnode refid="85636" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
      </node>
      <node id="85654">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85653" relation="include">
        </childnode>
        <childnode refid="85638" relation="include">
        </childnode>
      </node>
      <node id="85637">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="85638" relation="include">
        </childnode>
        <childnode refid="85629" relation="include">
        </childnode>
        <childnode refid="85626" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85639" relation="include">
        </childnode>
        <childnode refid="85633" relation="include">
        </childnode>
        <childnode refid="85640" relation="include">
        </childnode>
        <childnode refid="85641" relation="include">
        </childnode>
        <childnode refid="85642" relation="include">
        </childnode>
        <childnode refid="85645" relation="include">
        </childnode>
        <childnode refid="85646" relation="include">
        </childnode>
      </node>
      <node id="85670">
        <label>unistd.h</label>
      </node>
      <node id="85650">
        <label>vector</label>
      </node>
      <node id="85665">
        <label>fofi/FoFiTrueType.h</label>
        <link refid="_fo_fi_true_type_8h_source"/>
        <childnode refid="85666" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85667" relation="include">
        </childnode>
      </node>
      <node id="85656">
        <label>CairoOutputDev.h</label>
        <link refid="_cairo_output_dev_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85631" relation="include">
        </childnode>
        <childnode refid="85657" relation="include">
        </childnode>
        <childnode refid="85659" relation="include">
        </childnode>
        <childnode refid="85660" relation="include">
        </childnode>
      </node>
      <node id="85657">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85647" relation="include">
        </childnode>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85658" relation="include">
        </childnode>
      </node>
      <node id="85668">
        <label>fofi/FoFiType1C.h</label>
        <link refid="_fo_fi_type1_c_8h_source"/>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85667" relation="include">
        </childnode>
      </node>
      <node id="85643">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="85644" relation="include">
        </childnode>
      </node>
      <node id="85647">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="85630">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
      </node>
      <node id="85638">
        <label>set</label>
      </node>
      <node id="85625">
        <label>config.h</label>
      </node>
      <node id="85655">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="85637" relation="include">
        </childnode>
        <childnode refid="85647" relation="include">
        </childnode>
      </node>
      <node id="85629">
        <label>stdio.h</label>
      </node>
      <node id="85627">
        <label>CairoFontEngine.h</label>
        <link refid="_cairo_font_engine_8h_source"/>
        <childnode refid="85628" relation="include">
        </childnode>
        <childnode refid="85630" relation="include">
        </childnode>
        <childnode refid="85631" relation="include">
        </childnode>
        <childnode refid="85632" relation="include">
        </childnode>
        <childnode refid="85648" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct__type3__font__info" prot="public">_type3_font_info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_cairo_font_engine_8cc_1a7fbb0250c2dc6b753c0f5b3331dabcd0" prot="public" static="no">
        <name>fontEngineLocker</name>
        <param></param>
        <initializer><ref refid="class_mutex_locker" kindref="compound">MutexLocker</ref> locker(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="64" column="11" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_cairo_font_engine_8cc_1a38c09c6f16527625ef5e9d220d78a35b" prot="public" static="no">
        <name>_ft_new_face</name>
        <initializer>_ft_new_face_uncached</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="379" column="10" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="379" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_cairo_font_engine_8cc_1affd0823feb19cbede85a2c06fd021085" prot="public" static="no">
        <type>struct <ref refid="struct__type3__font__info" kindref="compound">_type3_font_info</ref></type>
        <definition>typedef struct _type3_font_info  type3_font_info_t</definition>
        <argsstring></argsstring>
        <name>type3_font_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="617" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_cairo_font_engine_8cc_1a25b53587aa59f158a8963920f7e555e5" prot="public" static="yes" mutable="no">
        <type>cairo_user_data_key_t</type>
        <definition>cairo_user_data_key_t _ft_cairo_key</definition>
        <argsstring></argsstring>
        <name>_ft_cairo_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="164" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_cairo_font_engine_8cc_1a085016a4b870109690f400f3555a4649" prot="public" static="yes" mutable="no">
        <type>const cairo_user_data_key_t</type>
        <definition>const cairo_user_data_key_t type3_font_key</definition>
        <argsstring></argsstring>
        <name>type3_font_key</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="609" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="609" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_cairo_font_engine_8cc_1aecdc91bf57138c4a4b2b95f6078a526b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _ft_done_face_uncached</definition>
        <argsstring>(void *closure)</argsstring>
        <name>_ft_done_face_uncached</name>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="167" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_font_engine_8cc_1acaa38961de4a1b43f0f7257b7b1a3401" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool _ft_new_face_uncached</definition>
        <argsstring>(FT_Library lib, const char *filename, char *font_data, int font_data_len, FT_Face *face_out, cairo_font_face_t **font_face_out)</argsstring>
        <name>_ft_new_face_uncached</name>
        <param>
          <type><ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref></type>
          <declname>lib</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>font_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>font_data_len</declname>
        </param>
        <param>
          <type><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref> *</type>
          <declname>face_out</declname>
        </param>
        <param>
          <type>cairo_font_face_t **</type>
          <declname>font_face_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="174" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="174" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_font_engine_8cc_1a2f7e1c66fd00f394da740e0dbee84806" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _free_type3_font_info</definition>
        <argsstring>(void *closure)</argsstring>
        <name>_free_type3_font_info</name>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="620" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="620" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_font_engine_8cc_1a0d053339a9b5a9bd6dbaeae8bab5fd99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cairo_status_t</type>
        <definition>static cairo_status_t _init_type3_glyph</definition>
        <argsstring>(cairo_scaled_font_t *scaled_font, cairo_t *cr, cairo_font_extents_t *extents)</argsstring>
        <name>_init_type3_glyph</name>
        <param>
          <type>cairo_scaled_font_t *</type>
          <declname>scaled_font</declname>
        </param>
        <param>
          <type>cairo_t *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>cairo_font_extents_t *</type>
          <declname>extents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="629" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="629" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="_cairo_font_engine_8cc_1a5d1cc9df3220fb082e7edb7b40ae17dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cairo_status_t</type>
        <definition>static cairo_status_t _render_type3_glyph</definition>
        <argsstring>(cairo_scaled_font_t *scaled_font, unsigned long glyph, cairo_t *cr, cairo_text_extents_t *metrics)</argsstring>
        <name>_render_type3_glyph</name>
        <param>
          <type>cairo_scaled_font_t *</type>
          <declname>scaled_font</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>glyph</declname>
        </param>
        <param>
          <type>cairo_t *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>cairo_text_extents_t *</type>
          <declname>metrics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/CairoFontEngine.cc" line="652" column="1" bodyfile="thirdparty/poppler/poppler/CairoFontEngine.cc" bodystart="652" bodyend="728"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoFontEngine.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2004<sp/>Red<sp/>Hat,<sp/>Inc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005-2007<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2006<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Martin<sp/>Kretzschmar<sp/>&lt;martink@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2009,<sp/>2012,<sp/>2013,<sp/>2015<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2007,<sp/>2010,<sp/>2011<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2009<sp/>Chris<sp/>Wilson<sp/>&lt;chris@chris-wilson.co.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2012,<sp/>2014,<sp/>2016<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Darren<sp/>Kenny<sp/>&lt;darren.kenny@sun.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Suzuki<sp/>Toshiya<sp/>&lt;mpsuzuki@hiroshima-u.ac.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Jan<sp/>Kümmel<sp/>&lt;jan+freedesktop@snorc.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015,<sp/>2016<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CairoFontEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CairoOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fofi/FoFiTrueType.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fofi/FoFiType1C.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_FCNTL_H<sp/>&amp;&amp;<sp/>HAVE_SYS_MMAN_H<sp/>&amp;&amp;<sp/>HAVE_SYS_STAT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_CHECK_OPEN_FACES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>fontEngineLocker()<sp/><sp/><sp/>MutexLocker<sp/>locker(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>fontEngineLocker()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoFont</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">CairoFont::CairoFont(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face_t<sp/>*cairo_font_face,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>substitute,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>printing)<sp/>:<sp/>ref(ref),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face(cairo_font_face),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID(codeToGID),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen(codeToGIDLen),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute(substitute),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printing(printing)<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">CairoFont::~CairoFont()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>cairo_font_face_destroy<sp/>(cairo_font_face);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>gfree(codeToGID);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">GBool</highlight></codeline>
<codeline lineno="91"><highlight class="normal">CairoFont::matches(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>&amp;other,<sp/>GBool<sp/>printingA)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(other.num<sp/>==<sp/>ref.num<sp/>&amp;&amp;<sp/>other.gen<sp/>==<sp/>ref.gen);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">cairo_font_face_t<sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="normal">CairoFont::getFontFace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cairo_font_face;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">CairoFont::getGlyph(CharCode<sp/>code,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>FT_UInt<sp/>gid;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGID<sp/>&amp;&amp;<sp/>code<sp/>&lt;<sp/>codeToGIDLen)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)codeToGID[code];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>gid<sp/>=<sp/>(FT_UInt)code;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gid;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">CairoFont::getSubstitutionCorrection(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w1,<sp/>w2,<sp/>w3;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>CharCode<sp/>code;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>substituted<sp/>fonts:<sp/>adjust<sp/>the<sp/>font<sp/>matrix<sp/>--<sp/>compare<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>of<sp/>&apos;m&apos;<sp/>in<sp/>the<sp/>original<sp/>font<sp/>and<sp/>the<sp/>substituted<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSubstitute()<sp/>&amp;&amp;<sp/>!gfxFont-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>256;<sp/>++code)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((name<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCharName(code))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(code);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_t<sp/>m;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_init_identity(&amp;m);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_options_t<sp/>*options<sp/>=<sp/>cairo_font_options_create();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_options_set_hint_style(options,<sp/>CAIRO_HINT_STYLE_NONE);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_options_set_hint_metrics(options,<sp/>CAIRO_HINT_METRICS_OFF);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scaled_font_t<sp/>*scaled_font<sp/>=<sp/>cairo_scaled_font_create(cairo_font_face,<sp/>&amp;m,<sp/>&amp;m,<sp/>options);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_text_extents_t<sp/>extents;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scaled_font_text_extents(scaled_font,<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">,<sp/>&amp;extents);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_scaled_font_destroy(scaled_font);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_options_destroy(options);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>w2<sp/>=<sp/>extents.x_advance;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w3<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gfxFont-&gt;isSymbolic()<sp/>&amp;&amp;<sp/>w2<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>w1<sp/>&gt;<sp/>w3)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>real<sp/>font<sp/>is<sp/>substantially<sp/>narrower<sp/>than<sp/>substituted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>font,<sp/>reduce<sp/>the<sp/>font<sp/>size<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w1<sp/>&gt;<sp/>0.01<sp/>&amp;&amp;<sp/>w1<sp/>&lt;<sp/>0.9<sp/>*<sp/>w2)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>/=<sp/>w2;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoFreeTypeFont</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cairo_user_data_key_t<sp/>_ft_cairo_key;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">_ft_done_face_uncached<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*closure)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>face<sp/>=<sp/>(<ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref>)<sp/>closure;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>FT_Done_Face<sp/>(face);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool</highlight></codeline>
<codeline lineno="174"><highlight class="normal">_ft_new_face_uncached<sp/>(<ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>lib,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*font_data,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_data_len,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>*face_out,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face_t<sp/>**font_face_out)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>face;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>cairo_font_face_t<sp/>*font_face;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_New_Face<sp/>(lib,<sp/>filename,<sp/>0,<sp/>&amp;face))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_New_Memory_Face<sp/>(lib,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)font_data,<sp/>font_data_len,<sp/>0,<sp/>&amp;face))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>font_face<sp/>=<sp/>cairo_ft_font_face_create_for_ft_face<sp/>(face,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_LOAD_NO_HINTING<sp/>|</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_LOAD_NO_BITMAP);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_font_face_set_user_data<sp/>(font_face,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_ft_cairo_key,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ft_done_face_uncached))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>_ft_done_face_uncached<sp/>(face);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_face_destroy<sp/>(font_face);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>*face_out<sp/>=<sp/>face;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>*font_face_out<sp/>=<sp/>font_face;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_CHECK_OPEN_FACES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>*prev,<sp/>*next,<sp/>**head;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>lib;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>face;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>cairo_font_face_t<sp/>*font_face;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}<sp/>*_ft_open_faces;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">_djb_hash<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len--)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*bytes++;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>*=<sp/>33;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>c;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool</highlight></codeline>
<codeline lineno="237"><highlight class="normal">_ft_face_data_equal<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_ft_face_data<sp/>*a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_ft_face_data<sp/>*b)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;lib<sp/>!=<sp/>b-&gt;lib)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;size<sp/>!=<sp/>b-&gt;size)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;hash<sp/>!=<sp/>b-&gt;hash)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp<sp/>(a-&gt;bytes,<sp/>b-&gt;bytes,<sp/>a-&gt;size)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">_ft_done_face<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*closure)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>*data<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>*)<sp/>closure;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;next)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>data-&gt;next-&gt;prev<sp/>=<sp/>data-&gt;prev;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;prev)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>data-&gt;prev-&gt;next<sp/>=<sp/>data-&gt;next;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>_ft_open_faces<sp/>=<sp/>data-&gt;next;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;fd<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SUNPRO_CC)<sp/>&amp;&amp;<sp/>defined(__sun)<sp/>&amp;&amp;<sp/>defined(__SVR4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>munmap<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data-&gt;bytes,<sp/>data-&gt;size);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>munmap<sp/>(data-&gt;bytes,<sp/>data-&gt;size);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>close<sp/>(data-&gt;fd);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(data-&gt;bytes);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>FT_Done_Face<sp/>(data-&gt;face);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>gfree<sp/>(data);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GBool</highlight></codeline>
<codeline lineno="277"><highlight class="normal">_ft_new_face<sp/>(<ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>lib,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*font_data,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_data_len,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>*face_out,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face_t<sp/>**font_face_out)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>*l;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>tmpl;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>tmpl.fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>fail<sp/>to<sp/>mmap<sp/>the<sp/>file,<sp/>just<sp/>pass<sp/>it<sp/>to<sp/>FreeType<sp/>instead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpl.fd<sp/>=<sp/>open<sp/>(filename,<sp/>O_RDONLY);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpl.fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ft_new_face_uncached<sp/>(lib,<sp/>filename,<sp/>font_data,<sp/>font_data_len,<sp/>face_out,<sp/>font_face_out);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fstat<sp/>(tmpl.fd,<sp/>&amp;st)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(tmpl.fd);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ft_new_face_uncached<sp/>(lib,<sp/>filename,<sp/>font_data,<sp/>font_data_len,<sp/>face_out,<sp/>font_face_out);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpl.bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>mmap<sp/>(NULL,<sp/>st.st_size,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PROT_READ,<sp/>MAP_PRIVATE,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpl.fd,<sp/>0);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpl.bytes<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(tmpl.fd);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ft_new_face_uncached<sp/>(lib,<sp/>filename,<sp/>font_data,<sp/>font_data_len,<sp/>face_out,<sp/>font_face_out);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpl.size<sp/>=<sp/>st.st_size;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpl.bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>font_data;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpl.size<sp/>=<sp/>font_data_len;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>to<sp/>see<sp/>if<sp/>this<sp/>is<sp/>a<sp/>duplicate<sp/>of<sp/>any<sp/>of<sp/>the<sp/>currently<sp/>open<sp/>fonts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>tmpl.lib<sp/>=<sp/>lib;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>tmpl.hash<sp/>=<sp/>_djb_hash<sp/>(tmpl.bytes,<sp/>tmpl.size);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>_ft_open_faces;<sp/>l;<sp/>l<sp/>=<sp/>l-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_ft_face_data_equal<sp/>(l,<sp/>&amp;tmpl))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpl.fd<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SUNPRO_CC)<sp/>&amp;&amp;<sp/>defined(__sun)<sp/>&amp;&amp;<sp/>defined(__SVR4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>munmap<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)tmpl.bytes,<sp/>tmpl.size);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>munmap<sp/>(tmpl.bytes,<sp/>tmpl.size);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(tmpl.fd);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(tmpl.bytes);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*face_out<sp/>=<sp/>l-&gt;face;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*font_face_out<sp/>=<sp/>cairo_font_face_reference<sp/>(l-&gt;font_face);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>a<sp/>dup,<sp/>open<sp/>and<sp/>insert<sp/>into<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FT_New_Memory_Face<sp/>(lib,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FT_Byte<sp/>*)<sp/>tmpl.bytes,<sp/>tmpl.size,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>&amp;tmpl.face))</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpl.fd<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SUNPRO_CC)<sp/>&amp;&amp;<sp/>defined(__sun)<sp/>&amp;&amp;<sp/>defined(__SVR4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>munmap<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)tmpl.bytes,<sp/>tmpl.size);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>munmap<sp/>(tmpl.bytes,<sp/>tmpl.size);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(tmpl.fd);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ft_face_data<sp/>*)<sp/>gmallocn<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_ft_face_data));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>*l<sp/>=<sp/>tmpl;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>l-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>l-&gt;next<sp/>=<sp/>_ft_open_faces;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_ft_open_faces)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>_ft_open_faces-&gt;prev<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>_ft_open_faces<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>l-&gt;font_face<sp/>=<sp/>cairo_ft_font_face_create_for_ft_face<sp/>(tmpl.face,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_LOAD_NO_HINTING<sp/>|</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT_LOAD_NO_BITMAP);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cairo_font_face_set_user_data<sp/>(l-&gt;font_face,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_ft_cairo_key,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ft_done_face))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_face_destroy<sp/>(l-&gt;font_face);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>_ft_done_face<sp/>(l);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>*face_out<sp/>=<sp/>l-&gt;face;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>*font_face_out<sp/>=<sp/>l-&gt;font_face;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ft_new_face<sp/>_ft_new_face_uncached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">CairoFreeTypeFont::CairoFreeTypeFont(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face_t<sp/>*cairo_font_face,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>substitute)<sp/>:<sp/><ref refid="class_cairo_font" kindref="compound">CairoFont</ref>(ref,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">CairoFreeTypeFont::~CairoFreeTypeFont()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="class_cairo_free_type_font" kindref="compound">CairoFreeTypeFont</ref><sp/>*CairoFreeTypeFont::create(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>lib,<sp/>GBool<sp/>useCIDs)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>refObj,<sp/>strObj;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileNameC;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*font_data;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>font_data_len;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>GfxFontType<sp/>fontType;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font_loc" kindref="compound">GfxFontLoc</ref><sp/>*fontLoc;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**enc;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ff;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_type1_c" kindref="compound">FoFiType1C</ref><sp/>*ff1c;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="struct_f_t___face_rec__" kindref="compound">FT_Face</ref><sp/>face;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>cairo_font_face_t<sp/>*font_face;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>Guint<sp/>codeToGIDLen;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>codeToGIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>font_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>font_data_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>fileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>fileNameC<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>GBool<sp/>substitute<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>*gfxFont-&gt;getID();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>fontType<sp/>=<sp/>gfxFont-&gt;getType();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontLoc<sp/>=<sp/>gfxFont-&gt;locateFont(xref,<sp/>NULL)))<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>font<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxFont-&gt;getName()<sp/>?<sp/>gfxFont-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>embedded<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontLoc-&gt;locType<sp/>==<sp/>gfxFontLocEmbedded)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>font_data<sp/>=<sp/>gfxFont-&gt;readEmbFontFile(xref,<sp/>&amp;font_data_len);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>font_data)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>external<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>gfxFontLocExternal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>fontLoc-&gt;path;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>fontType<sp/>=<sp/>fontLoc-&gt;fontType;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>substitute<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNameC<sp/>=<sp/>fileName-&gt;getCString();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fontType)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1C:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1COT:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>_ft_new_face<sp/>(lib,<sp/>fileNameC,<sp/>font_data,<sp/>font_data_len,<sp/>&amp;face,<sp/>&amp;font_face))<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>create<sp/>type1<sp/>face&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>enc<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getEncoding();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(256,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((name<sp/>=<sp/>enc[i]))<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>FT_Get_Name_Index(face,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)name);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGID[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>GfxFont::getAlternateName(name);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>FT_Get_Name_Index(face,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)name);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2OT:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID())<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGIDLen();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(codeToGID,<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::make(font_data,<sp/>font_data_len);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::load(fileNameC);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ff)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCodeToGIDMap(ff,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueType:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueTypeOT:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::make(font_data,<sp/>font_data_len);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::load(fileNameC);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ff)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>load<sp/>truetype<sp/>font\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>might<sp/>be<sp/>set<sp/>already<sp/>for<sp/>the<sp/>CIDType2<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontType<sp/>==<sp/>fontTrueType<sp/>||<sp/>fontType<sp/>==<sp/>fontTrueTypeOT)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCodeToGIDMap(ff);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>_ft_new_face<sp/>(lib,<sp/>fileNameC,<sp/>font_data,<sp/>font_data_len,<sp/>&amp;face,<sp/>&amp;font_face))<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>create<sp/>truetype<sp/>face\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0C:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useCIDs)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ff1c<sp/>=<sp/>FoFiType1C::make(font_data,<sp/>font_data_len);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ff1c<sp/>=<sp/>FoFiType1C::load(fileNameC);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff1c)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>ff1c-&gt;getCIDToGIDMap((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;codeToGIDLen);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff1c;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>_ft_new_face<sp/>(lib,<sp/>fileNameC,<sp/>font_data,<sp/>font_data_len,<sp/>&amp;face,<sp/>&amp;font_face))<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>create<sp/>cid<sp/>face\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0COT:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID())<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGIDLen();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(codeToGID,<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)gfxFont)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codeToGID)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useCIDs)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::make(font_data,<sp/>font_data_len);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>FoFiTrueType::load(fileNameC);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ff-&gt;isOpenTypeCFF())<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>ff-&gt;getCIDToGIDMap((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;codeToGIDLen);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ff;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>_ft_new_face<sp/>(lib,<sp/>fileNameC,<sp/>font_data,<sp/>font_data_len,<sp/>&amp;face,<sp/>&amp;font_face))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>create<sp/>cid<sp/>(OT)<sp/>face\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;font<sp/>type<sp/>%d<sp/>not<sp/>handled\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)fontType);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_free_type_font" kindref="compound">CairoFreeTypeFont</ref>(ref,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font_face,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>hmm?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>gfree<sp/>(codeToGID);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>gfree<sp/>(font_data);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>font<sp/>thing<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoType3Font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cairo_user_data_key_t<sp/>type3_font_key<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="struct__type3__font__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__type3__font__info" kindref="compound">_type3_font_info</ref><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_font_engine" kindref="compound">CairoFontEngine</ref><sp/>*fontEngine;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>GBool<sp/>printing;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}<sp/><ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">_free_type3_font_info(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*closure)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*info<sp/>=<sp/>(<ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*)<sp/>closure;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>info-&gt;font-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>free<sp/>(info);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cairo_status_t</highlight></codeline>
<codeline lineno="629"><highlight class="normal">_init_type3_glyph<sp/>(cairo_scaled_font_t<sp/><sp/>*scaled_font,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cr,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_extents_t<sp/>*extents)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*info;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>info<sp/>=<sp/>(<ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_face_get_user_data<sp/>(cairo_scaled_font_get_font_face<sp/>(scaled_font),</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;type3_font_key);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>font<sp/>=<sp/>info-&gt;font;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>font-&gt;getFontBBox();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>extents-&gt;ascent<sp/>=<sp/>mat[3];<sp/></highlight><highlight class="comment">/*<sp/>y2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>extents-&gt;descent<sp/>=<sp/>-mat[3];<sp/></highlight><highlight class="comment">/*<sp/>-y1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>extents-&gt;height<sp/>=<sp/>extents-&gt;ascent<sp/>+<sp/>extents-&gt;descent;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>extents-&gt;max_x_advance<sp/>=<sp/>mat[2]<sp/>-<sp/>mat[1];<sp/></highlight><highlight class="comment">/*<sp/>x2<sp/>-<sp/>x1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>extents-&gt;max_y_advance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cairo_status_t</highlight></codeline>
<codeline lineno="652"><highlight class="normal">_render_type3_glyph<sp/>(cairo_scaled_font_t<sp/><sp/>*scaled_font,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cr,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_text_extents_t<sp/>*metrics)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*charProcs;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>charProc;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_output_dev" kindref="compound">CairoOutputDev</ref><sp/>*output_dev;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>cairo_matrix_t<sp/>matrix,<sp/>invert_y_axis;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/>wy;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*info;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>info<sp/>=<sp/>(<ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_font_face_get_user_data<sp/>(cairo_scaled_font_get_font_face<sp/>(scaled_font),</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;type3_font_key);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>font<sp/>=<sp/>info-&gt;font;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>resDict<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getResources();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>charProcs<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)(info-&gt;font))-&gt;getCharProcs();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!charProcs)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_STATUS_USER_FONT_ERROR;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)glyph<sp/>&gt;=<sp/>charProcs-&gt;getLength())</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_STATUS_USER_FONT_ERROR;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>font-&gt;getFontMatrix();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>matrix.xx<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>matrix.yx<sp/>=<sp/>mat[1];</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>matrix.xy<sp/>=<sp/>mat[2];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>matrix.yy<sp/>=<sp/>mat[3];</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>matrix.x0<sp/>=<sp/>mat[4];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>matrix.y0<sp/>=<sp/>mat[5];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>cairo_matrix_init_scale<sp/>(&amp;invert_y_axis,<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>cairo_matrix_multiply<sp/>(&amp;matrix,<sp/>&amp;matrix,<sp/>&amp;invert_y_axis);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>cairo_transform<sp/>(cr,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>output_dev<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_output_dev" kindref="compound">CairoOutputDev</ref>();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>output_dev-&gt;setCairo(cr);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>output_dev-&gt;setPrinting(info-&gt;printing);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>font-&gt;getFontBBox();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>box.y1<sp/>=<sp/>mat[1];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>mat[2];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>box.y2<sp/>=<sp/>mat[3];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(info-&gt;doc,<sp/>output_dev,<sp/>resDict,<sp/>&amp;box,<sp/>NULL);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>output_dev-&gt;startDoc(info-&gt;doc,<sp/>info-&gt;fontEngine);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>output_dev-&gt;startPage<sp/>(1,<sp/>gfx-&gt;getState(),<sp/>gfx-&gt;getXRef());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>output_dev-&gt;setInType3Char(gTrue);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>gfx-&gt;display(charProcs-&gt;getVal(glyph,<sp/>&amp;charProc));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>output_dev-&gt;getType3GlyphWidth<sp/>(&amp;wx,<sp/>&amp;wy);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>cairo_matrix_transform_distance<sp/>(&amp;matrix,<sp/>&amp;wx,<sp/>&amp;wy);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>metrics-&gt;x_advance<sp/>=<sp/>wx;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>metrics-&gt;y_advance<sp/>=<sp/>wy;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_dev-&gt;hasType3GlyphBBox())<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox<sp/>=<sp/>output_dev-&gt;getType3GlyphBBox();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_transform_point<sp/>(&amp;matrix,<sp/>&amp;bbox[0],<sp/>&amp;bbox[1]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>cairo_matrix_transform_point<sp/>(&amp;matrix,<sp/>&amp;bbox[2],<sp/>&amp;bbox[3]);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics-&gt;x_bearing<sp/>=<sp/>bbox[0];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics-&gt;y_bearing<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics-&gt;width<sp/>=<sp/>bbox[2]<sp/>-<sp/>bbox[0];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics-&gt;height<sp/>=<sp/>bbox[3]<sp/>-<sp/>bbox[1];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>output_dev;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>charProc.free();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CAIRO_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><ref refid="class_cairo_type3_font" kindref="compound">CairoType3Font</ref><sp/>*CairoType3Font::create(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont,<sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cairo_font_engine" kindref="compound">CairoFontEngine</ref><sp/>*fontEngine,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>printing,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>refObj,<sp/>strObj;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*info;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>cairo_font_face_t<sp/>*font_face;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>Guint<sp/>codeToGIDLen;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**enc;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*charProcs;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>charProcs<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCharProcs();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>info<sp/>=<sp/>(<ref refid="struct__type3__font__info" kindref="compound">type3_font_info_t</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*info));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>*gfxFont-&gt;getID();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>font_face<sp/>=<sp/>cairo_user_font_face_create();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>cairo_user_font_face_set_init_func<sp/>(font_face,<sp/>_init_type3_glyph);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>cairo_user_font_face_set_render_glyph_func<sp/>(font_face,<sp/>_render_type3_glyph);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>gfxFont-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>info-&gt;font<sp/>=<sp/>gfxFont;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>info-&gt;doc<sp/>=<sp/>doc;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>info-&gt;fontEngine<sp/>=<sp/>fontEngine;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>info-&gt;printing<sp/>=<sp/>printing;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>info-&gt;xref<sp/>=<sp/>xref;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>cairo_font_face_set_user_data<sp/>(font_face,<sp/>&amp;type3_font_key,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>info,<sp/>_free_type3_font_info);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>enc<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getEncoding();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(256,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>codeToGIDLen<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charProcs<sp/>&amp;&amp;<sp/>(name<sp/>=<sp/>enc[i]))<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>charProcs-&gt;getLength();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/>charProcs-&gt;getKey(j))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID[i]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cairo_type3_font" kindref="compound">CairoType3Font</ref>(ref,<sp/>doc,<sp/>font_face,<sp/>codeToGID,<sp/>codeToGIDLen,<sp/>printing,<sp/>xref);</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">CairoType3Font::CairoType3Font(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face_t<sp/>*cairo_font_face,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guint<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>printing,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)<sp/>:<sp/><ref refid="class_cairo_font" kindref="compound">CairoFont</ref>(ref,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cairo_font_face,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printing),</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc(doc)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">CairoType3Font::~CairoType3Font()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">GBool</highlight></codeline>
<codeline lineno="793"><highlight class="normal">CairoType3Font::matches(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>&amp;other,<sp/>GBool<sp/>printingA)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(other.num<sp/>==<sp/>ref.num<sp/>&amp;&amp;<sp/>other.gen<sp/>==<sp/>ref.gen<sp/>&amp;&amp;<sp/>printing<sp/>==<sp/>printingA);</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CairoFontEngine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">CairoFontEngine::CairoFontEngine(<ref refid="struct_f_t___library_rec__" kindref="compound">FT_Library</ref><sp/>libA)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>lib<sp/>=<sp/>libA;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cairoFontCacheSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>fontCache[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>FT_Int<sp/>major,<sp/>minor,<sp/>patch;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>of<sp/>FT<sp/>2.1.8,<sp/>CID<sp/>fonts<sp/>are<sp/>indexed<sp/>by<sp/>CID<sp/>instead<sp/>of<sp/>GID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>FT_Library_Version(lib,<sp/>&amp;major,<sp/>&amp;minor,<sp/>&amp;patch);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>useCIDs<sp/>=<sp/>major<sp/>&gt;<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(major<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(minor<sp/>&gt;<sp/>1<sp/>||<sp/>(minor<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>patch<sp/>&gt;<sp/>7)));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">CairoFontEngine::~CairoFontEngine()<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cairoFontCacheSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontCache[i])</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontCache[i];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><ref refid="class_cairo_font" kindref="compound">CairoFont</ref><sp/>*</highlight></codeline>
<codeline lineno="833"><highlight class="normal">CairoFontEngine::getFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont,<sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,<sp/>GBool<sp/>printing,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><ref refid="class_cairo_font" kindref="compound">CairoFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>GfxFontType<sp/>fontType;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>fontEngineLocker();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>*gfxFont-&gt;getID();</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cairoFontCacheSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>font<sp/>=<sp/>fontCache[i];</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font<sp/>&amp;&amp;<sp/>font-&gt;matches(ref,<sp/>printing))<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>fontCache[j]<sp/>=<sp/>fontCache[j-1];</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontCache[0]<sp/>=<sp/>font;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>fontType<sp/>=<sp/>gfxFont-&gt;getType();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontType<sp/>==<sp/>fontType3)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>font<sp/>=<sp/>CairoType3Font::create<sp/>(gfxFont,<sp/>doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>printing,<sp/>xref);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>font<sp/>=<sp/>CairoFreeTypeFont::create<sp/>(gfxFont,<sp/>xref,<sp/>lib,<sp/>useCIDs);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//XXX:<sp/>if<sp/>font<sp/>is<sp/>null<sp/>should<sp/>we<sp/>still<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>cache?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontCache[cairoFontCacheSize<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontCache[cairoFontCacheSize<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>cairoFontCacheSize<sp/>-<sp/>1;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>fontCache[j]<sp/>=<sp/>fontCache[j-1];</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>fontCache[0]<sp/>=<sp/>font;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/CairoFontEngine.cc"/>
  </compounddef>
</doxygen>
