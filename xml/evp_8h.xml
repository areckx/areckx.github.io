<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="evp_8h" kind="file" language="C++">
    <compoundname>evp.h</compoundname>
    <includes refid="opensslconf_8h" local="no">openssl/opensslconf.h</includes>
    <includes refid="ossl__typ_8h" local="no">openssl/ossl_typ.h</includes>
    <includes refid="symhacks_8h" local="no">openssl/symhacks.h</includes>
    <includes refid="bio_8h" local="no">openssl/bio.h</includes>
    <includes refid="objects_8h" local="no">openssl/objects.h</includes>
    <includedby refid="kqoauthutils_8cpp" local="no">thirdparty/kQOAuth/kqoauthutils.cpp</includedby>
    <includedby refid="cmac_8h" local="no">thirdparty/openssl/include/openssl/cmac.h</includedby>
    <includedby refid="hmac_8h" local="no">thirdparty/openssl/include/openssl/hmac.h</includedby>
    <includedby refid="pem_8h" local="no">thirdparty/openssl/include/openssl/pem.h</includedby>
    <includedby refid="ssl3_8h" local="no">thirdparty/openssl/include/openssl/ssl3.h</includedby>
    <includedby refid="ts_8h" local="no">thirdparty/openssl/include/openssl/ts.h</includedby>
    <includedby refid="x509_8h" local="no">thirdparty/openssl/include/openssl/x509.h</includedby>
    <incdepgraph>
      <node id="82850">
        <label>stdarg.h</label>
      </node>
      <node id="82855">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82856">
        <label>stdint.h</label>
      </node>
      <node id="82852">
        <label>stdlib.h</label>
      </node>
      <node id="82848">
        <label>openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="82846" relation="include">
        </childnode>
        <childnode refid="82849" relation="include">
        </childnode>
        <childnode refid="82850" relation="include">
        </childnode>
        <childnode refid="82851" relation="include">
        </childnode>
        <childnode refid="82856" relation="include">
        </childnode>
      </node>
      <node id="82853">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82861">
        <label>openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="82846" relation="include">
        </childnode>
        <childnode refid="82849" relation="include">
        </childnode>
        <childnode refid="82845" relation="include">
        </childnode>
        <childnode refid="82851" relation="include">
        </childnode>
      </node>
      <node id="82858">
        <label>openssl/obj_mac.h</label>
        <link refid="obj__mac_8h_source"/>
      </node>
      <node id="82847">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82846" relation="include">
        </childnode>
      </node>
      <node id="82859">
        <label>openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="82860" relation="include">
        </childnode>
        <childnode refid="82846" relation="include">
        </childnode>
        <childnode refid="82848" relation="include">
        </childnode>
        <childnode refid="82853" relation="include">
        </childnode>
        <childnode refid="82854" relation="include">
        </childnode>
        <childnode refid="82847" relation="include">
        </childnode>
        <childnode refid="82845" relation="include">
        </childnode>
        <childnode refid="82861" relation="include">
        </childnode>
      </node>
      <node id="82854">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82853" relation="include">
        </childnode>
      </node>
      <node id="82843">
        <label>thirdparty/openssl/include/openssl/evp.h</label>
        <link refid="evp_8h"/>
        <childnode refid="82844" relation="include">
        </childnode>
        <childnode refid="82845" relation="include">
        </childnode>
        <childnode refid="82847" relation="include">
        </childnode>
        <childnode refid="82848" relation="include">
        </childnode>
        <childnode refid="82857" relation="include">
        </childnode>
      </node>
      <node id="82860">
        <label>time.h</label>
      </node>
      <node id="82857">
        <label>openssl/objects.h</label>
        <link refid="objects_8h_source"/>
        <childnode refid="82858" relation="include">
        </childnode>
        <childnode refid="82848" relation="include">
        </childnode>
        <childnode refid="82859" relation="include">
        </childnode>
      </node>
      <node id="82844">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82846">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82844" relation="include">
        </childnode>
      </node>
      <node id="82849">
        <label>stdio.h</label>
      </node>
      <node id="82845">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82846" relation="include">
        </childnode>
      </node>
      <node id="82851">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="82852" relation="include">
        </childnode>
        <childnode refid="82846" relation="include">
        </childnode>
        <childnode refid="82849" relation="include">
        </childnode>
        <childnode refid="82853" relation="include">
        </childnode>
        <childnode refid="82854" relation="include">
        </childnode>
        <childnode refid="82855" relation="include">
        </childnode>
        <childnode refid="82845" relation="include">
        </childnode>
        <childnode refid="82847" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82874">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82869">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82865">
        <label>thirdparty/openssl/include/openssl/hmac.h</label>
        <link refid="hmac_8h_source"/>
        <childnode refid="82866" relation="include">
        </childnode>
      </node>
      <node id="82872">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82873" relation="include">
        </childnode>
      </node>
      <node id="82864">
        <label>thirdparty/openssl/include/openssl/cmac.h</label>
        <link refid="cmac_8h_source"/>
      </node>
      <node id="82863">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82867">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82866" relation="include">
        </childnode>
      </node>
      <node id="82870">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82871" relation="include">
        </childnode>
        <childnode refid="82874" relation="include">
        </childnode>
        <childnode refid="82875" relation="include">
        </childnode>
        <childnode refid="82868" relation="include">
        </childnode>
        <childnode refid="82876" relation="include">
        </childnode>
        <childnode refid="82866" relation="include">
        </childnode>
        <childnode refid="82869" relation="include">
        </childnode>
        <childnode refid="82877" relation="include">
        </childnode>
        <childnode refid="82878" relation="include">
        </childnode>
      </node>
      <node id="82877">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82870" relation="include">
        </childnode>
      </node>
      <node id="82862">
        <label>thirdparty/openssl/include/openssl/evp.h</label>
        <link refid="evp_8h"/>
        <childnode refid="82863" relation="include">
        </childnode>
        <childnode refid="82864" relation="include">
        </childnode>
        <childnode refid="82865" relation="include">
        </childnode>
        <childnode refid="82868" relation="include">
        </childnode>
        <childnode refid="82867" relation="include">
        </childnode>
        <childnode refid="82869" relation="include">
        </childnode>
        <childnode refid="82870" relation="include">
        </childnode>
      </node>
      <node id="82868">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82863" relation="include">
        </childnode>
        <childnode refid="82866" relation="include">
        </childnode>
      </node>
      <node id="82871">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82872" relation="include">
        </childnode>
      </node>
      <node id="82866">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82863" relation="include">
        </childnode>
        <childnode refid="82867" relation="include">
        </childnode>
      </node>
      <node id="82873">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82878">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82875" relation="include">
        </childnode>
        <childnode refid="82869" relation="include">
        </childnode>
      </node>
      <node id="82876">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82875">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structevp__pkey__st" prot="public">evp_pkey_st</innerclass>
    <innerclass refid="structenv__md__st" prot="public">env_md_st</innerclass>
    <innerclass refid="structenv__md__ctx__st" prot="public">env_md_ctx_st</innerclass>
    <innerclass refid="structevp__cipher__st" prot="public">evp_cipher_st</innerclass>
    <innerclass refid="structevp__cipher__info__st" prot="public">evp_cipher_info_st</innerclass>
    <innerclass refid="structevp__cipher__ctx__st" prot="public">evp_cipher_ctx_st</innerclass>
    <innerclass refid="structevp___encode___ctx__st" prot="public">evp_Encode_Ctx_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="evp_8h_1a13e7ea64316ecba389c1a8cd5f45075e" prot="public" static="no">
        <name>OPENSSL_ALGORITHM_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="65" column="11" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a71bfc78a168f00f0c4ffd2535082b129" prot="public" static="no">
        <name>EVP_MAX_MD_SIZE</name>
        <initializer>64	/* longest known is SHA512 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="85" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9646a5fcb0387590176a8bdf6d529685" prot="public" static="no">
        <name>EVP_MAX_KEY_LENGTH</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="86" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a80893bc2dbae769441bf6a042cf4069e" prot="public" static="no">
        <name>EVP_MAX_IV_LENGTH</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="87" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a64ccdeff3fee6041507240b227ef3646" prot="public" static="no">
        <name>EVP_MAX_BLOCK_LENGTH</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="88" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adca41fdefb3897cc5cf3289b5666c1f6" prot="public" static="no">
        <name>PKCS5_SALT_LEN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="90" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a57009aedd19f12c28c40f71d8703babf" prot="public" static="no">
        <name>PKCS5_DEFAULT_ITER</name>
        <initializer>2048</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="92" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6d0d019cca67fd5c168a08e24d800ed0" prot="public" static="no">
        <name>EVP_PK_RSA</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="96" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af3f666bb3190efea2b283bc238b8fcb3" prot="public" static="no">
        <name>EVP_PK_DSA</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="97" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae7688a9bef44dc6980db92ca97d7df27" prot="public" static="no">
        <name>EVP_PK_DH</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="98" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aea4a328189717b2a9341af1b951caeee" prot="public" static="no">
        <name>EVP_PK_EC</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="99" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac5932ad25e687d5ab84a8f892b9ede65" prot="public" static="no">
        <name>EVP_PKT_SIGN</name>
        <initializer>0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="100" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5de6acac2e8e935dddd18d49ef25d528" prot="public" static="no">
        <name>EVP_PKT_ENC</name>
        <initializer>0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="101" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a301d7cb5a044238a1fa626ff7483a7d1" prot="public" static="no">
        <name>EVP_PKT_EXCH</name>
        <initializer>0x0040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="102" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0513c3d33d84d38ddebb7f2fe84bfb40" prot="public" static="no">
        <name>EVP_PKS_RSA</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="103" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9bc2cffc8774b792c15808addca5927b" prot="public" static="no">
        <name>EVP_PKS_DSA</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="104" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac9d26e66d906f0e22b60dc942c4ca8d2" prot="public" static="no">
        <name>EVP_PKS_EC</name>
        <initializer>0x0400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="105" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a534d2a6db1a84c5fa01d853ed2b8d077" prot="public" static="no">
        <name>EVP_PKT_EXP</name>
        <initializer>0x1000 /* &lt;= 512 bit key */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="106" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae15da9724bf9a74479018237aa4cfabc" prot="public" static="no">
        <name>EVP_PKEY_NONE</name>
        <initializer>NID_undef</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="108" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8400e761b7679c04724232a9b8ffa8f4" prot="public" static="no">
        <name>EVP_PKEY_RSA</name>
        <initializer>NID_rsaEncryption</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="109" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a388465891782d4e3cc8e5d9ea6c56df5" prot="public" static="no">
        <name>EVP_PKEY_RSA2</name>
        <initializer>NID_rsa</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="110" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1a34baaccae668984df523c8e0c2cf27" prot="public" static="no">
        <name>EVP_PKEY_DSA</name>
        <initializer>NID_dsa</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="111" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2cb520411d500a41a50a3f4ab03c3215" prot="public" static="no">
        <name>EVP_PKEY_DSA1</name>
        <initializer>NID_dsa_2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="112" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae73cc6ca5ed4dd914dfd43b0f0e69f78" prot="public" static="no">
        <name>EVP_PKEY_DSA2</name>
        <initializer>NID_dsaWithSHA</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="113" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aec43f3099dda4930765587852f672798" prot="public" static="no">
        <name>EVP_PKEY_DSA3</name>
        <initializer>NID_dsaWithSHA1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="114" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac4429804c539820271ca1b027760c271" prot="public" static="no">
        <name>EVP_PKEY_DSA4</name>
        <initializer>NID_dsaWithSHA1_2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="115" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a448e7098be1d69039d6d0ccb450e2b51" prot="public" static="no">
        <name>EVP_PKEY_DH</name>
        <initializer>NID_dhKeyAgreement</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="116" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a15a2d408cfb825ffd31940fb39c70fd9" prot="public" static="no">
        <name>EVP_PKEY_EC</name>
        <initializer>NID_X9_62_id_ecPublicKey</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="117" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1188dedc36c17a2c7bdda553b58962ad" prot="public" static="no">
        <name>EVP_PKEY_HMAC</name>
        <initializer>NID_hmac</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="118" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4282648f06e18d6894916e298b06fc5f" prot="public" static="no">
        <name>EVP_PKEY_CMAC</name>
        <initializer>NID_cmac</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="119" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0c28282d88026ab2238a2e0f669aec25" prot="public" static="no">
        <name>EVP_PKEY_MO_SIGN</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="154" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8580eda6529059064c6c043fccd52e0a" prot="public" static="no">
        <name>EVP_PKEY_MO_VERIFY</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="155" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1abe04a9128eda9529af33baf8dbdad5dc" prot="public" static="no">
        <name>EVP_PKEY_MO_ENCRYPT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="156" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6306d9b773c731dcb9405593b4c10df7" prot="public" static="no">
        <name>EVP_PKEY_MO_DECRYPT</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="157" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1337941dedbe891cf092407a74866efe" prot="public" static="no">
        <name>EVP_MD_FLAG_ONESHOT</name>
        <initializer>0x0001 /* digest can only handle a single
					* block */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="193" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae40aec26e1a0e61a081bc56d8408bce3" prot="public" static="no">
        <name>EVP_MD_FLAG_PKEY_DIGEST</name>
        <initializer>0x0002 /* digest is a &quot;clone&quot; digest used
					* which is a copy of an existing
					* one for a specific public key type.
					* EVP_dss1() etc */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="198" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0399aaa93d1478a96645c5a1e569dcef" prot="public" static="no">
        <name>EVP_MD_FLAG_PKEY_METHOD_SIGNATURE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="202" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae9c2419ac9d37ac0054917c9ea04c132" prot="public" static="no">
        <name>EVP_MD_FLAG_DIGALGID_MASK</name>
        <initializer>0x0018</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="206" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad689f16a7eddd248b5ecc4a5046d3cf8" prot="public" static="no">
        <name>EVP_MD_FLAG_DIGALGID_NULL</name>
        <initializer>0x0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="210" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a24ab20dcb259a57218438e80234976e9" prot="public" static="no">
        <name>EVP_MD_FLAG_DIGALGID_ABSENT</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="214" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a19eaf5dc9c7608f43d4a34d9808d4d1a" prot="public" static="no">
        <name>EVP_MD_FLAG_DIGALGID_CUSTOM</name>
        <initializer>0x0018</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="218" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0246ba4fab45541c83c7c5deceff58ed" prot="public" static="no">
        <name>EVP_MD_FLAG_FIPS</name>
        <initializer>0x0400 /* Note if suitable for use in FIPS mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="220" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab36c39330523842cb99a08ff31447af8" prot="public" static="no">
        <name>EVP_MD_CTRL_DIGALGID</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="224" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1a1bf5a10f471ad64f9da18f880ffca8" prot="public" static="no">
        <name>EVP_MD_CTRL_MICALG</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="225" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af6681789815cb14446809284db9fafb2" prot="public" static="no">
        <name>EVP_MD_CTRL_ALG_CTRL</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="229" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af9e6ec8e14902073218df897100db27c" prot="public" static="no">
        <name>EVP_PKEY_NULL_method</name>
        <initializer>NULL,NULL,{0,0,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="231" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afc0ab8e70f64e2a81ab94c6217beaeae" prot="public" static="no">
        <name>EVP_PKEY_DSA_method</name>
        <initializer>(evp_sign_method *)DSA_sign, \
				(evp_verify_method *)DSA_verify, \
				{EVP_PKEY_DSA,EVP_PKEY_DSA2,EVP_PKEY_DSA3, \
					EVP_PKEY_DSA4,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="234" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1c06b17b90a725c5554edc9ceb9d8eb4" prot="public" static="no">
        <name>EVP_PKEY_ECDSA_method</name>
        <initializer>(evp_sign_method *)ECDSA_sign, \
				(evp_verify_method *)ECDSA_verify, \
                                 {EVP_PKEY_EC,0,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="243" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af6e4ceb044de7cccece928740f38c9dd" prot="public" static="no">
        <name>EVP_PKEY_RSA_method</name>
        <initializer>(evp_sign_method *)RSA_sign, \
				(evp_verify_method *)RSA_verify, \
				{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="251" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0c6e1a9deb6adaf4c33c5b522bb19b2a" prot="public" static="no">
        <name>EVP_PKEY_RSA_ASN1_OCTET_STRING_method</name>
        <initializer>(evp_sign_method *)RSA_sign_ASN1_OCTET_STRING, \
				(evp_verify_method *)RSA_verify_ASN1_OCTET_STRING, \
				{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="254" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ade3e38d0f824684b35511b6ee830312c" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_ONESHOT</name>
        <initializer>0x0001 /* digest update will be called
						* once only */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="280" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8e7f598b967d382531e07968b7f3eb14" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_CLEANED</name>
        <initializer>0x0002 /* context has already been
						* cleaned */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="282" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae9fc3c61ed27ea581cdfd3cd8b874d8a" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_REUSE</name>
        <initializer>0x0004 /* Don&apos;t free up ctx-&gt;md_data
						* in EVP_MD_CTX_cleanup */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="284" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a87d761c74798aaadd0a71cf38404c144" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_NON_FIPS_ALLOW</name>
        <initializer>0x0008	/* Allow use of non FIPS digest
						 * in FIPS mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="290" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab644bca51df8fee5c8a00563b92c4b7e" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_PAD_MASK</name>
        <initializer>0xF0	/* RSA mode to use */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="296" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1646227a79aaf57ff48f156d3b45d817" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_PAD_PKCS1</name>
        <initializer>0x00	/* PKCS#1 v1.5 mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="297" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a175588a0bb850df37ef73bd0bfe0abb9" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_PAD_X931</name>
        <initializer>0x10	/* X9.31 mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="298" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a697a141bc0f9fef9f4807fbd4c8eee8c" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_PAD_PSS</name>
        <initializer>0x20	/* PSS mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="299" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0a45a60bd32bf7f90beaae4d79312378" prot="public" static="no">
        <name>EVP_MD_CTX_FLAG_NO_INIT</name>
        <initializer>0x0100 /* Don&apos;t initialize md_data */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="301" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aaf1b2d6551e8c073cf1253c7e39d5096" prot="public" static="no">
        <name>EVP_CIPH_STREAM_CIPHER</name>
        <initializer>0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="326" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8f82ccf1a2c7bc7f2d2ec79d12d8c941" prot="public" static="no">
        <name>EVP_CIPH_ECB_MODE</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="327" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a789e2ef5a5767d4f6fd8b926ebb674e2" prot="public" static="no">
        <name>EVP_CIPH_CBC_MODE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="328" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a55b6077e3d16941661db45f8c3c28ef2" prot="public" static="no">
        <name>EVP_CIPH_CFB_MODE</name>
        <initializer>0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="329" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6ec3825883f227093287d046acb44b13" prot="public" static="no">
        <name>EVP_CIPH_OFB_MODE</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="330" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae9059acaaaddd0c43249bce7858ec1ac" prot="public" static="no">
        <name>EVP_CIPH_CTR_MODE</name>
        <initializer>0x5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="331" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a88edfa13679e5e1360836f8833b3032b" prot="public" static="no">
        <name>EVP_CIPH_GCM_MODE</name>
        <initializer>0x6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="332" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab85ceaeb1a86e13bf1c58f2f0a962a39" prot="public" static="no">
        <name>EVP_CIPH_CCM_MODE</name>
        <initializer>0x7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="333" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adf09fdaf3d8601585b424259c45e6023" prot="public" static="no">
        <name>EVP_CIPH_XTS_MODE</name>
        <initializer>0x10001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="334" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2da000b3eece47af8087aeb97be50c32" prot="public" static="no">
        <name>EVP_CIPH_MODE</name>
        <initializer>0xF0007</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="335" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9a72d6bcd97898c1309ccb05df9b5110" prot="public" static="no">
        <name>EVP_CIPH_VARIABLE_LENGTH</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="337" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa8b025dd5862c629db9b7af10ee8cfd4" prot="public" static="no">
        <name>EVP_CIPH_CUSTOM_IV</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="339" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1ab22f7e606f4de5f61b2cd98daed5ef" prot="public" static="no">
        <name>EVP_CIPH_ALWAYS_CALL_INIT</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="341" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab3d99f41eb7e14b3812bfe3393c1f131" prot="public" static="no">
        <name>EVP_CIPH_CTRL_INIT</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="343" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab2eb017d01b8b56b8825645039c7c2d7" prot="public" static="no">
        <name>EVP_CIPH_CUSTOM_KEY_LENGTH</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="345" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0bd47bfb35aa5ed20d98c6f12383ff4f" prot="public" static="no">
        <name>EVP_CIPH_NO_PADDING</name>
        <initializer>0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="347" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a009fb6618e63b395bade855fa4450b8a" prot="public" static="no">
        <name>EVP_CIPH_RAND_KEY</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="349" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a05986eaaceffcc1dfbf0bbcbfe004b64" prot="public" static="no">
        <name>EVP_CIPH_CUSTOM_COPY</name>
        <initializer>0x400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="351" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab12601f3cfb48686a8b7695bb4968dee" prot="public" static="no">
        <name>EVP_CIPH_FLAG_DEFAULT_ASN1</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="353" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab0d6c8a7433fba0f1e4592a954ff3ebf" prot="public" static="no">
        <name>EVP_CIPH_FLAG_LENGTH_BITS</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="355" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4614dd162ee4404f09e0aaeac0cea542" prot="public" static="no">
        <name>EVP_CIPH_FLAG_FIPS</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="357" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a445fb5bd50452bd83b3a5d6aabeeb5c4" prot="public" static="no">
        <name>EVP_CIPH_FLAG_NON_FIPS_ALLOW</name>
        <initializer>0x8000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="359" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2689a29a8eb23fd304f688634feaeb55" prot="public" static="no">
        <name>EVP_CIPH_FLAG_CUSTOM_CIPHER</name>
        <initializer>0x100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="363" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aca356d5386083648380cb39c0ac8d213" prot="public" static="no">
        <name>EVP_CIPH_FLAG_AEAD_CIPHER</name>
        <initializer>0x200000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="364" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2c770020c17112eb48be1529d975c91f" prot="public" static="no">
        <name>EVP_CTRL_INIT</name>
        <initializer>0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="368" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6407848d97a5a263fc6f0ae2b1b278e4" prot="public" static="no">
        <name>EVP_CTRL_SET_KEY_LENGTH</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="369" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acdea0da07b722761d01704d2b33ebc18" prot="public" static="no">
        <name>EVP_CTRL_GET_RC2_KEY_BITS</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="370" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac7df37287beb70004d20eb312266f5de" prot="public" static="no">
        <name>EVP_CTRL_SET_RC2_KEY_BITS</name>
        <initializer>0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="371" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a38a75d58bdbeada965d1146186b6ca52" prot="public" static="no">
        <name>EVP_CTRL_GET_RC5_ROUNDS</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="372" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9c37eb49db98aeebf031321e48d325b1" prot="public" static="no">
        <name>EVP_CTRL_SET_RC5_ROUNDS</name>
        <initializer>0x5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="373" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a169eac29a704cb4eec16676c554150ea" prot="public" static="no">
        <name>EVP_CTRL_RAND_KEY</name>
        <initializer>0x6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="374" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa0ab2bacc1987e20fb75f467961d76e3" prot="public" static="no">
        <name>EVP_CTRL_PBE_PRF_NID</name>
        <initializer>0x7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="375" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae0ec5a8a1cd2f1839e67a228f960444d" prot="public" static="no">
        <name>EVP_CTRL_COPY</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="376" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5c7ab2ca3afe171228e9b866ff344d50" prot="public" static="no">
        <name>EVP_CTRL_GCM_SET_IVLEN</name>
        <initializer>0x9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="377" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a01518ce3f49c990fd91a47d5514ba3a4" prot="public" static="no">
        <name>EVP_CTRL_GCM_GET_TAG</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="378" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a77689572d8d33a5ed4c947e60f8c5ad2" prot="public" static="no">
        <name>EVP_CTRL_GCM_SET_TAG</name>
        <initializer>0x11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="379" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9e88e35758d5bf68202adae3f67b20b8" prot="public" static="no">
        <name>EVP_CTRL_GCM_SET_IV_FIXED</name>
        <initializer>0x12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="380" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a90ae2dd126e64b7de132c6131e910bdb" prot="public" static="no">
        <name>EVP_CTRL_GCM_IV_GEN</name>
        <initializer>0x13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="381" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a666c74f4d241e8d62b171c4d0b4a5a58" prot="public" static="no">
        <name>EVP_CTRL_CCM_SET_IVLEN</name>
        <initializer>EVP_CTRL_GCM_SET_IVLEN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="382" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a36e45db168e0a8c2f4ed53c66b633c5b" prot="public" static="no">
        <name>EVP_CTRL_CCM_GET_TAG</name>
        <initializer>EVP_CTRL_GCM_GET_TAG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="383" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4d3ce6a7d3101f4b1adcc4cb4b48cccc" prot="public" static="no">
        <name>EVP_CTRL_CCM_SET_TAG</name>
        <initializer>EVP_CTRL_GCM_SET_TAG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="384" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adf2dfa7bb675c5332133d0927990ab80" prot="public" static="no">
        <name>EVP_CTRL_CCM_SET_L</name>
        <initializer>0x14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="385" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad74a7ea2842baac8ffdba2294f443fd3" prot="public" static="no">
        <name>EVP_CTRL_CCM_SET_MSGLEN</name>
        <initializer>0x15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="386" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a797c9712ba1110dc3f1de88c31bc8faa" prot="public" static="no">
        <name>EVP_CTRL_AEAD_TLS1_AAD</name>
        <initializer>0x16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="391" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aebfa2485a5e1abf943d1f50c565d8c70" prot="public" static="no">
        <name>EVP_CTRL_AEAD_SET_MAC_KEY</name>
        <initializer>0x17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="393" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acfc28e0bba3bd4394818b6dc66c2fb49" prot="public" static="no">
        <name>EVP_CTRL_GCM_SET_IV_INV</name>
        <initializer>0x18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="395" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a21809207ba497a362173675432a836ad" prot="public" static="no">
        <name>EVP_GCM_TLS_FIXED_IV_LEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="399" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a963fe8dd8de3699cb3cc543440873823" prot="public" static="no">
        <name>EVP_GCM_TLS_EXPLICIT_IV_LEN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="401" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab10001d3c670f36317a9d0cbf0545a47" prot="public" static="no">
        <name>EVP_GCM_TLS_TAG_LEN</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="403" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a81589d0fbc466bb13c6711f962c36e5b" prot="public" static="no">
        <name>EVP_PKEY_assign_RSA</name>
        <param><defname>pkey</defname></param>
        <param><defname>rsa</defname></param>
        <initializer>EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\
					(char *)(rsa))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="451" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac2a42175e8ffc0ecd1b96b64f42447fb" prot="public" static="no">
        <name>EVP_PKEY_assign_DSA</name>
        <param><defname>pkey</defname></param>
        <param><defname>dsa</defname></param>
        <initializer>EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\
					(char *)(dsa))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="456" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1abcf4de359fff78f7916f51b5e6881d0a" prot="public" static="no">
        <name>EVP_PKEY_assign_DH</name>
        <param><defname>pkey</defname></param>
        <param><defname>dh</defname></param>
        <initializer>EVP_PKEY_assign((pkey),EVP_PKEY_DH,\
					(char *)(dh))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="461" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab46860018f91f47dcdf3910f147eb198" prot="public" static="no">
        <name>EVP_PKEY_assign_EC_KEY</name>
        <param><defname>pkey</defname></param>
        <param><defname>eckey</defname></param>
        <initializer>EVP_PKEY_assign((pkey),EVP_PKEY_EC,\
                                        (char *)(eckey))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="466" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af21731974d1c9b9467b3bf209d378e36" prot="public" static="no">
        <name>EVP_get_digestbynid</name>
        <param><defname>a</defname></param>
        <initializer>EVP_get_digestbyname(OBJ_nid2sn(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="471" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afd1d14292f13b363355410634e00ec09" prot="public" static="no">
        <name>EVP_get_digestbyobj</name>
        <param><defname>a</defname></param>
        <initializer>EVP_get_digestbynid(OBJ_obj2nid(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="472" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a11b44342a8a6ce5aa51b6aa646f1cbb4" prot="public" static="no">
        <name>EVP_get_cipherbynid</name>
        <param><defname>a</defname></param>
        <initializer>EVP_get_cipherbyname(OBJ_nid2sn(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="473" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a359c5ec316dfeb6d04e2f146d9b0484d" prot="public" static="no">
        <name>EVP_get_cipherbyobj</name>
        <param><defname>a</defname></param>
        <initializer>EVP_get_cipherbynid(OBJ_obj2nid(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="474" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae107b83750eed50af92c8d9dd24070db" prot="public" static="no">
        <name>EVP_MD_nid</name>
        <param><defname>e</defname></param>
        <initializer>EVP_MD_type(e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="477" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1abd35dda56281759b52474a474cef2843" prot="public" static="no">
        <name>EVP_MD_name</name>
        <param><defname>e</defname></param>
        <initializer>OBJ_nid2sn(EVP_MD_nid(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="478" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a44b4d4d994e27b818f85185a9d45fa81" prot="public" static="no">
        <name>EVP_MD_CTX_size</name>
        <param><defname>e</defname></param>
        <initializer>EVP_MD_size(EVP_MD_CTX_md(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="485" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2d596207a39c51f387667de12ffd2d9e" prot="public" static="no">
        <name>EVP_MD_CTX_block_size</name>
        <param><defname>e</defname></param>
        <initializer>EVP_MD_block_size(EVP_MD_CTX_md(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="486" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aaabf31f5ebaa97f5dc26e1e65f0a221e" prot="public" static="no">
        <name>EVP_MD_CTX_type</name>
        <param><defname>e</defname></param>
        <initializer>EVP_MD_type(EVP_MD_CTX_md(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="487" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0d7abaced986c0a76e13fa6200a89d7d" prot="public" static="no">
        <name>EVP_CIPHER_name</name>
        <param><defname>e</defname></param>
        <initializer>OBJ_nid2sn(EVP_CIPHER_nid(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="490" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8aad526923fe6ea608d937e407b1e455" prot="public" static="no">
        <name>EVP_CIPHER_mode</name>
        <param><defname>e</defname></param>
        <initializer>(EVP_CIPHER_flags(e) &amp; EVP_CIPH_MODE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="495" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab96111f6a3cef845f0d94c40b2b236fd" prot="public" static="no">
        <name>EVP_CIPHER_CTX_type</name>
        <param><defname>c</defname></param>
        <initializer>EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="505" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a440f3891bbd9887a7c91f666cea563c2" prot="public" static="no">
        <name>EVP_CIPHER_CTX_mode</name>
        <param><defname>e</defname></param>
        <initializer>(EVP_CIPHER_CTX_flags(e) &amp; EVP_CIPH_MODE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="507" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af1b24e9758c6bf0eaf9eaa4f8ca15120" prot="public" static="no">
        <name>EVP_ENCODE_LENGTH</name>
        <param><defname>l</defname></param>
        <initializer>(((l+2)/3*4)+(l/48+1)*2+80)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="509" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab4630828e54e1215f72b23c7d42f2cce" prot="public" static="no">
        <name>EVP_DECODE_LENGTH</name>
        <param><defname>l</defname></param>
        <initializer>((l+3)/4*3+80)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="510" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa03fd03cb2794eb2c6279af6b069e5e2" prot="public" static="no">
        <name>EVP_SignInit_ex</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestInit_ex(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="512" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a37acbcefff9c4e6f88f8b3d9b1084822" prot="public" static="no">
        <name>EVP_SignInit</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>EVP_DigestInit(a,b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="513" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a102f9bf12fe362f92cbbbee36b53a50c" prot="public" static="no">
        <name>EVP_SignUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestUpdate(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="514" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a57b33849056dfadcf1d2dc3e73022da7" prot="public" static="no">
        <name>EVP_VerifyInit_ex</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestInit_ex(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="515" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5afe1e8154c7465ff136300ac36ed461" prot="public" static="no">
        <name>EVP_VerifyInit</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>EVP_DigestInit(a,b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="516" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adfcefdac6b22453cb99cd7c2246f8d3b" prot="public" static="no">
        <name>EVP_VerifyUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestUpdate(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="517" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af566d390c9b51d77442a632bdedfdd44" prot="public" static="no">
        <name>EVP_OpenUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <initializer>EVP_DecryptUpdate(a,b,c,d,e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="518" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a06485141ed2327b673dd1456c8bf7d65" prot="public" static="no">
        <name>EVP_SealUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <initializer>EVP_EncryptUpdate(a,b,c,d,e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="519" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a03bbc2d5a147ccea2adb2aa8cfc43972" prot="public" static="no">
        <name>EVP_DigestSignUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestUpdate(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="520" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a007a74a80271ebc873d58c4a280bb58b" prot="public" static="no">
        <name>EVP_DigestVerifyUpdate</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>EVP_DigestUpdate(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="521" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac18e24ee9b5fde311b117ed697dffc15" prot="public" static="no">
        <name>BIO_set_md</name>
        <param><defname>b</defname></param>
        <param><defname>md</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_SET_MD,0,(char *)md)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="526" column="11" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa59da2128990122c3d9c322092a2da4e" prot="public" static="no">
        <name>BIO_get_md</name>
        <param><defname>b</defname></param>
        <param><defname>mdp</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_GET_MD,0,(char *)mdp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="528" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0caa551c5fd31ff55117e6b55dfc54b4" prot="public" static="no">
        <name>BIO_get_md_ctx</name>
        <param><defname>b</defname></param>
        <param><defname>mdcp</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_GET_MD_CTX,0,(char *)mdcp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="529" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae3d27e7cd972cbbbae3510e6279b6276" prot="public" static="no">
        <name>BIO_set_md_ctx</name>
        <param><defname>b</defname></param>
        <param><defname>mdcp</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_SET_MD_CTX,0,(char *)mdcp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="530" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac11edd21701962dbcd2885beec28e102" prot="public" static="no">
        <name>BIO_get_cipher_status</name>
        <param><defname>b</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_GET_CIPHER_STATUS,0,NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="531" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a04d02269f6bd11231243c65acce8f57e" prot="public" static="no">
        <name>BIO_get_cipher_ctx</name>
        <param><defname>b</defname></param>
        <param><defname>c_pp</defname></param>
        <initializer>BIO_ctrl(b,BIO_C_GET_CIPHER_CTX,0,(char *)c_pp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="532" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8a800005b4ff9941775c2e9fa43bc279" prot="public" static="no">
        <name>EVP_add_cipher_alias</name>
        <param><defname>n</defname></param>
        <param><defname>alias</defname></param>
        <initializer>OBJ_NAME_add((alias),OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS,(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="539" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afb675dc797113a5c2a5eb578111d3385" prot="public" static="no">
        <name>EVP_add_digest_alias</name>
        <param><defname>n</defname></param>
        <param><defname>alias</defname></param>
        <initializer>OBJ_NAME_add((alias),OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="541" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae3dd39dad92b15b4b56d3b5e98aca935" prot="public" static="no">
        <name>EVP_delete_cipher_alias</name>
        <param><defname>alias</defname></param>
        <initializer>OBJ_NAME_remove(alias,OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="543" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4567a130cce39362ac7b6a75ad905e1e" prot="public" static="no">
        <name>EVP_delete_digest_alias</name>
        <param><defname>alias</defname></param>
        <initializer>OBJ_NAME_remove(alias,OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="545" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a023fec5fb3b91ce4fce737950bfc4c89" prot="public" static="no">
        <name>EVP_des_cfb</name>
        <initializer>EVP_des_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="708" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3c9112c8bc56ef6cdaa42c9287c33327" prot="public" static="no">
        <name>EVP_des_ede_cfb</name>
        <initializer>EVP_des_ede_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="712" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5444c34332af61da1bd0f7394ab936ef" prot="public" static="no">
        <name>EVP_des_ede3_cfb</name>
        <initializer>EVP_des_ede3_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="718" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a38b585c71aa8787bcdeb8501344bd59d" prot="public" static="no">
        <name>EVP_idea_cfb</name>
        <initializer>EVP_idea_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="748" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae11440535e5c80ec8eb93c6f58d3e096" prot="public" static="no">
        <name>EVP_rc2_cfb</name>
        <initializer>EVP_rc2_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="758" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad3cbca23ab7b6f0f9f1f27fe5f09d356" prot="public" static="no">
        <name>EVP_bf_cfb</name>
        <initializer>EVP_bf_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="765" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afe4e65ad86b715d6792f15a367d5d248" prot="public" static="no">
        <name>EVP_cast5_cfb</name>
        <initializer>EVP_cast5_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="772" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af94f8ddf527308fb332455100563727a" prot="public" static="no">
        <name>EVP_rc5_32_12_16_cfb</name>
        <initializer>EVP_rc5_32_12_16_cfb64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="779" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2457b310d1d582a9e2edbe2fc5f9f6c7" prot="public" static="no">
        <name>EVP_aes_128_cfb</name>
        <initializer>EVP_aes_128_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="788" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9feaa140f49cc64c6833dcb4cb574810" prot="public" static="no">
        <name>EVP_aes_192_cfb</name>
        <initializer>EVP_aes_192_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="799" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ade939ae239d60b5191183af29f9c99df" prot="public" static="no">
        <name>EVP_aes_256_cfb</name>
        <initializer>EVP_aes_256_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="809" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5bfbcd635cc0a3b02ec5e0e7ddc0330a" prot="public" static="no">
        <name>EVP_camellia_128_cfb</name>
        <initializer>EVP_camellia_128_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="826" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0051af9273dbb77a868226a41febd749" prot="public" static="no">
        <name>EVP_camellia_192_cfb</name>
        <initializer>EVP_camellia_192_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="833" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab83757139331082aa0940e20f1c18e81" prot="public" static="no">
        <name>EVP_camellia_256_cfb</name>
        <initializer>EVP_camellia_256_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="840" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2122f0af05e1e5163ac32f8a006b46d1" prot="public" static="no">
        <name>EVP_seed_cfb</name>
        <initializer>EVP_seed_cfb128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="848" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2e3885a5280c9959ceee3989613c6195" prot="public" static="no">
        <name>OpenSSL_add_all_algorithms</name>
        <param></param>
        <initializer>OPENSSL_add_all_algorithms_noconf()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="859" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a56c91c1b8c47c3e322aa002fd630c1dc" prot="public" static="no">
        <name>SSLeay_add_all_algorithms</name>
        <param></param>
        <initializer>OpenSSL_add_all_algorithms()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="865" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a91e2335aa13bb30a07ea34ead94d2541" prot="public" static="no">
        <name>SSLeay_add_all_ciphers</name>
        <param></param>
        <initializer>OpenSSL_add_all_ciphers()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="866" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae33f7ae4297e41c5ff48eaefa71187c0" prot="public" static="no">
        <name>SSLeay_add_all_digests</name>
        <param></param>
        <initializer>OpenSSL_add_all_digests()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="867" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a60aa03a3ed407cf2e71cc442a34cfe3c" prot="public" static="no">
        <name>EVP_PBE_TYPE_OUTER</name>
        <initializer>0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="985" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a399358ea6f1f78317e2d05d8b839154c" prot="public" static="no">
        <name>EVP_PBE_TYPE_PRF</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="987" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acf4ef46e8cba0e3dc0a744206dc885e0" prot="public" static="no">
        <name>ASN1_PKEY_ALIAS</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="997" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0713ced15f9848baeb2a7db21ed0bf70" prot="public" static="no">
        <name>ASN1_PKEY_DYNAMIC</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="998" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3adfdb13975f3980e1bba8e507b66bdc" prot="public" static="no">
        <name>ASN1_PKEY_SIGPARAM_NULL</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="999" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac5f41942316c3e3873f85472b94eac31" prot="public" static="no">
        <name>ASN1_PKEY_CTRL_PKCS7_SIGN</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1001" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a97a4fd99d9c64b46c4f9c9e41ab43233" prot="public" static="no">
        <name>ASN1_PKEY_CTRL_PKCS7_ENCRYPT</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1002" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a92870987ccd671b832ddf32da12eb1da" prot="public" static="no">
        <name>ASN1_PKEY_CTRL_DEFAULT_MD_NID</name>
        <initializer>0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1003" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8b897ece26a5c2eb3f2739bfe08bafa8" prot="public" static="no">
        <name>ASN1_PKEY_CTRL_CMS_SIGN</name>
        <initializer>0x5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1004" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a53beaded425f9afdfb4fd5cd3f91a9d3" prot="public" static="no">
        <name>ASN1_PKEY_CTRL_CMS_ENVELOPE</name>
        <initializer>0x7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1005" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adc03ff56743d3b16090d90e8e30a1dc7" prot="public" static="no">
        <name>EVP_PKEY_OP_UNDEFINED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1054" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afef8e63b568f3d2a3c17be0ad69e95df" prot="public" static="no">
        <name>EVP_PKEY_OP_PARAMGEN</name>
        <initializer>(1&lt;&lt;1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1055" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3b76151a516e8202603510d06664ef82" prot="public" static="no">
        <name>EVP_PKEY_OP_KEYGEN</name>
        <initializer>(1&lt;&lt;2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1056" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad018f5b3f98b2eb5d6886e8b47dc5858" prot="public" static="no">
        <name>EVP_PKEY_OP_SIGN</name>
        <initializer>(1&lt;&lt;3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1057" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa7f0a6dd244b702b064da3ed2d073667" prot="public" static="no">
        <name>EVP_PKEY_OP_VERIFY</name>
        <initializer>(1&lt;&lt;4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1058" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad0aba52ddd1f54d8bc76a886187d9b77" prot="public" static="no">
        <name>EVP_PKEY_OP_VERIFYRECOVER</name>
        <initializer>(1&lt;&lt;5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1059" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1059" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afad21fd4f96e6c937aa7a269de5431cf" prot="public" static="no">
        <name>EVP_PKEY_OP_SIGNCTX</name>
        <initializer>(1&lt;&lt;6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1060" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9953fc799ecc59e9c92f8535c47e9408" prot="public" static="no">
        <name>EVP_PKEY_OP_VERIFYCTX</name>
        <initializer>(1&lt;&lt;7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1061" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1ada70baaa6f6d6c532b9761a513c53a" prot="public" static="no">
        <name>EVP_PKEY_OP_ENCRYPT</name>
        <initializer>(1&lt;&lt;8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1062" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a132399ce35090b2d7626910d6e5cba42" prot="public" static="no">
        <name>EVP_PKEY_OP_DECRYPT</name>
        <initializer>(1&lt;&lt;9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1063" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aeaebf1c81d24beb3b8ac8187e612cb3e" prot="public" static="no">
        <name>EVP_PKEY_OP_DERIVE</name>
        <initializer>(1&lt;&lt;10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1064" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae5bd969f77e11c39f8d1c1fbed8b29c3" prot="public" static="no">
        <name>EVP_PKEY_OP_TYPE_SIG</name>
        <initializer>(EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY | EVP_PKEY_OP_VERIFYRECOVER \
		| EVP_PKEY_OP_SIGNCTX | EVP_PKEY_OP_VERIFYCTX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1066" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acd4e0c53738d71629dae26ed57feb393" prot="public" static="no">
        <name>EVP_PKEY_OP_TYPE_CRYPT</name>
        <initializer>(EVP_PKEY_OP_ENCRYPT | EVP_PKEY_OP_DECRYPT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1070" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5ff999c2b04b1fbfbe8e922a80635dad" prot="public" static="no">
        <name>EVP_PKEY_OP_TYPE_NOGEN</name>
        <initializer>(EVP_PKEY_OP_SIG | EVP_PKEY_OP_CRYPT | EVP_PKEY_OP_DERIVE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1073" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a91101a7e341b0533eca5c831c1ac3613" prot="public" static="no">
        <name>EVP_PKEY_OP_TYPE_GEN</name>
        <initializer>(EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1076" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a743ec645aadfb7f5ff5cbfc134c105a9" prot="public" static="no">
        <name>EVP_PKEY_CTX_set_signature_md</name>
        <param><defname>ctx</defname></param>
        <param><defname>md</defname></param>
        <initializer>EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG,  \
					EVP_PKEY_CTRL_MD, 0, (void *)md)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1079" column="10" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab050d4236c3735c50cfca96b552f0f7a" prot="public" static="no">
        <name>EVP_PKEY_CTRL_MD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1083" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a48cb8ce801341f9a9cb91a81120445a5" prot="public" static="no">
        <name>EVP_PKEY_CTRL_PEER_KEY</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1084" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5da2c26cf287d65b536196fdf91fbba0" prot="public" static="no">
        <name>EVP_PKEY_CTRL_PKCS7_ENCRYPT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1086" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0408af542bb78d80a8014e9e6e78a4fa" prot="public" static="no">
        <name>EVP_PKEY_CTRL_PKCS7_DECRYPT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1087" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a79f48daf768296c90bcfdd16a57886b2" prot="public" static="no">
        <name>EVP_PKEY_CTRL_PKCS7_SIGN</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1089" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab72772f3e24818ed4483e3c139d56daf" prot="public" static="no">
        <name>EVP_PKEY_CTRL_SET_MAC_KEY</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1091" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aac52615054824b91cd67495173fa89e6" prot="public" static="no">
        <name>EVP_PKEY_CTRL_DIGESTINIT</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1093" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a59108433a8a93560f570e496990948fa" prot="public" static="no">
        <name>EVP_PKEY_CTRL_SET_IV</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1096" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2095e72d706b28609f4872112ee24549" prot="public" static="no">
        <name>EVP_PKEY_CTRL_CMS_ENCRYPT</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1098" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1b01b8b7b24133ed55f494f933793dad" prot="public" static="no">
        <name>EVP_PKEY_CTRL_CMS_DECRYPT</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1099" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a23b89039f51a7a3296c8c6b1b535af9d" prot="public" static="no">
        <name>EVP_PKEY_CTRL_CMS_SIGN</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1100" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8f90aa103a691922951aaa759067df43" prot="public" static="no">
        <name>EVP_PKEY_CTRL_CIPHER</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1102" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab7513c3358eaf58ae5b97e9c40562596" prot="public" static="no">
        <name>EVP_PKEY_ALG_CTRL</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1104" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a269057ef1d75085b1ba39fddf6fac267" prot="public" static="no">
        <name>EVP_PKEY_FLAG_AUTOARGLEN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1107" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ad4e00e5fbc3207fa1447bb456eabb1ec" prot="public" static="no">
        <name>EVP_PKEY_FLAG_SIGCTX_CUSTOM</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1111" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1078dec4405de3d427a545189e9c723e" prot="public" static="no">
        <name>EVP_F_AESNI_INIT_KEY</name>
        <initializer>165</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1256" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a321a9b6aab2f6b8049bf149cd63dc287" prot="public" static="no">
        <name>EVP_F_AESNI_XTS_CIPHER</name>
        <initializer>176</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1257" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a01b553595ec909ce76a4b3c517a3980e" prot="public" static="no">
        <name>EVP_F_AES_INIT_KEY</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1258" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aedd41f324833387a0a670d3c315e12e2" prot="public" static="no">
        <name>EVP_F_AES_XTS</name>
        <initializer>172</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1259" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab1cc20eef5226e3f48008fa5adc8aa54" prot="public" static="no">
        <name>EVP_F_AES_XTS_CIPHER</name>
        <initializer>175</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1260" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a575052416ffb7b8e96f7ecfe77a2d36d" prot="public" static="no">
        <name>EVP_F_ALG_MODULE_INIT</name>
        <initializer>177</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1261" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a05f70c923d5edf6b47ede0a5276e10a5" prot="public" static="no">
        <name>EVP_F_CAMELLIA_INIT_KEY</name>
        <initializer>159</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1262" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a7b9b665c7c06d76038717267b401f62e" prot="public" static="no">
        <name>EVP_F_CMAC_INIT</name>
        <initializer>173</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1263" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afc66e32b77e21fa8c802db4444a8e2c9" prot="public" static="no">
        <name>EVP_F_D2I_PKEY</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1264" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adb136067e55088177eeab2490db60725" prot="public" static="no">
        <name>EVP_F_DO_SIGVER_INIT</name>
        <initializer>161</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1265" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a622eb8fb4e5af3548a8ea2d2aad61278" prot="public" static="no">
        <name>EVP_F_DSAPKEY2PKCS8</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1266" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a956819cae38de3dc9fa6aa03629d5590" prot="public" static="no">
        <name>EVP_F_DSA_PKEY2PKCS8</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1267" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af575d50d6b061c811e26d78c3aa374ce" prot="public" static="no">
        <name>EVP_F_ECDSA_PKEY2PKCS8</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1268" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af8e059adda7c8c9533a55e04950aa953" prot="public" static="no">
        <name>EVP_F_ECKEY_PKEY2PKCS8</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1269" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9e137904e7b24931db1cada6fc071093" prot="public" static="no">
        <name>EVP_F_EVP_CIPHERINIT_EX</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1270" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a9774e30e10892a08280768d4703d511d" prot="public" static="no">
        <name>EVP_F_EVP_CIPHER_CTX_COPY</name>
        <initializer>163</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1271" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a17c8e4becc6ca5cbebc0b18ae8d32140" prot="public" static="no">
        <name>EVP_F_EVP_CIPHER_CTX_CTRL</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1272" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab8b4bbe8315d8929fd998e99f605bd58" prot="public" static="no">
        <name>EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1273" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1abb7538f042041e8bf4729b8665d1be2f" prot="public" static="no">
        <name>EVP_F_EVP_DECRYPTFINAL_EX</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1274" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a69a00ab80beb3d394ac6ad8a5b2fece7" prot="public" static="no">
        <name>EVP_F_EVP_DIGESTINIT_EX</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1275" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1e2defdfb0fdd3676ede757c1e6d4509" prot="public" static="no">
        <name>EVP_F_EVP_ENCRYPTFINAL_EX</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1276" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a77a316ba54d9987cb2fdcc5981a8d4eb" prot="public" static="no">
        <name>EVP_F_EVP_MD_CTX_COPY_EX</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1277" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab55308af0b0b3eefff1f99a01349362f" prot="public" static="no">
        <name>EVP_F_EVP_MD_SIZE</name>
        <initializer>162</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1278" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a73007ad0f873e80a2ff307f7e8c322dc" prot="public" static="no">
        <name>EVP_F_EVP_OPENINIT</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1279" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a538327107d17c1be86afeb294952d0b1" prot="public" static="no">
        <name>EVP_F_EVP_PBE_ALG_ADD</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1280" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6dc8dbc7cb76ea738345eb089310b4a6" prot="public" static="no">
        <name>EVP_F_EVP_PBE_ALG_ADD_TYPE</name>
        <initializer>160</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1281" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac159c8924310ec072b5732b60213e6b0" prot="public" static="no">
        <name>EVP_F_EVP_PBE_CIPHERINIT</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1282" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af86c59cd709610f045435b285d39cb9f" prot="public" static="no">
        <name>EVP_F_EVP_PKCS82PKEY</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1283" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1e87e8e080df8b9946b471e248ec8027" prot="public" static="no">
        <name>EVP_F_EVP_PKCS82PKEY_BROKEN</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1284" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a53a6ea8f9b6b9739d65c3b2f950e0167" prot="public" static="no">
        <name>EVP_F_EVP_PKEY2PKCS8_BROKEN</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1285" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6e0cdd635b0446050e5c42c8a032a7bb" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_COPY_PARAMETERS</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1286" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5f80d56986dfaabf991fa85eaa2b85fa" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_CTX_CTRL</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1287" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a83e660188bf3017a6835323d3181aac2" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_CTX_CTRL_STR</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1288" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a00bd5308441678307cea1f2595f97c70" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_CTX_DUP</name>
        <initializer>156</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1289" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af3164aa5b18738911561baf15683c475" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DECRYPT</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1290" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a33d9d0f2b9eb2ec321d5ccca52b40fdc" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DECRYPT_INIT</name>
        <initializer>138</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1291" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afbdb0dc092082d5421d4ceaae63d6ec3" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DECRYPT_OLD</name>
        <initializer>151</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1292" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a10c0bf8f84177a254cef8db2990d2cef" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DERIVE</name>
        <initializer>153</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1293" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a990b47a4f0ade5f10796a6e5f7ec7b00" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DERIVE_INIT</name>
        <initializer>154</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1294" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8c3208d62ec93677264a87e38e186ddb" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_DERIVE_SET_PEER</name>
        <initializer>155</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1295" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acbcb17b7ad575e1ad62839d57c64d2c1" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_ENCRYPT</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1296" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a58d21d53e87f7027596ff97e70d51aef" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_ENCRYPT_INIT</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1297" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af54ac509195150f52ff871a3911a082d" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_ENCRYPT_OLD</name>
        <initializer>152</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1298" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa85bb4796be6919564b64d7d937cea16" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_GET1_DH</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1299" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a587b756f8a3aa15f327267e60185fc2c" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_GET1_DSA</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1300" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac9b8774e9667311c102acaf86689cf0b" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_GET1_ECDSA</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1301" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a47e9dd90698f76088dc4dd9cccd20780" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_GET1_EC_KEY</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1302" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a36ee3144653507f68f8bc4d376fe098e" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_GET1_RSA</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1303" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1e7286bb67655383ced35679f79510d0" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_KEYGEN</name>
        <initializer>146</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1304" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af03c13da8012eaf51616b762cec79df9" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_KEYGEN_INIT</name>
        <initializer>147</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1305" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a7e35de379214f72574f0e061028e656b" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_NEW</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1306" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af555c45619f20aaadafe707a88714614" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_PARAMGEN</name>
        <initializer>148</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1307" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a33040d520e66462cf4253b7b0a2f4e78" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_PARAMGEN_INIT</name>
        <initializer>149</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1308" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af6ce7f403a12693f7958ec974a396c75" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_SIGN</name>
        <initializer>140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1309" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aabadcbdc146e4ec504ec63a68a2ff6c4" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_SIGN_INIT</name>
        <initializer>141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1310" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af52bb98be877c3834cf89b51f41d1a52" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_VERIFY</name>
        <initializer>142</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1311" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a13f7601bd5ed866d5eae2ad00985fa57" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_VERIFY_INIT</name>
        <initializer>143</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1312" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a480c41707bc6a3265cb9f9dff4aa8bff" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_VERIFY_RECOVER</name>
        <initializer>144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1313" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1acb978b461448df218be2d912e28d4c1d" prot="public" static="no">
        <name>EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT</name>
        <initializer>145</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1314" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a993b36a230453e2759cebd5411ae713d" prot="public" static="no">
        <name>EVP_F_EVP_RIJNDAEL</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1315" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa2e140fa39fa2eea116afc36f2e36c13" prot="public" static="no">
        <name>EVP_F_EVP_SIGNFINAL</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1316" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6e67fea8b2f106a448406beb8ff9557d" prot="public" static="no">
        <name>EVP_F_EVP_VERIFYFINAL</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1317" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6987aeae253f44d7fc1217d4e2449213" prot="public" static="no">
        <name>EVP_F_FIPS_CIPHERINIT</name>
        <initializer>166</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1318" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a7fadac869fc272398e75290c66b6ab40" prot="public" static="no">
        <name>EVP_F_FIPS_CIPHER_CTX_COPY</name>
        <initializer>170</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1319" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6f28a6ceb4ea1447701d0e4573ac1da0" prot="public" static="no">
        <name>EVP_F_FIPS_CIPHER_CTX_CTRL</name>
        <initializer>167</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1320" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3376e71e9d0c1aa9c2218b08e34d94b9" prot="public" static="no">
        <name>EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH</name>
        <initializer>171</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1321" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa1c0f48dae3731e486ef5ab44c063973" prot="public" static="no">
        <name>EVP_F_FIPS_DIGESTINIT</name>
        <initializer>168</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1322" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac4213aaa6c3eaa324a49d921400e8e6a" prot="public" static="no">
        <name>EVP_F_FIPS_MD_CTX_COPY</name>
        <initializer>169</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1323" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa9f2d2bae421e712463fa432f9ba1bfd" prot="public" static="no">
        <name>EVP_F_HMAC_INIT_EX</name>
        <initializer>174</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1324" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa4801016afb6604b59bd704566caf3f7" prot="public" static="no">
        <name>EVP_F_INT_CTX_NEW</name>
        <initializer>157</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1325" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2759ea7ba263bc8650af6bce3c1811e7" prot="public" static="no">
        <name>EVP_F_PKCS5_PBE_KEYIVGEN</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1326" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3e159bbaf4d5307ec45f94d5f35e6a09" prot="public" static="no">
        <name>EVP_F_PKCS5_V2_PBE_KEYIVGEN</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1327" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a732518bc95f6d0eea04f3b42c6b058e7" prot="public" static="no">
        <name>EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN</name>
        <initializer>164</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1328" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8f715ce01dea15e4dc2217c272714b5a" prot="public" static="no">
        <name>EVP_F_PKCS8_SET_BROKEN</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1329" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a13b056c54e2ad5d80decb875e428f0fb" prot="public" static="no">
        <name>EVP_F_PKEY_SET_TYPE</name>
        <initializer>158</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1330" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8ebb1c6b850a2be86e5b0da2b96c39c9" prot="public" static="no">
        <name>EVP_F_RC2_MAGIC_TO_METH</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1331" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aadecf007607dbf4a2d03befe693abadc" prot="public" static="no">
        <name>EVP_F_RC5_CTRL</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1332" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a333fd8aa276900d4398be210171df45e" prot="public" static="no">
        <name>EVP_R_AES_IV_SETUP_FAILED</name>
        <initializer>162</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1335" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8983862f7f8134af0f792f07afd000a0" prot="public" static="no">
        <name>EVP_R_AES_KEY_SETUP_FAILED</name>
        <initializer>143</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1336" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af9e858de447b2ed2a684e949f547dbb6" prot="public" static="no">
        <name>EVP_R_ASN1_LIB</name>
        <initializer>140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1337" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af3d64d1f10d7fe8ba76c1d2be564a33e" prot="public" static="no">
        <name>EVP_R_BAD_BLOCK_LENGTH</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1338" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a819fae2ff518a5ce634adcb39447201f" prot="public" static="no">
        <name>EVP_R_BAD_DECRYPT</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1339" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4637592c7dcb47536664ac94777984e4" prot="public" static="no">
        <name>EVP_R_BAD_KEY_LENGTH</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1340" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa359d8017178aa57f5c612663d8ffc03" prot="public" static="no">
        <name>EVP_R_BN_DECODE_ERROR</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1341" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a060f7924832e20da3a952d0905fa6d97" prot="public" static="no">
        <name>EVP_R_BN_PUBKEY_ERROR</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1342" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae9f87f9d511bc6c88003719b72ecae6c" prot="public" static="no">
        <name>EVP_R_BUFFER_TOO_SMALL</name>
        <initializer>155</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1343" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aec56e357ace64edd0a9e4402c519d6e8" prot="public" static="no">
        <name>EVP_R_CAMELLIA_KEY_SETUP_FAILED</name>
        <initializer>157</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1344" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6230214b31fa5cb4ba6a708f27c10f4f" prot="public" static="no">
        <name>EVP_R_CIPHER_PARAMETER_ERROR</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1345" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a68442f07339d7bb75975ad18d764499b" prot="public" static="no">
        <name>EVP_R_COMMAND_NOT_SUPPORTED</name>
        <initializer>147</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1346" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac278dadbf4a09a90e11f1cc2fbe2af5b" prot="public" static="no">
        <name>EVP_R_CTRL_NOT_IMPLEMENTED</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1347" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a65dc87b9f5aa0b01e9a645b4cdff702e" prot="public" static="no">
        <name>EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1348" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ada50cf9ec537349bf4d74260e590c2bb" prot="public" static="no">
        <name>EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH</name>
        <initializer>138</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1349" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2aa43b6043255c01b0e0f8bcba349e35" prot="public" static="no">
        <name>EVP_R_DECODE_ERROR</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1350" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1adf828f52b1962e1802eb396e30b9e195" prot="public" static="no">
        <name>EVP_R_DIFFERENT_KEY_TYPES</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1351" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab65a21107275451fb0a177275abf4716" prot="public" static="no">
        <name>EVP_R_DIFFERENT_PARAMETERS</name>
        <initializer>153</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1352" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4c004a802f0117e9703d844949578be6" prot="public" static="no">
        <name>EVP_R_DISABLED_FOR_FIPS</name>
        <initializer>163</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1353" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a570675bc456ba9e564e39966c77381b5" prot="public" static="no">
        <name>EVP_R_ENCODE_ERROR</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1354" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a831d98f8077a1f463f5a2af1d4cf4148" prot="public" static="no">
        <name>EVP_R_ERROR_LOADING_SECTION</name>
        <initializer>165</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1355" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6d34bbed487e2147df476fe0d0d3f382" prot="public" static="no">
        <name>EVP_R_ERROR_SETTING_FIPS_MODE</name>
        <initializer>166</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1356" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac7688e8bc04b0eeeb532e14933736a4c" prot="public" static="no">
        <name>EVP_R_EVP_PBE_CIPHERINIT_ERROR</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1357" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a8c474f6489fbd600811f2a67a62de4ce" prot="public" static="no">
        <name>EVP_R_EXPECTING_AN_RSA_KEY</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1358" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aa7b95c812a0a0d6819c1b59a4c2be180" prot="public" static="no">
        <name>EVP_R_EXPECTING_A_DH_KEY</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1359" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4424b82febff24695cf47600d70a0cd3" prot="public" static="no">
        <name>EVP_R_EXPECTING_A_DSA_KEY</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1360" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a95ea994ffd81c0299d68b22f6ccfe7f3" prot="public" static="no">
        <name>EVP_R_EXPECTING_A_ECDSA_KEY</name>
        <initializer>141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1361" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a5f4432cae047afb4cd8e0d7da8d40878" prot="public" static="no">
        <name>EVP_R_EXPECTING_A_EC_KEY</name>
        <initializer>142</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1362" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a93e15ef3d59730f7803bfa1b19138055" prot="public" static="no">
        <name>EVP_R_FIPS_MODE_NOT_SUPPORTED</name>
        <initializer>167</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1363" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a22900c7af43b33c165db166854022b97" prot="public" static="no">
        <name>EVP_R_INITIALIZATION_ERROR</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1364" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6831ff5101b41a873ad35be531f27ce5" prot="public" static="no">
        <name>EVP_R_INPUT_NOT_INITIALIZED</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1365" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3a9438367fe8c63172cf4f3190bf1604" prot="public" static="no">
        <name>EVP_R_INVALID_DIGEST</name>
        <initializer>152</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1366" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a21a4af51d3ae50ae8ab19338d42a0b7d" prot="public" static="no">
        <name>EVP_R_INVALID_FIPS_MODE</name>
        <initializer>168</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1367" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a92885f81db70b34886194051b9d688d7" prot="public" static="no">
        <name>EVP_R_INVALID_KEY_LENGTH</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1368" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a41d94305b2fe9b7b589c7643a357ceff" prot="public" static="no">
        <name>EVP_R_INVALID_OPERATION</name>
        <initializer>148</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1369" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3f57cb86755b58a5ebc01196f07bd36d" prot="public" static="no">
        <name>EVP_R_IV_TOO_LARGE</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1370" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae13e5ab371661c3a9d8109e2c5204655" prot="public" static="no">
        <name>EVP_R_KEYGEN_FAILURE</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1371" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a882e2297e9f7d95a2560e65cdab156ec" prot="public" static="no">
        <name>EVP_R_MESSAGE_DIGEST_IS_NULL</name>
        <initializer>159</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1372" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a76693e1c4d9340f010e17149e686f904" prot="public" static="no">
        <name>EVP_R_METHOD_NOT_SUPPORTED</name>
        <initializer>144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1373" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3350618efb2486a0086f070590c4cb46" prot="public" static="no">
        <name>EVP_R_MISSING_PARAMETERS</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1374" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a666a307c0be764b39af5f8592d42f6a6" prot="public" static="no">
        <name>EVP_R_NO_CIPHER_SET</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1375" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ac4087c8c10ec58f26f801dbdd8c02393" prot="public" static="no">
        <name>EVP_R_NO_DEFAULT_DIGEST</name>
        <initializer>158</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1376" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a0d40389a99d2c8edea162613ec0fc264" prot="public" static="no">
        <name>EVP_R_NO_DIGEST_SET</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1377" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a6376fc0bf052dd0cbb10bc462a14d0e5" prot="public" static="no">
        <name>EVP_R_NO_DSA_PARAMETERS</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1378" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a479d21d33d8fdff319a8364a701a739f" prot="public" static="no">
        <name>EVP_R_NO_KEY_SET</name>
        <initializer>154</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1379" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a79fd5a0423ac3cec24c12c5a059594a0" prot="public" static="no">
        <name>EVP_R_NO_OPERATION_SET</name>
        <initializer>149</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1380" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a94a28c62650ef9a9bd083c849322a157" prot="public" static="no">
        <name>EVP_R_NO_SIGN_FUNCTION_CONFIGURED</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1381" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a899f3f6363e4628041404ddcdba5db3c" prot="public" static="no">
        <name>EVP_R_NO_VERIFY_FUNCTION_CONFIGURED</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1382" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1aca434a470ec18689cf7d7db1d64eaef8" prot="public" static="no">
        <name>EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1383" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a485bc6b03821e5989cee2d9a875e2b71" prot="public" static="no">
        <name>EVP_R_OPERATON_NOT_INITIALIZED</name>
        <initializer>151</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1384" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a3c5e5a5b49ee6764183e701c1de67777" prot="public" static="no">
        <name>EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1385" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1abc1ed22ea10e9e70c6d656c5ebbd1946" prot="public" static="no">
        <name>EVP_R_PRIVATE_KEY_DECODE_ERROR</name>
        <initializer>145</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1386" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a4a4c73fb8854e2a7668ab30e4dca1bc6" prot="public" static="no">
        <name>EVP_R_PRIVATE_KEY_ENCODE_ERROR</name>
        <initializer>146</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1387" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2d432526957c7f048518eef7cc80bfc0" prot="public" static="no">
        <name>EVP_R_PUBLIC_KEY_NOT_RSA</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1388" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a13ca22cd368d2599dd3d2cfda5e8a3b3" prot="public" static="no">
        <name>EVP_R_TOO_LARGE</name>
        <initializer>164</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1389" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a175fbe48cf82ab1ea19488e44e3c533b" prot="public" static="no">
        <name>EVP_R_UNKNOWN_CIPHER</name>
        <initializer>160</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1390" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a67c417076108074e3e4b3a8caffed1be" prot="public" static="no">
        <name>EVP_R_UNKNOWN_DIGEST</name>
        <initializer>161</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1391" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a549c0f0ae89d622dbf5434de591fc7d2" prot="public" static="no">
        <name>EVP_R_UNKNOWN_OPTION</name>
        <initializer>169</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1392" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a1af9e3cff19efeec7687014113565842" prot="public" static="no">
        <name>EVP_R_UNKNOWN_PBE_ALGORITHM</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1393" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a99c067d35e97b5e435645f517d0eab94" prot="public" static="no">
        <name>EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1394" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a33f16aa7fb41438850d78893ab2119c7" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_ALGORITHM</name>
        <initializer>156</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1395" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a50f760241d9b511b0077ae26a4d5a289" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_CIPHER</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1396" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1af46ccd900a257be6cb8109782e0779ba" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_KEYLENGTH</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1397" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a2d1393fefc1514f846c240e59d92ede7" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1398" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a65ad06bbf2bb06e82da29e3570de30ca" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_KEY_SIZE</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1399" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1afbef7a89e0b29e359de440e03636ba18" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_PRF</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1400" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a38165b8811baa5a6168a88177fbe86ff" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1401" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1a66fc6b298fdd993f9ab169f4be53f153" prot="public" static="no">
        <name>EVP_R_UNSUPPORTED_SALT_TYPE</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1402" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ae901dfdc9d82e210fde9f5d64abbf3c5" prot="public" static="no">
        <name>EVP_R_WRONG_FINAL_BLOCK_LENGTH</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1403" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="evp_8h_1ab9b0265663ac43b94fb4888c32815354" prot="public" static="no">
        <name>EVP_R_WRONG_PUBLIC_KEY_TYPE</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1404" column="9" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1404" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="evp_8h_1a895f55275cb193151f42c6c9e73f5ace" prot="public" static="no">
        <type>int</type>
        <definition>typedef int evp_sign_method(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, void *key)</definition>
        <argsstring>(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, void *key)</argsstring>
        <name>evp_sign_method</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="185" column="1" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evp_8h_1a91ed9f201836131062a4f24bfe2a1ece" prot="public" static="no">
        <type>int</type>
        <definition>typedef int evp_verify_method(int type, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, void *key)</definition>
        <argsstring>(int type, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, void *key)</argsstring>
        <name>evp_verify_method</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="188" column="1" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evp_8h_1a0ff32d74885621bf0ee4f962602e6c9b" prot="public" static="no">
        <type>struct <ref refid="structevp__cipher__info__st" kindref="compound">evp_cipher_info_st</ref></type>
        <definition>typedef struct evp_cipher_info_st  EVP_CIPHER_INFO</definition>
        <argsstring></argsstring>
        <name>EVP_CIPHER_INFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="evp_8h_1abaf2c67a32853bb1480c30819be5735e" prot="public" static="no">
        <type>struct <ref refid="structevp___encode___ctx__st" kindref="compound">evp_Encode_Ctx_st</ref></type>
        <definition>typedef struct evp_Encode_Ctx_st  EVP_ENCODE_CTX</definition>
        <argsstring></argsstring>
        <name>EVP_ENCODE_CTX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="evp_8h_1ae3a7157eff3f324990cc94b74f6c2436" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() EVP_PBE_KEYGEN(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)</argsstring>
        <name>EVP_PBE_KEYGEN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="446" column="1" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evp_8h_1ab6a59740427263dd6c5fe9e088e84e6f" prot="public" static="no">
        <type>int</type>
        <definition>typedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx)</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_gen_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1171" column="1" bodyfile="thirdparty/openssl/include/openssl/evp.h" bodystart="1171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="evp_8h_1aff41d734c0cba5932bf15eba86eadf8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_type</definition>
        <argsstring>(const EVP_MD *md)</argsstring>
        <name>EVP_MD_type</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa2be6df8c406dcdfb312833086ef54f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_pkey_type</definition>
        <argsstring>(const EVP_MD *md)</argsstring>
        <name>EVP_MD_pkey_type</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a90cd9b536d07403d5d14fde98299a6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_size</definition>
        <argsstring>(const EVP_MD *md)</argsstring>
        <name>EVP_MD_size</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad9801c7ee67a9a90f8c2da31e6e2f1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_block_size</definition>
        <argsstring>(const EVP_MD *md)</argsstring>
        <name>EVP_MD_block_size</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1d660e7c723e4b2d3fe6559511654df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long EVP_MD_flags</definition>
        <argsstring>(const EVP_MD *md)</argsstring>
        <name>EVP_MD_flags</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a71fed39076aec9a43d618177317e3691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_MD_CTX_md</definition>
        <argsstring>(const EVP_MD_CTX *ctx)</argsstring>
        <name>EVP_MD_CTX_md</name>
        <param>
          <type>const <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afb359a91e84ae999939f44785a069ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_nid</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_CIPHER_nid</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7a4ce50a7bab66b960866a8291156cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_block_size</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_CIPHER_block_size</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a71547eee68dcde07ec8befd0659d2b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_key_length</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_CIPHER_key_length</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa144b5155108548ceddbfd87f24f5236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_iv_length</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_CIPHER_iv_length</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3cbffdb7ed1c3933807b492182625ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long EVP_CIPHER_flags</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_CIPHER_flags</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a83cb99d692bd94481a58adc69ee94453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_CIPHER_CTX_cipher</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_cipher</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1add5b03ee5976575733d2a9c4dd28cffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_nid</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_nid</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af7398a43e16d1c61053f6c93f729d834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_block_size</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_block_size</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a59acb66206fbf0e0c2e6789983db3dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_key_length</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_key_length</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af3201d12bcf0e13a885ca4cf5ee379f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_iv_length</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_iv_length</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0f925191ac2ed2a6848559963dcd3dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_copy</definition>
        <argsstring>(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)</argsstring>
        <name>EVP_CIPHER_CTX_copy</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8387206a866b690014e6952f2ffe65f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EVP_CIPHER_CTX_get_app_data</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_get_app_data</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4fa322f7c3fe5fc570b8343d4d64fc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_CTX_set_app_data</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, void *data)</argsstring>
        <name>EVP_CIPHER_CTX_set_app_data</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6f8b7130068dbc4f03fb2cf65cee02bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long EVP_CIPHER_CTX_flags</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx)</argsstring>
        <name>EVP_CIPHER_CTX_flags</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad3b54eaf7457f51e2c12d46b49026bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_Cipher</definition>
        <argsstring>(EVP_CIPHER_CTX *c, unsigned char *out, const unsigned char *in, unsigned int inl)</argsstring>
        <name>EVP_Cipher</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afe58145aa88a8ee187d858c762c00399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_CTX_init</definition>
        <argsstring>(EVP_MD_CTX *ctx)</argsstring>
        <name>EVP_MD_CTX_init</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac6c8c38d6c8e3e274c9a974792b8342d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_CTX_cleanup</definition>
        <argsstring>(EVP_MD_CTX *ctx)</argsstring>
        <name>EVP_MD_CTX_cleanup</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a54bfa0296db2c131ef69e3a18c445357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
        <definition>EVP_MD_CTX* EVP_MD_CTX_create</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_MD_CTX_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae105ea6e5626f521fbe8cad0a85cbe46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_CTX_destroy</definition>
        <argsstring>(EVP_MD_CTX *ctx)</argsstring>
        <name>EVP_MD_CTX_destroy</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab42e7b7bc6ec24356f278a660fcc61f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_CTX_copy_ex</definition>
        <argsstring>(EVP_MD_CTX *out, const EVP_MD_CTX *in)</argsstring>
        <name>EVP_MD_CTX_copy_ex</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0b06516ba8019d5d00debffa0bf160ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_CTX_set_flags</definition>
        <argsstring>(EVP_MD_CTX *ctx, int flags)</argsstring>
        <name>EVP_MD_CTX_set_flags</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9a83cbd285301cd2a056795fe3f73d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_CTX_clear_flags</definition>
        <argsstring>(EVP_MD_CTX *ctx, int flags)</argsstring>
        <name>EVP_MD_CTX_clear_flags</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a95bc8edc0143725769496d0bfb028345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_CTX_test_flags</definition>
        <argsstring>(const EVP_MD_CTX *ctx, int flags)</argsstring>
        <name>EVP_MD_CTX_test_flags</name>
        <param>
          <type>const <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a039cce8e234ebef1284710b019075ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestInit_ex</definition>
        <argsstring>(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)</argsstring>
        <name>EVP_DigestInit_ex</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab5b2f1ef6d30db8471c673194949c245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestUpdate</definition>
        <argsstring>(EVP_MD_CTX *ctx, const void *d, size_t cnt)</argsstring>
        <name>EVP_DigestUpdate</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a06e905e22b95690a5417e575c486373a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestFinal_ex</definition>
        <argsstring>(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)</argsstring>
        <name>EVP_DigestFinal_ex</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aaf1dcfa403148677376101633deb9025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_Digest</definition>
        <argsstring>(const void *data, size_t count, unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)</argsstring>
        <name>EVP_Digest</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab8002557ec7e9e39c4f704bb4340e405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_MD_CTX_copy</definition>
        <argsstring>(EVP_MD_CTX *out, const EVP_MD_CTX *in)</argsstring>
        <name>EVP_MD_CTX_copy</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a762bf3295dcb7dd02c47b27b42a1aedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestInit</definition>
        <argsstring>(EVP_MD_CTX *ctx, const EVP_MD *type)</argsstring>
        <name>EVP_DigestInit</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2fe36f584ecc0477b25bd6eb52144dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestFinal</definition>
        <argsstring>(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)</argsstring>
        <name>EVP_DigestFinal</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a793a2351182a3dd7996655c931fdff12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_read_pw_string</definition>
        <argsstring>(char *buf, int length, const char *prompt, int verify)</argsstring>
        <name>EVP_read_pw_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afdd6a035009b12db03342b64ca2bf354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_read_pw_string_min</definition>
        <argsstring>(char *buf, int minlen, int maxlen, const char *prompt, int verify)</argsstring>
        <name>EVP_read_pw_string_min</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8d8f8a39e95b1c5108ece59a93426bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_set_pw_prompt</definition>
        <argsstring>(const char *prompt)</argsstring>
        <name>EVP_set_pw_prompt</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3d87467ea7dc95dc7320370e63e3f95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* EVP_get_pw_prompt</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_get_pw_prompt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aebaa7389dd2874c05572a9c8fae5b271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_BytesToKey</definition>
        <argsstring>(const EVP_CIPHER *type, const EVP_MD *md, const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key, unsigned char *iv)</argsstring>
        <name>EVP_BytesToKey</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>salt</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>datal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab745fb94c8c36afc20b275df349c8f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_CTX_set_flags</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, int flags)</argsstring>
        <name>EVP_CIPHER_CTX_set_flags</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4b874044a3cf07aaa8c31889488f1006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_CTX_clear_flags</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, int flags)</argsstring>
        <name>EVP_CIPHER_CTX_clear_flags</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9db236f080737dc333d0b0c7e906339d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_test_flags</definition>
        <argsstring>(const EVP_CIPHER_CTX *ctx, int flags)</argsstring>
        <name>EVP_CIPHER_CTX_test_flags</name>
        <param>
          <type>const <ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4abfc632c10f7a78b9eac68c9ab38641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncryptInit</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)</argsstring>
        <name>EVP_EncryptInit</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa1ef7bdeb2a1f92e5f40a3fe1d87da65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncryptInit_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv)</argsstring>
        <name>EVP_EncryptInit_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab2b67d1cc256418ee42bdfcd5a329cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncryptUpdate</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)</argsstring>
        <name>EVP_EncryptUpdate</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab20ff5709d2a4c4ca29a8065ffab5865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncryptFinal_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_EncryptFinal_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1c835d8823936c1fc6bfe1e351293e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncryptFinal</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_EncryptFinal</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad186e920da68ea186bc148328344d090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecryptInit</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)</argsstring>
        <name>EVP_DecryptInit</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4c1567e98a0a84f8dbc1ff9d8920b288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecryptInit_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv)</argsstring>
        <name>EVP_DecryptInit_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6a6a756b17f35f9e128cc6d658842a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecryptUpdate</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)</argsstring>
        <name>EVP_DecryptUpdate</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aed9908ad12628bc18aa98a995620ede2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecryptFinal</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)</argsstring>
        <name>EVP_DecryptFinal</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>outm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a99321b3f466a397b194400318cdca48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecryptFinal_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)</argsstring>
        <name>EVP_DecryptFinal_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>outm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac1ba1880b357041a10a4818079b9578b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CipherInit</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc)</argsstring>
        <name>EVP_CipherInit</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aab11ae066491958c229882a364c3feb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CipherInit_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv, int enc)</argsstring>
        <name>EVP_CipherInit_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a21eccfd88ae10107b332894440bb9d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CipherUpdate</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)</argsstring>
        <name>EVP_CipherUpdate</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af74ac8c9d90476b9b253daad5f825bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CipherFinal</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)</argsstring>
        <name>EVP_CipherFinal</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>outm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adcf7aad2413c9c427e3306d0008c7db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CipherFinal_ex</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)</argsstring>
        <name>EVP_CipherFinal_ex</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>outm</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1abbda500229b8b9d638b86ae919dc1fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_SignFinal</definition>
        <argsstring>(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s, EVP_PKEY *pkey)</argsstring>
        <name>EVP_SignFinal</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a34ba7980626484b32172979f336b88c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_VerifyFinal</definition>
        <argsstring>(EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, EVP_PKEY *pkey)</argsstring>
        <name>EVP_VerifyFinal</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sigbuf</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6e42bb779758e541a2987e52223e7e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestSignInit</definition>
        <argsstring>(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)</argsstring>
        <name>EVP_DigestSignInit</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>EVP_PKEY_CTX **</type>
          <declname>pctx</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7aa0550e2f796bb346e3e8faffe161c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestSignFinal</definition>
        <argsstring>(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen)</argsstring>
        <name>EVP_DigestSignFinal</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sigret</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>siglen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad21191a8a67b6c3517165e0c3b9146f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestVerifyInit</definition>
        <argsstring>(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)</argsstring>
        <name>EVP_DigestVerifyInit</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>EVP_PKEY_CTX **</type>
          <declname>pctx</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1c25e2389c9db04a90ce410767f8a028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DigestVerifyFinal</definition>
        <argsstring>(EVP_MD_CTX *ctx, unsigned char *sig, size_t siglen)</argsstring>
        <name>EVP_DigestVerifyFinal</name>
        <param>
          <type><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siglen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a839b1feae6655e78ac166e7e41de2309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_OpenInit</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, const unsigned char *ek, int ekl, const unsigned char *iv, EVP_PKEY *priv)</argsstring>
        <name>EVP_OpenInit</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ek</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ekl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6979c4e9081a7591731fb571e56fddab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_OpenFinal</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_OpenFinal</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab601461d66389d9bac3c6b00ec276ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_SealInit</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char **ek, int *ekl, unsigned char *iv, EVP_PKEY **pubk, int npubk)</argsstring>
        <name>EVP_SealInit</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>ek</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ekl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>pubk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>npubk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6797565fe808faeba54489af14744758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_SealFinal</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_SealFinal</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2070f29a0a8fb6009d38befdb8771e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_EncodeInit</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx)</argsstring>
        <name>EVP_EncodeInit</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa5d5c83ace6e0c141c2b937e616435bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_EncodeUpdate</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)</argsstring>
        <name>EVP_EncodeUpdate</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0ccdb9e3bec463870e44d932ae57a41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_EncodeFinal</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_EncodeFinal</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a43fd1fec0d0ec677085941f3f229174b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_EncodeBlock</definition>
        <argsstring>(unsigned char *t, const unsigned char *f, int n)</argsstring>
        <name>EVP_EncodeBlock</name>
        <param>
          <type>unsigned char *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aeb71f22de9d4c09b06dfd775842d8a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_DecodeInit</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx)</argsstring>
        <name>EVP_DecodeInit</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a283eb1065ea7e78a4139c41e3cca4b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecodeUpdate</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)</argsstring>
        <name>EVP_DecodeUpdate</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2ed7043f0887c0cb7db26f83768c1c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecodeFinal</definition>
        <argsstring>(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)</argsstring>
        <name>EVP_DecodeFinal</name>
        <param>
          <type><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a58c4f422499e9ce944895df32fcd30a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_DecodeBlock</definition>
        <argsstring>(unsigned char *t, const unsigned char *f, int n)</argsstring>
        <name>EVP_DecodeBlock</name>
        <param>
          <type>unsigned char *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad32900fec7d9cb579e5d0bad7a4e1daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_CTX_init</definition>
        <argsstring>(EVP_CIPHER_CTX *a)</argsstring>
        <name>EVP_CIPHER_CTX_init</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a41a7598b73c126d9f881296cad6305b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_cleanup</definition>
        <argsstring>(EVP_CIPHER_CTX *a)</argsstring>
        <name>EVP_CIPHER_CTX_cleanup</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a611fc0e27e9f23ebc3c1d8fdc52c2d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
        <definition>EVP_CIPHER_CTX* EVP_CIPHER_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_CIPHER_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ade42dfc83575e491629d8c529ba6a2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_CTX_free</definition>
        <argsstring>(EVP_CIPHER_CTX *a)</argsstring>
        <name>EVP_CIPHER_CTX_free</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad790f422c8622c30a4e9d79ba6d444e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_set_key_length</definition>
        <argsstring>(EVP_CIPHER_CTX *x, int keylen)</argsstring>
        <name>EVP_CIPHER_CTX_set_key_length</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a171bd50b3014686da08759b1282d5a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_set_padding</definition>
        <argsstring>(EVP_CIPHER_CTX *c, int pad)</argsstring>
        <name>EVP_CIPHER_CTX_set_padding</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2db36515f41f25199834cf9c3102e850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_ctrl</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)</argsstring>
        <name>EVP_CIPHER_CTX_ctrl</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2f171ee3d2e29079c553d8cfafeaadaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_CTX_rand_key</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, unsigned char *key)</argsstring>
        <name>EVP_CIPHER_CTX_rand_key</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2d39e4a3c1f89551732fb39ce8df19fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref> *</type>
        <definition>BIO_METHOD* BIO_f_md</definition>
        <argsstring>(void)</argsstring>
        <name>BIO_f_md</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac005bf845652477e4e90051e2c981b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref> *</type>
        <definition>BIO_METHOD* BIO_f_base64</definition>
        <argsstring>(void)</argsstring>
        <name>BIO_f_base64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae38a2c0160131c560c98fbf63d1eb65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref> *</type>
        <definition>BIO_METHOD* BIO_f_cipher</definition>
        <argsstring>(void)</argsstring>
        <name>BIO_f_cipher</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a29aaa41692348111a57bc266111a4092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref> *</type>
        <definition>BIO_METHOD* BIO_f_reliable</definition>
        <argsstring>(void)</argsstring>
        <name>BIO_f_reliable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2dbbfba357713074dcac81299ad8603a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BIO_set_cipher</definition>
        <argsstring>(BIO *b, const EVP_CIPHER *c, const unsigned char *k, const unsigned char *i, int enc)</argsstring>
        <name>BIO_set_cipher</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a5183830cf039ea4d9a2c1bd3c539e9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_md_null</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_md_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4b583f3de5fc66b04f675428da25efd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_md2</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_md2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad232ca5dcef4ec58b182cb967f519999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_md4</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_md4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3ccaad2c97f5cf27adb461b1b50aeabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_md5</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_md5</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aee62cb107a208bd6984dd767f9feb8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa090d659a494a10525e38d272efb01ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8b1c23bb5d8c8ae31221ced53a177bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_dss</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_dss</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2cbee5126c44c2bc5b4a90b957f1074e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_dss1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_dss1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aaa0ea19bd9515b7ce8a247a5fc352242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_ecdsa</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_ecdsa</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a65f23037490a459c3ca7ba4cdd25865a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha224</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha224</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afe55e56742a9b9ecffdaef7e95a6707a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha256</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha256</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a031405a10c84711b9a9699fadc8dbf2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha384</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha384</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aceda0d5da59b56159d2e3515039a46ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_sha512</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_sha512</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a57d2a259b1d26d2611fa617b32fb827f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_mdc2</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_mdc2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afd7e14e3c2c45effd5228c96aa157faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_ripemd160</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_ripemd160</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a82d02def9b5021edc6833206177ae275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_whirlpool</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_whirlpool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a70a05495ee115c6eb26d958a5ac75c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_enc_null</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_enc_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8a838b5180b6e9a5f12fd3564b19d2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a45aacb59c91a4027accc449341770e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="703" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a15cd790065b87edb29a77daef837bb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7823e992b844399fafe684ebfc0227a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa0cad6bbfaf0db588ac5969230bcc9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a111ad1fb106ccdf90df8cee7e3dd5e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a523d9a09cbbb3ca63565fd3aa1fe593d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acdd527002cab66c2de04d26ef1816738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a979777986b66cae60433e4f2cd6b30ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af9ff116f4a6db70676eb2c0fa1d886e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a78f69dfee98ca19c3bf5d2b0beab61b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a364a66465f6de78fe998fc9300914f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a358aa5c814e0b0223bf3d39ec3410f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a099340be76af189f6d46a86c50699c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6e7bb35126ef174945a8d0cd71477b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8ba85e78fac7521ad71cb29ef62beab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad486662734bfa970f4124b2f47111e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a191c1d946437661ee23de2ad9b3383e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_des_ede3_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_des_ede3_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa5fa73e7317fb6781dc0701cad4c9b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_desx_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_desx_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9cb683240f384ddbd0f3279960af93ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc4</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae5cbdfcb5012a07fec8df1d6b9c5d772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc4_40</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc4_40</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aaf78cc87b63d5eef18e12d30d85774f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc4_hmac_md5</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc4_hmac_md5</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a15f12a207d41aec715b8abf4e7e74496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_idea_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_idea_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a62c3a45f9d532bac4ec9d64bc293f429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_idea_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_idea_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2eadffa6a0ca29a7dd639eb31caee7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_idea_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_idea_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a74149809e011a71351d4dcdfa844fc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_idea_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_idea_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a50416510135c46314f0d8c60d12057c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac7d0f7590921dde70bebeebadd2fec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="754" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a104bcd969bcc30dc3e7e77d63a38a87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_40_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_40_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a09cd194a211931839f1e7bb8e578099e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_64_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_64_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7f91d18b9b6cdb1281f2a81f45145e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="757" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3324d58dca1e50ab6e2ab969181f7db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc2_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc2_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab33fe75c08ee35f9c1ee6d0f2be1aa86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_bf_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_bf_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae2030ad7ddcf169e28998eeaa5515b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_bf_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_bf_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a10573de73bd938df60eefa593ad7548f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_bf_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_bf_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a849847ec9fbcfdf3068d30f534fb8dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_bf_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_bf_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a39bf1d72f2da11cf6c848c586bf46748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_cast5_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_cast5_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="769" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a55476e12be0cfce87e01be602c4eb450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_cast5_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_cast5_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a5371829d0ea2a8bd8b5b38d0afdd09dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_cast5_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_cast5_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="771" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aaf202523881e5021583841c4df07df74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_cast5_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_cast5_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a182f18185c951f37d97dba4dd6180034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc5_32_12_16_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc5_32_12_16_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac85a828d85de8b3cb7f47087c30a9cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc5_32_12_16_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc5_32_12_16_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="777" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a74908d4e17555ec53b404a16d1a0f816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc5_32_12_16_cfb64</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc5_32_12_16_cfb64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab687970cd57e4867e1d6ef4451fd4ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_rc5_32_12_16_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_rc5_32_12_16_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a209f6181b461e8e0177f4a8fd82c930e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2747bac943db15c97167ac37fdc2af43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="784" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1c5c30aeb6e30b484a631746d64db715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="785" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a95457efd23f815aaa9d54a39f71bd4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a254c8eaf8590db3cbc3860ec792d8ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adaf103188f4abc8d20ee9134537d83a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="789" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac19a4bd8d91d97859efbf80ffe89ce44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_ctr</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_ctr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a88765e170bce2b5ef3fe5ce1550a14b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_ccm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_ccm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="791" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a5020a805854bba592aa09a6633ac6ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_gcm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_gcm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a5fe65936738f1beb999fa2a0e8de9921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_xts</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_xts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="793" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad5cdeb33ff39445a537bf1f839096f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a06625e6b350dcb0d99e05bde8d813867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1703e0430f78384afa3d53bb74e85147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6c566f0f7831881bd835db251372790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acbdb7490d5e13640ea7b8a289ea6e42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1771a8615965f0ae102094e6a0edc9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad0f8efe7882f9114b78c6b330a8e1200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_ctr</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_ctr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="801" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad4aa12fbda0e99998f57de7dae220850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_ccm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_ccm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae63a2faa3c44c2c42166fbd97b503557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_192_gcm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_192_gcm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a85add8675107fbe5efea24d6a1829fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="804" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a597a638984cfe169f5b794a01076d289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a5bc51df4e3b7c3d78eee17bddf110d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4bf9f0274a43b3964f1c880900c80ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8b03002fdd1b834261e0891b0e0a9d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aff6c30a4913bd5c4c3a7f3185fdb99ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af5e7e479c96ee070bd04a8a31cc4c349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_ctr</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_ctr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af3495019c775a2e7d00d232029b2c2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_ccm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_ccm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4a0ff99bc42dadda3b3c796a4ea5e1b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_gcm</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_gcm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad3e7c6ca0a95dab2d7288dcfd43c18db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_xts</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_xts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a28e9fc65a3670a7e53e2b5c56c7572d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_128_cbc_hmac_sha1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_128_cbc_hmac_sha1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6bc83c7af1c9afd4d232ccaf0adb6796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_aes_256_cbc_hmac_sha1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_aes_256_cbc_hmac_sha1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a862350f1c1ed13dbac96f206d2675b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="821" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a204d1d59a0ec740ed29ec0ebcc2d9c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a565e9ae5f416fdb095373c9b6862cfda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2fc16a80401a5b224371b8104996b1cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab55af1e8ad8785058ddf8982e78cbe14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab7adac5e349205c9ca648ddcc53e2322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_128_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_128_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af2948d90f12d8fabb382287c7259884b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a40e2b8cba4baa4ec4aa467bbd1defeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab97179b284847441ee37e59e4ea5f8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="830" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae11923fc82dd8bf4fa91e8083ac6fb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a36c44e8b3edc01cd224dba9d72cb502c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acbc9c2f673d04c66f83690a8870fb89e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_192_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_192_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a157155aa63bfe7388bf8cc90ced66735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="835" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6de35c364f330f1decfb3444c4c6fa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ada0cbd1b00f0b153c5b1883f7ebd5568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_cfb1</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_cfb1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae708a5bfbfb0e3fc592fd8213c46bd23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_cfb8</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_cfb8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad346a576955073f06ac848ed9ce7374d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a75df00b688713b3dcfa905708d80f274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_camellia_256_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_camellia_256_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0765729b4968911dce03a42ab850d5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_seed_ecb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_seed_ecb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9cc91a2c266ff63ae1318e702e081a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_seed_cbc</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_seed_cbc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a16659133a33b5d4b07cda14130784b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_seed_cfb128</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_seed_cfb128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9bbb03670c1b743e89bc3348950fa09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_seed_ofb</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_seed_ofb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="849" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aea7e540787a1035af55b298b60f1899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OPENSSL_add_all_algorithms_noconf</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_add_all_algorithms_noconf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adeac9ad9e4266a054ec37da55e4ac669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OPENSSL_add_all_algorithms_conf</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_add_all_algorithms_conf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="853" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa2f15e3559c5289707c1b01058ee82ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenSSL_add_all_ciphers</definition>
        <argsstring>(void)</argsstring>
        <name>OpenSSL_add_all_ciphers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="863" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acef7bc24a6b7ce392c97854b112f1f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenSSL_add_all_digests</definition>
        <argsstring>(void)</argsstring>
        <name>OpenSSL_add_all_digests</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad5c01754b389700f44781b1ad056eed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_add_cipher</definition>
        <argsstring>(const EVP_CIPHER *cipher)</argsstring>
        <name>EVP_add_cipher</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4b14b542951df9eb9b26975a048cb469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_add_digest</definition>
        <argsstring>(const EVP_MD *digest)</argsstring>
        <name>EVP_add_digest</name>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="870" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aead9b446ac5ebd90dc7be0dbe6aba2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
        <definition>const EVP_CIPHER* EVP_get_cipherbyname</definition>
        <argsstring>(const char *name)</argsstring>
        <name>EVP_get_cipherbyname</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="872" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a300143fb70c633da36138f96000e39c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
        <definition>const EVP_MD* EVP_get_digestbyname</definition>
        <argsstring>(const char *name)</argsstring>
        <name>EVP_get_digestbyname</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6666c96ec4253929ce314e4c1a64c7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a457e51de96b947a30ebf43b7d1a7ce39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_do_all</definition>
        <argsstring>(void(*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void *arg)</argsstring>
        <name>EVP_CIPHER_do_all</name>
        <param>
          <type>void(*)(const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *ciph, const char *from, const char *to, void *x)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a77d81f1d87ab9081f43171e88b8aeb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_CIPHER_do_all_sorted</definition>
        <argsstring>(void(*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void *arg)</argsstring>
        <name>EVP_CIPHER_do_all_sorted</name>
        <param>
          <type>void(*)(const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *ciph, const char *from, const char *to, void *x)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6070f0353238a5274eb7007dd16778fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_do_all</definition>
        <argsstring>(void(*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void *arg)</argsstring>
        <name>EVP_MD_do_all</name>
        <param>
          <type>void(*)(const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *ciph, const char *from, const char *to, void *x)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4d0bcc5461d36f51e94071b5528e0e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_MD_do_all_sorted</definition>
        <argsstring>(void(*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void *arg)</argsstring>
        <name>EVP_MD_do_all_sorted</name>
        <param>
          <type>void(*)(const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *ciph, const char *from, const char *to, void *x)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="883" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2a3cc855c93c420d9e1ef8b4d30a540c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_decrypt_old</definition>
        <argsstring>(unsigned char *dec_key, const unsigned char *enc_key, int enc_key_len, EVP_PKEY *private_key)</argsstring>
        <name>EVP_PKEY_decrypt_old</name>
        <param>
          <type>unsigned char *</type>
          <declname>dec_key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>enc_key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enc_key_len</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>private_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a60a6bae910ea1a0e49f18a033df17d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_encrypt_old</definition>
        <argsstring>(unsigned char *enc_key, const unsigned char *key, int key_len, EVP_PKEY *pub_key)</argsstring>
        <name>EVP_PKEY_encrypt_old</name>
        <param>
          <type>unsigned char *</type>
          <declname>enc_key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key_len</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pub_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adb99946d1a1b89f6d0b9e718c5bfba39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_type</definition>
        <argsstring>(int type)</argsstring>
        <name>EVP_PKEY_type</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="892" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a50f911ea5ed70e50da9015ed87f1c433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_id</definition>
        <argsstring>(const EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_id</name>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a54be962665ad71c2b0b09ee6710d1ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_base_id</definition>
        <argsstring>(const EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_base_id</name>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="894" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a08ffd8881cb06d8f24e899a84d957be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_bits</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_bits</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a091bd35ff66b3254a028501991262f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_size</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_size</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="896" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0bd55be3939b5747acd604ea97c50a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set_type</definition>
        <argsstring>(EVP_PKEY *pkey, int type)</argsstring>
        <name>EVP_PKEY_set_type</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a363155bfaa4618baaebca506acb6a976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set_type_str</definition>
        <argsstring>(EVP_PKEY *pkey, const char *str, int len)</argsstring>
        <name>EVP_PKEY_set_type_str</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="898" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae97d1eb37f46e18f352632c7bf372b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_assign</definition>
        <argsstring>(EVP_PKEY *pkey, int type, void *key)</argsstring>
        <name>EVP_PKEY_assign</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af5dfe5a13c1fa918458115be068e167a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EVP_PKEY_get0</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get0</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae365106c4765c7a90cd159a19f9e9307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set1_RSA</definition>
        <argsstring>(EVP_PKEY *pkey, struct rsa_st *key)</argsstring>
        <name>EVP_PKEY_set1_RSA</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>struct <ref refid="structrsa__st" kindref="compound">rsa_st</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a099bf05b0933b7d7457dc5d74a29daf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structrsa__st" kindref="compound">rsa_st</ref> *</type>
        <definition>struct rsa_st* EVP_PKEY_get1_RSA</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get1_RSA</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0db815373756c3b104552aa0063ab8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set1_DSA</definition>
        <argsstring>(EVP_PKEY *pkey, struct dsa_st *key)</argsstring>
        <name>EVP_PKEY_set1_DSA</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>struct <ref refid="structdsa__st" kindref="compound">dsa_st</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acb014c5d00b6e79f70a642ad1b44bf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structdsa__st" kindref="compound">dsa_st</ref> *</type>
        <definition>struct dsa_st* EVP_PKEY_get1_DSA</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get1_DSA</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="910" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a917b44470199e1a730a052e96fad68a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set1_DH</definition>
        <argsstring>(EVP_PKEY *pkey, struct dh_st *key)</argsstring>
        <name>EVP_PKEY_set1_DH</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>struct <ref refid="structdh__st" kindref="compound">dh_st</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad71e9459a699e977ba1bd46a49063acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structdh__st" kindref="compound">dh_st</ref> *</type>
        <definition>struct dh_st* EVP_PKEY_get1_DH</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get1_DH</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab398e7faf3e4e7487e704d1261265db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_set1_EC_KEY</definition>
        <argsstring>(EVP_PKEY *pkey, struct ec_key_st *key)</argsstring>
        <name>EVP_PKEY_set1_EC_KEY</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>struct ec_key_st *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9c49ddda5969cb86406893c5681a4787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct ec_key_st *</type>
        <definition>struct ec_key_st* EVP_PKEY_get1_EC_KEY</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get1_EC_KEY</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a78cee333b609a4259d8e4d4c42f5ddd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* EVP_PKEY_new</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_PKEY_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="923" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a448d9f9209a54694aff045d403850db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_free</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_free</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="924" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a181f5a33dea747debaa8d62431f86937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* d2i_PublicKey</definition>
        <argsstring>(int type, EVP_PKEY **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_PublicKey</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="926" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6cba66b0bb3cfbf5dcfee433890f1a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_PublicKey</definition>
        <argsstring>(EVP_PKEY *a, unsigned char **pp)</argsstring>
        <name>i2d_PublicKey</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a063088abd0565ba322fe6ac3862c5f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* d2i_PrivateKey</definition>
        <argsstring>(int type, EVP_PKEY **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_PrivateKey</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="930" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac6eab6326e1b799c023e4156137f20aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* d2i_AutoPrivateKey</definition>
        <argsstring>(EVP_PKEY **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_AutoPrivateKey</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae3cb941ded6c11df245233e7436680ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_PrivateKey</definition>
        <argsstring>(EVP_PKEY *a, unsigned char **pp)</argsstring>
        <name>i2d_PrivateKey</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="934" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a53bf536fee771202d5eb63ab39cd742b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_copy_parameters</definition>
        <argsstring>(EVP_PKEY *to, const EVP_PKEY *from)</argsstring>
        <name>EVP_PKEY_copy_parameters</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9cf6d1306481a12d5700eb013b4fb24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_missing_parameters</definition>
        <argsstring>(const EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_missing_parameters</name>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="937" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a843dac64aaabc705c2c657b247fb7536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_save_parameters</definition>
        <argsstring>(EVP_PKEY *pkey, int mode)</argsstring>
        <name>EVP_PKEY_save_parameters</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1de6b78348aacd907a1e1e3953b76dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_cmp_parameters</definition>
        <argsstring>(const EVP_PKEY *a, const EVP_PKEY *b)</argsstring>
        <name>EVP_PKEY_cmp_parameters</name>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="939" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad4a9a61e105cbe0f875490ba773948a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_cmp</definition>
        <argsstring>(const EVP_PKEY *a, const EVP_PKEY *b)</argsstring>
        <name>EVP_PKEY_cmp</name>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="941" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a78621ea4b475b93b5ab1191895864cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_print_public</definition>
        <argsstring>(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)</argsstring>
        <name>EVP_PKEY_print_public</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>ASN1_PCTX *</type>
          <declname>pctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ada5c66d3f1e9d0c2b5b4d19a545d34e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_print_private</definition>
        <argsstring>(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)</argsstring>
        <name>EVP_PKEY_print_private</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>ASN1_PCTX *</type>
          <declname>pctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a035d4c2897a29d8c1749d5e22ce4d94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_print_params</definition>
        <argsstring>(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)</argsstring>
        <name>EVP_PKEY_print_params</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>ASN1_PCTX *</type>
          <declname>pctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab97462edded31d985db968904ce5488c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_get_default_digest_nid</definition>
        <argsstring>(EVP_PKEY *pkey, int *pnid)</argsstring>
        <name>EVP_PKEY_get_default_digest_nid</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pnid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa1c4358ddebcc50cb551d1b4ac1f1f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_type</definition>
        <argsstring>(const EVP_CIPHER *ctx)</argsstring>
        <name>EVP_CIPHER_type</name>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3a3e94ce6ad87d960addd62106a6d71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_param_to_asn1</definition>
        <argsstring>(EVP_CIPHER_CTX *c, ASN1_TYPE *type)</argsstring>
        <name>EVP_CIPHER_param_to_asn1</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab4235d136f646de5e37bc7521bafedc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_asn1_to_param</definition>
        <argsstring>(EVP_CIPHER_CTX *c, ASN1_TYPE *type)</argsstring>
        <name>EVP_CIPHER_asn1_to_param</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="956" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9a3e7bae1960ea1bb1f327556e91fa7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_set_asn1_iv</definition>
        <argsstring>(EVP_CIPHER_CTX *c, ASN1_TYPE *type)</argsstring>
        <name>EVP_CIPHER_set_asn1_iv</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="959" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adeb82380791bf5edd5edef55af8e7ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_CIPHER_get_asn1_iv</definition>
        <argsstring>(EVP_CIPHER_CTX *c, ASN1_TYPE *type)</argsstring>
        <name>EVP_CIPHER_get_asn1_iv</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="960" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4387b16be6064a826d299b7010446420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PKCS5_PBE_keyivgen</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)</argsstring>
        <name>PKCS5_PBE_keyivgen</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>int</type>
          <declname>en_de</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="963" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1bb77e724e5220b3b73a095bfedf0842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PKCS5_PBKDF2_HMAC_SHA1</definition>
        <argsstring>(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out)</argsstring>
        <name>PKCS5_PBKDF2_HMAC_SHA1</name>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>salt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>saltlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keylen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ad2d305a0e5bfa68ff4b52a5ab2232bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PKCS5_PBKDF2_HMAC</definition>
        <argsstring>(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, const EVP_MD *digest, int keylen, unsigned char *out)</argsstring>
        <name>PKCS5_PBKDF2_HMAC</name>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>salt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>saltlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>digest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keylen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="969" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a54d002f66b3e64fba20647a2c51a9704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PKCS5_v2_PBE_keyivgen</definition>
        <argsstring>(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)</argsstring>
        <name>PKCS5_v2_PBE_keyivgen</name>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>int</type>
          <declname>en_de</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="973" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a67a4455ded91d035c6d42f5a548a4165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PKCS5_PBE_add</definition>
        <argsstring>(void)</argsstring>
        <name>PKCS5_PBE_add</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7bd14b793dd2b4962301dfc2fd1551a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PBE_CipherInit</definition>
        <argsstring>(ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)</argsstring>
        <name>EVP_PBE_CipherInit</name>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>pbe_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>en_de</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a531419764fce83c624737051b512aee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PBE_alg_add_type</definition>
        <argsstring>(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN *keygen)</argsstring>
        <name>EVP_PBE_alg_add_type</name>
        <param>
          <type>int</type>
          <declname>pbe_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pbe_nid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cipher_nid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>md_nid</declname>
        </param>
        <param>
          <type>EVP_PBE_KEYGEN *</type>
          <declname>keygen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa48195a5df04608ecb4a5e180e3ddd76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PBE_alg_add</definition>
        <argsstring>(int nid, const EVP_CIPHER *cipher, const EVP_MD *md, EVP_PBE_KEYGEN *keygen)</argsstring>
        <name>EVP_PBE_alg_add</name>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>const <ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref> *</type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>EVP_PBE_KEYGEN *</type>
          <declname>keygen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a73961a2e90296a0231606519e38e8030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PBE_find</definition>
        <argsstring>(int type, int pbe_nid, int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)</argsstring>
        <name>EVP_PBE_find</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pbe_nid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pcnid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pmnid</declname>
        </param>
        <param>
          <type>EVP_PBE_KEYGEN **</type>
          <declname>pkeygen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aefa959216c91c9338f73243cafab9601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PBE_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_PBE_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="995" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac69faeebafb924b617a397940bcfb733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_asn1_get_count</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_PKEY_asn1_get_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0fb7eeae4bd2207311a1d67ea991d89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EVP_PKEY_ASN1_METHOD *</type>
        <definition>const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_get0</definition>
        <argsstring>(int idx)</argsstring>
        <name>EVP_PKEY_asn1_get0</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1008" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a23406c37c74bde73467f569da758a34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EVP_PKEY_ASN1_METHOD *</type>
        <definition>const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find</definition>
        <argsstring>(ENGINE **pe, int type)</argsstring>
        <name>EVP_PKEY_asn1_find</name>
        <param>
          <type>ENGINE **</type>
          <declname>pe</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1adcf41ab033054edb828305ace21f5cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EVP_PKEY_ASN1_METHOD *</type>
        <definition>const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find_str</definition>
        <argsstring>(ENGINE **pe, const char *str, int len)</argsstring>
        <name>EVP_PKEY_asn1_find_str</name>
        <param>
          <type>ENGINE **</type>
          <declname>pe</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a24a21847a06c5069887f6ff7a04779c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_asn1_add0</definition>
        <argsstring>(const EVP_PKEY_ASN1_METHOD *ameth)</argsstring>
        <name>EVP_PKEY_asn1_add0</name>
        <param>
          <type>const EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1abf307c86ebbf63ae3592898e06f3a646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_asn1_add_alias</definition>
        <argsstring>(int to, int from)</argsstring>
        <name>EVP_PKEY_asn1_add_alias</name>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aad25fab87abddfbce38ba4baed6545c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_asn1_get0_info</definition>
        <argsstring>(int *ppkey_id, int *pkey_base_id, int *ppkey_flags, const char **pinfo, const char **ppem_str, const EVP_PKEY_ASN1_METHOD *ameth)</argsstring>
        <name>EVP_PKEY_asn1_get0_info</name>
        <param>
          <type>int *</type>
          <declname>ppkey_id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pkey_base_id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ppkey_flags</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pinfo</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>ppem_str</declname>
        </param>
        <param>
          <type>const EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1014" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae77628ab895e7ac3f41380a82229993b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EVP_PKEY_ASN1_METHOD *</type>
        <definition>const EVP_PKEY_ASN1_METHOD* EVP_PKEY_get0_asn1</definition>
        <argsstring>(EVP_PKEY *pkey)</argsstring>
        <name>EVP_PKEY_get0_asn1</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1018" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af46bf8262a8bfecb155cb6c98ecbb6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_ASN1_METHOD *</type>
        <definition>EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_new</definition>
        <argsstring>(int id, int flags, const char *pem_str, const char *info)</argsstring>
        <name>EVP_PKEY_asn1_new</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pem_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1019" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a13290250a5ea052ed9cc4fc660a8f3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_copy</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *dst, const EVP_PKEY_ASN1_METHOD *src)</argsstring>
        <name>EVP_PKEY_asn1_copy</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const EVP_PKEY_ASN1_METHOD *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af2c857d3d286f61c99defba4d65653c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_free</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth)</argsstring>
        <name>EVP_PKEY_asn1_free</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a11a3eef1639ddf7d93dc70f0d8a8fbba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_set_public</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth, int(*pub_decode)(EVP_PKEY *pk, X509_PUBKEY *pub), int(*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk), int(*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int(*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx), int(*pkey_size)(const EVP_PKEY *pk), int(*pkey_bits)(const EVP_PKEY *pk))</argsstring>
        <name>EVP_PKEY_asn1_set_public</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk, <ref refid="struct_x509__pubkey__st" kindref="compound">X509_PUBKEY</ref> *pub)</type>
          <declname>pub_decode</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="struct_x509__pubkey__st" kindref="compound">X509_PUBKEY</ref> *pub, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk)</type>
          <declname>pub_encode</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *a, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *b)</type>
          <declname>pub_cmp</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structbio__st" kindref="compound">BIO</ref> *out, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, int indent, ASN1_PCTX *pctx)</type>
          <declname>pub_print</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk)</type>
          <declname>pkey_size</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk)</type>
          <declname>pkey_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1024" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4090b19c599e0383e1f3a2aca600d979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_set_private</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth, int(*priv_decode)(EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf), int(*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk), int(*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx))</argsstring>
        <name>EVP_PKEY_asn1_set_private</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk, <ref refid="structpkcs8__priv__key__info__st" kindref="compound">PKCS8_PRIV_KEY_INFO</ref> *p8inf)</type>
          <declname>priv_decode</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structpkcs8__priv__key__info__st" kindref="compound">PKCS8_PRIV_KEY_INFO</ref> *p8, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk)</type>
          <declname>priv_encode</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structbio__st" kindref="compound">BIO</ref> *out, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, int indent, ASN1_PCTX *pctx)</type>
          <declname>priv_print</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1032" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a94e1bba51c0ce2e91d2ee22dcd4d3109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_set_param</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth, int(*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen), int(*param_encode)(const EVP_PKEY *pkey, unsigned char **pder), int(*param_missing)(const EVP_PKEY *pk), int(*param_copy)(EVP_PKEY *to, const EVP_PKEY *from), int(*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int(*param_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx))</argsstring>
        <name>EVP_PKEY_asn1_set_param</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, const unsigned char **pder, int derlen)</type>
          <declname>param_decode</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, unsigned char **pder)</type>
          <declname>param_encode</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pk)</type>
          <declname>param_missing</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *to, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *from)</type>
          <declname>param_copy</declname>
        </param>
        <param>
          <type>int(*)(const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *a, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *b)</type>
          <declname>param_cmp</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structbio__st" kindref="compound">BIO</ref> *out, const <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, int indent, ASN1_PCTX *pctx)</type>
          <declname>param_print</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1037" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a40bc62ddff025b7b8475325f3406a543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_set_free</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth, void(*pkey_free)(EVP_PKEY *pkey))</argsstring>
        <name>EVP_PKEY_asn1_set_free</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey)</type>
          <declname>pkey_free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac661fc75fd69bcc38775efe1abae3a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_asn1_set_ctrl</definition>
        <argsstring>(EVP_PKEY_ASN1_METHOD *ameth, int(*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2))</argsstring>
        <name>EVP_PKEY_asn1_set_ctrl</name>
        <param>
          <type>EVP_PKEY_ASN1_METHOD *</type>
          <declname>ameth</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey, int op, long arg1, void *arg2)</type>
          <declname>pkey_ctrl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0774110ef144518922f930f9791c9184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EVP_PKEY_METHOD *</type>
        <definition>const EVP_PKEY_METHOD* EVP_PKEY_meth_find</definition>
        <argsstring>(int type)</argsstring>
        <name>EVP_PKEY_meth_find</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7433595d1ad31facec241639b0705b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_METHOD *</type>
        <definition>EVP_PKEY_METHOD* EVP_PKEY_meth_new</definition>
        <argsstring>(int id, int flags)</argsstring>
        <name>EVP_PKEY_meth_new</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3eb60537b0279cc6f9ac28f67fcf32b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_get0_info</definition>
        <argsstring>(int *ppkey_id, int *pflags, const EVP_PKEY_METHOD *meth)</argsstring>
        <name>EVP_PKEY_meth_get0_info</name>
        <param>
          <type>int *</type>
          <declname>ppkey_id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const EVP_PKEY_METHOD *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9f238685799ddb4c06dcc4b8027f3d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_copy</definition>
        <argsstring>(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)</argsstring>
        <name>EVP_PKEY_meth_copy</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const EVP_PKEY_METHOD *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac7da0583cbd3d148f45c8f4eb6a4c084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_free</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth)</argsstring>
        <name>EVP_PKEY_meth_free</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1614749e1d6d602142c46446994c9a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_meth_add0</definition>
        <argsstring>(const EVP_PKEY_METHOD *pmeth)</argsstring>
        <name>EVP_PKEY_meth_add0</name>
        <param>
          <type>const EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a23d1c787f99b2aaa6d8283c2db325eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_CTX *</type>
        <definition>EVP_PKEY_CTX* EVP_PKEY_CTX_new</definition>
        <argsstring>(EVP_PKEY *pkey, ENGINE *e)</argsstring>
        <name>EVP_PKEY_CTX_new</name>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a3260cb9b0fddd3d19e7877ccd07117da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_CTX *</type>
        <definition>EVP_PKEY_CTX* EVP_PKEY_CTX_new_id</definition>
        <argsstring>(int id, ENGINE *e)</argsstring>
        <name>EVP_PKEY_CTX_new_id</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac80b9e93e4829bb963186ac51ef6ccd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_CTX *</type>
        <definition>EVP_PKEY_CTX* EVP_PKEY_CTX_dup</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_dup</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9a2d5ac99985dda36f15bd92d83c1621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_CTX_free</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_free</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac215192017d713cda37872ad4d9daf54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_CTX_ctrl</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, int p1, void *p2)</argsstring>
        <name>EVP_PKEY_CTX_ctrl</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>optype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a651c3b9cd9822366ae7628bddcf4faf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_CTX_ctrl_str</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, const char *type, const char *value)</argsstring>
        <name>EVP_PKEY_CTX_ctrl_str</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a54f462fde99d82009e21fee633da7531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_CTX_get_operation</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get_operation</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab2dc53b3cf874b2359c5ee1a39aad454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_CTX_set0_keygen_info</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, int *dat, int datlen)</argsstring>
        <name>EVP_PKEY_CTX_set0_keygen_info</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>datlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0140c1842ba0e0336b08335e3af8f300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* EVP_PKEY_new_mac_key</definition>
        <argsstring>(int type, ENGINE *e, const unsigned char *key, int keylen)</argsstring>
        <name>EVP_PKEY_new_mac_key</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ENGINE *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac2dcf2fcf16ab595225520422b4a18b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_CTX_set_data</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, void *data)</argsstring>
        <name>EVP_PKEY_CTX_set_data</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7fbc19e08eac6072f819d0608fbf1638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EVP_PKEY_CTX_get_data</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get_data</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a94df22cd02656bd24b1849d2ab620260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* EVP_PKEY_CTX_get0_pkey</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get0_pkey</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4afbb9a1d5311df850c7ff2336369496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* EVP_PKEY_CTX_get0_peerkey</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get0_peerkey</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a461947479ed8f90f4f9a12d60467510e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_CTX_set_app_data</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, void *data)</argsstring>
        <name>EVP_PKEY_CTX_set_app_data</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a9dc19e3a0d83f088f21b6c0e1236de33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EVP_PKEY_CTX_get_app_data</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get_app_data</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a423a99ea5dbdd496bbf6fe31ca3b275e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_sign_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_sign_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8b51695da9f9c38443e01a6971a6daf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_sign</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)</argsstring>
        <name>EVP_PKEY_sign</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>tbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tbslen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac8a26ed0478363046e96e20c1b16273b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_verify_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_verify_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a6dca630e7d00cafcf91277e67781278c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_verify</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)</argsstring>
        <name>EVP_PKEY_verify</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siglen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>tbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tbslen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aca8643a10aa6e365aab41e8973824f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_verify_recover_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_verify_recover_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac42dfe2884bb479cb712aff7e0c3797b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_verify_recover</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, unsigned char *rout, size_t *routlen, const unsigned char *sig, size_t siglen)</argsstring>
        <name>EVP_PKEY_verify_recover</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>rout</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>routlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siglen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af2fbc31cc36229188e108c2b3a59891d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_encrypt_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_encrypt_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a1d46c8be83d90b829b1b2f6fbba03a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_encrypt</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)</argsstring>
        <name>EVP_PKEY_encrypt</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>inlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7f62c2ab0ec56c6272e526a1644f669f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_decrypt_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_decrypt_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2c28fd7a4e52a0c1e4a92e6d6183ee5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_decrypt</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)</argsstring>
        <name>EVP_PKEY_decrypt</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>inlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ae524c385eebb1b65ad9b719636245e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_derive_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_derive_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8b9b4ce1541519c3e1d9de5c7ba3db15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_derive_set_peer</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)</argsstring>
        <name>EVP_PKEY_derive_set_peer</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1acec7d2eb920d0ca76adeb35c2f0af10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_derive</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)</argsstring>
        <name>EVP_PKEY_derive</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>keylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a76c0904fbecb5ed43344375a02e4fe76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_paramgen_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_paramgen_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a521d86cc9d05d763d1931ebe8f70a9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_paramgen</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)</argsstring>
        <name>EVP_PKEY_paramgen</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>ppkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a93014e1f418a7befff56b1dd7e70852e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_keygen_init</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_keygen_init</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a7031c804c9d53cd0c9e4d04029e5b477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_keygen</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)</argsstring>
        <name>EVP_PKEY_keygen</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> **</type>
          <declname>ppkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a8b7e4259c89bf1f89029b1718814b182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_CTX_set_cb</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)</argsstring>
        <name>EVP_PKEY_CTX_set_cb</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>EVP_PKEY_gen_cb *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a99c8a9df08aae4205d50d6e274773ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EVP_PKEY_gen_cb *</type>
        <definition>EVP_PKEY_gen_cb* EVP_PKEY_CTX_get_cb</definition>
        <argsstring>(EVP_PKEY_CTX *ctx)</argsstring>
        <name>EVP_PKEY_CTX_get_cb</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0c873bdbcbcba75905876ee3b02e9c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EVP_PKEY_CTX_get_keygen_info</definition>
        <argsstring>(EVP_PKEY_CTX *ctx, int idx)</argsstring>
        <name>EVP_PKEY_CTX_get_keygen_info</name>
        <param>
          <type>EVP_PKEY_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ac3052028294b8c7556588a0484ea39a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_init</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*init)(EVP_PKEY_CTX *ctx))</argsstring>
        <name>EVP_PKEY_meth_set_init</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1afca07c69f2b5e8049c0a2f5a3dac0135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_copy</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*copy)(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src))</argsstring>
        <name>EVP_PKEY_meth_set_copy</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a2d23e623279102cc69211cc3925c9849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_cleanup</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, void(*cleanup)(EVP_PKEY_CTX *ctx))</argsstring>
        <name>EVP_PKEY_meth_set_cleanup</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>void(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a152c82feba5a4fed956ad124f0e2ae10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_paramgen</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*paramgen_init)(EVP_PKEY_CTX *ctx), int(*paramgen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))</argsstring>
        <name>EVP_PKEY_meth_set_paramgen</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>paramgen_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey)</type>
          <declname>paramgen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0696f02c4e32b2d78ffa3ec19e32e8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_keygen</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*keygen_init)(EVP_PKEY_CTX *ctx), int(*keygen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))</argsstring>
        <name>EVP_PKEY_meth_set_keygen</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>keygen_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, <ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *pkey)</type>
          <declname>keygen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a381537aab96cb8f233d6e0d89e802685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_sign</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*sign_init)(EVP_PKEY_CTX *ctx), int(*sign)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))</argsstring>
        <name>EVP_PKEY_meth_set_sign</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>sign_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a4f1d49bce2682dd8aca06e1f9ee4f0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_verify</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*verify_init)(EVP_PKEY_CTX *ctx), int(*verify)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen))</argsstring>
        <name>EVP_PKEY_meth_set_verify</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>verify_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab669e37053cce4b6e556bb0740899805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_verify_recover</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*verify_recover_init)(EVP_PKEY_CTX *ctx), int(*verify_recover)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))</argsstring>
        <name>EVP_PKEY_meth_set_verify_recover</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>verify_recover_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)</type>
          <declname>verify_recover</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aea00998fcec6ab5c0eaa658947cce998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_signctx</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*signctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int(*signctx)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx))</argsstring>
        <name>EVP_PKEY_meth_set_signctx</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *mctx)</type>
          <declname>signctx_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *mctx)</type>
          <declname>signctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1ab23fda9804717ba3096ca8f938467c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_verifyctx</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*verifyctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int(*verifyctx)(EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen, EVP_MD_CTX *mctx))</argsstring>
        <name>EVP_PKEY_meth_set_verifyctx</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *mctx)</type>
          <declname>verifyctx_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen, <ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref> *mctx)</type>
          <declname>verifyctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1aa6d21271a2350b8f6c5c8652dad51e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_encrypt</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*encrypt_init)(EVP_PKEY_CTX *ctx), int(*encryptfn)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))</argsstring>
        <name>EVP_PKEY_meth_set_encrypt</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>encrypt_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)</type>
          <declname>encryptfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a653b3fa0b3206bc1b6ced37090d90666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_decrypt</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*decrypt_init)(EVP_PKEY_CTX *ctx), int(*decrypt)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))</argsstring>
        <name>EVP_PKEY_meth_set_decrypt</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>decrypt_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)</type>
          <declname>decrypt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a47ec45443c902d396b0c68c3d8ccc58b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_derive</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*derive_init)(EVP_PKEY_CTX *ctx), int(*derive)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen))</argsstring>
        <name>EVP_PKEY_meth_set_derive</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx)</type>
          <declname>derive_init</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)</type>
          <declname>derive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a357e81b7b905536671e12ec1c809e0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_PKEY_meth_set_ctrl</definition>
        <argsstring>(EVP_PKEY_METHOD *pmeth, int(*ctrl)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int(*ctrl_str)(EVP_PKEY_CTX *ctx, const char *type, const char *value))</argsstring>
        <name>EVP_PKEY_meth_set_ctrl</name>
        <param>
          <type>EVP_PKEY_METHOD *</type>
          <declname>pmeth</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)</type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type>int(*)(EVP_PKEY_CTX *ctx, const char *type, const char *value)</type>
          <declname>ctrl_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1a0894887f8fc2d98069290523dbdb77fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EVP_add_alg_module</definition>
        <argsstring>(void)</argsstring>
        <name>EVP_add_alg_module</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="evp_8h_1af076df9eb49737e35ed77045702a4417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_EVP_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_EVP_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/evp.h" line="1251" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/evp/evp.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>package<sp/>is<sp/>an<sp/>SSL<sp/>implementation<sp/>written</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>by<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>was<sp/>written<sp/>so<sp/>as<sp/>to<sp/>conform<sp/>with<sp/>Netscapes<sp/>SSL.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>for<sp/>commercial<sp/>and<sp/>non-commercial<sp/>use<sp/>as<sp/>long<sp/>as</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>aheared<sp/>to.<sp/><sp/>The<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>apply<sp/>to<sp/>all<sp/>code<sp/>found<sp/>in<sp/>this<sp/>distribution,<sp/>be<sp/>it<sp/>the<sp/>RC4,<sp/>RSA,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>lhash,<sp/>DES,<sp/>etc.,<sp/>code;<sp/>not<sp/>just<sp/>the<sp/>SSL<sp/>code.<sp/><sp/>The<sp/>SSL<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>with<sp/>this<sp/>distribution<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>same<sp/>copyright<sp/>terms</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>holder<sp/>is<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>remains<sp/>Eric<sp/>Young&apos;s,<sp/>and<sp/>as<sp/>such<sp/>any<sp/>Copyright<sp/>notices<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>are<sp/>not<sp/>to<sp/>be<sp/>removed.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>package<sp/>is<sp/>used<sp/>in<sp/>a<sp/>product,<sp/>Eric<sp/>Young<sp/>should<sp/>be<sp/>given<sp/>attribution</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>author<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>library<sp/>used.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>This<sp/>can<sp/>be<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>textual<sp/>message<sp/>at<sp/>program<sp/>startup<sp/>or</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>in<sp/>documentation<sp/>(online<sp/>or<sp/>textual)<sp/>provided<sp/>with<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>copyright</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>word<sp/>&apos;cryptographic&apos;<sp/>can<sp/>be<sp/>left<sp/>out<sp/>if<sp/>the<sp/>rouines<sp/>from<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>being<sp/>used<sp/>are<sp/>not<sp/>cryptographic<sp/>related<sp/>:-).</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>4.<sp/>If<sp/>you<sp/>include<sp/>any<sp/>Windows<sp/>specific<sp/>code<sp/>(or<sp/>a<sp/>derivative<sp/>thereof)<sp/>from<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>apps<sp/>directory<sp/>(application<sp/>code)<sp/>you<sp/>must<sp/>include<sp/>an<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>ERIC<sp/>YOUNG<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>licence<sp/>and<sp/>distribution<sp/>terms<sp/>for<sp/>any<sp/>publically<sp/>available<sp/>version<sp/>or</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>derivative<sp/>of<sp/>this<sp/>code<sp/>cannot<sp/>be<sp/>changed.<sp/><sp/>i.e.<sp/>this<sp/>code<sp/>cannot<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>copied<sp/>and<sp/>put<sp/>under<sp/>another<sp/>distribution<sp/>licence</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>[including<sp/>the<sp/>GNU<sp/>Public<sp/>Licence.]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_ENVELOPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_ENVELOPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_ALGORITHM_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;openssl/opensslconf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>OPENSSL_ALGORITHM_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;openssl/opensslconf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>OPENSSL_ALGORITHM_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ossl_typ.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/symhacks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment">#define<sp/>EVP_RC2_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="80"><highlight class="comment">#define<sp/>EVP_RC4_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="81"><highlight class="comment">#define<sp/>EVP_BLOWFISH_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="82"><highlight class="comment">#define<sp/>EVP_CAST5_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="83"><highlight class="comment">#define<sp/>EVP_RC5_32_12_16_KEY_SIZE<sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="84"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MAX_MD_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64<sp/><sp/></highlight><highlight class="comment">/*<sp/>longest<sp/>known<sp/>is<sp/>SHA512<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MAX_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MAX_IV_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MAX_BLOCK_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PKCS5_SALT_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>PKCS#5<sp/>iteration<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PKCS5_DEFAULT_ITER<sp/><sp/><sp/><sp/><sp/><sp/>2048</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/objects.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PK_RSA<sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PK_DSA<sp/><sp/>0x0002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PK_DH<sp/><sp/><sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PK_EC<sp/><sp/><sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKT_SIGN<sp/><sp/><sp/><sp/>0x0010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKT_ENC<sp/>0x0020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKT_EXCH<sp/><sp/><sp/><sp/>0x0040</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKS_RSA<sp/>0x0100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKS_DSA<sp/>0x0200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKS_EC<sp/><sp/>0x0400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKT_EXP<sp/>0x1000<sp/></highlight><highlight class="comment">/*<sp/>&lt;=<sp/>512<sp/>bit<sp/>key<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_NONE<sp/><sp/><sp/>NID_undef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA<sp/><sp/><sp/><sp/>NID_rsaEncryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA2<sp/><sp/><sp/>NID_rsa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA<sp/><sp/><sp/><sp/>NID_dsa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA1<sp/><sp/><sp/>NID_dsa_2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA2<sp/><sp/><sp/>NID_dsaWithSHA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA3<sp/><sp/><sp/>NID_dsaWithSHA1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA4<sp/><sp/><sp/>NID_dsaWithSHA1_2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DH<sp/>NID_dhKeyAgreement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_EC<sp/>NID_X9_62_id_ecPublicKey</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_HMAC<sp/><sp/><sp/>NID_hmac</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CMAC<sp/><sp/><sp/>NID_cmac</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>bit<sp/>field</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Sub-type<sp/>needs<sp/>to<sp/>be<sp/>for<sp/>variations<sp/>on<sp/>the<sp/>method,<sp/>as<sp/>in,<sp/>can<sp/>it<sp/>do</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>arbitrary<sp/>encryption....<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structevp__pkey__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">evp_pkey_st</ref></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>save_type;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>references;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*ameth;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>ENGINE<sp/>*engine;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrsa__st" kindref="compound">rsa_st</ref><sp/>*rsa;<sp/></highlight><highlight class="comment">/*<sp/>RSA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdsa__st" kindref="compound">dsa_st</ref><sp/>*dsa;<sp/></highlight><highlight class="comment">/*<sp/>DSA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdh__st" kindref="compound">dh_st</ref><sp/>*dh;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_key_st<sp/>*ec;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ECC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>pkey;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>save_parameters;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structx509__attributes__st" kindref="compound">X509_ATTRIBUTE</ref>)<sp/>*attributes;<sp/></highlight><highlight class="comment">/*<sp/>[<sp/>0<sp/>]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>EVP_PKEY<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_MO_SIGN<sp/><sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_MO_VERIFY<sp/><sp/>0x0002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_MO_ENCRYPT<sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_MO_DECRYPT<sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EVP_MD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="structenv__md__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenv__md__st" kindref="compound">env_md_st</ref></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pkey_type;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>md_size;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*init)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*update)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*</highlight><highlight class="keyword">final</highlight><highlight class="normal">)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*md);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*copy)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*to,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*from);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*cleanup)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>prototype<sp/>these<sp/>some<sp/>day<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*sign)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_length,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigret,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*siglen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*verify)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_length,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigbuf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siglen,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>required_pkey_type[5];<sp/></highlight><highlight class="comment">/*EVP_PKEY_xxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctx_size;<sp/></highlight><highlight class="comment">/*<sp/>how<sp/>big<sp/>does<sp/>the<sp/>ctx-&gt;md_data<sp/>need<sp/>to<sp/>be<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>control<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*md_ctrl)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>EVP_MD<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evp_sign_method(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_length,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigret,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*siglen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evp_verify_method(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_length,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigbuf,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siglen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_ONESHOT<sp/>0x0001<sp/></highlight><highlight class="comment">/*<sp/>digest<sp/>can<sp/>only<sp/>handle<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>block<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_PKEY_DIGEST<sp/>0x0002<sp/></highlight><highlight class="comment">/*<sp/>digest<sp/>is<sp/>a<sp/>&quot;clone&quot;<sp/>digest<sp/>used</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>which<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>an<sp/>existing</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>one<sp/>for<sp/>a<sp/>specific<sp/>public<sp/>key<sp/>type.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>EVP_dss1()<sp/>etc<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Digest<sp/>uses<sp/>EVP_PKEY_METHOD<sp/>for<sp/>signing<sp/>instead<sp/>of<sp/>MD<sp/>specific<sp/>signing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_PKEY_METHOD_SIGNATURE<sp/><sp/><sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DigestAlgorithmIdentifier<sp/>flags...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_DIGALGID_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0018</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NULL<sp/>or<sp/>absent<sp/>parameter<sp/>accepted.<sp/>Use<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_DIGALGID_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NULL<sp/>or<sp/>absent<sp/>parameter<sp/>accepted.<sp/>Use<sp/>NULL<sp/>for<sp/>PKCS#1<sp/>otherwise<sp/>absent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_DIGALGID_ABSENT<sp/><sp/><sp/><sp/><sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Custom<sp/>handling<sp/>via<sp/>ctrl<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_DIGALGID_CUSTOM<sp/><sp/><sp/><sp/><sp/>0x0018</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_FLAG_FIPS<sp/><sp/><sp/><sp/>0x0400<sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>if<sp/>suitable<sp/>for<sp/>use<sp/>in<sp/>FIPS<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Digest<sp/>ctrls<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTRL_DIGALGID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTRL_MICALG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Minimum<sp/>Algorithm<sp/>specific<sp/>ctrl<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTRL_ALG_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_NULL_method<sp/><sp/><sp/><sp/>NULL,NULL,{0,0,0,0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA_method<sp/>(evp_sign_method<sp/>*)DSA_sign,<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(evp_verify_method<sp/>*)DSA_verify,<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{EVP_PKEY_DSA,EVP_PKEY_DSA2,EVP_PKEY_DSA3,<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_DSA4,0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_DSA_method<sp/>EVP_PKEY_NULL_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_ECDSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_ECDSA_method<sp/><sp/><sp/>(evp_sign_method<sp/>*)ECDSA_sign,<sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(evp_verify_method<sp/>*)ECDSA_verify,<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{EVP_PKEY_EC,0,0,0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_ECDSA_method<sp/><sp/><sp/>EVP_PKEY_NULL_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA_method<sp/>(evp_sign_method<sp/>*)RSA_sign,<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(evp_verify_method<sp/>*)RSA_verify,<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA_ASN1_OCTET_STRING_method<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(evp_sign_method<sp/>*)RSA_sign_ASN1_OCTET_STRING,<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(evp_verify_method<sp/>*)RSA_verify_ASN1_OCTET_STRING,<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA_method<sp/>EVP_PKEY_NULL_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_RSA_ASN1_OCTET_STRING_method<sp/>EVP_PKEY_NULL_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!EVP_MD<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="structenv__md__ctx__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenv__md__ctx__st" kindref="compound">env_md_ctx_st</ref></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*digest;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ENGINE<sp/>*engine;<sp/></highlight><highlight class="comment">/*<sp/>functional<sp/>reference<sp/>if<sp/>&apos;digest&apos;<sp/>is<sp/>ENGINE-provided<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*md_data;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Public<sp/>key<sp/>context<sp/>for<sp/>sign/verify<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_PKEY_CTX<sp/>*pctx;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>function:<sp/>usually<sp/>copied<sp/>from<sp/>EVP_MD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*update)(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>EVP_MD_CTX<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>values<sp/>for<sp/>EVP_MD_CTX<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_ONESHOT<sp/><sp/><sp/><sp/><sp/>0x0001<sp/></highlight><highlight class="comment">/*<sp/>digest<sp/>update<sp/>will<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>once<sp/>only<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_CLEANED<sp/><sp/><sp/><sp/><sp/>0x0002<sp/></highlight><highlight class="comment">/*<sp/>context<sp/>has<sp/>already<sp/>been</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cleaned<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_REUSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0004<sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>free<sp/>up<sp/>ctx-&gt;md_data</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>EVP_MD_CTX_cleanup<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIPS<sp/>and<sp/>pad<sp/>options<sp/>are<sp/>ignored<sp/>in<sp/>1.0.0,<sp/>definitions<sp/>are<sp/>here</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>so<sp/>we<sp/>don&apos;t<sp/>accidentally<sp/>reuse<sp/>the<sp/>values<sp/>for<sp/>other<sp/>purposes.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_NON_FIPS_ALLOW<sp/><sp/>0x0008<sp/><sp/></highlight><highlight class="comment">/*<sp/>Allow<sp/>use<sp/>of<sp/>non<sp/>FIPS<sp/>digest</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>FIPS<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>PAD<sp/>options<sp/>are<sp/>also<sp/>currently<sp/>ignored<sp/>in<sp/>1.0.0,<sp/>digest</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>parameters<sp/>are<sp/>handled<sp/>through<sp/>EVP_DigestSign*()<sp/>and<sp/>EVP_DigestVerify*()</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>instead.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_PAD_MASK<sp/><sp/><sp/><sp/>0xF0<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RSA<sp/>mode<sp/>to<sp/>use<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_PAD_PKCS1<sp/><sp/><sp/>0x00<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PKCS#1<sp/>v1.5<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_PAD_X931<sp/><sp/><sp/><sp/>0x10<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X9.31<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_PAD_PSS<sp/><sp/><sp/><sp/><sp/>0x20<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PSS<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_FLAG_NO_INIT<sp/><sp/><sp/><sp/><sp/>0x0100<sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>initialize<sp/>md_data<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structevp__cipher__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevp__cipher__st" kindref="compound">evp_cipher_st</ref></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>value<sp/>for<sp/>variable<sp/>length<sp/>ciphers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv_len;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Various<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*init)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc);<sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*do_cipher)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inl);</highlight><highlight class="comment">/*<sp/>encrypt/decrypt<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*cleanup)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*);<sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>ctx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctx_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>big<sp/>ctx-&gt;cipher_data<sp/>needs<sp/>to<sp/>be<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*set_asn1_parameters)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*,<sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*);<sp/></highlight><highlight class="comment">/*<sp/>Populate<sp/>a<sp/>ASN1_TYPE<sp/>with<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*get_asn1_parameters)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*,<sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*);<sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>parameters<sp/>from<sp/>a<sp/>ASN1_TYPE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*ctrl)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);<sp/></highlight><highlight class="comment">/*<sp/>Miscellaneous<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*app_data;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Application<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>EVP_CIPHER<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Values<sp/>for<sp/>cipher<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Modes<sp/>for<sp/>ciphers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_STREAM_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_ECB_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CBC_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CFB_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_OFB_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CTR_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_GCM_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CCM_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_XTS_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF0007</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>variable<sp/>length<sp/>cipher<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_VARIABLE_LENGTH<sp/><sp/><sp/><sp/>0x8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>iv<sp/>handling<sp/>should<sp/>be<sp/>done<sp/>by<sp/>the<sp/>cipher<sp/>itself<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CUSTOM_IV<sp/><sp/><sp/><sp/><sp/><sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>cipher&apos;s<sp/>init()<sp/>function<sp/>should<sp/>be<sp/>called<sp/>if<sp/>key<sp/>is<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_ALWAYS_CALL_INIT<sp/><sp/><sp/>0x20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Call<sp/>ctrl()<sp/>to<sp/>init<sp/>cipher<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CTRL_INIT<sp/><sp/><sp/><sp/><sp/><sp/>0x40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>use<sp/>standard<sp/>key<sp/>length<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CUSTOM_KEY_LENGTH<sp/><sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>use<sp/>standard<sp/>block<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_NO_PADDING<sp/><sp/><sp/><sp/><sp/>0x100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cipher<sp/>handles<sp/>random<sp/>key<sp/>generation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_RAND_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cipher<sp/>has<sp/>its<sp/>own<sp/>additional<sp/>copying<sp/>logic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_CUSTOM_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allow<sp/>use<sp/>default<sp/>ASN1<sp/>get/set<sp/>iv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_DEFAULT_ASN1<sp/><sp/>0x1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Buffer<sp/>length<sp/>in<sp/>bits<sp/>not<sp/>bytes:<sp/>CFB1<sp/>mode<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_LENGTH_BITS<sp/><sp/><sp/>0x2000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>if<sp/>suitable<sp/>for<sp/>use<sp/>in<sp/>FIPS<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_FIPS<sp/><sp/><sp/><sp/><sp/><sp/>0x4000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allow<sp/>non<sp/>FIPS<sp/>cipher<sp/>in<sp/>FIPS<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_NON_FIPS_ALLOW<sp/><sp/><sp/><sp/>0x8000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Cipher<sp/>handles<sp/>any<sp/>and<sp/>all<sp/>padding<sp/>logic<sp/>as<sp/>well</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>as<sp/>finalisation.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_CUSTOM_CIPHER<sp/>0x100000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CIPH_FLAG_AEAD_CIPHER<sp/><sp/><sp/>0x200000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ctrl()<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_SET_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GET_RC2_KEY_BITS<sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_SET_RC2_KEY_BITS<sp/><sp/><sp/>0x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GET_RC5_ROUNDS<sp/><sp/><sp/><sp/><sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_SET_RC5_ROUNDS<sp/><sp/><sp/><sp/><sp/>0x5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_RAND_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_PBE_PRF_NID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_IVLEN<sp/><sp/><sp/><sp/><sp/><sp/>0x9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_GET_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_IV_FIXED<sp/><sp/><sp/>0x12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_IV_GEN<sp/><sp/><sp/><sp/><sp/>0x13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_CCM_SET_IVLEN<sp/><sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_IVLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_CCM_GET_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_GET_TAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_CCM_SET_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_TAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_CCM_SET_L<sp/><sp/><sp/><sp/><sp/><sp/>0x14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_CCM_SET_MSGLEN<sp/><sp/><sp/><sp/><sp/>0x15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AEAD<sp/>cipher<sp/>deduces<sp/>payload<sp/>length<sp/>and<sp/>returns<sp/>number<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>required<sp/>to<sp/>store<sp/>MAC<sp/>and<sp/>eventual<sp/>padding.<sp/>Subsequent<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>EVP_Cipher<sp/>even<sp/>appends/verifies<sp/>MAC.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_AEAD_TLS1_AAD<sp/><sp/><sp/><sp/><sp/><sp/>0x16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>by<sp/>composite<sp/>AEAD<sp/>ciphers,<sp/>no-op<sp/>in<sp/>GCM,<sp/>CCM...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_AEAD_SET_MAC_KEY<sp/><sp/><sp/>0x17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>GCM<sp/>invocation<sp/>field,<sp/>decrypt<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>EVP_CTRL_GCM_SET_IV_INV<sp/><sp/><sp/><sp/><sp/>0x18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GCM<sp/>TLS<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>fixed<sp/>part<sp/>of<sp/>IV<sp/>derived<sp/>from<sp/>PRF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_GCM_TLS_FIXED_IV_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>explicit<sp/>part<sp/>of<sp/>IV<sp/>part<sp/>of<sp/>TLS<sp/>records<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_GCM_TLS_EXPLICIT_IV_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>tag<sp/>for<sp/>TLS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_GCM_TLS_TAG_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="structevp__cipher__info__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevp__cipher__info__st" kindref="compound">evp_cipher_info_st</ref></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[EVP_MAX_IV_LENGTH];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structevp__cipher__info__st" kindref="compound">EVP_CIPHER_INFO</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="structevp__cipher__ctx__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevp__cipher__ctx__st" kindref="compound">evp_cipher_ctx_st</ref></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>ENGINE<sp/>*engine;<sp/></highlight><highlight class="comment">/*<sp/>functional<sp/>reference<sp/>if<sp/>&apos;cipher&apos;<sp/>is<sp/>ENGINE-provided<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encrypt<sp/>or<sp/>decrypt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>we<sp/>have<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>oiv[EVP_MAX_IV_LENGTH];<sp/><sp/></highlight><highlight class="comment">/*<sp/>original<sp/>iv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>iv[EVP_MAX_IV_LENGTH];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>working<sp/>iv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[EVP_MAX_BLOCK_LENGTH];</highlight><highlight class="comment">/*<sp/>saved<sp/>partial<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>by<sp/>cfb/ofb/ctr<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*app_data;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>application<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>May<sp/>change<sp/>for<sp/>variable<sp/>length<sp/>cipher<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Various<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cipher_data;<sp/></highlight><highlight class="comment">/*<sp/>per<sp/>EVP<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>final_used;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_mask;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">[EVP_MAX_BLOCK_LENGTH];</highlight><highlight class="comment">/*<sp/>possible<sp/>final<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>EVP_CIPHER_CTX<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="structevp___encode___ctx__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structevp___encode___ctx__st" kindref="compound">evp_Encode_Ctx_st</ref></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>saved<sp/>in<sp/>a<sp/>partial<sp/>encode/decode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>length<sp/>is<sp/>either<sp/>the<sp/>output<sp/>line<sp/>length</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(in<sp/>input<sp/>bytes)<sp/>or<sp/>the<sp/>shortest<sp/>input<sp/>line</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>length<sp/>that<sp/>is<sp/>ok.<sp/><sp/>Once<sp/>decoding<sp/>begins,</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>length<sp/>is<sp/>adjusted<sp/>up<sp/>each<sp/>time<sp/>a<sp/>longer</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>line<sp/>is<sp/>decoded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>enc_data[80];<sp/></highlight><highlight class="comment">/*<sp/>data<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_num;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>read<sp/>on<sp/>current<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expect_nl;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Password<sp/>based<sp/>encryption<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(EVP_PBE_KEYGEN)(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*param,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>en_de);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_assign_RSA(pkey,rsa)<sp/>EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(char<sp/>*)(rsa))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_assign_DSA(pkey,dsa)<sp/>EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(char<sp/>*)(dsa))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_assign_DH(pkey,dh)<sp/>EVP_PKEY_assign((pkey),EVP_PKEY_DH,\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(char<sp/>*)(dh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_assign_EC_KEY(pkey,eckey)<sp/>EVP_PKEY_assign((pkey),EVP_PKEY_EC,\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(char<sp/>*)(eckey))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Add<sp/>some<sp/>extra<sp/>combinations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_get_digestbynid(a)<sp/>EVP_get_digestbyname(OBJ_nid2sn(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_get_digestbyobj(a)<sp/>EVP_get_digestbynid(OBJ_obj2nid(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_get_cipherbynid(a)<sp/>EVP_get_cipherbyname(OBJ_nid2sn(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_get_cipherbyobj(a)<sp/>EVP_get_cipherbynid(OBJ_obj2nid(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_MD_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_nid(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_MD_type(e)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_name(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OBJ_nid2sn(EVP_MD_nid(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_MD_pkey_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);<sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_MD_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_MD_block_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>EVP_MD_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_MD_CTX_md(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_size(e)<sp/><sp/><sp/><sp/><sp/><sp/>EVP_MD_size(EVP_MD_CTX_md(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_block_size(e)<sp/><sp/><sp/><sp/>EVP_MD_block_size(EVP_MD_CTX_md(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_MD_CTX_type(e)<sp/><sp/><sp/><sp/><sp/><sp/>EVP_MD_type(EVP_MD_CTX_md(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_nid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_CIPHER_name(e)<sp/><sp/><sp/><sp/><sp/><sp/>OBJ_nid2sn(EVP_CIPHER_nid(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_block_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_key_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_iv_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>EVP_CIPHER_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_CIPHER_mode(e)<sp/><sp/><sp/><sp/><sp/><sp/>(EVP_CIPHER_flags(e)<sp/>&amp;<sp/>EVP_CIPH_MODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*<sp/>EVP_CIPHER_CTX_cipher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_nid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_block_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_key_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_iv_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_copy(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*in);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>EVP_CIPHER_CTX_get_app_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_set_app_data(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_CIPHER_CTX_type(c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_CIPHER_CTX_mode(e)<sp/><sp/><sp/><sp/><sp/><sp/>(EVP_CIPHER_CTX_flags(e)<sp/>&amp;<sp/>EVP_CIPH_MODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_ENCODE_LENGTH(l)<sp/><sp/><sp/><sp/>(((l+2)/3*4)+(l/48+1)*2+80)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_DECODE_LENGTH(l)<sp/><sp/><sp/><sp/>((l+3)/4*3+80)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_SignInit_ex(a,b,c)<sp/><sp/><sp/><sp/><sp/><sp/>EVP_DigestInit_ex(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_SignInit(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_DigestInit(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_SignUpdate(a,b,c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_DigestUpdate(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_VerifyInit_ex(a,b,c)<sp/><sp/><sp/><sp/>EVP_DigestInit_ex(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_VerifyInit(a,b)<sp/><sp/><sp/><sp/><sp/>EVP_DigestInit(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_VerifyUpdate(a,b,c)<sp/><sp/><sp/><sp/><sp/>EVP_DigestUpdate(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_OpenUpdate(a,b,c,d,e)<sp/><sp/><sp/>EVP_DecryptUpdate(a,b,c,d,e)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_SealUpdate(a,b,c,d,e)<sp/><sp/><sp/>EVP_EncryptUpdate(a,b,c,d,e)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_DigestSignUpdate(a,b,c)<sp/>EVP_DigestUpdate(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_DigestVerifyUpdate(a,b,c)<sp/><sp/><sp/>EVP_DigestUpdate(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONST_STRICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BIO_set_md(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BIO_set_md(b,md)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIO_ctrl(b,BIO_C_SET_MD,0,(char<sp/>*)md)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIO_get_md(b,mdp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIO_ctrl(b,BIO_C_GET_MD,0,(char<sp/>*)mdp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIO_get_md_ctx(b,mdcp)<sp/><sp/><sp/><sp/><sp/>BIO_ctrl(b,BIO_C_GET_MD_CTX,0,(char<sp/>*)mdcp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIO_set_md_ctx(b,mdcp)<sp/><sp/><sp/><sp/><sp/>BIO_ctrl(b,BIO_C_SET_MD_CTX,0,(char<sp/>*)mdcp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIO_get_cipher_status(b)<sp/><sp/><sp/><sp/>BIO_ctrl(b,BIO_C_GET_CIPHER_STATUS,0,NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIO_get_cipher_ctx(b,c_pp)<sp/><sp/>BIO_ctrl(b,BIO_C_GET_CIPHER_CTX,0,(char<sp/>*)c_pp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_Cipher(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_add_cipher_alias(n,alias)<sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>OBJ_NAME_add((alias),OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS,(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_add_digest_alias(n,alias)<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>OBJ_NAME_add((alias),OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_delete_cipher_alias(alias)<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>OBJ_NAME_remove(alias,OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_delete_digest_alias(alias)<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>OBJ_NAME_remove(alias,OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_MD_CTX_init(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_MD_CTX_cleanup(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*EVP_MD_CTX_create(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_MD_CTX_destroy(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_MD_CTX_copy_ex(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*out,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*in);<sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_MD_CTX_set_flags(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_MD_CTX_clear_flags(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_MD_CTX_test_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestInit_ex(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*type,<sp/>ENGINE<sp/>*impl);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestUpdate(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestFinal_ex(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*md,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_Digest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*md,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*type,<sp/>ENGINE<sp/>*impl);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_MD_CTX_copy(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*out,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*in);<sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestInit(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*type);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestFinal(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*md,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_read_pw_string(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verify);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_read_pw_string_min(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minlen,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxlen,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verify);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_set_pw_prompt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>EVP_get_pw_prompt(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_BytesToKey(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*salt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_set_flags(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_clear_flags(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_test_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncryptInit(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncryptInit_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/>ENGINE<sp/>*impl,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncryptUpdate(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncryptFinal_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncryptFinal(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecryptInit(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecryptInit_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/>ENGINE<sp/>*impl,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecryptUpdate(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecryptFinal(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecryptFinal_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CipherInit(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CipherInit_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/>ENGINE<sp/>*impl,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CipherUpdate(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CipherFinal(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CipherFinal_ex(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_SignFinal(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*md,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_VerifyFinal(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigbuf,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siglen,<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestSignInit(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/>EVP_PKEY_CTX<sp/>**pctx,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*type,<sp/>ENGINE<sp/>*e,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestSignFinal(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sigret,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*siglen);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestVerifyInit(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,<sp/>EVP_PKEY_CTX<sp/>**pctx,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*type,<sp/>ENGINE<sp/>*e,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DigestVerifyFinal(<ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siglen);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_OpenInit(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*type,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ek,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ekl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*priv);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_OpenFinal(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_SealInit(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*type,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ek,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ekl,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**pubk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npubk);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_SealFinal(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_EncodeInit(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_EncodeUpdate(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_EncodeFinal(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_EncodeBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_DecodeInit(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecodeUpdate(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inl);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecodeFinal(<ref refid="structevp___encode___ctx__st" kindref="compound">EVP_ENCODE_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outl);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_DecodeBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_init(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*a);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_cleanup(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*a);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*EVP_CIPHER_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_free(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*a);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_set_key_length(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keylen);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_set_padding(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_ctrl(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_CTX_rand_key(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref><sp/>*BIO_f_md(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref><sp/>*BIO_f_base64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref><sp/>*BIO_f_cipher(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><ref refid="structbio__method__st" kindref="compound">BIO_METHOD</ref><sp/>*BIO_f_reliable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BIO_set_cipher(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*b,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*c,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*k,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_md_null(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_MD2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_md2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_MD4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_md4(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_MD5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_md5(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_SHA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_dss(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_dss1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_ecdsa(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_SHA256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha224(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha256(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_SHA512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha384(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_sha512(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_MDC2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_mdc2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RIPEMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_ripemd160(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_WHIRLPOOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_whirlpool(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_enc_null(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>does<sp/>nothing<sp/>:-)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_des_cfb<sp/>EVP_des_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_des_ede_cfb<sp/>EVP_des_ede_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_des_ede3_cfb<sp/>EVP_des_ede3_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_des_ede3_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_desx_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>should<sp/>now<sp/>be<sp/>supported<sp/>through<sp/>the<sp/>dev_crypto<sp/>ENGINE.<sp/>But<sp/>also,<sp/>why<sp/>are</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>rc4<sp/>and<sp/>md5<sp/>declarations<sp/>made<sp/>here<sp/>inside<sp/>a<sp/>&quot;NO_DES&quot;<sp/>precompiler<sp/>branch?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>OPENSSL_OPENBSD_DEV_CRYPTO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_dev_crypto_des_ede3_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_dev_crypto_rc4(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_dev_crypto_md5(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc4(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc4_40(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_MD5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc4_hmac_md5(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_IDEA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_idea_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_idea_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_idea_cfb<sp/>EVP_idea_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_idea_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_idea_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RC2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_40_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_64_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_rc2_cfb<sp/>EVP_rc2_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc2_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_bf_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_bf_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_bf_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_bf_cfb<sp/>EVP_bf_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_bf_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_CAST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_cast5_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_cast5_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_cast5_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_cast5_cfb<sp/>EVP_cast5_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_cast5_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc5_32_12_16_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc5_32_12_16_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc5_32_12_16_cfb64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_rc5_32_12_16_cfb<sp/>EVP_rc5_32_12_16_cfb64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_rc5_32_12_16_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_AES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_aes_128_cfb<sp/>EVP_aes_128_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_ctr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_ccm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_gcm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_xts(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_aes_192_cfb<sp/>EVP_aes_192_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_ctr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_ccm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_192_gcm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_aes_256_cfb<sp/>EVP_aes_256_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_ctr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_ccm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_gcm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_xts(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OPENSSL_NO_SHA)<sp/>&amp;&amp;<sp/>!defined(OPENSSL_NO_SHA1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_128_cbc_hmac_sha1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_aes_256_cbc_hmac_sha1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_CAMELLIA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_camellia_128_cfb<sp/>EVP_camellia_128_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_128_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_camellia_192_cfb<sp/>EVP_camellia_192_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_192_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_cfb1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_cfb8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_camellia_256_cfb<sp/>EVP_camellia_256_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_camellia_256_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_SEED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_seed_ecb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_seed_cbc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_seed_cfb128(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EVP_seed_cfb<sp/>EVP_seed_cfb128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_seed_ofb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OPENSSL_add_all_algorithms_noconf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OPENSSL_add_all_algorithms_conf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_LOAD_CONF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OpenSSL_add_all_algorithms()<sp/>\</highlight></codeline>
<codeline lineno="857"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPENSSL_add_all_algorithms_conf()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OpenSSL_add_all_algorithms()<sp/>\</highlight></codeline>
<codeline lineno="860"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPENSSL_add_all_algorithms_noconf()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpenSSL_add_all_ciphers(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpenSSL_add_all_digests(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLeay_add_all_algorithms()<sp/>OpenSSL_add_all_algorithms()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLeay_add_all_ciphers()<sp/>OpenSSL_add_all_ciphers()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLeay_add_all_digests()<sp/>OpenSSL_add_all_digests()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_add_cipher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_add_digest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*digest);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*EVP_get_cipherbyname(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*EVP_get_digestbyname(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_CIPHER_do_all(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*ciph,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_CIPHER_do_all_sorted(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*ciph,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_MD_do_all(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*ciph,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_MD_do_all_sorted(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*ciph,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_decrypt_old(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dec_key,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*enc_key,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc_key_len,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*private_key);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_encrypt_old(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*enc_key,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key_len,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pub_key);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_base_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_bits(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_size(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_set_type(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_set_type_str(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_assign(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_get0(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrsa__st" kindref="compound">rsa_st</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_set1_RSA(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrsa__st" kindref="compound">rsa_st</ref><sp/>*key);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrsa__st" kindref="compound">rsa_st</ref><sp/>*EVP_PKEY_get1_RSA(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdsa__st" kindref="compound">dsa_st</ref>;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_set1_DSA(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdsa__st" kindref="compound">dsa_st</ref><sp/>*key);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdsa__st" kindref="compound">dsa_st</ref><sp/>*EVP_PKEY_get1_DSA(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdh__st" kindref="compound">dh_st</ref>;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_set1_DH(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdh__st" kindref="compound">dh_st</ref><sp/>*key);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdh__st" kindref="compound">dh_st</ref><sp/>*EVP_PKEY_get1_DH(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_key_st;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_set1_EC_KEY(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ec_key_st<sp/>*key);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_key_st<sp/>*EVP_PKEY_get1_EC_KEY(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*<sp/><sp/>EVP_PKEY_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_free(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*<sp/><sp/>d2i_PublicKey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_PublicKey(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*<sp/><sp/>d2i_PrivateKey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*<sp/><sp/>d2i_AutoPrivateKey(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_PrivateKey(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_copy_parameters(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*from);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_missing_parameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_save_parameters(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_cmp_parameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*b);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*b);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_print_public(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,<sp/>ASN1_PCTX<sp/>*pctx);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_print_private(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,<sp/>ASN1_PCTX<sp/>*pctx);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_print_params(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,<sp/>ASN1_PCTX<sp/>*pctx);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_get_default_digest_nid(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pnid);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>calls<sp/>methods<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_param_to_asn1(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,<sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*type);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_asn1_to_param(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,<sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*type);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>used<sp/>by<sp/>EVP_CIPHER<sp/>methods<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_set_asn1_iv(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,<ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*type);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_CIPHER_get_asn1_iv(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*c,<ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*type);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PKCS5<sp/>password<sp/>based<sp/>encryption<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PKCS5_PBE_keyivgen(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*param,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>en_de);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PKCS5_PBKDF2_HMAC_SHA1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*salt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saltlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keylen,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PKCS5_PBKDF2_HMAC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*salt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saltlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*digest,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keylen,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PKCS5_v2_PBE_keyivgen(<ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*param,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>en_de);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PKCS5_PBE_add(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PBE_CipherInit<sp/>(<ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*pbe_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passlen,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasn1__type__st" kindref="compound">ASN1_TYPE</ref><sp/>*param,<sp/><ref refid="structevp__cipher__ctx__st" kindref="compound">EVP_CIPHER_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>en_de);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PBE<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Can<sp/>appear<sp/>as<sp/>the<sp/>outermost<sp/>AlgorithmIdentifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PBE_TYPE_OUTER<sp/><sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Is<sp/>an<sp/>PRF<sp/>type<sp/>OID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PBE_TYPE_PRF<sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PBE_alg_add_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pbe_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pbe_nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cipher_nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>md_nid,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PBE_KEYGEN<sp/>*keygen);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PBE_alg_add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__cipher__st" kindref="compound">EVP_CIPHER</ref><sp/>*cipher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PBE_KEYGEN<sp/>*keygen);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PBE_find(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pbe_nid,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pcnid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pmnid,<sp/>EVP_PBE_KEYGEN<sp/>**pkeygen);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PBE_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_ALIAS<sp/><sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_DYNAMIC<sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_SIGPARAM_NULL<sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_CTRL_PKCS7_SIGN<sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_CTRL_PKCS7_ENCRYPT<sp/><sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_CTRL_DEFAULT_MD_NID<sp/><sp/><sp/>0x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_CTRL_CMS_SIGN<sp/><sp/><sp/><sp/><sp/>0x5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASN1_PKEY_CTRL_CMS_ENVELOPE<sp/>0x7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_get_count(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*EVP_PKEY_asn1_get0(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*EVP_PKEY_asn1_find(ENGINE<sp/>**pe,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*EVP_PKEY_asn1_find_str(ENGINE<sp/>**pe,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_add0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*ameth);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_add_alias(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_get0_info(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ppkey_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pkey_base_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ppkey_flags,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pinfo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ppem_str,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*ameth);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD*<sp/>EVP_PKEY_get0_asn1(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">EVP_PKEY_ASN1_METHOD*<sp/>EVP_PKEY_asn1_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pem_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD<sp/>*dst,<sp/></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_ASN1_METHOD<sp/>*src);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD<sp/>*ameth);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD<sp/>*ameth,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pub_decode)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk,<sp/><ref refid="struct_x509__pubkey__st" kindref="compound">X509_PUBKEY</ref><sp/>*pub),</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pub_encode)(<ref refid="struct_x509__pubkey__st" kindref="compound">X509_PUBKEY</ref><sp/>*pub,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk),</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pub_cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*b),</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pub_print)(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASN1_PCTX<sp/>*pctx),</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pkey_size)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pkey_bits)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD<sp/>*ameth,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*priv_decode)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk,<sp/><ref refid="structpkcs8__priv__key__info__st" kindref="compound">PKCS8_PRIV_KEY_INFO</ref><sp/>*p8inf),</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*priv_encode)(<ref refid="structpkcs8__priv__key__info__st" kindref="compound">PKCS8_PRIV_KEY_INFO</ref><sp/>*p8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk),</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*priv_print)(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASN1_PCTX<sp/>*pctx));</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD<sp/>*ameth,</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_decode)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pder,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>derlen),</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_encode)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pder),</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_missing)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pk),</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_copy)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*from),</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*b),</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*param_print)(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASN1_PCTX<sp/>*pctx));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD<sp/>*ameth,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*pkey_free)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD<sp/>*ameth,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*pkey_ctrl)(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>arg1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg2));</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_UNDEFINED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_PARAMGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_KEYGEN<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_VERIFYRECOVER<sp/><sp/><sp/>(1&lt;&lt;5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_SIGNCTX<sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_VERIFYCTX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_ENCRYPT<sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_DECRYPT<sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_DERIVE<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_TYPE_SIG<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1067"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(EVP_PKEY_OP_SIGN<sp/>|<sp/>EVP_PKEY_OP_VERIFY<sp/>|<sp/>EVP_PKEY_OP_VERIFYRECOVER<sp/>\</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>EVP_PKEY_OP_SIGNCTX<sp/>|<sp/>EVP_PKEY_OP_VERIFYCTX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_TYPE_CRYPT<sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(EVP_PKEY_OP_ENCRYPT<sp/>|<sp/>EVP_PKEY_OP_DECRYPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_TYPE_NOGEN<sp/>\</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(EVP_PKEY_OP_SIG<sp/>|<sp/>EVP_PKEY_OP_CRYPT<sp/>|<sp/>EVP_PKEY_OP_DERIVE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_OP_TYPE_GEN<sp/>\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(EVP_PKEY_OP_PARAMGEN<sp/>|<sp/>EVP_PKEY_OP_KEYGEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>EVP_PKEY_CTX_set_signature_md(ctx,<sp/>md)<sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_CTX_ctrl(ctx,<sp/>-1,<sp/>EVP_PKEY_OP_TYPE_SIG,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_CTRL_MD,<sp/>0,<sp/>(void<sp/>*)md)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_MD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_PEER_KEY<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_PKCS7_ENCRYPT<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_PKCS7_DECRYPT<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_PKCS7_SIGN<sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_SET_MAC_KEY<sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_DIGESTINIT<sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>by<sp/>GOST<sp/>key<sp/>encryption<sp/>in<sp/>TLS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_SET_IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_CMS_ENCRYPT<sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_CMS_DECRYPT<sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_CMS_SIGN<sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_ALG_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_FLAG_AUTOARGLEN<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>handles<sp/>all<sp/>operations:<sp/>don&apos;t<sp/>assume<sp/>any<sp/>digest<sp/>related</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*<sp/>defaults.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_FLAG_SIGCTX_CUSTOM<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_METHOD<sp/>*EVP_PKEY_meth_find(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">EVP_PKEY_METHOD*<sp/>EVP_PKEY_meth_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_get0_info(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ppkey_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pflags,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_METHOD<sp/>*meth);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_copy(EVP_PKEY_METHOD<sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_METHOD<sp/>*src);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_free(EVP_PKEY_METHOD<sp/>*pmeth);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_add0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_PKEY_METHOD<sp/>*pmeth);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">EVP_PKEY_CTX<sp/>*EVP_PKEY_CTX_new(<ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey,<sp/>ENGINE<sp/>*e);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">EVP_PKEY_CTX<sp/>*EVP_PKEY_CTX_new_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>ENGINE<sp/>*e);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">EVP_PKEY_CTX<sp/>*EVP_PKEY_CTX_dup(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_free(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keytype,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>optype,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datlen);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*EVP_PKEY_new_mac_key(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/>ENGINE<sp/>*e,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keylen);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_set_data(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*EVP_PKEY_CTX_get_data(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_sign_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_sign(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*siglen,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tbslen);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_verify_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_verify(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siglen,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tbslen);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_verify_recover_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_verify_recover(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rout,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*routlen,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siglen);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_encrypt_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_encrypt(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outlen,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlen);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_decrypt_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_decrypt(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outlen,</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlen);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_derive_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_derive_set_peer(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*peer);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_derive(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*keylen);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_gen_cb(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_paramgen_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_paramgen(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**ppkey);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_keygen_init(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_keygen(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>**ppkey);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX<sp/>*ctx,<sp/>EVP_PKEY_gen_cb<sp/>*cb);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">EVP_PKEY_gen_cb<sp/>*EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_init(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*init)(EVP_PKEY_CTX<sp/>*ctx));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*copy)(EVP_PKEY_CTX<sp/>*dst,<sp/>EVP_PKEY_CTX<sp/>*src));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*cleanup)(EVP_PKEY_CTX<sp/>*ctx));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*paramgen_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*paramgen)(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey));</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*keygen_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*keygen)(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*pkey));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*sign_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*sign)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*siglen,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tbslen));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verify_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verify)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siglen,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tbslen));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verify_recover_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verify_recover)(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*siglen,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tbslen));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*signctx_init)(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*mctx),</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*signctx)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*siglen,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*mctx));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verifyctx_init)(EVP_PKEY_CTX<sp/>*ctx,<sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*mctx),</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*verifyctx)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siglen,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenv__md__ctx__st" kindref="compound">EVP_MD_CTX</ref><sp/>*mctx));</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*encrypt_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*encryptfn)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outlen,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlen));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*decrypt_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*decrypt)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outlen,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlen));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*derive_init)(EVP_PKEY_CTX<sp/>*ctx),</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*derive)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*keylen));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD<sp/>*pmeth,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*ctrl)(EVP_PKEY_CTX<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2),</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*ctrl_str)(EVP_PKEY_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EVP_add_alg_module(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_EVP_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>EVP<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_AESNI_INIT_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>165</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_AESNI_XTS_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>176</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_AES_INIT_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_AES_XTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>172</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_AES_XTS_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>175</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_ALG_MODULE_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>177</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_CAMELLIA_INIT_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>159</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_CMAC_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>173</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_D2I_PKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_DO_SIGVER_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>161</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_DSAPKEY2PKCS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_DSA_PKEY2PKCS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_ECDSA_PKEY2PKCS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_ECKEY_PKEY2PKCS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_CIPHERINIT_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_CIPHER_CTX_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>163</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_CIPHER_CTX_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_DECRYPTFINAL_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_DIGESTINIT_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_ENCRYPTFINAL_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_MD_CTX_COPY_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_MD_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>162</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_OPENINIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PBE_ALG_ADD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PBE_ALG_ADD_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>160</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PBE_CIPHERINIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKCS82PKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKCS82PKEY_BROKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY2PKCS8_BROKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_COPY_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_CTX_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_CTX_CTRL_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_CTX_DUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>156</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DECRYPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DECRYPT_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DECRYPT_OLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>151</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DERIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>153</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DERIVE_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>154</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_DERIVE_SET_PEER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>155</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_ENCRYPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_ENCRYPT_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_ENCRYPT_OLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>152</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_GET1_DH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_GET1_DSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_GET1_ECDSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_GET1_EC_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_GET1_RSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_KEYGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_KEYGEN_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_PARAMGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>148</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_PARAMGEN_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>149</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_SIGN_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>142</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_VERIFY_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>143</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_VERIFY_RECOVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>144</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_RIJNDAEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_SIGNFINAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_EVP_VERIFYFINAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_CIPHERINIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>166</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_CIPHER_CTX_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>170</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_CIPHER_CTX_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>167</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>171</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_DIGESTINIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>168</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_FIPS_MD_CTX_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>169</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_HMAC_INIT_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>174</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_INT_CTX_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>157</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_PKCS5_PBE_KEYIVGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_PKCS5_V2_PBE_KEYIVGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>164</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_PKCS8_SET_BROKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_PKEY_SET_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>158</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_RC2_MAGIC_TO_METH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_F_RC5_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_AES_IV_SETUP_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>162</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_AES_KEY_SETUP_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>143</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_ASN1_LIB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BAD_BLOCK_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BAD_DECRYPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BAD_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BN_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BN_PUBKEY_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>155</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_CAMELLIA_KEY_SETUP_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>157</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_CIPHER_PARAMETER_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_COMMAND_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_CTRL_NOT_IMPLEMENTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/>138</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_DIFFERENT_KEY_TYPES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_DIFFERENT_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>153</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_DISABLED_FOR_FIPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>163</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_ENCODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_ERROR_LOADING_SECTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>165</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_ERROR_SETTING_FIPS_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>166</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EVP_PBE_CIPHERINIT_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EXPECTING_AN_RSA_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EXPECTING_A_DH_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EXPECTING_A_DSA_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EXPECTING_A_ECDSA_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_EXPECTING_A_EC_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>142</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_FIPS_MODE_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>167</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INITIALIZATION_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INPUT_NOT_INITIALIZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INVALID_DIGEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>152</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INVALID_FIPS_MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>168</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INVALID_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_INVALID_OPERATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>148</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_IV_TOO_LARGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_KEYGEN_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_MESSAGE_DIGEST_IS_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>159</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_METHOD_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>144</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_MISSING_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_CIPHER_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_DEFAULT_DIGEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>158</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_DIGEST_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_DSA_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_KEY_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>154</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_OPERATION_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>149</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_SIGN_FUNCTION_CONFIGURED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_NO_VERIFY_FUNCTION_CONFIGURED<sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE<sp/><sp/><sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_OPERATON_NOT_INITIALIZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>151</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_PRIVATE_KEY_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_PRIVATE_KEY_ENCODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_PUBLIC_KEY_NOT_RSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_TOO_LARGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>164</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNKNOWN_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>160</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNKNOWN_DIGEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>161</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNKNOWN_OPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>169</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNKNOWN_PBE_ALGORITHM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_ALGORITHM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>156</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_CIPHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_KEYLENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION<sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_KEY_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_PRF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM<sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_UNSUPPORTED_SALT_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_WRONG_FINAL_BLOCK_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_R_WRONG_PUBLIC_KEY_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/evp.h"/>
  </compounddef>
</doxygen>
