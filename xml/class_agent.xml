<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_agent" kind="class" language="C++" prot="public">
    <compoundname>Agent</compoundname>
    <includes refid="_agent_8h" local="no">Agent.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_agent_1ac857e9fc1a2d40aa8c488c2b0892f796" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Agent::idNumber</definition>
        <argsstring></argsstring>
        <name>idNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s unique identity number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="73" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a6f12ce0139e8709d407fd20963b84d2f" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::phaseScore</definition>
        <argsstring></argsstring>
        <name>phaseScore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of salience values of the Events which have been interpreted as beats by this <ref refid="class_agent" kindref="compound">Agent</ref>, weighted by their nearness to the predicted beat times. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="79" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1abafab4395f0ebf00ca08cdffe8a87705" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Agent::beatCount</definition>
        <argsstring></argsstring>
        <name>beatCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of beats found by this <ref refid="class_agent" kindref="compound">Agent</ref>, including interpolated beats. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="84" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1aa6ce02ae70357fef9fa397c2d129cb72" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::beatInterval</definition>
        <argsstring></argsstring>
        <name>beatInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current tempo hypothesis of the <ref refid="class_agent" kindref="compound">Agent</ref>, expressed as the beat period in seconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="89" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1ac6cfc0361e141992752f55ad4b3671d5" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::initialBeatInterval</definition>
        <argsstring></argsstring>
        <name>initialBeatInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The initial tempo hypothesis of the <ref refid="class_agent" kindref="compound">Agent</ref>, expressed as the beat period in seconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="94" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1acc4850f7dcc7d04f56a770629282c551" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::beatTime</definition>
        <argsstring></argsstring>
        <name>beatTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The time of the most recent beat accepted by this <ref refid="class_agent" kindref="compound">Agent</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="97" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a5aa8ad248a3aceecec676b89a0eb3791" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::maxChange</definition>
        <argsstring></argsstring>
        <name>maxChange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum allowed deviation from the initial tempo, expressed as a fraction of the initial beat period. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="102" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a32dd69961705fcd29f725ebf2a2e81b4" prot="public" static="no" mutable="no">
        <type>EventList</type>
        <definition>EventList Agent::events</definition>
        <argsstring></argsstring>
        <name>events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The list of Events (onsets) accepted by this <ref refid="class_agent" kindref="compound">Agent</ref> as beats, plus interpolated beats. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="106" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_agent_1ae641d53faf2024692077c776e9ed5a1d" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int Agent::idCounter</definition>
        <argsstring></argsstring>
        <name>idCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The identity number of the next created <ref refid="class_agent" kindref="compound">Agent</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="155" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a829ce1d2cde9bb336bdf39dd5e8dec76" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Agent::INNER_MARGIN</definition>
        <argsstring></argsstring>
        <name>INNER_MARGIN</name>
        <initializer>= 0.040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default value of innerMargin, which is the maximum time (in seconds) that a beat can deviate from the predicted beat time without a fork occurring. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="161" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a373fd8e91d13170553d7f0a758ea3bb7" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Agent::CONF_FACTOR</definition>
        <argsstring></argsstring>
        <name>CONF_FACTOR</name>
        <initializer>= 0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The slope of the penalty function for onsets which do not coincide precisely with predicted beat times. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="166" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1abb11ee5dcc0f0b0473ea149592946060" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Agent::DEFAULT_CORRECTION_FACTOR</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CORRECTION_FACTOR</name>
        <initializer>= 50.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The reactiveness/inertia balance, i.e. degree of change in the tempo, is controlled by the correctionFactor variable. This constant defines its default value, which currently is not subsequently changed. The beat period is updated by the reciprocal of the correctionFactor multiplied by the difference between the predicted beat time and matching onset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="176" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_agent_1a6f4e45dd542648a98a3a200c126d9b22" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::preMargin</definition>
        <argsstring></argsstring>
        <name>preMargin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of the outer half-window before the predicted beat time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="179" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a9c0c74a73cfc7727d132a9fe11d4bf9d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::postMargin</definition>
        <argsstring></argsstring>
        <name>postMargin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of the outer half-window after the predicted beat time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="182" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1adc816dfb30e5d8fc4f959d847508e440" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::innerMargin</definition>
        <argsstring></argsstring>
        <name>innerMargin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum time (in seconds) that a beat can deviate from the predicted beat time without a fork occurring (i.e. a 2nd <ref refid="class_agent" kindref="compound">Agent</ref> being created). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="188" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1aee656e79ad16e654a6988a70f1dd2dfc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::correctionFactor</definition>
        <argsstring></argsstring>
        <name>correctionFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controls the reactiveness/inertia balance, i.e. degree of change in the tempo. The beat period is updated by the reciprocal of the correctionFactor multiplied by the difference between the predicted beat time and matching onset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="196" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_agent_1a8ad46441f5d6923356e4587de18d0d43" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Agent::expiryTime</definition>
        <argsstring></argsstring>
        <name>expiryTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The time (in seconds) after which an <ref refid="class_agent" kindref="compound">Agent</ref> that has no <ref refid="struct_event" kindref="compound">Event</ref> matching its beat predictions will be destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="201" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_agent_1a4c3a0b0e41859d59e55d087c2396baa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Agent::Agent</definition>
        <argsstring>(const AgentParameters &amp;params, double ibi)</argsstring>
        <name>Agent</name>
        <param>
          <type>const <ref refid="class_agent_parameters" kindref="compound">AgentParameters</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ibi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor: the work is performed by init() <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ibi</parametername>
</parameternamelist>
<parameterdescription>
<para>The beat period (inter-beat interval) of the <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s tempo hypothesis. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="112" column="1" bodyfile="thirdparty/beatroot/Agent.cpp" bodystart="35" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_agent_1a111c0107646bc0fe5f4815ca8d229512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_agent" kindref="compound">Agent</ref> *</type>
        <definition>Agent * Agent::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="114" column="1" bodyfile="thirdparty/beatroot/Agent.cpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_agent_1a64b1bca4fe422141a348c20c5831a16d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Agent::accept</definition>
        <argsstring>(const Event &amp;e, double err, int beats)</argsstring>
        <name>accept</name>
        <param>
          <type>const <ref refid="struct_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>err</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accept a new <ref refid="struct_event" kindref="compound">Event</ref> as a beat time, and update the state of the <ref refid="class_agent" kindref="compound">Agent</ref> accordingly. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_event" kindref="compound">Event</ref> which is accepted as being on the beat. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>The difference between the predicted and actual beat times. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beats</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of beats since the last beat that matched an <ref refid="struct_event" kindref="compound">Event</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="121" column="1" bodyfile="thirdparty/beatroot/Agent.cpp" bodystart="58" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_agent_1a7aae45009593ec7febcf3c61909a724a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Agent::considerAsBeat</definition>
        <argsstring>(const Event &amp;e, AgentList &amp;a)</argsstring>
        <name>considerAsBeat</name>
        <param>
          <type>const <ref refid="struct_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="class_agent_list" kindref="compound">AgentList</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The given <ref refid="struct_event" kindref="compound">Event</ref> is tested for a possible beat time. The following situations can occur: 1) The <ref refid="class_agent" kindref="compound">Agent</ref> has no beats yet; the <ref refid="struct_event" kindref="compound">Event</ref> is accepted as the first beat. 2) The <ref refid="struct_event" kindref="compound">Event</ref> is beyond expiryTime seconds after the <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s last &apos;confirming&apos; beat; the <ref refid="class_agent" kindref="compound">Agent</ref> is terminated. 3) The <ref refid="struct_event" kindref="compound">Event</ref> is within the innerMargin of the beat prediction; it is accepted as a beat. 4) The <ref refid="struct_event" kindref="compound">Event</ref> is within the postMargin&apos;s of the beat prediction; it is accepted as a beat by this <ref refid="class_agent" kindref="compound">Agent</ref>, and a new <ref refid="class_agent" kindref="compound">Agent</ref> is created which doesn&apos;t accept it as a beat. 5) The <ref refid="struct_event" kindref="compound">Event</ref> is ignored because it is outside the windows around the <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s predicted beat time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_event" kindref="compound">Event</ref> to be tested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of all agents, which is updated if a new agent is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indicate whether the given <ref refid="struct_event" kindref="compound">Event</ref> was accepted as a beat by this <ref refid="class_agent" kindref="compound">Agent</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="139" column="1" bodyfile="thirdparty/beatroot/Agent.cpp" bodystart="72" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_agent_1a0b45b44b745b3234c117d356de7b299c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Agent::fillBeats</definition>
        <argsstring>()</argsstring>
        <name>fillBeats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interpolates missing beats in the <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s beat track, starting from the beginning of the piece. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="144" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_agent_1a1eedd701cb0b8551d6642afb710ba2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Agent::fillBeats</definition>
        <argsstring>(double start)</argsstring>
        <name>fillBeats</name>
        <param>
          <type>double</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interpolates missing beats in the <ref refid="class_agent" kindref="compound">Agent</ref>&apos;s beat track. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Ignore beats earlier than this start time </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/beatroot/Agent.h" line="151" column="1" bodyfile="thirdparty/beatroot/Agent.cpp" bodystart="100" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_agent" kindref="compound">Agent</ref> is the central class for beat tracking. Each <ref refid="class_agent" kindref="compound">Agent</ref> object has a tempo hypothesis, a history of tracked beats, and a score evaluating the continuity, regularity and salience of its beat track. </para>    </detaileddescription>
    <location file="thirdparty/beatroot/Agent.h" line="70" column="1" bodyfile="thirdparty/beatroot/Agent.h" bodystart="69" bodyend="203"/>
    <listofallmembers>
      <member refid="class_agent_1a64b1bca4fe422141a348c20c5831a16d" prot="public" virt="non-virtual"><scope>Agent</scope><name>accept</name></member>
      <member refid="class_agent_1a4c3a0b0e41859d59e55d087c2396baa4" prot="public" virt="non-virtual"><scope>Agent</scope><name>Agent</name></member>
      <member refid="class_agent_1abafab4395f0ebf00ca08cdffe8a87705" prot="public" virt="non-virtual"><scope>Agent</scope><name>beatCount</name></member>
      <member refid="class_agent_1aa6ce02ae70357fef9fa397c2d129cb72" prot="public" virt="non-virtual"><scope>Agent</scope><name>beatInterval</name></member>
      <member refid="class_agent_1acc4850f7dcc7d04f56a770629282c551" prot="public" virt="non-virtual"><scope>Agent</scope><name>beatTime</name></member>
      <member refid="class_agent_1a111c0107646bc0fe5f4815ca8d229512" prot="public" virt="non-virtual"><scope>Agent</scope><name>clone</name></member>
      <member refid="class_agent_1a373fd8e91d13170553d7f0a758ea3bb7" prot="private" virt="non-virtual"><scope>Agent</scope><name>CONF_FACTOR</name></member>
      <member refid="class_agent_1a7aae45009593ec7febcf3c61909a724a" prot="public" virt="non-virtual"><scope>Agent</scope><name>considerAsBeat</name></member>
      <member refid="class_agent_1aee656e79ad16e654a6988a70f1dd2dfc" prot="private" virt="non-virtual"><scope>Agent</scope><name>correctionFactor</name></member>
      <member refid="class_agent_1abb11ee5dcc0f0b0473ea149592946060" prot="private" virt="non-virtual"><scope>Agent</scope><name>DEFAULT_CORRECTION_FACTOR</name></member>
      <member refid="class_agent_1a32dd69961705fcd29f725ebf2a2e81b4" prot="public" virt="non-virtual"><scope>Agent</scope><name>events</name></member>
      <member refid="class_agent_1a8ad46441f5d6923356e4587de18d0d43" prot="private" virt="non-virtual"><scope>Agent</scope><name>expiryTime</name></member>
      <member refid="class_agent_1a0b45b44b745b3234c117d356de7b299c" prot="public" virt="non-virtual"><scope>Agent</scope><name>fillBeats</name></member>
      <member refid="class_agent_1a1eedd701cb0b8551d6642afb710ba2a1" prot="public" virt="non-virtual"><scope>Agent</scope><name>fillBeats</name></member>
      <member refid="class_agent_1ae641d53faf2024692077c776e9ed5a1d" prot="private" virt="non-virtual"><scope>Agent</scope><name>idCounter</name></member>
      <member refid="class_agent_1ac857e9fc1a2d40aa8c488c2b0892f796" prot="public" virt="non-virtual"><scope>Agent</scope><name>idNumber</name></member>
      <member refid="class_agent_1ac6cfc0361e141992752f55ad4b3671d5" prot="public" virt="non-virtual"><scope>Agent</scope><name>initialBeatInterval</name></member>
      <member refid="class_agent_1a829ce1d2cde9bb336bdf39dd5e8dec76" prot="private" virt="non-virtual"><scope>Agent</scope><name>INNER_MARGIN</name></member>
      <member refid="class_agent_1adc816dfb30e5d8fc4f959d847508e440" prot="private" virt="non-virtual"><scope>Agent</scope><name>innerMargin</name></member>
      <member refid="class_agent_1a5aa8ad248a3aceecec676b89a0eb3791" prot="public" virt="non-virtual"><scope>Agent</scope><name>maxChange</name></member>
      <member refid="class_agent_1a6f12ce0139e8709d407fd20963b84d2f" prot="public" virt="non-virtual"><scope>Agent</scope><name>phaseScore</name></member>
      <member refid="class_agent_1a9c0c74a73cfc7727d132a9fe11d4bf9d" prot="private" virt="non-virtual"><scope>Agent</scope><name>postMargin</name></member>
      <member refid="class_agent_1a6f4e45dd542648a98a3a200c126d9b22" prot="private" virt="non-virtual"><scope>Agent</scope><name>preMargin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
