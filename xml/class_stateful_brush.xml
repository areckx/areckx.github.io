<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_stateful_brush" kind="class" language="C++" prot="public">
    <compoundname>StatefulBrush</compoundname>
    <includes refid="colorscheme_8h" local="no">colorscheme.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_stateful_brush_1aa976bc7aa8a9b55e8d9a0fdba5be0486" prot="private" static="no" mutable="no">
        <type>class <ref refid="class_stateful_brush_private" kindref="compound">StatefulBrushPrivate</ref> *</type>
        <definition>class StatefulBrushPrivate* StatefulBrush::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="518" column="1" bodyfile="mstyle/colorscheme.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_stateful_brush_1a36ff921f6bd10f7bc4220d5975263bc4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>()</argsstring>
        <name>StatefulBrush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a &quot;default&quot; stateful brush. For such an instance, all overloads of <ref refid="class_stateful_brush_1a7019e41f2932aafcefcce57623c4fb2c" kindref="member">StatefulBrush::brush</ref> will return a default brush (i.e. <computeroutput>QBrush()</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="436" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="563" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1ab2d1bb4316d486ec896f4cad2ae001f2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(ColorScheme::ColorSet, ColorScheme::ForegroundRole)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type><ref refid="class_color_scheme_1a56ea451e86dffa1822ed087902844e05" kindref="member">ColorScheme::ColorSet</ref></type>
          <defname>set</defname>
        </param>
        <param>
          <type><ref refid="class_color_scheme_1ab0f331e829838e82757088db8ce32ab4" kindref="member">ColorScheme::ForegroundRole</ref></type>
          <defname>role</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a stateful brush from given color set and foreground role, using the colors from the given KConfig (if null, the system colors are used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="443" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="567" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a37722e1db380bec60352a6088cb1aa5b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(ColorScheme::ColorSet, ColorScheme::BackgroundRole)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type><ref refid="class_color_scheme_1a56ea451e86dffa1822ed087902844e05" kindref="member">ColorScheme::ColorSet</ref></type>
          <defname>set</defname>
        </param>
        <param>
          <type><ref refid="class_color_scheme_1a70715e73df1fb0f140797633f8043a8c" kindref="member">ColorScheme::BackgroundRole</ref></type>
          <defname>role</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a stateful brush from given color set and background role, using the colors from the given KConfig (if null, the system colors are used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="450" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="574" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a40d7f76bea78e8e48685f030fdbc6c0c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(ColorScheme::ColorSet, ColorScheme::DecorationRole)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type><ref refid="class_color_scheme_1a56ea451e86dffa1822ed087902844e05" kindref="member">ColorScheme::ColorSet</ref></type>
          <defname>set</defname>
        </param>
        <param>
          <type><ref refid="class_color_scheme_1a4ad022af301e30791c6c248e1fc656cf" kindref="member">ColorScheme::DecorationRole</ref></type>
          <defname>role</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a stateful brush from given color set and decoration role, using the colors from the given KConfig (if null, the system colors are used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="457" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="581" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1aba6fe316f65f6bc26a630374e8bffea3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(const QBrush &amp;)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type>const QBrush &amp;</type>
          <defname>brush</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a stateful background brush from a specified QBrush (or QColor, via QBrush&apos;s implicit constructor). The various states are determined from the base QBrush (which fills in the Active state) according to the same rules used to build stateful color schemes from the system color scheme. The state effects from the given KConfig are used (if null, the system state effects are used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="467" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="588" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a70251c65c2aef41bd81d07fa8b5dba60" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(const QBrush &amp;, const QBrush &amp;background)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type>const QBrush &amp;</type>
          <defname>brush</defname>
        </param>
        <param>
          <type>const QBrush &amp;</type>
          <declname>background</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a stateful foreground/decoration brush from a specified QBrush (or QColor, via QBrush&apos;s implicit constructor). The various states are determined from the base QBrush (which fills in the Active state) according to the same rules used to build stateful color schemes from the system color scheme. The state effects from the given KConfig are used (if null, the system state effects are used).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>background</parametername>
</parameternamelist>
<parameterdescription>
<para>The background brush (or color) corresponding to the <ref refid="class_color_scheme_1a70715e73df1fb0f140797633f8043a8ca9762dd3095372ba69df3c550d96af844" kindref="member">ColorScheme::NormalBackground</ref> role and QPalette::Active state for this foreground/decoration color. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="481" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="595" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1af4916a67dc47a42174de13f2ea6736ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::StatefulBrush</definition>
        <argsstring>(const StatefulBrush &amp;)</argsstring>
        <name>StatefulBrush</name>
        <param>
          <type>const <ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a copy of another <ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="484" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="602" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a376e4cc7b8d5f76b520dcb2aa27d8161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>StatefulBrush::~StatefulBrush</definition>
        <argsstring>()</argsstring>
        <name>~StatefulBrush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="487" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="609" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a9c97dd9059e6160632611e3484a58219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> &amp;</type>
        <definition>StatefulBrush &amp; StatefulBrush::operator=</definition>
        <argsstring>(const StatefulBrush &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="490" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="617" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1a7019e41f2932aafcefcce57623c4fb2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush StatefulBrush::brush</definition>
        <argsstring>(QPalette::ColorGroup) const</argsstring>
        <name>brush</name>
        <param>
          <type>QPalette::ColorGroup</type>
          <defname>state</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the brush for the specified widget state. This is used when you know explicitly what state is wanted. Otherwise one of overloads is often more convenient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="497" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="628" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1ab69204943e8c2be8e19640340ce1501d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush StatefulBrush::brush</definition>
        <argsstring>(const QPalette &amp;) const</argsstring>
        <name>brush</name>
        <param>
          <type>const QPalette &amp;</type>
          <defname>pal</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the brush, using a QPalette reference to determine the correct state. Use when your painting code has easy access to the QPalette that it is supposed to be using. The state used in this instance is the currentColorGroup of the palette. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="505" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="643" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="class_stateful_brush_1adc96d0a37f1c4a9b13e4587b82742851" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush StatefulBrush::brush</definition>
        <argsstring>(const QWidget *) const</argsstring>
        <name>brush</name>
        <param>
          <type>const QWidget *</type>
          <defname>widget</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the brush, using a QWidget pointer to determine the correct state. Use when you have a pointer to the widget that you are painting. The state used is the current state of the widget.</para><para><simplesect kind="note"><para>If you pass an invalid widget, you will get a default brush (i.e. <computeroutput>QBrush()</computeroutput>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mstyle/colorscheme.h" line="515" column="1" bodyfile="mstyle/colorscheme.cpp" bodystart="651" bodyend="653"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A container for a &quot;state-aware&quot; brush.</para><para><ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> provides an easy and safe way to store a color for use in a user interface. It is &quot;safe&quot; both in that it will make it easy to deal with widget states in a correct manner, and that it insulates you against changes in QPalette::ColorGroup.</para><para>Basically, a stateful brush is used to cache a particular &quot;color&quot; from the KDE system palette (usually, one which does not live in QPalette) in the way you would have used a QColor in KDE3. When you are ready to draw using the brush, you use the current state to retrieve the appropriate brush.</para><para>Stateful brushes can also be used to apply state effects to arbitrary brushes, for example when working with a application specific user-defined color palette.</para><para><simplesect kind="note"><para>As of Qt 4.3, QPalette::ColorGroup is missing a state for disabled widgets in an inactive window. Hopefully Trolltech will fix this bug, at which point <ref refid="class_color_scheme" kindref="compound">ColorScheme</ref> and <ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> will be updated to recognize the new state. Using <ref refid="class_stateful_brush" kindref="compound">StatefulBrush</ref> will allow your application to inherit these changes &quot;for free&quot;, without even recompiling. </para></simplesect>
</para>    </detaileddescription>
    <location file="mstyle/colorscheme.h" line="429" column="1" bodyfile="mstyle/colorscheme.h" bodystart="429" bodyend="519"/>
    <listofallmembers>
      <member refid="class_stateful_brush_1a7019e41f2932aafcefcce57623c4fb2c" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>brush</name></member>
      <member refid="class_stateful_brush_1ab69204943e8c2be8e19640340ce1501d" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>brush</name></member>
      <member refid="class_stateful_brush_1adc96d0a37f1c4a9b13e4587b82742851" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>brush</name></member>
      <member refid="class_stateful_brush_1aa976bc7aa8a9b55e8d9a0fdba5be0486" prot="private" virt="non-virtual"><scope>StatefulBrush</scope><name>d</name></member>
      <member refid="class_stateful_brush_1a9c97dd9059e6160632611e3484a58219" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>operator=</name></member>
      <member refid="class_stateful_brush_1a36ff921f6bd10f7bc4220d5975263bc4" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1ab2d1bb4316d486ec896f4cad2ae001f2" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1a37722e1db380bec60352a6088cb1aa5b" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1a40d7f76bea78e8e48685f030fdbc6c0c" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1aba6fe316f65f6bc26a630374e8bffea3" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1a70251c65c2aef41bd81d07fa8b5dba60" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1af4916a67dc47a42174de13f2ea6736ba" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>StatefulBrush</name></member>
      <member refid="class_stateful_brush_1a376e4cc7b8d5f76b520dcb2aa27d8161" prot="public" virt="non-virtual"><scope>StatefulBrush</scope><name>~StatefulBrush</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
