<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_pre_scan_output_dev_8cc" kind="file" language="C++">
    <compoundname>PreScanOutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="_link_8h" local="yes">Link.h</includes>
    <includes refid="_catalog_8h" local="yes">Catalog.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_pre_scan_output_dev_8h" local="yes">PreScanOutputDev.h</includes>
    <incdepgraph>
      <node id="89377">
        <label>stdarg.h</label>
      </node>
      <node id="89384">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89372" relation="include">
        </childnode>
      </node>
      <node id="89361">
        <label>assert.h</label>
      </node>
      <node id="89370">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89384" relation="include">
        </childnode>
        <childnode refid="89361" relation="include">
        </childnode>
        <childnode refid="89385" relation="include">
        </childnode>
      </node>
      <node id="89388">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89375" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89365" relation="include">
        </childnode>
      </node>
      <node id="89378">
        <label>stdlib.h</label>
      </node>
      <node id="89374">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="89363" relation="include">
        </childnode>
        <childnode refid="89362" relation="include">
        </childnode>
      </node>
      <node id="89381">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
      </node>
      <node id="89390">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
        <childnode refid="89387" relation="include">
        </childnode>
      </node>
      <node id="89357">
        <label>thirdparty/poppler/poppler/PreScanOutputDev.cc</label>
        <link refid="_pre_scan_output_dev_8cc"/>
        <childnode refid="89358" relation="include">
        </childnode>
        <childnode refid="89359" relation="include">
        </childnode>
        <childnode refid="89360" relation="include">
        </childnode>
        <childnode refid="89368" relation="include">
        </childnode>
        <childnode refid="89388" relation="include">
        </childnode>
        <childnode refid="89389" relation="include">
        </childnode>
        <childnode refid="89390" relation="include">
        </childnode>
        <childnode refid="89391" relation="include">
        </childnode>
        <childnode refid="89392" relation="include">
        </childnode>
      </node>
      <node id="89360">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="89361" relation="include">
        </childnode>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89363" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89365" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
      </node>
      <node id="89385">
        <label>map</label>
      </node>
      <node id="89380">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="89377" relation="include">
        </childnode>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89375" relation="include">
        </childnode>
      </node>
      <node id="89368">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89369" relation="include">
        </childnode>
        <childnode refid="89370" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89386" relation="include">
        </childnode>
        <childnode refid="89387" relation="include">
        </childnode>
      </node>
      <node id="89369">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="89364" relation="include">
        </childnode>
      </node>
      <node id="89382">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
      </node>
      <node id="89391">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
      </node>
      <node id="89376">
        <label>limits.h</label>
      </node>
      <node id="89362">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="89363" relation="include">
        </childnode>
      </node>
      <node id="89379">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="89383">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89363" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89366" relation="include">
        </childnode>
      </node>
      <node id="89367">
        <label>pthread.h</label>
      </node>
      <node id="89386">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="89371" relation="include">
        </childnode>
      </node>
      <node id="89373">
        <label>string.h</label>
      </node>
      <node id="89375">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="89376" relation="include">
        </childnode>
        <childnode refid="89377" relation="include">
        </childnode>
        <childnode refid="89378" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
      </node>
      <node id="89389">
        <label>Link.h</label>
        <link refid="_link_8h_source"/>
        <childnode refid="89371" relation="include">
        </childnode>
      </node>
      <node id="89371">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="89372" relation="include">
        </childnode>
        <childnode refid="89363" relation="include">
        </childnode>
        <childnode refid="89373" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89374" relation="include">
        </childnode>
        <childnode refid="89375" relation="include">
        </childnode>
        <childnode refid="89379" relation="include">
        </childnode>
        <childnode refid="89380" relation="include">
        </childnode>
        <childnode refid="89381" relation="include">
        </childnode>
        <childnode refid="89382" relation="include">
        </childnode>
        <childnode refid="89383" relation="include">
        </childnode>
      </node>
      <node id="89387">
        <label>vector</label>
      </node>
      <node id="89393">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89365" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89386" relation="include">
        </childnode>
      </node>
      <node id="89359">
        <label>math.h</label>
      </node>
      <node id="89366">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="89367" relation="include">
        </childnode>
      </node>
      <node id="89365">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="89364">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="89362" relation="include">
        </childnode>
      </node>
      <node id="89392">
        <label>PreScanOutputDev.h</label>
        <link refid="_pre_scan_output_dev_8h_source"/>
        <childnode refid="89364" relation="include">
        </childnode>
        <childnode refid="89371" relation="include">
        </childnode>
        <childnode refid="89370" relation="include">
        </childnode>
        <childnode refid="89360" relation="include">
        </childnode>
        <childnode refid="89393" relation="include">
        </childnode>
      </node>
      <node id="89372">
        <label>set</label>
      </node>
      <node id="89358">
        <label>config.h</label>
      </node>
      <node id="89363">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PreScanOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2005<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010,<sp/>2011<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011,<sp/>2014<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011,<sp/>2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Link.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Catalog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PreScanOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PreScanOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">PreScanOutputDev::PreScanOutputDev(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>level<sp/>=<sp/>globalParams-&gt;getPSLevel();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>clearStats();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">PreScanOutputDev::~PreScanOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*pageNum*/</highlight><highlight class="normal">,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*<sp/></highlight><highlight class="comment">/*xref*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::endPage()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::stroke(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dash;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dashLen;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dashStart;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>check(state-&gt;getStrokeColorSpace(),<sp/>state-&gt;getStrokeColor(),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>state-&gt;getLineDash(&amp;dash,<sp/>&amp;dashLen,<sp/>&amp;dashStart);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dashLen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::fill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::eoFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">GBool<sp/>PreScanOutputDev::tilingPatternFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*catalog,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tilingType*/</highlight><highlight class="normal">,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>GBool<sp/>tilingNeeded<sp/>=<sp/>(x1<sp/>-<sp/>x0<sp/>!=<sp/>1<sp/>||<sp/>y1<sp/>-<sp/>y0<sp/>!=<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tilingNeeded)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inTilingPatternFill++;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx-&gt;drawForm(str,<sp/>resDict,<sp/>mat,<sp/>bbox);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tilingNeeded)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inTilingPatternFill--;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">GBool<sp/>PreScanOutputDev::functionShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceGray<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">GBool<sp/>PreScanOutputDev::axialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tMin*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tMax*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceGray<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">GBool<sp/>PreScanOutputDev::radialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sMin*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sMax*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceGray<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::clip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>check<sp/>for<sp/>a<sp/>rectangle<sp/>&quot;near&quot;<sp/>the<sp/>edge<sp/>of<sp/>the<sp/>page;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/><sp/><sp/>else<sp/>set<sp/>gdi<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::eoClip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>see<sp/>clip()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::beginStringOp(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>render;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/>m12,<sp/>m21,<sp/>m22;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>GBool<sp/>simpleTTF;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>render<sp/>=<sp/>state-&gt;getRender();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(render<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((render<sp/>&amp;<sp/>3)<sp/>==<sp/>1<sp/>||<sp/>(render<sp/>&amp;<sp/>3)<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>check(state-&gt;getStrokeColorSpace(),<sp/>state-&gt;getStrokeColor(),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>font<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>state-&gt;getFontTransMat(&amp;m11,<sp/>&amp;m12,<sp/>&amp;m21,<sp/>&amp;m22);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>check<sp/>for<sp/>external<sp/>fonts<sp/>that<sp/>are<sp/>non-TrueType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>simpleTTF<sp/>=<sp/>fabs(m11<sp/>+<sp/>m22)<sp/>&lt;<sp/>0.01<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m11<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(m12)<sp/>&lt;<sp/>0.01<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(m21)<sp/>&lt;<sp/>0.01<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(state-&gt;getHorizScaling()<sp/>-<sp/>1)<sp/>&lt;<sp/>0.001<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(font-&gt;getType()<sp/>==<sp/>fontTrueType<sp/>||</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getType()<sp/>==<sp/>fontTrueTypeOT);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simpleTTF)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>create<sp/>a<sp/>FoFiTrueType<sp/>object,<sp/>and<sp/>check<sp/>for<sp/>a<sp/>Unicode<sp/>cmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getRender()<sp/>!=<sp/>0<sp/>||<sp/>!simpleTTF)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::endStringOp(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">GBool<sp/>PreScanOutputDev::beginType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*x*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*y*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*dx*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*dy*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/></highlight><highlight class="comment">/*code*/</highlight><highlight class="normal">,<sp/>Unicode<sp/>*<sp/></highlight><highlight class="comment">/*u*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*uLen*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>false<sp/>so<sp/>all<sp/>Type<sp/>3<sp/>chars<sp/>get<sp/>rendered<sp/>(no<sp/>caching)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::endType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*<sp/></highlight><highlight class="comment">/*ref*/</highlight><highlight class="normal">,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/></highlight><highlight class="comment">/*invert*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*interpolate*/</highlight><highlight class="normal">,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern<sp/>||<sp/>inTilingPatternFill<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>patternImgMask<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*<sp/></highlight><highlight class="comment">/*ref*/</highlight><highlight class="normal">,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*interpolate*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*maskColors*/</highlight><highlight class="normal">,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csIndexed)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>((<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace)-&gt;getBase();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csDeviceGray<sp/>||</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getMode()<sp/>==<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getBits()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inTilingPatternFill<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>patternImgMask<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>*<sp/>colorMap-&gt;getNumPixelComps()<sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits()<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*<sp/></highlight><highlight class="comment">/*ref*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*<sp/></highlight><highlight class="comment">/*str*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*width*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*height*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*interpolate*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*<sp/></highlight><highlight class="comment">/*maskStr*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*maskWidth*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*maskHeight*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*maskInvert*/</highlight><highlight class="normal">,<sp/>GBool<sp/></highlight><highlight class="comment">/*maskInterpolate*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csIndexed)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>((<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace)-&gt;getBase();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csDeviceGray<sp/>||</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getMode()<sp/>==<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getBits()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::drawSoftMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*<sp/></highlight><highlight class="comment">/*ref*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*<sp/></highlight><highlight class="comment">/*str*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*width*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*height*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*interpolate*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*<sp/></highlight><highlight class="comment">/*maskStr*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*maskWidth*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*maskHeight*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*<sp/></highlight><highlight class="comment">/*maskColorMap*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*maskInterpolate*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>colorSpace<sp/>=<sp/>colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csIndexed)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>((<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace)-&gt;getBase();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>!=<sp/>csDeviceGray<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getMode()<sp/>!=<sp/>csCalGray)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::beginTransparencyGroup(</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*bbox*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*<sp/></highlight><highlight class="comment">/*blendingColorSpace*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*isolated*/</highlight><highlight class="normal">,<sp/>GBool<sp/></highlight><highlight class="comment">/*knockout*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/></highlight><highlight class="comment">/*forSoftMask*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::paintTransparencyGroup(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*bbox*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>check(state-&gt;getFillColorSpace(),<sp/>state-&gt;getFillColor(),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillOpacity(),<sp/>state-&gt;getBlendMode());</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::setSoftMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*bbox*/</highlight><highlight class="normal">,<sp/>GBool<sp/></highlight><highlight class="comment">/*alpha*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*<sp/></highlight><highlight class="comment">/*transferFunc*/</highlight><highlight class="normal">,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*<sp/></highlight><highlight class="comment">/*backdropColor*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::check(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*<ref refid="structcolor" kindref="compound">color</ref>,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>opacity,<sp/>GfxBlendMode<sp/>blendMode)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>gdi<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getRGB(color,<sp/>&amp;rgb);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgb.r<sp/>!=<sp/>rgb.g<sp/>||<sp/>rgb.g<sp/>!=<sp/>rgb.b<sp/>||<sp/>rgb.b<sp/>!=<sp/>rgb.r)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((rgb.r<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rgb.g<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rgb.b<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rgb.r<sp/>==<sp/>gfxColorComp1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb.g<sp/>==<sp/>gfxColorComp1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgb.b<sp/>==<sp/>gfxColorComp1)))<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opacity<sp/>!=<sp/>1<sp/>||<sp/>blendMode<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>transparency<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PreScanOutputDev::clearStats()<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>mono<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>gray<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>transparency<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>gdi<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>patternImgMask<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>inTilingPatternFill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/PreScanOutputDev.cc"/>
  </compounddef>
</doxygen>
