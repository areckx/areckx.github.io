<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_qt_locked_file" kind="class" language="C++" prot="public">
    <compoundname>QtLockedFile</compoundname>
    <briefdescription>
<para>The <ref refid="class_qt_locked_file" kindref="compound">QtLockedFile</ref> class extends QFile with advisory locking functions. </para>    </briefdescription>
    <detaileddescription>
<para>A file may be locked in read or write mode. Multiple instances of <emphasis><ref refid="class_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis>, created in multiple processes running on the same machine, may have a file locked in read mode. Exactly one instance may have it locked in write mode. A read and a write lock cannot exist simultaneously on the same file.</para><para>The file locks are advisory. This means that nothing prevents another process from manipulating a locked file using QFile or file system functions offered by the OS. Serialization is only guaranteed if all processes that access the file use QLockedFile. Also, while holding a lock on a file, a process must not open the same file again (through any API), or locks can be unexpectedly lost.</para><para>The lock provided by an instance of <emphasis><ref refid="class_qt_locked_file" kindref="compound">QtLockedFile</ref></emphasis> is released whenever the program terminates. This is true even when the program crashes and no destructors are called. </para>    </detaileddescription>
    <location file="thirdparty/singleapp/src/qtlockedfile.cpp" line="44" column="1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
