<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ts_8h" kind="file" language="C++">
    <compoundname>ts.h</compoundname>
    <includes refid="opensslconf_8h" local="no">openssl/opensslconf.h</includes>
    <includes refid="symhacks_8h" local="no">openssl/symhacks.h</includes>
    <includes refid="buffer_8h" local="no">openssl/buffer.h</includes>
    <includes refid="evp_8h" local="no">openssl/evp.h</includes>
    <includes refid="bio_8h" local="no">openssl/bio.h</includes>
    <includes refid="stack_8h" local="no">openssl/stack.h</includes>
    <includes refid="asn1_8h" local="no">openssl/asn1.h</includes>
    <includes refid="safestack_8h" local="no">openssl/safestack.h</includes>
    <includes refid="rsa_8h" local="no">openssl/rsa.h</includes>
    <includes refid="dsa_8h" local="no">openssl/dsa.h</includes>
    <includes refid="dh_8h" local="no">openssl/dh.h</includes>
    <includes refid="x509_8h" local="no">openssl/x509.h</includes>
    <includes refid="x509v3_8h" local="no">openssl/x509v3.h</includes>
    <incdepgraph>
      <node id="83707">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h"/>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83711" relation="include">
        </childnode>
        <childnode refid="83715" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83721" relation="include">
        </childnode>
        <childnode refid="83727" relation="include">
        </childnode>
        <childnode refid="83722" relation="include">
        </childnode>
        <childnode refid="83730" relation="include">
        </childnode>
        <childnode refid="83731" relation="include">
        </childnode>
        <childnode refid="83732" relation="include">
        </childnode>
        <childnode refid="83733" relation="include">
        </childnode>
        <childnode refid="83741" relation="include">
        </childnode>
      </node>
      <node id="83718">
        <label>stdarg.h</label>
      </node>
      <node id="83723">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="83724">
        <label>stdint.h</label>
      </node>
      <node id="83734">
        <label>openssl/ec.h</label>
        <link refid="ec_8h_source"/>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83727" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
      <node id="83720">
        <label>stdlib.h</label>
      </node>
      <node id="83716">
        <label>openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83717" relation="include">
        </childnode>
        <childnode refid="83718" relation="include">
        </childnode>
        <childnode refid="83719" relation="include">
        </childnode>
        <childnode refid="83724" relation="include">
        </childnode>
      </node>
      <node id="83730">
        <label>openssl/rsa.h</label>
        <link refid="rsa_8h_source"/>
        <childnode refid="83727" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83719" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
      <node id="83711">
        <label>openssl/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83713" relation="include">
        </childnode>
        <childnode refid="83714" relation="include">
        </childnode>
      </node>
      <node id="83721">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="83740">
        <label>openssl/pkcs7.h</label>
        <link refid="pkcs7_8h_source"/>
        <childnode refid="83727" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
      </node>
      <node id="83713">
        <label>stddef.h</label>
      </node>
      <node id="83737">
        <label>openssl/sha.h</label>
        <link refid="sha_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83713" relation="include">
        </childnode>
      </node>
      <node id="83729">
        <label>openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83717" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83719" relation="include">
        </childnode>
      </node>
      <node id="83733">
        <label>openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83711" relation="include">
        </childnode>
        <childnode refid="83715" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83721" relation="include">
        </childnode>
        <childnode refid="83727" relation="include">
        </childnode>
        <childnode refid="83722" relation="include">
        </childnode>
        <childnode refid="83734" relation="include">
        </childnode>
        <childnode refid="83735" relation="include">
        </childnode>
        <childnode refid="83736" relation="include">
        </childnode>
        <childnode refid="83730" relation="include">
        </childnode>
        <childnode refid="83731" relation="include">
        </childnode>
        <childnode refid="83732" relation="include">
        </childnode>
        <childnode refid="83737" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83738" relation="include">
        </childnode>
        <childnode refid="83740" relation="include">
        </childnode>
      </node>
      <node id="83731">
        <label>openssl/dsa.h</label>
        <link refid="dsa_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83719" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
        <childnode refid="83732" relation="include">
        </childnode>
      </node>
      <node id="83726">
        <label>openssl/obj_mac.h</label>
        <link refid="obj__mac_8h_source"/>
      </node>
      <node id="83738">
        <label>openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="83733" relation="include">
        </childnode>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83739" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83719" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
      </node>
      <node id="83714">
        <label>sys/types.h</label>
      </node>
      <node id="83709">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
      </node>
      <node id="83727">
        <label>openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="83728" relation="include">
        </childnode>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83721" relation="include">
        </childnode>
        <childnode refid="83722" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
      <node id="83722">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="83721" relation="include">
        </childnode>
      </node>
      <node id="83715">
        <label>openssl/evp.h</label>
        <link refid="evp_8h_source"/>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83725" relation="include">
        </childnode>
      </node>
      <node id="83728">
        <label>time.h</label>
      </node>
      <node id="83735">
        <label>openssl/ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83734" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
      <node id="83742">
        <label>openssl/conf.h</label>
        <link refid="conf_8h_source"/>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83739" relation="include">
        </childnode>
        <childnode refid="83721" relation="include">
        </childnode>
        <childnode refid="83722" relation="include">
        </childnode>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
      </node>
      <node id="83739">
        <label>openssl/lhash.h</label>
        <link refid="lhash_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83717" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
      </node>
      <node id="83725">
        <label>openssl/objects.h</label>
        <link refid="objects_8h_source"/>
        <childnode refid="83726" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83727" relation="include">
        </childnode>
      </node>
      <node id="83708">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="83710">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="83708" relation="include">
        </childnode>
      </node>
      <node id="83717">
        <label>stdio.h</label>
      </node>
      <node id="83736">
        <label>openssl/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="83708" relation="include">
        </childnode>
        <childnode refid="83734" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
      <node id="83712">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
      </node>
      <node id="83741">
        <label>openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83733" relation="include">
        </childnode>
        <childnode refid="83742" relation="include">
        </childnode>
      </node>
      <node id="83719">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="83720" relation="include">
        </childnode>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83717" relation="include">
        </childnode>
        <childnode refid="83721" relation="include">
        </childnode>
        <childnode refid="83722" relation="include">
        </childnode>
        <childnode refid="83723" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83709" relation="include">
        </childnode>
      </node>
      <node id="83732">
        <label>openssl/dh.h</label>
        <link refid="dh_8h_source"/>
        <childnode refid="83710" relation="include">
        </childnode>
        <childnode refid="83716" relation="include">
        </childnode>
        <childnode refid="83712" relation="include">
        </childnode>
        <childnode refid="83729" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_t_s__msg__imprint__st" prot="public">TS_msg_imprint_st</innerclass>
    <innerclass refid="struct_t_s__req__st" prot="public">TS_req_st</innerclass>
    <innerclass refid="struct_t_s__accuracy__st" prot="public">TS_accuracy_st</innerclass>
    <innerclass refid="struct_t_s__tst__info__st" prot="public">TS_tst_info_st</innerclass>
    <innerclass refid="struct_t_s__status__info__st" prot="public">TS_status_info_st</innerclass>
    <innerclass refid="struct_t_s__resp__st" prot="public">TS_resp_st</innerclass>
    <innerclass refid="struct_e_s_s__issuer__serial" prot="public">ESS_issuer_serial</innerclass>
    <innerclass refid="struct_e_s_s__cert__id" prot="public">ESS_cert_id</innerclass>
    <innerclass refid="struct_e_s_s__signing__cert" prot="public">ESS_signing_cert</innerclass>
    <innerclass refid="struct_t_s__resp__ctx" prot="public">TS_resp_ctx</innerclass>
    <innerclass refid="struct_t_s__verify__ctx" prot="public">TS_verify_ctx</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ts_8h_1a1eaf64998799f4bd9e94071712c86ef5" prot="public" static="no">
        <name>TS_STATUS_GRANTED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="198" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a7b0d26a38e6de6d769004eb4227a7203" prot="public" static="no">
        <name>TS_STATUS_GRANTED_WITH_MODS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="199" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a46e43bef12bf575baf8a4424e1d0bdb5" prot="public" static="no">
        <name>TS_STATUS_REJECTION</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="200" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa6232db3dfc0d01ae7d956f44324df4e" prot="public" static="no">
        <name>TS_STATUS_WAITING</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="201" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a0c2c2101beab457f5bfb3ad168252f83" prot="public" static="no">
        <name>TS_STATUS_REVOCATION_WARNING</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="202" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aba16cecb39c26b95fd143044b502bd48" prot="public" static="no">
        <name>TS_STATUS_REVOCATION_NOTIFICATION</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="203" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a9b14f128945ce8027841a8999693d3ff" prot="public" static="no">
        <name>TS_INFO_BAD_ALG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="207" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ae388c675d507718043252fbbd42d1469" prot="public" static="no">
        <name>TS_INFO_BAD_REQUEST</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="208" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a0b9c20cbfa06722dc83721a3fe74b080" prot="public" static="no">
        <name>TS_INFO_BAD_DATA_FORMAT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="209" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab390f88badb3dfc17dcec2293f35fbe6" prot="public" static="no">
        <name>TS_INFO_TIME_NOT_AVAILABLE</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="210" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a34f19a36d3e1e4f1c473c8a3c39b34ca" prot="public" static="no">
        <name>TS_INFO_UNACCEPTED_POLICY</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="211" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ac748aab17790a35436d80231daca8018" prot="public" static="no">
        <name>TS_INFO_UNACCEPTED_EXTENSION</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="212" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a48cba1a67b8b3da8c50f090050ec5077" prot="public" static="no">
        <name>TS_INFO_ADD_INFO_NOT_AVAILABLE</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="213" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab53a71251f755084de9bf3d5c7a64dbc" prot="public" static="no">
        <name>TS_INFO_SYSTEM_FAILURE</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="214" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1acd444eaf0ca3bec17f89fc6fee4e10c9" prot="public" static="no">
        <name>TS_TSA_NAME</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="470" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a58910c6ad50a9c712ccc5be35f869cfe" prot="public" static="no">
        <name>TS_ORDERING</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="473" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a819c9ec7b701bfbce57f43386f500b43" prot="public" static="no">
        <name>TS_ESS_CERT_ID_CHAIN</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="480" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a675022b6db1ced7ce45974072b969568" prot="public" static="no">
        <name>TS_MAX_CLOCK_PRECISION_DIGITS</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="567" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aeae07ddf987bc76169f3fb425acf8000" prot="public" static="no">
        <name>TS_VFY_SIGNATURE</name>
        <initializer>(1u &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="617" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a52dcd1049cedfc578556c61ddbaa9a5d" prot="public" static="no">
        <name>TS_VFY_VERSION</name>
        <initializer>(1u &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="619" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aff3b527b85d9f2ac7219b32d81a86376" prot="public" static="no">
        <name>TS_VFY_POLICY</name>
        <initializer>(1u &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="621" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a74ee94f727da6e46a10676e4e3703a8b" prot="public" static="no">
        <name>TS_VFY_IMPRINT</name>
        <initializer>(1u &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="624" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa11dbd269e168eb063ef41b885690700" prot="public" static="no">
        <name>TS_VFY_DATA</name>
        <initializer>(1u &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="628" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6d091a05a9aab9d52a8856949950b6dd" prot="public" static="no">
        <name>TS_VFY_NONCE</name>
        <initializer>(1u &lt;&lt; 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="630" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1abb1d6e784fa0760fc1200f9c650d7571" prot="public" static="no">
        <name>TS_VFY_SIGNER</name>
        <initializer>(1u &lt;&lt; 6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="632" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af6cdfbf6e3623a88ca0224d35c2c94d8" prot="public" static="no">
        <name>TS_VFY_TSA_NAME</name>
        <initializer>(1u &lt;&lt; 7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="634" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa14fde1dbdf0203bf699ee63bcecce16" prot="public" static="no">
        <name>TS_VFY_ALL_IMPRINT</name>
        <initializer>(TS_VFY_SIGNATURE	\
				 | TS_VFY_VERSION	\
				 | TS_VFY_POLICY	\
				 | TS_VFY_IMPRINT	\
				 | TS_VFY_NONCE		\
				 | TS_VFY_SIGNER	\
				 | TS_VFY_TSA_NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="637" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a60d48cd843d8e09cad4468d23e639c42" prot="public" static="no">
        <name>TS_VFY_ALL_DATA</name>
        <initializer>(TS_VFY_SIGNATURE	\
				 | TS_VFY_VERSION	\
				 | TS_VFY_POLICY	\
				 | TS_VFY_DATA		\
				 | TS_VFY_NONCE		\
				 | TS_VFY_SIGNER	\
				 | TS_VFY_TSA_NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="644" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ad18108595d2bae862f8e8b15d23cc378" prot="public" static="no">
        <name>TS_F_D2I_TS_RESP</name>
        <initializer>147</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="766" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af6564f26be16355cb2314aaeecfd57fb" prot="public" static="no">
        <name>TS_F_DEF_SERIAL_CB</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="767" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a15bab4cda5712b15115b0238833316d1" prot="public" static="no">
        <name>TS_F_DEF_TIME_CB</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="768" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af91629cefdd27d7090e0940d2ebbde24" prot="public" static="no">
        <name>TS_F_ESS_ADD_SIGNING_CERT</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="769" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a9efed4c0182a49025f74fb500b49c62d" prot="public" static="no">
        <name>TS_F_ESS_CERT_ID_NEW_INIT</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="770" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a7ed305cb25467f50f834c26f49554921" prot="public" static="no">
        <name>TS_F_ESS_SIGNING_CERT_NEW_INIT</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="771" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa75e95875597fc51ec3b69f6498577bc" prot="public" static="no">
        <name>TS_F_INT_TS_RESP_VERIFY_TOKEN</name>
        <initializer>149</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="772" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a5a52dc0368f74f530b4debce83382811" prot="public" static="no">
        <name>TS_F_PKCS7_TO_TS_TST_INFO</name>
        <initializer>148</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="773" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a29ec0fd81ff574653ea7c7724dec09e2" prot="public" static="no">
        <name>TS_F_TS_ACCURACY_SET_MICROS</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="774" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af077921cd77eaaacfafaf4c974da58fa" prot="public" static="no">
        <name>TS_F_TS_ACCURACY_SET_MILLIS</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="775" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6ecd710ea92be3cc38f7bdeb0e3e4862" prot="public" static="no">
        <name>TS_F_TS_ACCURACY_SET_SECONDS</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="776" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af7fab28f1c8911461f6b683e955843b3" prot="public" static="no">
        <name>TS_F_TS_CHECK_IMPRINTS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="777" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a0e1335f9b2baf92651806297c2f367a9" prot="public" static="no">
        <name>TS_F_TS_CHECK_NONCES</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="778" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a2c14bdc302c63dfe5c2674c753cd5adb" prot="public" static="no">
        <name>TS_F_TS_CHECK_POLICY</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="779" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a37b78fd294c96919e4311dc3bffa764c" prot="public" static="no">
        <name>TS_F_TS_CHECK_SIGNING_CERTS</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="780" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a88770bca159636cf9b404692f110288c" prot="public" static="no">
        <name>TS_F_TS_CHECK_STATUS_INFO</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="781" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1acb5026fd4fd9597449c2beced6f4b42f" prot="public" static="no">
        <name>TS_F_TS_COMPUTE_IMPRINT</name>
        <initializer>145</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="782" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab6687e42900ef34cad44affc379932a0" prot="public" static="no">
        <name>TS_F_TS_CONF_SET_DEFAULT_ENGINE</name>
        <initializer>146</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="783" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a85faf9e8aaaa2faff68862f2b9392443" prot="public" static="no">
        <name>TS_F_TS_GET_STATUS_TEXT</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="784" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a05edafab7105cfb7700e5c06e7512146" prot="public" static="no">
        <name>TS_F_TS_MSG_IMPRINT_SET_ALGO</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="785" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aca5266e1dd8c729cb877589985799a25" prot="public" static="no">
        <name>TS_F_TS_REQ_SET_MSG_IMPRINT</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="786" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a2c93c3772d8e34a46a38903cc4abac51" prot="public" static="no">
        <name>TS_F_TS_REQ_SET_NONCE</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="787" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1afaadf6bd3807b08c9e81db7ad96abaeb" prot="public" static="no">
        <name>TS_F_TS_REQ_SET_POLICY_ID</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="788" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ac2b5c84ff8a775677cbccacf4bc7dd1d" prot="public" static="no">
        <name>TS_F_TS_RESP_CREATE_RESPONSE</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="789" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a18d362d539228938e67815a72cb6f58f" prot="public" static="no">
        <name>TS_F_TS_RESP_CREATE_TST_INFO</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="790" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a8a700a32f4ab2e4be1dbf45789ef81cb" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_ADD_FAILURE_INFO</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="791" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af920509fc64239d7acbcc73d08c946b0" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_ADD_MD</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="792" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af8a4f7884cbb65cfc6f105d80fbab2b1" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_ADD_POLICY</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="793" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a090174b6cf9c0c11ac060ed0a190ccb2" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_NEW</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="794" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a3c53709d06c2fe0bc28e0ac37e3b25ba" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_SET_ACCURACY</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="795" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af285e83ac6fcbf85f883aeebea5abd6a" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_SET_CERTS</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="796" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af0b912d2545742481f3a7fb340f32436" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_SET_DEF_POLICY</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="797" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a2c5d1aae836339f5ab5b8df0d6113ca4" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_SET_SIGNER_CERT</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="798" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a173acbc4aa561f5635b0f239970f2e3a" prot="public" static="no">
        <name>TS_F_TS_RESP_CTX_SET_STATUS_INFO</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="799" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a46f06cfd68fcb0ae00f111054590355a" prot="public" static="no">
        <name>TS_F_TS_RESP_GET_POLICY</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="800" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a40306c0a624cac6081763bee0a02efa0" prot="public" static="no">
        <name>TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="801" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ac68f63364ce3d91e0425f527a08f3f91" prot="public" static="no">
        <name>TS_F_TS_RESP_SET_STATUS_INFO</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="802" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6a01085b42be3db651f429dbea9ea927" prot="public" static="no">
        <name>TS_F_TS_RESP_SET_TST_INFO</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="803" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab45d621f987b4cea565b9c7d77a938d9" prot="public" static="no">
        <name>TS_F_TS_RESP_SIGN</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="804" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af98d455411cf1d3efc7e5ac838926632" prot="public" static="no">
        <name>TS_F_TS_RESP_VERIFY_SIGNATURE</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="805" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aed05684e92160fba503412895408d902" prot="public" static="no">
        <name>TS_F_TS_RESP_VERIFY_TOKEN</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="806" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1afdc2477182807c8123294bea517c9964" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_ACCURACY</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="807" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ad5550998787b90b2b9905d92384e0a41" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_MSG_IMPRINT</name>
        <initializer>138</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="808" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af33d59d495759ea46ee94ea829b59a6c" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_NONCE</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="809" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a821ec66e3da62008b8dfe51cf52f55ca" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_POLICY_ID</name>
        <initializer>140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="810" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1afcc45040b49a3b82e85138bf9c3cde42" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_SERIAL</name>
        <initializer>141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="811" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a462fb866cceddbf8169d1cac7316afe6" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_TIME</name>
        <initializer>142</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="812" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a483ee8641463f2852f46bf07ea93493e" prot="public" static="no">
        <name>TS_F_TS_TST_INFO_SET_TSA</name>
        <initializer>143</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="813" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a7131c5222e4f9752957ce40be9d01a69" prot="public" static="no">
        <name>TS_F_TS_VERIFY</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="814" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a4186cd5e8e47c0260668311c90a8d0a5" prot="public" static="no">
        <name>TS_F_TS_VERIFY_CERT</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="815" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a5e9f6752f9e1447b58053bc0b51f6a5f" prot="public" static="no">
        <name>TS_F_TS_VERIFY_CTX_NEW</name>
        <initializer>144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="816" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a59752f2a9d92386e1128d4e83ac89449" prot="public" static="no">
        <name>TS_R_BAD_PKCS7_TYPE</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="819" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ac1abaccbb7572fbd0d4a6b27cf6919a6" prot="public" static="no">
        <name>TS_R_BAD_TYPE</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="820" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a08363f976b694c26761e2332ede72e7b" prot="public" static="no">
        <name>TS_R_CERTIFICATE_VERIFY_ERROR</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="821" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6329aaeb9e5cd49427c3b9388717b0ca" prot="public" static="no">
        <name>TS_R_COULD_NOT_SET_ENGINE</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="822" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab347fb507ef7fa9b30d1ffe6dc12da12" prot="public" static="no">
        <name>TS_R_COULD_NOT_SET_TIME</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="823" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a573f0a3c67e51c8d3a2208312744c705" prot="public" static="no">
        <name>TS_R_D2I_TS_RESP_INT_FAILED</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="824" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a3a8ab71280b3e64ec32833feac0f6e73" prot="public" static="no">
        <name>TS_R_DETACHED_CONTENT</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="825" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1acdf090958c7ed4ab2979675abd775aca" prot="public" static="no">
        <name>TS_R_ESS_ADD_SIGNING_CERT_ERROR</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="826" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ae6aca184258ce300de062c6c63b63b7d" prot="public" static="no">
        <name>TS_R_ESS_SIGNING_CERTIFICATE_ERROR</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="827" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6b2594dd420c348c0429c22c8bd7d859" prot="public" static="no">
        <name>TS_R_INVALID_NULL_POINTER</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="828" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a133c031e53c08abf2e8a5ebc3651b15d" prot="public" static="no">
        <name>TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="829" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6da992d1ae7b7d3786904e2f621c914b" prot="public" static="no">
        <name>TS_R_MESSAGE_IMPRINT_MISMATCH</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="830" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1adc573a127af1253c66882e5b3cf7919a" prot="public" static="no">
        <name>TS_R_NONCE_MISMATCH</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="831" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6a4056d0f4bf268efa6003d4b8871989" prot="public" static="no">
        <name>TS_R_NONCE_NOT_RETURNED</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="832" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ab3e513a11f8eaff6f4a2f9736a182cf6" prot="public" static="no">
        <name>TS_R_NO_CONTENT</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="833" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a202a1eb11fabd39581669721d3583424" prot="public" static="no">
        <name>TS_R_NO_TIME_STAMP_TOKEN</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="834" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1af34798c9ac3581ff2a4a3dd263dc7a66" prot="public" static="no">
        <name>TS_R_PKCS7_ADD_SIGNATURE_ERROR</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="835" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aea2fe91f5e9e90384e096fbb4f08bb21" prot="public" static="no">
        <name>TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="836" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a6a2eb2c26d47ce698c2f31dd15bf8258" prot="public" static="no">
        <name>TS_R_PKCS7_TO_TS_TST_INFO_FAILED</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="837" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ac3a3b33bb4426bfc8f1e0f592330db6d" prot="public" static="no">
        <name>TS_R_POLICY_MISMATCH</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="838" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa68089e70d8260fe4e3a837ec0a2a481" prot="public" static="no">
        <name>TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="839" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a570606011bf248122d047cf6f5ebd6c3" prot="public" static="no">
        <name>TS_R_RESPONSE_SETUP_ERROR</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="840" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aea01a5303ddbd96d41f8d0532795966c" prot="public" static="no">
        <name>TS_R_SIGNATURE_FAILURE</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="841" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a7645153bb8d81a1346b0dbfa3ab1dbbd" prot="public" static="no">
        <name>TS_R_THERE_MUST_BE_ONE_SIGNER</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="842" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a93bbdf6c20d16d3203f708bd169f49e9" prot="public" static="no">
        <name>TS_R_TIME_SYSCALL_ERROR</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="843" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1ace251e32a028798cce63b168053695db" prot="public" static="no">
        <name>TS_R_TOKEN_NOT_PRESENT</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="844" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1acfede1aeef21ca1d8fe416e65b470f0e" prot="public" static="no">
        <name>TS_R_TOKEN_PRESENT</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="845" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a1dba50f55aa3b4f77804ca2e70f27caa" prot="public" static="no">
        <name>TS_R_TSA_NAME_MISMATCH</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="846" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a9395e34062a576b9e3a2468cad97e462" prot="public" static="no">
        <name>TS_R_TSA_UNTRUSTED</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="847" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a4aa29516539602d609d8deb2faef97ca" prot="public" static="no">
        <name>TS_R_TST_INFO_SETUP_ERROR</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="848" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a03363f32c85384ed3a28c6cdf1f0a260" prot="public" static="no">
        <name>TS_R_TS_DATASIGN</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="849" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a810596aeb4c2c46005601fe2e3bae0c4" prot="public" static="no">
        <name>TS_R_UNACCEPTABLE_POLICY</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="850" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa51ca755049bcf7d1120d131ad4b44da" prot="public" static="no">
        <name>TS_R_UNSUPPORTED_MD_ALGORITHM</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="851" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1a75b937845fd245b12d0e0414f6c0d407" prot="public" static="no">
        <name>TS_R_UNSUPPORTED_VERSION</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="852" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ts_8h_1aa7d1f549db48068f882466adf026d0c8" prot="public" static="no">
        <name>TS_R_WRONG_CONTENT_TYPE</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="853" column="9" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ts_8h_1a22e456a55112f85239a13f8f741d87f3" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_msg_imprint_st</ref></type>
        <definition>typedef struct TS_msg_imprint_st  TS_MSG_IMPRINT</definition>
        <argsstring></argsstring>
        <name>TS_MSG_IMPRINT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a93f3c31ac980708aac81963bc9a63b10" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__req__st" kindref="compound">TS_req_st</ref></type>
        <definition>typedef struct TS_req_st  TS_REQ</definition>
        <argsstring></argsstring>
        <name>TS_REQ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a85472dd127e577a5d020a1ad337c8b94" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__accuracy__st" kindref="compound">TS_accuracy_st</ref></type>
        <definition>typedef struct TS_accuracy_st  TS_ACCURACY</definition>
        <argsstring></argsstring>
        <name>TS_ACCURACY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a7de94faeeabec73a2241426a20ffa24f" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_tst_info_st</ref></type>
        <definition>typedef struct TS_tst_info_st  TS_TST_INFO</definition>
        <argsstring></argsstring>
        <name>TS_TST_INFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a6f09f73975393a634d74cd34e9072c73" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__status__info__st" kindref="compound">TS_status_info_st</ref></type>
        <definition>typedef struct TS_status_info_st  TS_STATUS_INFO</definition>
        <argsstring></argsstring>
        <name>TS_STATUS_INFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1ad313282099f4f12b4ff632cdaff7d1a7" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__resp__st" kindref="compound">TS_resp_st</ref></type>
        <definition>typedef struct TS_resp_st  TS_RESP</definition>
        <argsstring></argsstring>
        <name>TS_RESP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a9006b3b8a052856402cfac66160241e2" prot="public" static="no">
        <type>struct <ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_issuer_serial</ref></type>
        <definition>typedef struct ESS_issuer_serial  ESS_ISSUER_SERIAL</definition>
        <argsstring></argsstring>
        <name>ESS_ISSUER_SERIAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a21c26fbd080bac20b8b9bd229e5a6681" prot="public" static="no">
        <type>struct <ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_cert_id</ref></type>
        <definition>typedef struct ESS_cert_id  ESS_CERT_ID</definition>
        <argsstring></argsstring>
        <name>ESS_CERT_ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a7ce6081e92c31c9099a35751ddaff281" prot="public" static="no">
        <type>struct <ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_signing_cert</ref></type>
        <definition>typedef struct ESS_signing_cert  ESS_SIGNING_CERT</definition>
        <argsstring></argsstring>
        <name>ESS_SIGNING_CERT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a3f9e69bb9f4f76ac13e1706bd8763762" prot="public" static="no">
        <type><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *(*</type>
        <definition>typedef ASN1_INTEGER*(* TS_serial_cb) (struct TS_resp_ctx *, void *)</definition>
        <argsstring>)(struct TS_resp_ctx *, void *)</argsstring>
        <name>TS_serial_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="486" column="1" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a7d7ce5cfdf0ec2c72eabf260ad4b75eb" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* TS_time_cb) (struct TS_resp_ctx *, void *, long *sec, long *usec)</definition>
        <argsstring>)(struct TS_resp_ctx *, void *, long *sec, long *usec)</argsstring>
        <name>TS_time_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="491" column="1" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1ab02e9232fc4c5262a34c041f4a3553f6" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* TS_extension_cb) (struct TS_resp_ctx *, X509_EXTENSION *, void *)</definition>
        <argsstring>)(struct TS_resp_ctx *, X509_EXTENSION *, void *)</argsstring>
        <name>TS_extension_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="498" column="1" bodyfile="thirdparty/openssl/include/openssl/ts.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a879054110214918c817e87745b5e7923" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref></type>
        <definition>typedef struct TS_resp_ctx  TS_RESP_CTX</definition>
        <argsstring></argsstring>
        <name>TS_RESP_CTX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ts_8h_1a0776b2ba973089a45d2a2afddc02bdc0" prot="public" static="no">
        <type>struct <ref refid="struct_t_s__verify__ctx" kindref="compound">TS_verify_ctx</ref></type>
        <definition>typedef struct TS_verify_ctx  TS_VERIFY_CTX</definition>
        <argsstring></argsstring>
        <name>TS_VERIFY_CTX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="678" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ts_8h_1a2a459634d5bb92e11e3af3e7733efcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* TS_REQ_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_REQ_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a761c0eed9778dc70cdab4167efe6395e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_REQ_free</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_free</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a27a4ea6cea13f2e687d0a9034148ab32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_REQ</definition>
        <argsstring>(const TS_REQ *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_REQ</name>
        <param>
          <type>const <ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae179cd00936b061a57df91a456dd20ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* d2i_TS_REQ</definition>
        <argsstring>(TS_REQ **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_REQ</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aad21c855e541622a2efbbaf81d149c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* TS_REQ_dup</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_dup</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae9dd1d3e19e6d9dd7f3ec5310df96c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* d2i_TS_REQ_fp</definition>
        <argsstring>(FILE *fp, TS_REQ **a)</argsstring>
        <name>d2i_TS_REQ_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9ffbe45707b595f4b4835a8db96eadb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_REQ_fp</definition>
        <argsstring>(FILE *fp, TS_REQ *a)</argsstring>
        <name>i2d_TS_REQ_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1778e91e5212162d560722e654bd3b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* d2i_TS_REQ_bio</definition>
        <argsstring>(BIO *fp, TS_REQ **a)</argsstring>
        <name>d2i_TS_REQ_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab23233d02fb9173047bcac24ba6a3d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_REQ_bio</definition>
        <argsstring>(BIO *fp, TS_REQ *a)</argsstring>
        <name>i2d_TS_REQ_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a88b1e0a20f74787c7c1537f3ca37561d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* TS_MSG_IMPRINT_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_MSG_IMPRINT_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa5c1e72904c8c02e2be8c8bca20cbbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_MSG_IMPRINT_free</definition>
        <argsstring>(TS_MSG_IMPRINT *a)</argsstring>
        <name>TS_MSG_IMPRINT_free</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a5880863cb4f58f4a2171607e57d12090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_MSG_IMPRINT</definition>
        <argsstring>(const TS_MSG_IMPRINT *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_MSG_IMPRINT</name>
        <param>
          <type>const <ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a06a8b5fa18f693d90c4aa7d177862b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* d2i_TS_MSG_IMPRINT</definition>
        <argsstring>(TS_MSG_IMPRINT **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_MSG_IMPRINT</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7e22abf79acd81a81815916629eca200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* TS_MSG_IMPRINT_dup</definition>
        <argsstring>(TS_MSG_IMPRINT *a)</argsstring>
        <name>TS_MSG_IMPRINT_dup</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aca1c21d41abc48abf9f95f9539c9995c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* d2i_TS_MSG_IMPRINT_fp</definition>
        <argsstring>(FILE *fp, TS_MSG_IMPRINT **a)</argsstring>
        <name>d2i_TS_MSG_IMPRINT_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a617fd700156ba0723e33e30ca031bf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_MSG_IMPRINT_fp</definition>
        <argsstring>(FILE *fp, TS_MSG_IMPRINT *a)</argsstring>
        <name>i2d_TS_MSG_IMPRINT_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9073e45e4f64e71f77e33bbc835aeb96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* d2i_TS_MSG_IMPRINT_bio</definition>
        <argsstring>(BIO *fp, TS_MSG_IMPRINT **a)</argsstring>
        <name>d2i_TS_MSG_IMPRINT_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a91c05729272037dd1c3580530628671e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_MSG_IMPRINT_bio</definition>
        <argsstring>(BIO *fp, TS_MSG_IMPRINT *a)</argsstring>
        <name>i2d_TS_MSG_IMPRINT_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a8b0d281151b4efba7b7fd4d0a2427bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* TS_RESP_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_RESP_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae77eefe6c5beb7d585c367736e71c1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_free</definition>
        <argsstring>(TS_RESP *a)</argsstring>
        <name>TS_RESP_free</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a738234875a60cba9937ef7d9add8e152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_RESP</definition>
        <argsstring>(const TS_RESP *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_RESP</name>
        <param>
          <type>const <ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a749f829fd156104187971b24d0efeca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* d2i_TS_RESP</definition>
        <argsstring>(TS_RESP **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_RESP</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac329a95d8502e5aa95a74ec8dfa78d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* PKCS7_to_TS_TST_INFO</definition>
        <argsstring>(PKCS7 *token)</argsstring>
        <name>PKCS7_to_TS_TST_INFO</name>
        <param>
          <type><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac15c8f12ad06cfb682412aa6a6b142fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* TS_RESP_dup</definition>
        <argsstring>(TS_RESP *a)</argsstring>
        <name>TS_RESP_dup</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9bddc675eb4f3dc60c3ea31c6b815880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* d2i_TS_RESP_fp</definition>
        <argsstring>(FILE *fp, TS_RESP **a)</argsstring>
        <name>d2i_TS_RESP_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a225674485c3c93763ae2bb0fa61af494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_RESP_fp</definition>
        <argsstring>(FILE *fp, TS_RESP *a)</argsstring>
        <name>i2d_TS_RESP_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a277e100e364920c6d1cd97b2c2da79fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* d2i_TS_RESP_bio</definition>
        <argsstring>(BIO *fp, TS_RESP **a)</argsstring>
        <name>d2i_TS_RESP_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa3083dab05a4a72851635988c24ef1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_RESP_bio</definition>
        <argsstring>(BIO *fp, TS_RESP *a)</argsstring>
        <name>i2d_TS_RESP_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0967e2ac395cfffd39f36bd16e085c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
        <definition>TS_STATUS_INFO* TS_STATUS_INFO_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_STATUS_INFO_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0dcbd35d133964d89a55484fe16bb536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_STATUS_INFO_free</definition>
        <argsstring>(TS_STATUS_INFO *a)</argsstring>
        <name>TS_STATUS_INFO_free</name>
        <param>
          <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a6fcf31184b98631e34c4ef1624eea6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_STATUS_INFO</definition>
        <argsstring>(const TS_STATUS_INFO *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_STATUS_INFO</name>
        <param>
          <type>const <ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa01af2b5d773ea85d2ff94cbcc286bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
        <definition>TS_STATUS_INFO* d2i_TS_STATUS_INFO</definition>
        <argsstring>(TS_STATUS_INFO **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_STATUS_INFO</name>
        <param>
          <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1c74b650ba3d1c42709c7f7e69555338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
        <definition>TS_STATUS_INFO* TS_STATUS_INFO_dup</definition>
        <argsstring>(TS_STATUS_INFO *a)</argsstring>
        <name>TS_STATUS_INFO_dup</name>
        <param>
          <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a5dfa5e02a1525d3941c6c9f9c72ad57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* TS_TST_INFO_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_TST_INFO_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae532d7a265165307ee35b400fe7dabb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_TST_INFO_free</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_free</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9f85ad338e64b4b2c751907620f6e535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_TST_INFO</definition>
        <argsstring>(const TS_TST_INFO *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_TST_INFO</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a4ee7777625867a91338a1f52d50fe95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* d2i_TS_TST_INFO</definition>
        <argsstring>(TS_TST_INFO **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_TST_INFO</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae54350feb49dd4d868a2118f86668e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* TS_TST_INFO_dup</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_dup</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a2124e2517de70856a91e9781dd2f4934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* d2i_TS_TST_INFO_fp</definition>
        <argsstring>(FILE *fp, TS_TST_INFO **a)</argsstring>
        <name>d2i_TS_TST_INFO_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a8a160ad1d5cc1868a0782be807f9572c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_TST_INFO_fp</definition>
        <argsstring>(FILE *fp, TS_TST_INFO *a)</argsstring>
        <name>i2d_TS_TST_INFO_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a3296aa40d7baeaf09cd1e5a68424449c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* d2i_TS_TST_INFO_bio</definition>
        <argsstring>(BIO *fp, TS_TST_INFO **a)</argsstring>
        <name>d2i_TS_TST_INFO_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> **</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a941fa9006b2235373fddb10831f6bd92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_TST_INFO_bio</definition>
        <argsstring>(BIO *fp, TS_TST_INFO *a)</argsstring>
        <name>i2d_TS_TST_INFO_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae8af75d90c007a26cd5acc1e464da39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
        <definition>TS_ACCURACY* TS_ACCURACY_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_ACCURACY_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa01753c92a706621954124ab0b2ffb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_ACCURACY_free</definition>
        <argsstring>(TS_ACCURACY *a)</argsstring>
        <name>TS_ACCURACY_free</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aedfbfb92fb8a025e3b00e117cd3332ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_TS_ACCURACY</definition>
        <argsstring>(const TS_ACCURACY *a, unsigned char **pp)</argsstring>
        <name>i2d_TS_ACCURACY</name>
        <param>
          <type>const <ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ace1404234694aee9dce7a4bdb7ef888f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
        <definition>TS_ACCURACY* d2i_TS_ACCURACY</definition>
        <argsstring>(TS_ACCURACY **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_TS_ACCURACY</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adb33e7c7d0e42105da4619f1f0d42e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
        <definition>TS_ACCURACY* TS_ACCURACY_dup</definition>
        <argsstring>(TS_ACCURACY *a)</argsstring>
        <name>TS_ACCURACY_dup</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a13086841a80f4ff4b9e143766a2e996c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
        <definition>ESS_ISSUER_SERIAL* ESS_ISSUER_SERIAL_new</definition>
        <argsstring>(void)</argsstring>
        <name>ESS_ISSUER_SERIAL_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0ebfcc15c27ffd3ec6f7ff3851f24a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ESS_ISSUER_SERIAL_free</definition>
        <argsstring>(ESS_ISSUER_SERIAL *a)</argsstring>
        <name>ESS_ISSUER_SERIAL_free</name>
        <param>
          <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad90fc63ea5f1a85248506041b95edd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ESS_ISSUER_SERIAL</definition>
        <argsstring>(const ESS_ISSUER_SERIAL *a, unsigned char **pp)</argsstring>
        <name>i2d_ESS_ISSUER_SERIAL</name>
        <param>
          <type>const <ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac7f447905edb352b1423f359d34cfe6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
        <definition>ESS_ISSUER_SERIAL* d2i_ESS_ISSUER_SERIAL</definition>
        <argsstring>(ESS_ISSUER_SERIAL **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_ESS_ISSUER_SERIAL</name>
        <param>
          <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1ecd7cc1ad472fe75044b9efe77925c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
        <definition>ESS_ISSUER_SERIAL* ESS_ISSUER_SERIAL_dup</definition>
        <argsstring>(ESS_ISSUER_SERIAL *a)</argsstring>
        <name>ESS_ISSUER_SERIAL_dup</name>
        <param>
          <type><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a67c5f64272b8ec10d5d3c9ba3e29d46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
        <definition>ESS_CERT_ID* ESS_CERT_ID_new</definition>
        <argsstring>(void)</argsstring>
        <name>ESS_CERT_ID_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adbc54973308b4c22cd9c005f04431505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ESS_CERT_ID_free</definition>
        <argsstring>(ESS_CERT_ID *a)</argsstring>
        <name>ESS_CERT_ID_free</name>
        <param>
          <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a6b4cbc9c484f23850c75d609fb745fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ESS_CERT_ID</definition>
        <argsstring>(const ESS_CERT_ID *a, unsigned char **pp)</argsstring>
        <name>i2d_ESS_CERT_ID</name>
        <param>
          <type>const <ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae67ebfc18e4d03f82da00d96a34d3b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
        <definition>ESS_CERT_ID* d2i_ESS_CERT_ID</definition>
        <argsstring>(ESS_CERT_ID **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_ESS_CERT_ID</name>
        <param>
          <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad889a5fd62861838ddf3d13cfe29e382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
        <definition>ESS_CERT_ID* ESS_CERT_ID_dup</definition>
        <argsstring>(ESS_CERT_ID *a)</argsstring>
        <name>ESS_CERT_ID_dup</name>
        <param>
          <type><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a60d64a3ae8bf102d8ee4a1815b076dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
        <definition>ESS_SIGNING_CERT* ESS_SIGNING_CERT_new</definition>
        <argsstring>(void)</argsstring>
        <name>ESS_SIGNING_CERT_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a5560ff53b23df8aeb5b2dd526ad3b6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ESS_SIGNING_CERT_free</definition>
        <argsstring>(ESS_SIGNING_CERT *a)</argsstring>
        <name>ESS_SIGNING_CERT_free</name>
        <param>
          <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aad46a088c9cd67663baf5c0e0d3ca0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ESS_SIGNING_CERT</definition>
        <argsstring>(const ESS_SIGNING_CERT *a, unsigned char **pp)</argsstring>
        <name>i2d_ESS_SIGNING_CERT</name>
        <param>
          <type>const <ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a14ea2e8f3bd98d5b0b450b8f3d53f812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
        <definition>ESS_SIGNING_CERT* d2i_ESS_SIGNING_CERT</definition>
        <argsstring>(ESS_SIGNING_CERT **a, const unsigned char **pp, long length)</argsstring>
        <name>d2i_ESS_SIGNING_CERT</name>
        <param>
          <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad80beffdb5b6fc80810343107c9c8385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
        <definition>ESS_SIGNING_CERT* ESS_SIGNING_CERT_dup</definition>
        <argsstring>(ESS_SIGNING_CERT *a)</argsstring>
        <name>ESS_SIGNING_CERT_dup</name>
        <param>
          <type><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a3d82668ee12e77562dbab2fa4d48b49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_TS_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_TS_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1e30f8b4d33325ceafecd82315b2afe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_set_version</definition>
        <argsstring>(TS_REQ *a, long version)</argsstring>
        <name>TS_REQ_set_version</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0ad7d525ee06ec33cf7ebf7e4529089d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long TS_REQ_get_version</definition>
        <argsstring>(const TS_REQ *a)</argsstring>
        <name>TS_REQ_get_version</name>
        <param>
          <type>const <ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aaf18db9e8f469cb30dc359e2cb2d5889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_set_msg_imprint</definition>
        <argsstring>(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)</argsstring>
        <name>TS_REQ_set_msg_imprint</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>msg_imprint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a01e483b4fd2b9de28cb34584ff0da807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* TS_REQ_get_msg_imprint</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_get_msg_imprint</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a94d0a1033c47d515a9228e4376defcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_MSG_IMPRINT_set_algo</definition>
        <argsstring>(TS_MSG_IMPRINT *a, X509_ALGOR *alg)</argsstring>
        <name>TS_MSG_IMPRINT_set_algo</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref> *</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a8dd16da91d035676ac561b8480befca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref> *</type>
        <definition>X509_ALGOR* TS_MSG_IMPRINT_get_algo</definition>
        <argsstring>(TS_MSG_IMPRINT *a)</argsstring>
        <name>TS_MSG_IMPRINT_get_algo</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab31a5634600e6fca1dcaa0cf930ff556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_MSG_IMPRINT_set_msg</definition>
        <argsstring>(TS_MSG_IMPRINT *a, unsigned char *d, int len)</argsstring>
        <name>TS_MSG_IMPRINT_set_msg</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab257c9b91496979f9661108684b5089f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structasn1__string__st" kindref="compound">ASN1_OCTET_STRING</ref> *</type>
        <definition>ASN1_OCTET_STRING* TS_MSG_IMPRINT_get_msg</definition>
        <argsstring>(TS_MSG_IMPRINT *a)</argsstring>
        <name>TS_MSG_IMPRINT_get_msg</name>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab23b9f3404248f8a47ec33005afe2f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_set_policy_id</definition>
        <argsstring>(TS_REQ *a, ASN1_OBJECT *policy)</argsstring>
        <name>TS_REQ_set_policy_id</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a794bb4154fc922f57f16dd9cb45a6618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
        <definition>ASN1_OBJECT* TS_REQ_get_policy_id</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_get_policy_id</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a840e34f0ae4dd6b8541a0b85ff3ffde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_set_nonce</definition>
        <argsstring>(TS_REQ *a, const ASN1_INTEGER *nonce)</argsstring>
        <name>TS_REQ_set_nonce</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>nonce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a84edac3413295cf5ff1c346352bd13fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_REQ_get_nonce</definition>
        <argsstring>(const TS_REQ *a)</argsstring>
        <name>TS_REQ_get_nonce</name>
        <param>
          <type>const <ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac4f53510ef38015c222bff922a531a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_set_cert_req</definition>
        <argsstring>(TS_REQ *a, int cert_req)</argsstring>
        <name>TS_REQ_set_cert_req</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cert_req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aaf0d956e1b805dd33ec79a93f3031f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_get_cert_req</definition>
        <argsstring>(const TS_REQ *a)</argsstring>
        <name>TS_REQ_get_cert_req</name>
        <param>
          <type>const <ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a654e759e130a9931ab746286a16aee36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>STACK_OF</definition>
        <argsstring>(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a)</argsstring>
        <name>STACK_OF</name>
        <param>
          <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7eb9c8ba1fbc9c955ee2c891887184d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_REQ_ext_free</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_ext_free</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a36ff08a2437eb5196fde2e66daa4ffc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_get_ext_count</definition>
        <argsstring>(TS_REQ *a)</argsstring>
        <name>TS_REQ_get_ext_count</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae8b622ba2608f980ecc0b91303cbec31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_get_ext_by_NID</definition>
        <argsstring>(TS_REQ *a, int nid, int lastpos)</argsstring>
        <name>TS_REQ_get_ext_by_NID</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1af06c91f4002396c33a0316cba9fe99f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_get_ext_by_OBJ</definition>
        <argsstring>(TS_REQ *a, ASN1_OBJECT *obj, int lastpos)</argsstring>
        <name>TS_REQ_get_ext_by_OBJ</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a522da534bda12140b82f07b8109454b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_get_ext_by_critical</definition>
        <argsstring>(TS_REQ *a, int crit, int lastpos)</argsstring>
        <name>TS_REQ_get_ext_by_critical</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>crit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9b73b87e0145fac3f17d7c53c1ee9363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
        <definition>X509_EXTENSION* TS_REQ_get_ext</definition>
        <argsstring>(TS_REQ *a, int loc)</argsstring>
        <name>TS_REQ_get_ext</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a6d9ec66db139b431b2ad8fd57826618a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
        <definition>X509_EXTENSION* TS_REQ_delete_ext</definition>
        <argsstring>(TS_REQ *a, int loc)</argsstring>
        <name>TS_REQ_delete_ext</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad4f5bc3c726778424a047f3aa7958ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_add_ext</definition>
        <argsstring>(TS_REQ *a, X509_EXTENSION *ex, int loc)</argsstring>
        <name>TS_REQ_add_ext</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
          <declname>ex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aac50a5f49933a4e9c886ddac6d322b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* TS_REQ_get_ext_d2i</definition>
        <argsstring>(TS_REQ *a, int nid, int *crit, int *idx)</argsstring>
        <name>TS_REQ_get_ext_d2i</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>crit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aaaf053f6ec9b086b038672aa0660df2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_REQ_print_bio</definition>
        <argsstring>(BIO *bio, TS_REQ *a)</argsstring>
        <name>TS_REQ_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7a6666f2924c7f208436ae5e047a29c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_set_status_info</definition>
        <argsstring>(TS_RESP *a, TS_STATUS_INFO *info)</argsstring>
        <name>TS_RESP_set_status_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a331539ea4d6ca4272421e0c04f8bffc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
        <definition>TS_STATUS_INFO* TS_RESP_get_status_info</definition>
        <argsstring>(TS_RESP *a)</argsstring>
        <name>TS_RESP_get_status_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0a446e3b15c6432af0a388b145ad01b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_set_tst_info</definition>
        <argsstring>(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)</argsstring>
        <name>TS_RESP_set_tst_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref> *</type>
          <declname>p7</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>tst_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1a1bab10ebb98913be142f4ea21a09e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref> *</type>
        <definition>PKCS7* TS_RESP_get_token</definition>
        <argsstring>(TS_RESP *a)</argsstring>
        <name>TS_RESP_get_token</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aeaeb9d483564f8be9304d1f5e7bebc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* TS_RESP_get_tst_info</definition>
        <argsstring>(TS_RESP *a)</argsstring>
        <name>TS_RESP_get_tst_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a07a608eeb5ab679d0015db90704e636a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_version</definition>
        <argsstring>(TS_TST_INFO *a, long version)</argsstring>
        <name>TS_TST_INFO_set_version</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a36fda2aa2b1d03729e49e3db9c7775ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long TS_TST_INFO_get_version</definition>
        <argsstring>(const TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_version</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a53457ec50a68d2a1edc27ff5f37df84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_policy_id</definition>
        <argsstring>(TS_TST_INFO *a, ASN1_OBJECT *policy_id)</argsstring>
        <name>TS_TST_INFO_set_policy_id</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>policy_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa30c784f38f2e43e03672e8acc72010c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
        <definition>ASN1_OBJECT* TS_TST_INFO_get_policy_id</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_policy_id</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a96540a403a583ac46f041b3ac443216d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_msg_imprint</definition>
        <argsstring>(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)</argsstring>
        <name>TS_TST_INFO_set_msg_imprint</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>msg_imprint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a48fcd548eecbac279aa1705896de510e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
        <definition>TS_MSG_IMPRINT* TS_TST_INFO_get_msg_imprint</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_msg_imprint</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac0cb13cf04987e574bf8c5d877bb5391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_serial</definition>
        <argsstring>(TS_TST_INFO *a, const ASN1_INTEGER *serial)</argsstring>
        <name>TS_TST_INFO_set_serial</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adaf5373b71000137a359cbfb276f0b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_TST_INFO_get_serial</definition>
        <argsstring>(const TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_serial</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aae95206ddb5e17b0af2f0f2eddd950d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_time</definition>
        <argsstring>(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)</argsstring>
        <name>TS_TST_INFO_set_time</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_GENERALIZEDTIME</ref> *</type>
          <declname>gtime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a850519dbb4620768a797ca557b3b903c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_GENERALIZEDTIME</ref> *</type>
        <definition>const ASN1_GENERALIZEDTIME* TS_TST_INFO_get_time</definition>
        <argsstring>(const TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_time</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a055d8052b9997bd74d1b414a30a22869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_accuracy</definition>
        <argsstring>(TS_TST_INFO *a, TS_ACCURACY *accuracy)</argsstring>
        <name>TS_TST_INFO_set_accuracy</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>accuracy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa2635642f892a4e222f6881cf2124d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
        <definition>TS_ACCURACY* TS_TST_INFO_get_accuracy</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_accuracy</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1afa76c0cfb5a952b0ad6e5057a15b79f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_ACCURACY_set_seconds</definition>
        <argsstring>(TS_ACCURACY *a, const ASN1_INTEGER *seconds)</argsstring>
        <name>TS_ACCURACY_set_seconds</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adf6951a89cd315552cbf8c38f154374b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_ACCURACY_get_seconds</definition>
        <argsstring>(const TS_ACCURACY *a)</argsstring>
        <name>TS_ACCURACY_get_seconds</name>
        <param>
          <type>const <ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1f7e9f93158a1eb1154442cd1d81f940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_ACCURACY_set_millis</definition>
        <argsstring>(TS_ACCURACY *a, const ASN1_INTEGER *millis)</argsstring>
        <name>TS_ACCURACY_set_millis</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>millis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a83833aec1d07b2ee823de45e09632a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_ACCURACY_get_millis</definition>
        <argsstring>(const TS_ACCURACY *a)</argsstring>
        <name>TS_ACCURACY_get_millis</name>
        <param>
          <type>const <ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9af14fbaf93f8f348d8e6b7aef2bba7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_ACCURACY_set_micros</definition>
        <argsstring>(TS_ACCURACY *a, const ASN1_INTEGER *micros)</argsstring>
        <name>TS_ACCURACY_set_micros</name>
        <param>
          <type><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>micros</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1cd216480ef8a4eae40c25f73fd0252d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_ACCURACY_get_micros</definition>
        <argsstring>(const TS_ACCURACY *a)</argsstring>
        <name>TS_ACCURACY_get_micros</name>
        <param>
          <type>const <ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7d265dca156b1cdb538279ffcc76a799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_ordering</definition>
        <argsstring>(TS_TST_INFO *a, int ordering)</argsstring>
        <name>TS_TST_INFO_set_ordering</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1afe1a670ffdd8c7234642d759e4fb7f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_get_ordering</definition>
        <argsstring>(const TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_ordering</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a473ec716743be180a25a94e38e904a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_nonce</definition>
        <argsstring>(TS_TST_INFO *a, const ASN1_INTEGER *nonce)</argsstring>
        <name>TS_TST_INFO_set_nonce</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>nonce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a87c45a6957a9df5b8021bb676211ea9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
        <definition>const ASN1_INTEGER* TS_TST_INFO_get_nonce</definition>
        <argsstring>(const TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_nonce</name>
        <param>
          <type>const <ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7f4d13b025dea184b0af99d63c3a9857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_set_tsa</definition>
        <argsstring>(TS_TST_INFO *a, GENERAL_NAME *tsa)</argsstring>
        <name>TS_TST_INFO_set_tsa</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref> *</type>
          <declname>tsa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a698241d75384dff8bdb1519fb13cad04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref> *</type>
        <definition>GENERAL_NAME* TS_TST_INFO_get_tsa</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_tsa</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1d4358620da870dbd5dd66c1c7b4e764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_TST_INFO_ext_free</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_ext_free</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a05d9778a1c236ea5e4588d2927600cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_get_ext_count</definition>
        <argsstring>(TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_get_ext_count</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab2b7504594bfccd036ceed37aaadf5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_get_ext_by_NID</definition>
        <argsstring>(TS_TST_INFO *a, int nid, int lastpos)</argsstring>
        <name>TS_TST_INFO_get_ext_by_NID</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a4d3f8583bacf671034236f99d565535d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_get_ext_by_OBJ</definition>
        <argsstring>(TS_TST_INFO *a, ASN1_OBJECT *obj, int lastpos)</argsstring>
        <name>TS_TST_INFO_get_ext_by_OBJ</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab31783a7b05a99e4c7121703af9f837c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_get_ext_by_critical</definition>
        <argsstring>(TS_TST_INFO *a, int crit, int lastpos)</argsstring>
        <name>TS_TST_INFO_get_ext_by_critical</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>crit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a10e0c3b4bb282dabcc3150fec001a23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
        <definition>X509_EXTENSION* TS_TST_INFO_get_ext</definition>
        <argsstring>(TS_TST_INFO *a, int loc)</argsstring>
        <name>TS_TST_INFO_get_ext</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a37b2f9038e27aa2ea41e5eb50925a1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
        <definition>X509_EXTENSION* TS_TST_INFO_delete_ext</definition>
        <argsstring>(TS_TST_INFO *a, int loc)</argsstring>
        <name>TS_TST_INFO_delete_ext</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1afc9de20fb2ee8d9908d8dae5af2770ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_add_ext</definition>
        <argsstring>(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)</argsstring>
        <name>TS_TST_INFO_add_ext</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref> *</type>
          <declname>ex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a4e00bbd1ac69cc1a1cf153e106d1e41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* TS_TST_INFO_get_ext_d2i</definition>
        <argsstring>(TS_TST_INFO *a, int nid, int *crit, int *idx)</argsstring>
        <name>TS_TST_INFO_get_ext_d2i</name>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>crit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae1e1dcbbf9b8affef0c7d4627ad43aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
        <definition>TS_RESP_CTX* TS_RESP_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_RESP_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a6665c2698906c4b82527849fd55de3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_CTX_free</definition>
        <argsstring>(TS_RESP_CTX *ctx)</argsstring>
        <name>TS_RESP_CTX_free</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ace501ad5abb317c322e23e4c9f574246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_signer_cert</definition>
        <argsstring>(TS_RESP_CTX *ctx, X509 *signer)</argsstring>
        <name>TS_RESP_CTX_set_signer_cert</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structx509__st" kindref="compound">X509</ref> *</type>
          <declname>signer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a2ad1034e40e7e9f33ca3422049237d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_signer_key</definition>
        <argsstring>(TS_RESP_CTX *ctx, EVP_PKEY *key)</argsstring>
        <name>TS_RESP_CTX_set_signer_key</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a0fb724460ef8d661df8d41c9bcad2385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_def_policy</definition>
        <argsstring>(TS_RESP_CTX *ctx, ASN1_OBJECT *def_policy)</argsstring>
        <name>TS_RESP_CTX_set_def_policy</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>def_policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a23ac2d1568f425c0a43a428380d336e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_certs</definition>
        <argsstring>(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)</argsstring>
        <name>TS_RESP_CTX_set_certs</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>) *</type>
          <declname>certs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aaf6372a9c955aedaf7e649a3e14aa0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_add_policy</definition>
        <argsstring>(TS_RESP_CTX *ctx, ASN1_OBJECT *policy)</argsstring>
        <name>TS_RESP_CTX_add_policy</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ac0a7ae67cc7d2c8333afff3f6f757ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_add_md</definition>
        <argsstring>(TS_RESP_CTX *ctx, const EVP_MD *md)</argsstring>
        <name>TS_RESP_CTX_add_md</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structenv__md__st" kindref="compound">EVP_MD</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a2f5b70ae938997c9f5a53b04f86c9599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_accuracy</definition>
        <argsstring>(TS_RESP_CTX *ctx, int secs, int millis, int micros)</argsstring>
        <name>TS_RESP_CTX_set_accuracy</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>secs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>millis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>micros</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a26d9076501317816353e777f335c8b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_clock_precision_digits</definition>
        <argsstring>(TS_RESP_CTX *ctx, unsigned clock_precision_digits)</argsstring>
        <name>TS_RESP_CTX_set_clock_precision_digits</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>clock_precision_digits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a2db66d706b3d2cd1bccbc68dea14d80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_CTX_add_flags</definition>
        <argsstring>(TS_RESP_CTX *ctx, int flags)</argsstring>
        <name>TS_RESP_CTX_add_flags</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad9f51f2ec16a9e93f91e9d5f41096541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_CTX_set_serial_cb</definition>
        <argsstring>(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)</argsstring>
        <name>TS_RESP_CTX_set_serial_cb</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>TS_serial_cb</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adcd87b76fa7f4416a0e6dfd26cbd91a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_CTX_set_time_cb</definition>
        <argsstring>(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)</argsstring>
        <name>TS_RESP_CTX_set_time_cb</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>TS_time_cb</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1af6d550399778c2c57ea8c06152cdeddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_RESP_CTX_set_extension_cb</definition>
        <argsstring>(TS_RESP_CTX *ctx, TS_extension_cb cb, void *data)</argsstring>
        <name>TS_RESP_CTX_set_extension_cb</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>TS_extension_cb</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a084e706585ae4e9365b73f2c1385652f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_status_info</definition>
        <argsstring>(TS_RESP_CTX *ctx, int status, const char *text)</argsstring>
        <name>TS_RESP_CTX_set_status_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a87c1fbd8ae9a596fc5f87f9d12163c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_set_status_info_cond</definition>
        <argsstring>(TS_RESP_CTX *ctx, int status, const char *text)</argsstring>
        <name>TS_RESP_CTX_set_status_info_cond</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae56a0a613390aea28ca8191562349136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_CTX_add_failure_info</definition>
        <argsstring>(TS_RESP_CTX *ctx, int failure)</argsstring>
        <name>TS_RESP_CTX_add_failure_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a3fbeb412685444df0214c60fd51d837b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
        <definition>TS_REQ* TS_RESP_CTX_get_request</definition>
        <argsstring>(TS_RESP_CTX *ctx)</argsstring>
        <name>TS_RESP_CTX_get_request</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9de1210d8e7bd7fb3a6d016135dc8ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
        <definition>TS_TST_INFO* TS_RESP_CTX_get_tst_info</definition>
        <argsstring>(TS_RESP_CTX *ctx)</argsstring>
        <name>TS_RESP_CTX_get_tst_info</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad302ecf811964d57bad7c85a2d578cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
        <definition>TS_RESP* TS_RESP_create_response</definition>
        <argsstring>(TS_RESP_CTX *ctx, BIO *req_bio)</argsstring>
        <name>TS_RESP_create_response</name>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>req_bio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1ffbaf8da53787902f74a89e1d515285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_verify_signature</definition>
        <argsstring>(PKCS7 *token, STACK_OF(X509) *certs, X509_STORE *store, X509 **signer_out)</argsstring>
        <name>TS_RESP_verify_signature</name>
        <param>
          <type><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>) *</type>
          <declname>certs</declname>
        </param>
        <param>
          <type><ref refid="structx509__store__st" kindref="compound">X509_STORE</ref> *</type>
          <declname>store</declname>
        </param>
        <param>
          <type><ref refid="structx509__st" kindref="compound">X509</ref> **</type>
          <declname>signer_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae00c39d80ec45e0cf1955873f26214dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_verify_response</definition>
        <argsstring>(TS_VERIFY_CTX *ctx, TS_RESP *response)</argsstring>
        <name>TS_RESP_verify_response</name>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>response</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1adcc38341984ccd378cce5145758fa30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_verify_token</definition>
        <argsstring>(TS_VERIFY_CTX *ctx, PKCS7 *token)</argsstring>
        <name>TS_RESP_verify_token</name>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a5cad967e17fdf59cd4097de6b5997d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
        <definition>TS_VERIFY_CTX* TS_VERIFY_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>TS_VERIFY_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae20e3f3b8d238cc8595ea0fcad24cc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_VERIFY_CTX_init</definition>
        <argsstring>(TS_VERIFY_CTX *ctx)</argsstring>
        <name>TS_VERIFY_CTX_init</name>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad3da518cefd941a412200c31553cd718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_VERIFY_CTX_free</definition>
        <argsstring>(TS_VERIFY_CTX *ctx)</argsstring>
        <name>TS_VERIFY_CTX_free</name>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa8c109c37df92dc3ea1b44d31d5fe9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TS_VERIFY_CTX_cleanup</definition>
        <argsstring>(TS_VERIFY_CTX *ctx)</argsstring>
        <name>TS_VERIFY_CTX_cleanup</name>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1abafb09a210018735a85f80bd00666957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
        <definition>TS_VERIFY_CTX* TS_REQ_to_TS_VERIFY_CTX</definition>
        <argsstring>(TS_REQ *req, TS_VERIFY_CTX *ctx)</argsstring>
        <name>TS_REQ_to_TS_VERIFY_CTX</name>
        <param>
          <type><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9fadb90875664b409bc222235899f32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_RESP_print_bio</definition>
        <argsstring>(BIO *bio, TS_RESP *a)</argsstring>
        <name>TS_RESP_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa55c09cafd75f256345e972406589b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_STATUS_INFO_print_bio</definition>
        <argsstring>(BIO *bio, TS_STATUS_INFO *a)</argsstring>
        <name>TS_STATUS_INFO_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a91428b1579db0fb8f14a981cdade9326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_TST_INFO_print_bio</definition>
        <argsstring>(BIO *bio, TS_TST_INFO *a)</argsstring>
        <name>TS_TST_INFO_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a29c4d8c32fd3ce26d1b05518a36e458d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_ASN1_INTEGER_print_bio</definition>
        <argsstring>(BIO *bio, const ASN1_INTEGER *num)</argsstring>
        <name>TS_ASN1_INTEGER_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref> *</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1afe628833edfaf841dabc01fa7cd5493a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_OBJ_print_bio</definition>
        <argsstring>(BIO *bio, const ASN1_OBJECT *obj)</argsstring>
        <name>TS_OBJ_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type>const <ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa689ae09b186460ef190acf1012f7324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_ext_print_bio</definition>
        <argsstring>(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)</argsstring>
        <name>TS_ext_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type>const STACK_OF(<ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref>) *</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa1be675d51e2272adacee11cf31f5967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_X509_ALGOR_print_bio</definition>
        <argsstring>(BIO *bio, const X509_ALGOR *alg)</argsstring>
        <name>TS_X509_ALGOR_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref> *</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a13bfe857f585664252c54dbe8c7bb4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_MSG_IMPRINT_print_bio</definition>
        <argsstring>(BIO *bio, TS_MSG_IMPRINT *msg)</argsstring>
        <name>TS_MSG_IMPRINT_print_bio</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bio</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a7af293292ea98436df3edce48be72c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structx509__st" kindref="compound">X509</ref> *</type>
        <definition>X509* TS_CONF_load_cert</definition>
        <argsstring>(const char *file)</argsstring>
        <name>TS_CONF_load_cert</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a9a8b4176649e29868cb4e25860a6e327" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>STACK_OF</definition>
        <argsstring>(X509) *TS_CONF_load_certs(const char *file)</argsstring>
        <name>STACK_OF</name>
        <param>
          <type><ref refid="structx509__st" kindref="compound">X509</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ad48e4cb9bead7161aeaed08a7a174715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref> *</type>
        <definition>EVP_PKEY* TS_CONF_load_key</definition>
        <argsstring>(const char *file, const char *pass)</argsstring>
        <name>TS_CONF_load_key</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="731" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aa9abf6497b0e1ed1d9759ce55e33e168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* TS_CONF_get_tsa_section</definition>
        <argsstring>(CONF *conf, const char *section)</argsstring>
        <name>TS_CONF_get_tsa_section</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ada11988bfa8736fbd401a5a2c9a073af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_serial</definition>
        <argsstring>(CONF *conf, const char *section, TS_serial_cb cb, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_serial</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>TS_serial_cb</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ab8bb47fff326d086f771a0e457d83c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_crypto_device</definition>
        <argsstring>(CONF *conf, const char *section, const char *device)</argsstring>
        <name>TS_CONF_set_crypto_device</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="735" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a89648952a5c4bc8cd51a0cea543b04cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_default_engine</definition>
        <argsstring>(const char *name)</argsstring>
        <name>TS_CONF_set_default_engine</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a30d5e8df67245a3ff66d6e77e83b37ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_signer_cert</definition>
        <argsstring>(CONF *conf, const char *section, const char *cert, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_signer_cert</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cert</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a90218d5fdf8cc6b91742d2b779d96024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_certs</definition>
        <argsstring>(CONF *conf, const char *section, const char *certs, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_certs</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>certs</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a85e3525443caeffa33c35a68cfd30a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_signer_key</definition>
        <argsstring>(CONF *conf, const char *section, const char *key, const char *pass, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_signer_key</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a1ca228788cbb8ef09602031cfd42a2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_def_policy</definition>
        <argsstring>(CONF *conf, const char *section, const char *policy, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_def_policy</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>policy</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae4c6855e6353ba0b25f72b0c5fee1d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_policies</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_policies</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a443ebb27830ca469280ed0380d9662c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_digests</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_digests</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a41da4268eaaa4429872554928ce479ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_accuracy</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_accuracy</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1aecac59ecf66b3bf50badb4f9db490842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_clock_precision_digits</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_clock_precision_digits</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1ae1ccf53a25158db99af453ab0866bc3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_ordering</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_ordering</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a29ce739738891ff5b569bb01e25e7498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_tsa_name</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_tsa_name</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ts_8h_1a3ad82eb71fd13dc44716ef5fa3d1f8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TS_CONF_set_ess_cert_id_chain</definition>
        <argsstring>(CONF *conf, const char *section, TS_RESP_CTX *ctx)</argsstring>
        <name>TS_CONF_set_ess_cert_id_chain</name>
        <param>
          <type><ref refid="structconf__st" kindref="compound">CONF</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ts.h" line="753" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/ts/ts.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Written<sp/>by<sp/>Zoltan<sp/>Glozik<sp/>(zglozik@opentsa.org)<sp/>for<sp/>the<sp/>OpenSSL</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>project<sp/>2002,<sp/>2003,<sp/>2004.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2006<sp/>The<sp/>OpenSSL<sp/>Project.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgment:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit.<sp/>(http://www.OpenSSL.org/)&quot;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>4.<sp/>The<sp/>names<sp/>&quot;OpenSSL<sp/>Toolkit&quot;<sp/>and<sp/>&quot;OpenSSL<sp/>Project&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prior<sp/>written<sp/>permission.<sp/>For<sp/>written<sp/>permission,<sp/>please<sp/>contact</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>licensing@OpenSSL.org.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>5.<sp/>Products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>may<sp/>not<sp/>be<sp/>called<sp/>&quot;OpenSSL&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>nor<sp/>may<sp/>&quot;OpenSSL&quot;<sp/>appear<sp/>in<sp/>their<sp/>names<sp/>without<sp/>prior<sp/>written</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>permission<sp/>of<sp/>the<sp/>OpenSSL<sp/>Project.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>6.<sp/>Redistributions<sp/>of<sp/>any<sp/>form<sp/>whatsoever<sp/>must<sp/>retain<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>acknowledgment:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit<sp/>(http://www.OpenSSL.org/)&quot;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>OR</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>(eay@cryptsoft.com).<sp/><sp/>This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_TS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_TS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/opensslconf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/symhacks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EVP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/evp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/stack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/asn1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/safestack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_RSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/rsa.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DSA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/dsa.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/dh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Under<sp/>Win32<sp/>this<sp/>is<sp/>defined<sp/>in<sp/>wincrypt.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X509_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/x509.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/x509v3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment">MessageImprint<sp/>::=<sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>hashAlgorithm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlgorithmIdentifier,</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>hashedMessage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCTET<sp/>STRING<sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="struct_t_s__msg__imprint__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_msg_imprint_st</ref></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref><sp/>*hash_algo;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_OCTET_STRING</ref><sp/>*hashed_msg;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment">TimeStampReq<sp/>::=<sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/>{<sp/>v1(1)<sp/>},</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>messageImprint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageImprint,</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--a<sp/>hash<sp/>algorithm<sp/>OID<sp/>and<sp/>the<sp/>hash<sp/>value<sp/>of<sp/>the<sp/>data<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--time-stamped</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>reqPolicy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSAPolicyId<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>nonce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>certReq<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOLEAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEFAULT<sp/>FALSE,</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>extensions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0]<sp/>IMPLICIT<sp/>Extensions<sp/><sp/><sp/><sp/>OPTIONAL<sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="struct_t_s__req__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_req_st</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*version;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*msg_imprint;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy_id;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OPTIONAL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*nonce;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OPTIONAL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>ASN1_BOOLEAN<sp/>cert_req;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DEFAULT<sp/>FALSE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref>)<sp/>*extensions;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>[0]<sp/>OPTIONAL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="136"><highlight class="comment">Accuracy<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>millis<sp/><sp/><sp/><sp/><sp/>[0]<sp/>INTEGER<sp/><sp/>(1..999)<sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>micros<sp/><sp/><sp/><sp/><sp/>[1]<sp/>INTEGER<sp/><sp/>(1..999)<sp/>OPTIONAL<sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="struct_t_s__accuracy__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_accuracy_st</ref></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*seconds;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*millis;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*micros;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment">TSTInfo<sp/>::=<sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/>{<sp/>v1(1)<sp/>},</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>policy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSAPolicyId,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>messageImprint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageImprint,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>value<sp/>as<sp/>the<sp/>similar<sp/>field<sp/>in</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>TimeStampReq</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>serialNumber<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>Time-Stamping<sp/>users<sp/>MUST<sp/>be<sp/>ready<sp/>to<sp/>accommodate<sp/>integers</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>up<sp/>to<sp/>160<sp/>bits.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>genTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneralizedTime,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>accuracy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accuracy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>ordering<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOLEAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEFAULT<sp/>FALSE,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>nonce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>MUST<sp/>be<sp/>present<sp/>if<sp/>the<sp/>similar<sp/>field<sp/>was<sp/>present</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>in<sp/>TimeStampReq.<sp/><sp/>In<sp/>that<sp/>case<sp/>it<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>value.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>tsa<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0]<sp/>GeneralName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>extensions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1]<sp/>IMPLICIT<sp/>Extensions<sp/><sp/>OPTIONAL<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="struct_t_s__tst__info__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_tst_info_st</ref></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*version;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy_id;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*msg_imprint;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*serial;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_GENERALIZEDTIME</ref><sp/>*time;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*accuracy;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ASN1_BOOLEAN<sp/>ordering;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*nonce;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref><sp/>*tsa;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref>)<sp/>*extensions;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment">PKIStatusInfo<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/>status<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PKIStatus,</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>statusString<sp/><sp/>PKIFreeText<sp/><sp/><sp/><sp/><sp/>OPTIONAL,</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>failInfo<sp/><sp/><sp/><sp/><sp/><sp/>PKIFailureInfo<sp/><sp/>OPTIONAL<sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">From<sp/>RFC<sp/>1510<sp/>-<sp/>section<sp/>3.1.1:</highlight></codeline>
<codeline lineno="190"><highlight class="comment">PKIFreeText<sp/>::=<sp/>SEQUENCE<sp/>SIZE<sp/>(1..MAX)<sp/>OF<sp/>UTF8String</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>--<sp/>text<sp/>encoded<sp/>as<sp/>UTF-8<sp/>String<sp/>(note:<sp/><sp/>each<sp/>UTF8String<sp/>SHOULD</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>--<sp/>include<sp/>an<sp/>RFC<sp/>1766<sp/>language<sp/>tag<sp/>to<sp/>indicate<sp/>the<sp/>language</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/>--<sp/>of<sp/>the<sp/>contained<sp/>text)</highlight></codeline>
<codeline lineno="194"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Possible<sp/>values<sp/>for<sp/>status.<sp/>See<sp/>ts_resp_print.c<sp/>&amp;&amp;<sp/>ts_resp_verify.c.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_GRANTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_GRANTED_WITH_MODS<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_REJECTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_WAITING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_REVOCATION_WARNING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_STATUS_REVOCATION_NOTIFICATION<sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Possible<sp/>values<sp/>for<sp/>failure_info.<sp/>See<sp/>ts_resp_print.c<sp/>&amp;&amp;<sp/>ts_resp_verify.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_BAD_ALG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_BAD_REQUEST<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_BAD_DATA_FORMAT<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_TIME_NOT_AVAILABLE<sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_UNACCEPTED_POLICY<sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_UNACCEPTED_EXTENSION<sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_ADD_INFO_NOT_AVAILABLE<sp/><sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_INFO_SYSTEM_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="struct_t_s__status__info__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__status__info__st" kindref="compound">TS_status_info_st</ref></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*status;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structasn1__string__st" kindref="compound">ASN1_UTF8STRING</ref>)<sp/>*text;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_BIT_STRING</ref><sp/>*failure_info;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">DECLARE_STACK_OF(<ref refid="structasn1__string__st" kindref="compound">ASN1_UTF8STRING</ref>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">DECLARE_ASN1_SET_OF(<ref refid="structasn1__string__st" kindref="compound">ASN1_UTF8STRING</ref>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="227"><highlight class="comment">TimeStampResp<sp/>::=<sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>status<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PKIStatusInfo,</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>timeStampToken<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeStampToken<sp/><sp/><sp/><sp/><sp/>OPTIONAL<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="struct_t_s__resp__st" refkind="compound"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_resp_st</ref></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*status_info;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*token;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*tst_info;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>structure<sp/>below<sp/>would<sp/>belong<sp/>to<sp/>the<sp/>ESS<sp/>component.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="242"><highlight class="comment">IssuerSerial<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>issuer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneralNames,</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/>serialNumber<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CertificateSerialNumber</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="struct_e_s_s__issuer__serial" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_issuer_serial</ref></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref>)<sp/><sp/>*issuer;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*serial;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="255"><highlight class="comment">ESSCertID<sp/>::=<sp/><sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>certHash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash,</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>issuerSerial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IssuerSerial<sp/>OPTIONAL</highlight></codeline>
<codeline lineno="258"><highlight class="comment">}</highlight></codeline>
<codeline lineno="259"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="struct_e_s_s__cert__id" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_cert_id</ref></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_OCTET_STRING</ref><sp/>*hash;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>SHA-1<sp/>digest.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*issuer_serial;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">DECLARE_STACK_OF(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">DECLARE_ASN1_SET_OF(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="271"><highlight class="comment">SigningCertificate<sp/>::=<sp/><sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>certs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEQUENCE<sp/>OF<sp/>ESSCertID,</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policies<sp/><sp/><sp/><sp/><sp/>SEQUENCE<sp/>OF<sp/>PolicyInformation<sp/>OPTIONAL</highlight></codeline>
<codeline lineno="274"><highlight class="comment">}</highlight></codeline>
<codeline lineno="275"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="struct_e_s_s__signing__cert" refkind="compound"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_signing_cert</ref></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref>)<sp/>*cert_ids;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="struct_p_o_l_i_c_y_i_n_f_o__st" kindref="compound">POLICYINFO</ref>)<sp/>*policy_info;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/>*TS_REQ_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>TS_REQ_free(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_REQ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/>*d2i_TS_REQ(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/>*TS_REQ_dup(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/>*d2i_TS_REQ_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>**a);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_REQ_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/>*d2i_TS_REQ_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>**a);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_REQ_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/><sp/>*TS_MSG_IMPRINT_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TS_MSG_IMPRINT_free(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_MSG_IMPRINT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/><sp/>*d2i_TS_MSG_IMPRINT(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>**a,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/><sp/>*TS_MSG_IMPRINT_dup(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/><sp/>*d2i_TS_MSG_IMPRINT_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>**a);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_MSG_IMPRINT_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/><sp/>*d2i_TS_MSG_IMPRINT_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>**a);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_MSG_IMPRINT_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*TS_RESP_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>TS_RESP_free(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_RESP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*d2i_TS_RESP(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*PKCS7_to_TS_TST_INFO(<ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*token);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*TS_RESP_dup(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*d2i_TS_RESP_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>**a);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_RESP_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*d2i_TS_RESP_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>**a);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_TS_RESP_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/><sp/>*TS_STATUS_INFO_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TS_STATUS_INFO_free(<ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_STATUS_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/><sp/>*d2i_TS_STATUS_INFO(<ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>**a,<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/><sp/>*TS_STATUS_INFO_dup(<ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*TS_TST_INFO_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TS_TST_INFO_free(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_TST_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*d2i_TS_TST_INFO(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*TS_TST_INFO_dup(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*d2i_TS_TST_INFO_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>**a);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_TST_INFO_fp(FILE<sp/>*fp,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*d2i_TS_TST_INFO_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>**a);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_TST_INFO_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*TS_ACCURACY_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TS_ACCURACY_free(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_TS_ACCURACY(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*d2i_TS_ACCURACY(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*TS_ACCURACY_dup(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*ESS_ISSUER_SERIAL_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESS_ISSUER_SERIAL_free(<ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*a);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2d_ESS_ISSUER_SERIAL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*a,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*d2i_ESS_ISSUER_SERIAL(<ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>**a,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*ESS_ISSUER_SERIAL_dup(<ref refid="struct_e_s_s__issuer__serial" kindref="compound">ESS_ISSUER_SERIAL</ref><sp/>*a);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*ESS_CERT_ID_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESS_CERT_ID_free(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*a);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i2d_ESS_CERT_ID(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*d2i_ESS_CERT_ID(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*ESS_CERT_ID_dup(<ref refid="struct_e_s_s__cert__id" kindref="compound">ESS_CERT_ID</ref><sp/>*a);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*ESS_SIGNING_CERT_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESS_SIGNING_CERT_free(<ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2d_ESS_SIGNING_CERT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*a,<sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*d2i_ESS_SIGNING_CERT(<ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>**a,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*ESS_SIGNING_CERT_dup(<ref refid="struct_e_s_s__signing__cert" kindref="compound">ESS_SIGNING_CERT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_TS_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_set_version(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>version);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>TS_REQ_get_version(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_set_msg_imprint(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*msg_imprint);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*TS_REQ_get_msg_imprint(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_MSG_IMPRINT_set_algo(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a,<sp/><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref><sp/>*alg);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref><sp/>*TS_MSG_IMPRINT_get_algo(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_MSG_IMPRINT_set_msg(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><ref refid="structasn1__string__st" kindref="compound">ASN1_OCTET_STRING</ref><sp/>*TS_MSG_IMPRINT_get_msg(<ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*a);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_set_policy_id(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*TS_REQ_get_policy_id(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_set_nonce(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*nonce);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_REQ_get_nonce(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_set_cert_req(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cert_req);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_get_cert_req(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">STACK_OF(<ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref>)<sp/>*TS_REQ_get_exts(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_REQ_ext_free(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_get_ext_count(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_get_ext_by_NID(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_get_ext_by_OBJ(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_get_ext_by_critical(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*TS_REQ_get_ext(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*TS_REQ_delete_ext(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_add_ext(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*ex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TS_REQ_get_ext_d2i(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*crit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idx);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>declarations<sp/>for<sp/>TS_REQ<sp/>defined<sp/>in<sp/>ts/ts_req_print.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_REQ_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*a);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>declarations<sp/>for<sp/>TS_RESP<sp/>defined<sp/>in<sp/>ts/ts_resp_utils.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_set_status_info(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a,<sp/><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*info);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*TS_RESP_get_status_info(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Caller<sp/>loses<sp/>ownership<sp/>of<sp/>PKCS7<sp/>and<sp/>TS_TST_INFO<sp/>objects.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_set_tst_info(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a,<sp/><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*p7,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*tst_info);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*TS_RESP_get_token(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*TS_RESP_get_tst_info(<ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_version(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>version);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_version(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_policy_id(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy_id);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*TS_TST_INFO_get_policy_id(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_msg_imprint(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*msg_imprint);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*TS_TST_INFO_get_msg_imprint(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_serial(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*serial);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_TST_INFO_get_serial(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_time(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_GENERALIZEDTIME</ref><sp/>*gtime);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_GENERALIZEDTIME</ref><sp/>*TS_TST_INFO_get_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_accuracy(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*accuracy);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*TS_TST_INFO_get_accuracy(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_ACCURACY_set_seconds(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*seconds);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_ACCURACY_get_seconds(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_ACCURACY_set_millis(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*millis);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_ACCURACY_get_millis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_ACCURACY_set_micros(<ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*micros);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_ACCURACY_get_micros(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__accuracy__st" kindref="compound">TS_ACCURACY</ref><sp/>*a);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_ordering(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordering);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_ordering(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_nonce(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*nonce);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*TS_TST_INFO_get_nonce(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_set_tsa(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref><sp/>*tsa);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref><sp/>*TS_TST_INFO_get_tsa(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">STACK_OF(<ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref>)<sp/>*TS_TST_INFO_get_exts(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_TST_INFO_ext_free(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_ext_count(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_ext_by_NID(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_ext_by_OBJ(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_get_ext_by_critical(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*TS_TST_INFO_get_ext(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*TS_TST_INFO_delete_ext(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_add_ext(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*ex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TS_TST_INFO_get_ext_d2i(<ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*crit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idx);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declarations<sp/>related<sp/>to<sp/>response<sp/>generation,<sp/>defined<sp/>in<sp/>ts/ts_resp_sign.c.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Optional<sp/>flags<sp/>for<sp/>response<sp/>generation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>include<sp/>the<sp/>TSA<sp/>name<sp/>in<sp/>response.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_TSA_NAME<sp/><sp/><sp/><sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>ordering<sp/>to<sp/>true<sp/>in<sp/>response.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_ORDERING<sp/><sp/><sp/><sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>Include<sp/>the<sp/>signer<sp/>certificate<sp/>and<sp/>the<sp/>other<sp/>specified<sp/>certificates<sp/>in</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>the<sp/>ESS<sp/>signing<sp/>certificate<sp/>attribute<sp/>beside<sp/>the<sp/>PKCS7<sp/>signed<sp/>data.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>Only<sp/>the<sp/>signer<sp/>certificates<sp/>is<sp/>included<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_ESS_CERT_ID_CHAIN<sp/><sp/><sp/><sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>must<sp/>return<sp/>a<sp/>unique<sp/>number<sp/>less<sp/>than<sp/>160<sp/>bits<sp/>long.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*(*TS_serial_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>must<sp/>return<sp/>the<sp/>seconds<sp/>and<sp/>microseconds<sp/>since<sp/>Jan<sp/>1,<sp/>1970<sp/>in</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/>the<sp/>sec<sp/>and<sp/>usec<sp/>variables<sp/>allocated<sp/>by<sp/>the<sp/>caller.<sp/></highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>non-zero<sp/>for<sp/>success<sp/>and<sp/>zero<sp/>for<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*TS_time_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*sec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*usec);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>must<sp/>process<sp/>the<sp/>given<sp/>extension.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>It<sp/>can<sp/>modify<sp/>the<sp/>TS_TST_INFO<sp/>object<sp/>of<sp/>the<sp/>context.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>Return<sp/>values:<sp/>!0<sp/>(processed),<sp/>0<sp/>(error,<sp/>it<sp/>must<sp/>set<sp/>the<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>status<sp/>info/failure<sp/>info<sp/>of<sp/>the<sp/>response).</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*TS_extension_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref><sp/>*,<sp/><ref refid="struct_x509__extension__st" kindref="compound">X509_EXTENSION</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="struct_t_s__resp__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_resp_ctx</ref></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structx509__st" kindref="compound">X509</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*signer_cert;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/><sp/><sp/><sp/>*signer_key;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>)<sp/><sp/>*certs;<sp/></highlight><highlight class="comment">/*<sp/>Certs<sp/>to<sp/>include<sp/>in<sp/>signed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref>)<sp/><sp/><sp/>*policies;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Acceptable<sp/>policies.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*default_policy;<sp/></highlight><highlight class="comment">/*<sp/>It<sp/>may<sp/>appear<sp/>in<sp/>policies,<sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structenv__md__st" kindref="compound">EVP_MD</ref>)<sp/><sp/><sp/><sp/>*mds;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Acceptable<sp/>message<sp/>digests.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/><sp/><sp/><sp/>*seconds;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>accuracy,<sp/>0<sp/>means<sp/>not<sp/>specified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/><sp/><sp/><sp/>*millis;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>accuracy,<sp/>0<sp/>means<sp/>not<sp/>specified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/><sp/><sp/><sp/>*micros;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>accuracy,<sp/>0<sp/>means<sp/>not<sp/>specified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>clock_precision_digits;<sp/></highlight><highlight class="comment">/*<sp/>fraction<sp/>of<sp/>seconds<sp/>in</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>stamp<sp/>token.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optional<sp/>info,<sp/>see<sp/>values<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Callback<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>TS_serial_cb<sp/>serial_cb;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*serial_cb_data;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>data<sp/>for<sp/>serial_cb.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>TS_time_cb<sp/>time_cb;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*time_cb_data;<sp/></highlight><highlight class="comment">/*<sp/>User<sp/>data<sp/>for<sp/>time_cb.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>TS_extension_cb<sp/>extension_cb;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extension_cb_data;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>data<sp/>for<sp/>extension_cb.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>members<sp/>are<sp/>used<sp/>only<sp/>while<sp/>creating<sp/>the<sp/>response.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/><sp/><sp/><sp/><sp/><sp/>*request;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/><sp/><sp/><sp/><sp/>*response;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*tst_info;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">DECLARE_STACK_OF(<ref refid="structenv__md__st" kindref="compound">EVP_MD</ref>)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">DECLARE_ASN1_SET_OF(<ref refid="structenv__md__st" kindref="compound">EVP_MD</ref>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Creates<sp/>a<sp/>response<sp/>context<sp/>that<sp/>can<sp/>be<sp/>used<sp/>for<sp/>generating<sp/>responses.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*TS_RESP_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_CTX_free(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>parameter<sp/>must<sp/>be<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_signer_cert(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/><ref refid="structx509__st" kindref="compound">X509</ref><sp/>*signer);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>parameter<sp/>must<sp/>be<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_signer_key(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*key);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>parameter<sp/>must<sp/>be<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_def_policy(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*def_policy);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>No<sp/>additional<sp/>certs<sp/>are<sp/>included<sp/>in<sp/>the<sp/>response<sp/>by<sp/>default.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_certs(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>)<sp/>*certs);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>a<sp/>new<sp/>acceptable<sp/>policy,<sp/>only<sp/>the<sp/>default<sp/>policy<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/>is<sp/>accepted<sp/>by<sp/>default.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_add_policy(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>a<sp/>new<sp/>acceptable<sp/>message<sp/>digest.<sp/>Note<sp/>that<sp/>no<sp/>message<sp/>digests<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/>are<sp/>accepted<sp/>by<sp/>default.<sp/>The<sp/>md<sp/>argument<sp/>is<sp/>shared<sp/>with<sp/>the<sp/>caller.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_add_md(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenv__md__st" kindref="compound">EVP_MD</ref><sp/>*md);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Accuracy<sp/>is<sp/>not<sp/>included<sp/>by<sp/>default.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_accuracy(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>millis,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>micros);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clock<sp/>precision<sp/>digits,<sp/>i.e.<sp/>the<sp/>number<sp/>of<sp/>decimal<sp/>digits:<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>&apos;0&apos;<sp/>means<sp/>sec,<sp/>&apos;3&apos;<sp/>msec,<sp/>&apos;6&apos;<sp/>usec,<sp/>and<sp/>so<sp/>on.<sp/>Default<sp/>is<sp/>0.<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_clock_precision_digits(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>clock_precision_digits);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>At<sp/>most<sp/>we<sp/>accept<sp/>usec<sp/>precision.<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_MAX_CLOCK_PRECISION_DIGITS<sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>No<sp/>flags<sp/>are<sp/>set<sp/>by<sp/>default.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_CTX_add_flags(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>callback<sp/>always<sp/>returns<sp/>a<sp/>constant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_serial_cb(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/>TS_serial_cb<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>callback<sp/>uses<sp/>the<sp/>gettimeofday()<sp/>and<sp/>gmtime()<sp/>system<sp/>calls.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_time_cb(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/>TS_time_cb<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>callback<sp/>rejects<sp/>all<sp/>extensions.<sp/>The<sp/>extension<sp/>callback<sp/>is<sp/>called<sp/></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>when<sp/>the<sp/>TS_TST_INFO<sp/>object<sp/>is<sp/>already<sp/>set<sp/>up<sp/>and<sp/>not<sp/>signed<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>extension<sp/>handling<sp/>is<sp/>not<sp/>tested<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_extension_cb(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TS_extension_cb<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>methods<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>callbacks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_status_info(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Sets<sp/>the<sp/>status<sp/>info<sp/>only<sp/>if<sp/>it<sp/>is<sp/>still<sp/>TS_STATUS_GRANTED.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_set_status_info_cond(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_CTX_add_failure_info(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failure);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>get<sp/>methods<sp/>below<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>extension<sp/>callback.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*TS_RESP_CTX_get_request(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*TS_RESP_CTX_get_tst_info(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>Creates<sp/>the<sp/>signed<sp/>TS_TST_INFO<sp/>and<sp/>puts<sp/>it<sp/>in<sp/>TS_RESP.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>In<sp/>case<sp/>of<sp/>errors<sp/>it<sp/>sets<sp/>the<sp/>status<sp/>info<sp/>properly.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>Returns<sp/>NULL<sp/>only<sp/>in<sp/>case<sp/>of<sp/>memory<sp/>allocation/fatal<sp/>error.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*TS_RESP_create_response(<ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx,<sp/><ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*req_bio);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>Declarations<sp/>related<sp/>to<sp/>response<sp/>verification,</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>they<sp/>are<sp/>defined<sp/>in<sp/>ts/ts_resp_verify.c.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_verify_signature(<ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*token,<sp/>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>)<sp/>*certs,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx509__store__st" kindref="compound">X509_STORE</ref><sp/>*store,<sp/><ref refid="structx509__st" kindref="compound">X509</ref><sp/>**signer_out);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Context<sp/>structure<sp/>for<sp/>the<sp/>generic<sp/>verify<sp/>method.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>signer&apos;s<sp/>certificate<sp/>and<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>response.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_SIGNATURE<sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>version<sp/>number<sp/>of<sp/>the<sp/>response.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_VERSION<sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>if<sp/>the<sp/>policy<sp/>supplied<sp/>by<sp/>the<sp/>user<sp/>matches<sp/>the<sp/>policy<sp/>of<sp/>the<sp/>TSA.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>message<sp/>imprint<sp/>provided<sp/>by<sp/>the<sp/>user.<sp/>This<sp/>flag<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/>specified<sp/>with<sp/>TS_VFY_DATA.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_IMPRINT<sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>message<sp/>imprint<sp/>computed<sp/>by<sp/>the<sp/>verify<sp/>method<sp/>from<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>data<sp/>and<sp/>the<sp/>MD<sp/>algorithm<sp/>of<sp/>the<sp/>response.<sp/>This<sp/>flag<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/>specified<sp/>with<sp/>TS_VFY_IMPRINT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_DATA<sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>nonce<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_NONCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>if<sp/>the<sp/>TSA<sp/>name<sp/>field<sp/>matches<sp/>the<sp/>signer<sp/>certificate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_SIGNER<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Verify<sp/>if<sp/>the<sp/>TSA<sp/>name<sp/>field<sp/>equals<sp/>to<sp/>the<sp/>user<sp/>provided<sp/>name.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_TSA_NAME<sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>You<sp/>can<sp/>use<sp/>the<sp/>following<sp/>convenience<sp/>constants.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_ALL_IMPRINT<sp/><sp/>(TS_VFY_SIGNATURE<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_VERSION<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_POLICY<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_IMPRINT<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_NONCE<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_SIGNER<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_TSA_NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_VFY_ALL_DATA<sp/><sp/><sp/><sp/><sp/>(TS_VFY_SIGNATURE<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_VERSION<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_POLICY<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_DATA<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_NONCE<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_SIGNER<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>TS_VFY_TSA_NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="struct_t_s__verify__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_verify_ctx</ref></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>this<sp/>to<sp/>the<sp/>union<sp/>of<sp/>TS_VFY_...<sp/>flags<sp/>you<sp/>want<sp/>to<sp/>carry<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_SIGNATURE.<sp/>certs<sp/>is<sp/>optional.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structx509__store__st" kindref="compound">X509_STORE</ref><sp/><sp/>*store;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>)<sp/><sp/>*certs;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_POLICY.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*policy;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_IMPRINT.<sp/>If<sp/>md_alg<sp/>is<sp/>NULL,<sp/></highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>algorithm<sp/>from<sp/>the<sp/>response<sp/>is<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref><sp/><sp/>*md_alg;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*imprint;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>imprint_len;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_DATA.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbio__st" kindref="compound">BIO</ref><sp/><sp/><sp/><sp/><sp/>*data;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_TSA_NAME.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/><sp/><sp/><sp/>*nonce;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>set<sp/>only<sp/>with<sp/>TS_VFY_TSA_NAME.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_g_e_n_e_r_a_l___n_a_m_e__st" kindref="compound">GENERAL_NAME</ref><sp/><sp/><sp/><sp/>*tsa_name;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_verify_response(<ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*response);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_verify_token(<ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx,<sp/><ref refid="structpkcs7__st" kindref="compound">PKCS7</ref><sp/>*token);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>Declarations<sp/>related<sp/>to<sp/>response<sp/>verification<sp/>context,</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>they<sp/>are<sp/>defined<sp/>in<sp/>ts/ts_verify_ctx.c.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>all<sp/>fields<sp/>to<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*TS_VERIFY_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_VERIFY_CTX_init(<ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_VERIFY_CTX_free(<ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TS_VERIFY_CTX_cleanup(<ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>If<sp/>ctx<sp/>is<sp/>NULL,<sp/>it<sp/>allocates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>object,<sp/>otherwise</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>it<sp/>returns<sp/>ctx.<sp/>It<sp/>initialises<sp/>all<sp/>the<sp/>members<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>flags<sp/>=<sp/>TS_VFY_ALL_IMPRINT<sp/>&amp;<sp/>~(TS_VFY_TSA_NAME<sp/>|<sp/>TS_VFY_SIGNATURE)</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>certs<sp/>=<sp/>NULL</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>store<sp/>=<sp/>NULL</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>policy<sp/>=<sp/>policy<sp/>from<sp/>the<sp/>request<sp/>or<sp/>NULL<sp/>if<sp/>absent<sp/>(in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/><sp/>TS_VFY_POLICY<sp/>is<sp/>cleared<sp/>from<sp/>flags<sp/>as<sp/>well)</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>md_alg<sp/>=<sp/>MD<sp/>algorithm<sp/>from<sp/>request</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>imprint,<sp/>imprint_len<sp/>=<sp/>imprint<sp/>from<sp/>request</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>data<sp/>=<sp/>NULL</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>nonce,<sp/>nonce_len<sp/>=<sp/>nonce<sp/>from<sp/>the<sp/>request<sp/>or<sp/>NULL<sp/>if<sp/>absent<sp/>(in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/><sp/>TS_VFY_NONCE<sp/>is<sp/>cleared<sp/>from<sp/>flags<sp/>as<sp/>well)</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>tsa_name<sp/>=<sp/>NULL</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>Important:<sp/>after<sp/>calling<sp/>this<sp/>method<sp/>TS_VFY_SIGNATURE<sp/>should<sp/>be<sp/>added!</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*TS_REQ_to_TS_VERIFY_CTX(<ref refid="struct_t_s__req__st" kindref="compound">TS_REQ</ref><sp/>*req,<sp/><ref refid="struct_t_s__verify__ctx" kindref="compound">TS_VERIFY_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>declarations<sp/>for<sp/>TS_RESP<sp/>defined<sp/>in<sp/>ts/ts_resp_print.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_RESP_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/><ref refid="struct_t_s__resp__st" kindref="compound">TS_RESP</ref><sp/>*a);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_STATUS_INFO_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/><ref refid="struct_t_s__status__info__st" kindref="compound">TS_STATUS_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_TST_INFO_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/><ref refid="struct_t_s__tst__info__st" kindref="compound">TS_TST_INFO</ref><sp/>*a);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Common<sp/>utility<sp/>functions<sp/>defined<sp/>in<sp/>ts/ts_lib.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_ASN1_INTEGER_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__string__st" kindref="compound">ASN1_INTEGER</ref><sp/>*num);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_OBJ_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasn1__object__st" kindref="compound">ASN1_OBJECT</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_ext_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>STACK_OF(X509_EXTENSION)<sp/>*extensions);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_X509_ALGOR_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x509__algor__st" kindref="compound">X509_ALGOR</ref><sp/>*alg);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_MSG_IMPRINT_print_bio(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bio,<sp/><ref refid="struct_t_s__msg__imprint__st" kindref="compound">TS_MSG_IMPRINT</ref><sp/>*msg);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>declarations<sp/>for<sp/>handling<sp/>configuration<sp/>options,</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/>defined<sp/>in<sp/>ts/ts_conf.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="structx509__st" kindref="compound">X509</ref><sp/>*TS_CONF_load_cert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="730"><highlight class="normal">STACK_OF(<ref refid="structx509__st" kindref="compound">X509</ref>)<sp/>*TS_CONF_load_certs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><ref refid="structevp__pkey__st" kindref="compound">EVP_PKEY</ref><sp/>*TS_CONF_load_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TS_CONF_get_tsa_section(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_serial(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/>TS_serial_cb<sp/>cb,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_crypto_device(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_default_engine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_signer_cert(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cert,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_certs(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*certs,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_signer_key(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pass,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_def_policy(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*policy,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_policies(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_digests(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_accuracy(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_clock_precision_digits(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_ordering(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_tsa_name(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TS_CONF_set_ess_cert_id_chain(<ref refid="structconf__st" kindref="compound">CONF</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_s__resp__ctx" kindref="compound">TS_RESP_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_TS_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>TS<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_D2I_TS_RESP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_DEF_SERIAL_CB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_DEF_TIME_CB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_ESS_ADD_SIGNING_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_ESS_CERT_ID_NEW_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_ESS_SIGNING_CERT_NEW_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_INT_TS_RESP_VERIFY_TOKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>149</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_PKCS7_TO_TS_TST_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>148</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_ACCURACY_SET_MICROS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_ACCURACY_SET_MILLIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_ACCURACY_SET_SECONDS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CHECK_IMPRINTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CHECK_NONCES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CHECK_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CHECK_SIGNING_CERTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CHECK_STATUS_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_COMPUTE_IMPRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_CONF_SET_DEFAULT_ENGINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_GET_STATUS_TEXT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_MSG_IMPRINT_SET_ALGO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_REQ_SET_MSG_IMPRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_REQ_SET_NONCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_REQ_SET_POLICY_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CREATE_RESPONSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CREATE_TST_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_ADD_FAILURE_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_ADD_MD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_ADD_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_SET_ACCURACY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_SET_CERTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_SET_DEF_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_SET_SIGNER_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_CTX_SET_STATUS_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_GET_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION<sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_SET_STATUS_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_SET_TST_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_VERIFY_SIGNATURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_RESP_VERIFY_TOKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_ACCURACY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_MSG_IMPRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_NONCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_POLICY_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_SERIAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>142</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_TST_INFO_SET_TSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>143</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_VERIFY_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_F_TS_VERIFY_CTX_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>144</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_BAD_PKCS7_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_BAD_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_CERTIFICATE_VERIFY_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_COULD_NOT_SET_ENGINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_COULD_NOT_SET_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_D2I_TS_RESP_INT_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_DETACHED_CONTENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_ESS_ADD_SIGNING_CERT_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_ESS_SIGNING_CERTIFICATE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_INVALID_NULL_POINTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE<sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_MESSAGE_IMPRINT_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_NONCE_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_NONCE_NOT_RETURNED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_NO_CONTENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_NO_TIME_STAMP_TOKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_PKCS7_ADD_SIGNATURE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_PKCS7_TO_TS_TST_INFO_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_POLICY_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE<sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_RESPONSE_SETUP_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_SIGNATURE_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_THERE_MUST_BE_ONE_SIGNER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TIME_SYSCALL_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TOKEN_NOT_PRESENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TOKEN_PRESENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TSA_NAME_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TSA_UNTRUSTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TST_INFO_SETUP_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_TS_DATASIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_UNACCEPTABLE_POLICY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_UNSUPPORTED_MD_ALGORITHM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_UNSUPPORTED_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TS_R_WRONG_CONTENT_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/ts.h"/>
  </compounddef>
</doxygen>
