<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_struct_tree_root_8cc" kind="file" language="C++">
    <compoundname>StructTreeRoot.cc</compoundname>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="_struct_tree_root_8h" local="yes">StructTreeRoot.h</includes>
    <includes refid="_struct_element_8h" local="yes">StructElement.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_dict_8h" local="yes">Dict.h</includes>
    <includes local="no">set</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="90286">
        <label>stdarg.h</label>
      </node>
      <node id="90309">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90293" relation="include">
        </childnode>
      </node>
      <node id="90310">
        <label>assert.h</label>
      </node>
      <node id="90315">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90302" relation="include">
        </childnode>
        <childnode refid="90313" relation="include">
        </childnode>
      </node>
      <node id="90308">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90309" relation="include">
        </childnode>
        <childnode refid="90310" relation="include">
        </childnode>
        <childnode refid="90311" relation="include">
        </childnode>
      </node>
      <node id="90312">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90284" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90306" relation="include">
        </childnode>
      </node>
      <node id="90303">
        <label>StructElement.h</label>
        <link refid="_struct_element_8h_source"/>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90284" relation="include">
        </childnode>
        <childnode refid="90304" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90313" relation="include">
        </childnode>
        <childnode refid="90293" relation="include">
        </childnode>
      </node>
      <node id="90287">
        <label>stdlib.h</label>
      </node>
      <node id="90295">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90290" relation="include">
        </childnode>
        <childnode refid="90289" relation="include">
        </childnode>
      </node>
      <node id="90314">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90290" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
        <childnode refid="90315" relation="include">
        </childnode>
        <childnode refid="90316" relation="include">
        </childnode>
        <childnode refid="90317" relation="include">
        </childnode>
        <childnode refid="90318" relation="include">
        </childnode>
        <childnode refid="90319" relation="include">
        </childnode>
        <childnode refid="90320" relation="include">
        </childnode>
        <childnode refid="90302" relation="include">
        </childnode>
      </node>
      <node id="90298">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
      </node>
      <node id="90316">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
        <childnode refid="90313" relation="include">
        </childnode>
      </node>
      <node id="90304">
        <label>MarkedContentOutputDev.h</label>
        <link refid="_marked_content_output_dev_8h_source"/>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90295" relation="include">
        </childnode>
        <childnode refid="90305" relation="include">
        </childnode>
        <childnode refid="90308" relation="include">
        </childnode>
        <childnode refid="90312" relation="include">
        </childnode>
        <childnode refid="90313" relation="include">
        </childnode>
      </node>
      <node id="90311">
        <label>map</label>
      </node>
      <node id="90297">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90286" relation="include">
        </childnode>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90284" relation="include">
        </childnode>
      </node>
      <node id="90301">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
      </node>
      <node id="90318">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="90292" relation="include">
        </childnode>
      </node>
      <node id="90317">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
      </node>
      <node id="90285">
        <label>limits.h</label>
      </node>
      <node id="90289">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90290" relation="include">
        </childnode>
      </node>
      <node id="90296">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90302">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90290" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90299" relation="include">
        </childnode>
      </node>
      <node id="90300">
        <label>pthread.h</label>
      </node>
      <node id="90307">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="90292" relation="include">
        </childnode>
      </node>
      <node id="90294">
        <label>string.h</label>
      </node>
      <node id="90284">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90285" relation="include">
        </childnode>
        <childnode refid="90286" relation="include">
        </childnode>
        <childnode refid="90287" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
      </node>
      <node id="90319">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90318" relation="include">
        </childnode>
        <childnode refid="90293" relation="include">
        </childnode>
      </node>
      <node id="90292">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90293" relation="include">
        </childnode>
        <childnode refid="90290" relation="include">
        </childnode>
        <childnode refid="90294" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90295" relation="include">
        </childnode>
        <childnode refid="90284" relation="include">
        </childnode>
        <childnode refid="90296" relation="include">
        </childnode>
        <childnode refid="90297" relation="include">
        </childnode>
        <childnode refid="90298" relation="include">
        </childnode>
        <childnode refid="90301" relation="include">
        </childnode>
        <childnode refid="90302" relation="include">
        </childnode>
      </node>
      <node id="90313">
        <label>vector</label>
      </node>
      <node id="90305">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90306" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90307" relation="include">
        </childnode>
      </node>
      <node id="90299">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90300" relation="include">
        </childnode>
      </node>
      <node id="90306">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="90288">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90289" relation="include">
        </childnode>
      </node>
      <node id="90283">
        <label>thirdparty/poppler/poppler/StructTreeRoot.cc</label>
        <link refid="_struct_tree_root_8cc"/>
        <childnode refid="90284" relation="include">
        </childnode>
        <childnode refid="90291" relation="include">
        </childnode>
        <childnode refid="90303" relation="include">
        </childnode>
        <childnode refid="90314" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90301" relation="include">
        </childnode>
        <childnode refid="90293" relation="include">
        </childnode>
        <childnode refid="90310" relation="include">
        </childnode>
      </node>
      <node id="90293">
        <label>set</label>
      </node>
      <node id="90291">
        <label>StructTreeRoot.h</label>
        <link refid="_struct_tree_root_8h_source"/>
        <childnode refid="90288" relation="include">
        </childnode>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90303" relation="include">
        </childnode>
        <childnode refid="90313" relation="include">
        </childnode>
      </node>
      <node id="90320">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="90292" relation="include">
        </childnode>
        <childnode refid="90306" relation="include">
        </childnode>
      </node>
      <node id="90290">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StructTreeRoot.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2013,<sp/>2014<sp/>Igalia<sp/>S.L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StructTreeRoot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StructElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Dict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">StructTreeRoot::StructTreeRoot(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*structTreeRootDict):</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>doc(docA)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>assert(doc);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>assert(structTreeRootDict);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>parse(structTreeRootDict);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">StructTreeRoot::~StructTreeRoot()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ElemPtrArray::iterator<sp/>i<sp/>=<sp/>elements.begin();<sp/>i<sp/>!=<sp/>elements.end();<sp/>++i)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>classMap.free();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>roleMap.free();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StructTreeRoot::parse(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*root)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>RoleMap/ClassMap<sp/>dictionaries<sp/>are<sp/>needed<sp/>by<sp/>all<sp/>the<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>functions,<sp/>which<sp/>will<sp/>resolve<sp/>the<sp/>custom<sp/>names<sp/>to<sp/>canonical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>standard<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>root-&gt;lookup(</highlight><highlight class="stringliteral">&quot;RoleMap&quot;</highlight><highlight class="normal">,<sp/>&amp;roleMap);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>root-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ClassMap&quot;</highlight><highlight class="normal">,<sp/>&amp;classMap);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ParentTree<sp/>(optional).<sp/>If<sp/>present,<sp/>it<sp/>must<sp/>be<sp/>a<sp/>number<sp/>tree,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>it<sp/>is<sp/>not<sp/>possible<sp/>to<sp/>map<sp/>stream<sp/>objects<sp/>to<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponsing<sp/>structure<sp/>element.<sp/>Here<sp/>only<sp/>the<sp/>references<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loaded<sp/>into<sp/>the<sp/>array,<sp/>the<sp/>pointers<sp/>to<sp/>the<sp/>StructElements<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>filled-in<sp/>later<sp/>when<sp/>parsing<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ParentTree&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>nums;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.dictLookup(</highlight><highlight class="stringliteral">&quot;Nums&quot;</highlight><highlight class="normal">,<sp/>&amp;nums)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nums.arrayGetLength()<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTree.resize(nums.arrayGetLength()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>numbers<sp/>in<sp/>even<sp/>positions,<sp/>references<sp/>in<sp/>odd<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nums.arrayGetLength();<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>index,<sp/>value;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nums.arrayGet(i,<sp/>&amp;index)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>item<sp/>at<sp/>position<sp/>{0:d}<sp/>is<sp/>wrong<sp/>type<sp/>({1:s})&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>index.getTypeName());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index.free();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.getInt()<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>item<sp/>at<sp/>position<sp/>{0:d}<sp/>is<sp/>invalid<sp/>value<sp/>({1:d})&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>index.getInt());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index.free();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>index.getInt();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nums.arrayGetNF(i<sp/>+<sp/>1,<sp/>&amp;value)-&gt;isRef())<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTree[idx].resize(1);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTree[idx][0].ref<sp/>=<sp/>value.getRef();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nums.arrayGet(i<sp/>+<sp/>1,<sp/>&amp;value)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTree[idx].resize(value.arrayGetLength());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>value.arrayGetLength();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>itemvalue;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.arrayGetNF(j,<sp/>&amp;itemvalue)-&gt;isRef())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTree[idx][j].ref<sp/>=<sp/>itemvalue.getRef();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>array<sp/>item<sp/>at<sp/>position<sp/>{0:d}/{1:d}<sp/>is<sp/>invalid<sp/>type<sp/>({2:s})&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>j,<sp/>itemvalue.getTypeName());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemvalue.free();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>item<sp/>at<sp/>position<sp/>{0:d}<sp/>is<sp/>wrong<sp/>type<sp/>({1:s})&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>value.getTypeName());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.free();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index.free();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>array<sp/>length<sp/>is<sp/>not<sp/>a<sp/>even<sp/>({0:d})&quot;</highlight><highlight class="normal">,<sp/>nums.arrayGetLength());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Nums<sp/>object<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>nums.getTypeName());</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>nums.free();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>seenElements;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>children<sp/>StructElements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GBool<sp/>marked<sp/>=<sp/>doc-&gt;getCatalog()-&gt;getMarkInfo()<sp/>&amp;<sp/>Catalog::markInfoMarked;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>kids;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;lookup(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;kids)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marked<sp/>&amp;&amp;<sp/>kids.arrayGetLength()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;K<sp/>in<sp/>StructTreeRoot<sp/>has<sp/>more<sp/>than<sp/>one<sp/>children<sp/>in<sp/>a<sp/>tagged<sp/>PDF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kids.arrayGetLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>ref;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kids.arrayGetNF(i,<sp/>&amp;ref);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.isRef())<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seenElements.insert(ref.getRefNum());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kids.arrayGet(i,<sp/>&amp;obj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(obj.getDict(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL,<sp/>seenElements);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marked<sp/>&amp;&amp;<sp/>!(child-&gt;getType()<sp/>==<sp/>StructElement::Document<sp/>||</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;getType()<sp/>==<sp/>StructElement::Part<sp/>||</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;getType()<sp/>==<sp/>StructElement::Art<sp/>||</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;getType()<sp/>==<sp/>StructElement::Div))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;StructTreeRoot<sp/>element<sp/>of<sp/>tagged<sp/>PDF<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>child-&gt;getTypeName());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendChild(child);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.isRef())<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTreeAdd(ref.getRef(),<sp/>child);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;StructTreeRoot<sp/>element<sp/>could<sp/>not<sp/>be<sp/>parsed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;K<sp/>has<sp/>a<sp/>child<sp/>of<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>obj.getTypeName());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.free();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kids.isDict())<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marked)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;K<sp/>has<sp/>a<sp/>child<sp/>of<sp/>wrong<sp/>type<sp/>for<sp/>a<sp/>tagged<sp/>PDF<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>kids.getTypeName());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*child<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(kids.getDict(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL,<sp/>seenElements);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appendChild(child);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>ref;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;ref)-&gt;isRef())</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentTreeAdd(ref.getRef(),<sp/>child);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ref.free();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;StructTreeRoot<sp/>element<sp/>could<sp/>not<sp/>be<sp/>parsed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!kids.isNull())<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;K<sp/>in<sp/>StructTreeRoot<sp/>is<sp/>wrong<sp/>type<sp/>({0:s})&quot;</highlight><highlight class="normal">,<sp/>kids.getTypeName());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>kids.free();</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StructTreeRoot::parentTreeAdd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>&amp;objectRef,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;<sp/>std::vector&lt;Parent&gt;<sp/>&gt;::iterator<sp/>i<sp/>=<sp/>parentTree.begin();<sp/>i<sp/>!=<sp/>parentTree.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Parent&gt;::iterator<sp/>j<sp/>=<sp/>i-&gt;begin();<sp/>j<sp/>!=<sp/>i-&gt;end();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;ref.num<sp/>==<sp/>objectRef.num<sp/>&amp;&amp;<sp/>j-&gt;ref.gen<sp/>==<sp/>objectRef.gen)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;element<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/StructTreeRoot.cc"/>
  </compounddef>
</doxygen>
