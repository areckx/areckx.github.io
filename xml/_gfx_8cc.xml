<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_gfx_8cc" kind="file" language="C++">
    <compoundname>Gfx.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_goo_timer_8h" local="yes">goo/GooTimer.h</includes>
    <includes refid="_goo_hash_8h" local="yes">goo/GooHash.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_char_types_8h" local="yes">CharTypes.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <includes refid="_array_8h" local="yes">Array.h</includes>
    <includes refid="_annot_8h" local="yes">Annot.h</includes>
    <includes refid="_dict_8h" local="yes">Dict.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2lexer_8h" local="yes">Lexer.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2parser_8h" local="yes">Parser.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_output_dev_8h" local="yes">OutputDev.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_profile_data_8h" local="yes">ProfileData.h</includes>
    <includes refid="_catalog_8h" local="yes">Catalog.h</includes>
    <includes refid="_optional_content_8h" local="yes">OptionalContent.h</includes>
    <incdepgraph>
      <node id="87194">
        <label>stdarg.h</label>
      </node>
      <node id="87212">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87191" relation="include">
        </childnode>
      </node>
      <node id="87186">
        <label>assert.h</label>
      </node>
      <node id="87201">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87199" relation="include">
        </childnode>
        <childnode refid="87202" relation="include">
        </childnode>
      </node>
      <node id="87211">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87212" relation="include">
        </childnode>
        <childnode refid="87186" relation="include">
        </childnode>
        <childnode refid="87213" relation="include">
        </childnode>
      </node>
      <node id="87210">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87192" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87187" relation="include">
        </childnode>
      </node>
      <node id="87175">
        <label>stdlib.h</label>
      </node>
      <node id="87180">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87181" relation="include">
        </childnode>
      </node>
      <node id="87200">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
        <childnode refid="87201" relation="include">
        </childnode>
        <childnode refid="87203" relation="include">
        </childnode>
        <childnode refid="87204" relation="include">
        </childnode>
        <childnode refid="87205" relation="include">
        </childnode>
        <childnode refid="87206" relation="include">
        </childnode>
        <childnode refid="87207" relation="include">
        </childnode>
        <childnode refid="87199" relation="include">
        </childnode>
      </node>
      <node id="87197">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
      </node>
      <node id="87203">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
        <childnode refid="87202" relation="include">
        </childnode>
      </node>
      <node id="87185">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="87186" relation="include">
        </childnode>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87187" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
      </node>
      <node id="87213">
        <label>map</label>
      </node>
      <node id="87208">
        <label>Lexer.h</label>
        <link refid="thirdparty_2poppler_2poppler_2lexer_8h_source"/>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87199" relation="include">
        </childnode>
      </node>
      <node id="87196">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="87194" relation="include">
        </childnode>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87192" relation="include">
        </childnode>
      </node>
      <node id="87216">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87217" relation="include">
        </childnode>
        <childnode refid="87211" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87215" relation="include">
        </childnode>
        <childnode refid="87202" relation="include">
        </childnode>
      </node>
      <node id="87217">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="87183" relation="include">
        </childnode>
      </node>
      <node id="87198">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
      </node>
      <node id="87205">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="87190" relation="include">
        </childnode>
      </node>
      <node id="87177">
        <label>stddef.h</label>
      </node>
      <node id="87218">
        <label>ProfileData.h</label>
        <link refid="_profile_data_8h_source"/>
      </node>
      <node id="87204">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
      </node>
      <node id="87209">
        <label>Parser.h</label>
        <link refid="thirdparty_2poppler_2poppler_2parser_8h_source"/>
        <childnode refid="87208" relation="include">
        </childnode>
      </node>
      <node id="87193">
        <label>limits.h</label>
      </node>
      <node id="87181">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="87176" relation="include">
        </childnode>
      </node>
      <node id="87195">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="87199">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87188" relation="include">
        </childnode>
      </node>
      <node id="87189">
        <label>pthread.h</label>
      </node>
      <node id="87215">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="87190" relation="include">
        </childnode>
      </node>
      <node id="87178">
        <label>string.h</label>
      </node>
      <node id="87192">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="87193" relation="include">
        </childnode>
        <childnode refid="87194" relation="include">
        </childnode>
        <childnode refid="87175" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
      </node>
      <node id="87206">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87205" relation="include">
        </childnode>
        <childnode refid="87191" relation="include">
        </childnode>
      </node>
      <node id="87190">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="87191" relation="include">
        </childnode>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87178" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87180" relation="include">
        </childnode>
        <childnode refid="87192" relation="include">
        </childnode>
        <childnode refid="87195" relation="include">
        </childnode>
        <childnode refid="87196" relation="include">
        </childnode>
        <childnode refid="87197" relation="include">
        </childnode>
        <childnode refid="87198" relation="include">
        </childnode>
        <childnode refid="87199" relation="include">
        </childnode>
      </node>
      <node id="87202">
        <label>vector</label>
      </node>
      <node id="87214">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
        <childnode refid="87187" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87215" relation="include">
        </childnode>
      </node>
      <node id="87179">
        <label>math.h</label>
      </node>
      <node id="87188">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="87189" relation="include">
        </childnode>
      </node>
      <node id="87187">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="87182">
        <label>goo/GooTimer.h</label>
        <link refid="_goo_timer_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
        <childnode refid="87183" relation="include">
        </childnode>
      </node>
      <node id="87183">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="87181" relation="include">
        </childnode>
      </node>
      <node id="87191">
        <label>set</label>
      </node>
      <node id="87174">
        <label>config.h</label>
      </node>
      <node id="87173">
        <label>thirdparty/poppler/poppler/Gfx.cc</label>
        <link refid="_gfx_8cc"/>
        <childnode refid="87174" relation="include">
        </childnode>
        <childnode refid="87175" relation="include">
        </childnode>
        <childnode refid="87176" relation="include">
        </childnode>
        <childnode refid="87177" relation="include">
        </childnode>
        <childnode refid="87178" relation="include">
        </childnode>
        <childnode refid="87179" relation="include">
        </childnode>
        <childnode refid="87180" relation="include">
        </childnode>
        <childnode refid="87182" relation="include">
        </childnode>
        <childnode refid="87184" relation="include">
        </childnode>
        <childnode refid="87185" relation="include">
        </childnode>
        <childnode refid="87187" relation="include">
        </childnode>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87200" relation="include">
        </childnode>
        <childnode refid="87197" relation="include">
        </childnode>
        <childnode refid="87205" relation="include">
        </childnode>
        <childnode refid="87198" relation="include">
        </childnode>
        <childnode refid="87199" relation="include">
        </childnode>
        <childnode refid="87208" relation="include">
        </childnode>
        <childnode refid="87209" relation="include">
        </childnode>
        <childnode refid="87210" relation="include">
        </childnode>
        <childnode refid="87211" relation="include">
        </childnode>
        <childnode refid="87214" relation="include">
        </childnode>
        <childnode refid="87204" relation="include">
        </childnode>
        <childnode refid="87196" relation="include">
        </childnode>
        <childnode refid="87216" relation="include">
        </childnode>
        <childnode refid="87218" relation="include">
        </childnode>
        <childnode refid="87203" relation="include">
        </childnode>
        <childnode refid="87207" relation="include">
        </childnode>
      </node>
      <node id="87207">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="87190" relation="include">
        </childnode>
        <childnode refid="87187" relation="include">
        </childnode>
      </node>
      <node id="87176">
        <label>stdio.h</label>
      </node>
      <node id="87184">
        <label>goo/GooHash.h</label>
        <link refid="_goo_hash_8h_source"/>
        <childnode refid="87183" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_marked_content_stack" prot="public">MarkedContentStack</innerclass>
    <innerclass refid="struct_gfx_stack_state_saver" prot="public">GfxStackStateSaver</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_gfx_8cc_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="84" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1a4cd79c5a34b16bba13b83d7ed0a788c8" prot="public" static="no">
        <name>functionMaxDepth</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="92" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1ad9bea27273114ab5621389c7c9874077" prot="public" static="no">
        <name>functionColorDelta</name>
        <initializer>(dblToCol(1 / 256.0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="95" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1ac28855191be49dcfc333e9ccfa86493b" prot="public" static="no">
        <name>axialMaxSplits</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="98" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1a77bd96fab86ba839b7ccc178eb3578a6" prot="public" static="no">
        <name>axialColorDelta</name>
        <initializer>(dblToCol(1 / 256.0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="101" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1a25c2292460d8986c36ec41bde6597f0a" prot="public" static="no">
        <name>radialMaxSplits</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="104" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1ae4f1a68fcaf55ec92a0ec4f13aa05bc8" prot="public" static="no">
        <name>radialColorDelta</name>
        <initializer>(dblToCol(1 / 256.0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="107" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1ad9091a713a114f869c577e584265a8c1" prot="public" static="no">
        <name>gouraudMaxDepth</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="114" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1aac7fa7bc91e59d8ccb215d5e33c05c98" prot="public" static="no">
        <name>gouraudColorDelta</name>
        <initializer>(dblToCol(3. / 256.0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="118" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1a9dcadd233bb308cd5e401176cf287d0e" prot="public" static="no">
        <name>gouraudParameterizedColorDelta</name>
        <initializer>5e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="122" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1aaa41905f0e5a32aa422a66b3665f39d7" prot="public" static="no">
        <name>patchMaxDepth</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="125" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1ac21c7dd6f87bed585a7599b38c35e06d" prot="public" static="no">
        <name>patchColorDelta</name>
        <initializer>(dblToCol((3. / 256.0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="129" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_gfx_8cc_1a5effd4786bf5fd582beb37af7140e627" prot="public" static="no">
        <name>numOps</name>
        <initializer>(sizeof(opTab) / sizeof(<ref refid="struct_operator" kindref="compound">Operator</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="312" column="9" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_gfx_8cc_1a603dcfdfe0bdf9cbef70e491e66b19c3" prot="public" static="no">
        <name>GfxMarkedContentKind</name>
        <enumvalue id="_gfx_8cc_1a603dcfdfe0bdf9cbef70e491e66b19c3aaca43a379fb095e8b1c5f9e1613f3b7b" prot="public">
          <name>gfxMCOptionalContent</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gfx_8cc_1a603dcfdfe0bdf9cbef70e491e66b19c3aa2642851fa4b9a69321b14e29bec7a98" prot="public">
          <name>gfxMCActualText</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_gfx_8cc_1a603dcfdfe0bdf9cbef70e491e66b19c3a1e18c1399ef2599c667ca7b580f471a2" prot="public">
          <name>gfxMCOther</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="5129" column="1" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="5129" bodyend="5133"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_gfx_8cc_1a0c9924c9f9ed2d054b7a23d284eb3ce4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GBool</type>
        <definition>static GBool isSameGfxColor</definition>
        <argsstring>(const GfxColor &amp;colorA, const GfxColor &amp;colorB, Guint nComps, double delta)</argsstring>
        <name>isSameGfxColor</name>
        <param>
          <type>const <ref refid="struct_gfx_color" kindref="compound">GfxColor</ref> &amp;</type>
          <declname>colorA</declname>
        </param>
        <param>
          <type>const <ref refid="struct_gfx_color" kindref="compound">GfxColor</ref> &amp;</type>
          <declname>colorB</declname>
        </param>
        <param>
          <type>Guint</type>
          <declname>nComps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="314" column="1" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="314" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_8cc_1a0974deecfe01e398b5c20a7b662c9f2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bubbleSort</definition>
        <argsstring>(double array[])</argsstring>
        <name>bubbleSort</name>
        <param>
          <type>double</type>
          <declname>array</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="2646" column="1" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="2646" bodyend="2659"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_8cc_1ae5cc480f70b2a1f33035ff5593e44873" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void getShadingColorRadialHelper</definition>
        <argsstring>(double t0, double t1, double t, GfxRadialShading *shading, GfxColor *color)</argsstring>
        <name>getShadingColorRadialHelper</name>
        <param>
          <type>double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref> *</type>
          <declname>shading</declname>
        </param>
        <param>
          <type><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref> *</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="2948" column="1" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="2948" bodyend="2967"/>
      </memberdef>
      <memberdef kind="function" id="_gfx_8cc_1ae856f85c745c9c2c8f5bd0d309383ab8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void checkTrue</definition>
        <argsstring>(bool b, const char *message)</argsstring>
        <name>checkTrue</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/Gfx.cc" line="3375" column="1" bodyfile="thirdparty/poppler/poppler/Gfx.cc" bodystart="3375" bodyend="3379"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gfx.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2013<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Jonathan<sp/>Blandford<sp/>&lt;jrb@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005-2013,<sp/>2015,<sp/>2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Thorkild<sp/>Stray<sp/>&lt;thorkild@ifi.uio.no&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2011<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2007<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2008<sp/>Brad<sp/>Hards<sp/>&lt;bradh@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2011<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2008<sp/>Iñigo<sp/>Martínez<sp/>&lt;inigomartinez@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Krzysztof<sp/>Kowalczyk<sp/>&lt;kkowalczyk@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Michael<sp/>Vrable<sp/>&lt;mvrable@cs.ucsd.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>M<sp/>Joonas<sp/>Pihlaja<sp/>&lt;jpihlaja@cc.helsinki.fi&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009-2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2010<sp/>David<sp/>Benjamin<sp/>&lt;davidben@mit.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Nils<sp/>Höglund<sp/>&lt;nils.hoglund@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Christian<sp/>Feuersänger<sp/>&lt;cfeuersaenger@googlemail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Axel<sp/>Strübing<sp/>&lt;axel.struebing@freenet.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Even<sp/>Rouault<sp/>&lt;even.rouault@mines-paris.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Lu<sp/>Wang<sp/>&lt;coolwanglu@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooTimer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooHash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CharTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Annot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Dict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Annot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ProfileData.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Catalog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OptionalContent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>MSVC<sp/>math.h<sp/>doesn&apos;t<sp/>define<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/>3.14159265358979323846</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>recursive<sp/>depth<sp/>for<sp/>a<sp/>function<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>functionMaxDepth<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>delta<sp/>allowed<sp/>in<sp/>any<sp/>color<sp/>component<sp/>for<sp/>a<sp/>function<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>functionColorDelta<sp/>(dblToCol(1<sp/>/<sp/>256.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>number<sp/>of<sp/>splits<sp/>along<sp/>the<sp/>t<sp/>axis<sp/>for<sp/>an<sp/>axial<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>axialMaxSplits<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>delta<sp/>allowed<sp/>in<sp/>any<sp/>color<sp/>component<sp/>for<sp/>an<sp/>axial<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>axialColorDelta<sp/>(dblToCol(1<sp/>/<sp/>256.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>number<sp/>of<sp/>splits<sp/>along<sp/>the<sp/>t<sp/>axis<sp/>for<sp/>a<sp/>radial<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>radialMaxSplits<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>delta<sp/>allowed<sp/>in<sp/>any<sp/>color<sp/>component<sp/>for<sp/>a<sp/>radial<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>radialColorDelta<sp/>(dblToCol(1<sp/>/<sp/>256.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>recursive<sp/>depth<sp/>for<sp/>a<sp/>Gouraud<sp/>triangle<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangles<sp/>will<sp/>be<sp/>split<sp/>at<sp/>most<sp/>gouraudMaxDepth<sp/>times<sp/>(each<sp/>time<sp/>into<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>smaller<sp/>ones).<sp/>That<sp/>makes<sp/>pow(4,gouraudMaxDepth)<sp/>many<sp/>triangles<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>every<sp/>triangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>gouraudMaxDepth<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>delta<sp/>allowed<sp/>in<sp/>any<sp/>color<sp/>component<sp/>for<sp/>a<sp/>Gouraud<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>gouraudColorDelta<sp/>(dblToCol(3.<sp/>/<sp/>256.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gouraud<sp/>triangle:<sp/>if<sp/>the<sp/>three<sp/>color<sp/>parameters<sp/>differ<sp/>by<sp/>at<sp/>more<sp/>than<sp/>this<sp/>percend<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>total<sp/>color<sp/>parameter<sp/>range,<sp/>the<sp/>triangle<sp/>will<sp/>be<sp/>refined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>gouraudParameterizedColorDelta<sp/>5e-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>recursive<sp/>depth<sp/>for<sp/>a<sp/>patch<sp/>mesh<sp/>shading<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>patchMaxDepth<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>delta<sp/>allowed<sp/>in<sp/>any<sp/>color<sp/>component<sp/>for<sp/>a<sp/>patch<sp/>mesh<sp/>shading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>patchColorDelta<sp/>(dblToCol((3.<sp/>/<sp/>256.0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Operator<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER<sp/>//<sp/>this<sp/>works<sp/>around<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>VC7<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>optimize(&quot;&quot;,off)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="struct_operator" kindref="compound">Operator</ref><sp/>Gfx::opTab[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/>3,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkString},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opMoveSetShowText},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkString},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opMoveShowText},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opFillStroke},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;B*&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEOFillStroke},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BDC&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>{tchkName,<sp/><sp/><sp/>tchkProps},</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opBeginMarkedContent},</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BI&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opBeginImage},</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BMC&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opBeginMarkedContent},</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BT&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opBeginText},</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BX&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opBeginIgnoreUndef},</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeColorSpace},</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DP&quot;</highlight><highlight class="normal">,<sp/><sp/>2,<sp/>{tchkName,<sp/><sp/><sp/>tchkProps},</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opMarkPoint},</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Do&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opXObject},</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;EI&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEndImage},</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;EMC&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEndMarkedContent},</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ET&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEndText},</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;EX&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEndIgnoreUndef},</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opFill},</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeGray},</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opImageData},</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;J&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkInt},</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetLineCap},</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>4,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeCMYKColor},</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetMiterLimit},</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MP&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opMarkPoint},</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opRestore},</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;RG&quot;</highlight><highlight class="normal">,<sp/><sp/>3,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeRGBColor},</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opStroke},</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;SC&quot;</highlight><highlight class="normal">,<sp/><sp/>-4,<sp/>{tchkNum,<sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeColor},</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;SCN&quot;</highlight><highlight class="normal">,<sp/>-33,<sp/>{tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN},</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetStrokeColorN},</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;T*&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opTextNextLine},</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;TD&quot;</highlight><highlight class="normal">,<sp/><sp/>2,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opTextMoveSet},</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;TJ&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkArray},</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opShowSpaceText},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;TL&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetTextLeading},</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tc&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetCharSpacing},</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Td&quot;</highlight><highlight class="normal">,<sp/><sp/>2,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opTextMove},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tf&quot;</highlight><highlight class="normal">,<sp/><sp/>2,<sp/>{tchkName,<sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFont},</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tj&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkString},</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opShowText},</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tm&quot;</highlight><highlight class="normal">,<sp/><sp/>6,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetTextMatrix},</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tr&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkInt},</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetTextRender},</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Ts&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetTextRise},</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tw&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetWordSpacing},</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Tz&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetHorizScaling},</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opClip},</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;W*&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEOClip},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCloseFillStroke},</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;b*&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCloseEOFillStroke},</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>6,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCurveTo},</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">,<sp/><sp/>6,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opConcat},</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillColorSpace},</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>2,<sp/>{tchkArray,<sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetDash},</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;d0&quot;</highlight><highlight class="normal">,<sp/><sp/>2,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetCharWidth},</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;d1&quot;</highlight><highlight class="normal">,<sp/><sp/>6,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetCacheDevice},</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opFill},</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;f*&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEOFill},</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillGray},</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;gs&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetExtGState},</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opClosePath},</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFlat},</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkInt},</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetLineJoin},</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>4,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillCMYKColor},</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>2,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opLineTo},</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>2,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opMoveTo},</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opEndPath},</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSave},</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;re&quot;</highlight><highlight class="normal">,<sp/><sp/>4,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opRectangle},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;rg&quot;</highlight><highlight class="normal">,<sp/><sp/>3,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillRGBColor},</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ri&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetRenderingIntent},</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/>{tchkNone},</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCloseStroke},</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;sc&quot;</highlight><highlight class="normal">,<sp/><sp/>-4,<sp/>{tchkNum,<sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillColor},</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;scn&quot;</highlight><highlight class="normal">,<sp/>-33,<sp/>{tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,<sp/><sp/><sp/><sp/>tchkSCN,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchkSCN},</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetFillColorN},</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;sh&quot;</highlight><highlight class="normal">,<sp/><sp/>1,<sp/>{tchkName},</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opShFill},</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>4,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCurveTo1},</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1,<sp/>{tchkNum},</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opSetLineWidth},</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>4,<sp/>{tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum,<sp/><sp/><sp/><sp/>tchkNum},</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Gfx::opCurveTo2},</highlight></codeline>
<codeline lineno="306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER<sp/>//<sp/>this<sp/>works<sp/>around<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>VC7<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>optimize(&quot;&quot;,on)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>numOps<sp/>(sizeof(opTab)<sp/>/<sp/>sizeof(Operator))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GBool<sp/>isSameGfxColor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>&amp;colorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>&amp;colorB,<sp/>Guint<sp/>nComps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(colorA.c[k]<sp/>-<sp/>colorB.c[k])<sp/>&gt;<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GfxResources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">GfxResources::GfxResources(<ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDictA,<sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*nextA)<sp/>:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>gStateCache(2,<sp/>xref)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resDictA)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>font<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict<sp/>=<sp/>resDictA-&gt;copy(xref);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>fonts<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isRef())<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.fetch(xref,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isDict())<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>obj1.getRef();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>fonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_font_dict" kindref="compound">GfxFontDict</ref>(xref,<sp/>&amp;r,<sp/>obj2.getDict());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_font_dict" kindref="compound">GfxFontDict</ref>(xref,<sp/>NULL,<sp/>obj1.getDict());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>XObject<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XObject&quot;</highlight><highlight class="normal">,<sp/>&amp;xObjDict);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>color<sp/>space<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;colorSpaceDict);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>pattern<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal">,<sp/>&amp;patternDict);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>shading<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Shading&quot;</highlight><highlight class="normal">,<sp/>&amp;shadingDict);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>graphics<sp/>state<sp/>parameter<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ExtGState&quot;</highlight><highlight class="normal">,<sp/>&amp;gStateDict);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>properties<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Properties&quot;</highlight><highlight class="normal">,<sp/>&amp;propertiesDict);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>resDict;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>fonts<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>xObjDict.initNull();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpaceDict.initNull();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>patternDict.initNull();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>shadingDict.initNull();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>gStateDict.initNull();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>propertiesDict.initNull();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>nextA;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">GfxResources::~GfxResources()<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fonts)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fonts;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>xObjDict.free();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>colorSpaceDict.free();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>patternDict.free();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>shadingDict.free();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>gStateDict.free();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>propertiesDict.free();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*GfxResources::lookupFont(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;fonts)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((font<sp/>=<sp/>resPtr-&gt;fonts-&gt;lookup(name)))</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>font<sp/>tag<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">GBool<sp/>GfxResources::lookupXObject(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;xObjDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;xObjDict.dictLookup(name,<sp/>obj)-&gt;isNull())</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;XObject<sp/>&apos;{0:s}&apos;<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">GBool<sp/>GfxResources::lookupXObjectNF(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;xObjDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;xObjDict.dictLookupNF(name,<sp/>obj)-&gt;isNull())</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;XObject<sp/>&apos;{0:s}&apos;<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">GBool<sp/>GfxResources::lookupMarkedContentNF(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;propertiesDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;propertiesDict.dictLookupNF(name,<sp/>obj)-&gt;isNull())</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Marked<sp/>Content<sp/>&apos;{0:s}&apos;<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GfxResources::lookupColorSpace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;colorSpaceDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;colorSpaceDict.dictLookup(name,<sp/>obj)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>obj-&gt;initNull();</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*GfxResources::lookupPattern(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;patternDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;patternDict.dictLookup(name,<sp/>&amp;obj)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>GfxPattern::parse(resPtr,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>pattern<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*GfxResources::lookupShading(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;shadingDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;shadingDict.dictLookup(name,<sp/>&amp;obj)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>shading<sp/>=<sp/>GfxShading::parse(resPtr,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;ExtGState<sp/>&apos;{0:s}&apos;<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">GBool<sp/>GfxResources::lookupGState(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lookupGStateNF(name,<sp/>obj))</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;isRef())</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref<sp/>=<sp/>obj-&gt;getRef();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gStateCache.lookup(ref,<sp/>obj)-&gt;isNull())</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>gStateCache.put(ref)-&gt;copy(obj);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">GBool<sp/>GfxResources::lookupGStateNF(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(resPtr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>resPtr;<sp/>resPtr<sp/>=<sp/>resPtr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resPtr-&gt;gStateDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resPtr-&gt;gStateDict.dictLookupNF(name,<sp/>obj)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;free();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;ExtGState<sp/>&apos;{0:s}&apos;<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gfx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">Gfx::Gfx(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*outA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vDPI,<sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*box,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*cropBox,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbkA)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkDataA,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xrefA)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>(xrefA<sp/>==<sp/>NULL)<sp/>?<sp/>doc-&gt;getXRef()<sp/>:<sp/>xrefA;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>catalog<sp/>=<sp/>doc-&gt;getCatalog();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>subPage<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>printCommands<sp/>=<sp/>globalParams-&gt;getPrintCommands();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>profileCommands<sp/>=<sp/>globalParams-&gt;getProfileCommands();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>mcStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>the<sp/>resource<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref>(xref,<sp/>resDict,<sp/>NULL);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>outA;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref>(hDPI,<sp/>vDPI,<sp/>box,<sp/>rotate,<sp/>out-&gt;upsideDown());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>stackHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>pushStateGuard();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>clip<sp/>=<sp/>clipNone;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>ignoreUndef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>out-&gt;startPage(pageNum,<sp/>state,<sp/>xref);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>out-&gt;setDefaultCTM(state-&gt;getCTM());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>out-&gt;updateAll(state);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMatrix[i]<sp/>=<sp/>state-&gt;getCTM()[i];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>formDepth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>ocState<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>abortCheckCbk<sp/>=<sp/>abortCheckCbkA;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>abortCheckCbkData<sp/>=<sp/>abortCheckCbkDataA;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>crop<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cropBox)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(cropBox-&gt;x1,<sp/>cropBox-&gt;y1);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x2,<sp/>cropBox-&gt;y1);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x2,<sp/>cropBox-&gt;y2);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x1,<sp/>cropBox-&gt;y2);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>initDisplayProfile();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal">Gfx::Gfx(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA,<sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*outA,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*box,<sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*cropBox,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbkA)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkDataA,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xrefA)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>(xrefA<sp/>==<sp/>NULL)<sp/>?<sp/>doc-&gt;getXRef()<sp/>:<sp/>xrefA;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>catalog<sp/>=<sp/>doc-&gt;getCatalog();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>subPage<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>printCommands<sp/>=<sp/>globalParams-&gt;getPrintCommands();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>profileCommands<sp/>=<sp/>globalParams-&gt;getProfileCommands();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>mcStack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>the<sp/>resource<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref>(xref,<sp/>resDict,<sp/>NULL);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>outA;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref>(72,<sp/>72,<sp/>box,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>stackHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>pushStateGuard();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>clip<sp/>=<sp/>clipNone;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>ignoreUndef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMatrix[i]<sp/>=<sp/>state-&gt;getCTM()[i];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>formDepth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>ocState<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>abortCheckCbk<sp/>=<sp/>abortCheckCbkA;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>abortCheckCbkData<sp/>=<sp/>abortCheckCbkDataA;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>crop<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cropBox)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(cropBox-&gt;x1,<sp/>cropBox-&gt;y1);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x2,<sp/>cropBox-&gt;y1);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x2,<sp/>cropBox-&gt;y2);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(cropBox-&gt;x1,<sp/>cropBox-&gt;y2);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>initDisplayProfile();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_LCMS1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LCMS_FLAGS<sp/>cmsFLAGS_NOOPTIMIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::initDisplayProfile()<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>catDict;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/>xref-&gt;getCatalog(&amp;catDict);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>outputIntents;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>catDict.dictLookup(</highlight><highlight class="stringliteral">&quot;OutputIntents&quot;</highlight><highlight class="normal">,<sp/>&amp;outputIntents);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputIntents.isArray()<sp/>&amp;&amp;<sp/>outputIntents.arrayGetLength()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>firstElement;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputIntents.arrayGet(0,<sp/>&amp;firstElement);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstElement.isDict())<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>profile;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstElement.dictLookup(</highlight><highlight class="stringliteral">&quot;DestOutputProfile&quot;</highlight><highlight class="normal">,<sp/>&amp;profile);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile.isStream())<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*iccStream<sp/>=<sp/>profile.getStream();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*profBuf<sp/>=<sp/>iccStream-&gt;toUnsignedChars(&amp;length,<sp/>65536,<sp/>65536);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsHPROFILE<sp/>hp<sp/>=<sp/>cmsOpenProfileFromMem(profBuf,length);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>ICCBased<sp/>color<sp/>space<sp/>profile<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setDisplayProfile(hp);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(profBuf);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile.free();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstElement.free();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>outputIntents.free();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/>catDict.free();</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">Gfx::~Gfx()<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stateGuards.size())<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>popStateGuard();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!subPage)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endPage();</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>shouldn&apos;t<sp/>be<sp/>more<sp/>saves,<sp/>but<sp/>pop<sp/>them<sp/>if<sp/>there<sp/>were<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;hasSaves())<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>state<sp/>under<sp/>last<sp/>state<sp/>guard.<sp/>Popping.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(res)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>popResources();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mcStack)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>popMarkedContent();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::display(<ref refid="class_object" kindref="compound">Object</ref><sp/>*obj,<sp/>GBool<sp/>topLevel)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj2;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj-&gt;arrayGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isStream())<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Weird<sp/>page<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Weird<sp/>page<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(xref,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(xref,<sp/>obj),<sp/>gFalse);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>go(topLevel);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::go(GBool<sp/>topLevel)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>args[maxArgs];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs,<sp/>i;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastAbortCheck;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>a<sp/>sequence<sp/>of<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>pushStateGuard();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>updateLevel<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>even<sp/>empty<sp/>pages<sp/>trigger<sp/>a<sp/>call<sp/>to<sp/>dump()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>lastAbortCheck<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>numArgs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>parser-&gt;getObj(&amp;obj);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!obj.isEOF())<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>commandAborted<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>got<sp/>a<sp/>command<sp/>-<sp/>execute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isCmd())<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.print(stdout);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[i].print(stdout);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_timer" kindref="compound">GooTimer</ref><sp/>timer;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>execOp(&amp;obj,<sp/>args,<sp/>numArgs);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>profile<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profileCommands)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref><sp/>*hash;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>out-&gt;getProfileHash<sp/>();</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*cmd_g;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_profile_data" kindref="compound">ProfileData</ref><sp/>*data_p;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmd_g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>(obj.getCmd());</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_p<sp/>=<sp/>(<ref refid="class_profile_data" kindref="compound">ProfileData</ref><sp/>*)hash-&gt;lookup<sp/>(cmd_g);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_profile_data" kindref="compound">ProfileData</ref>();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;add<sp/>(cmd_g,<sp/>data_p);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_p-&gt;addElement(timer.getElapsed<sp/>());</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].free();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numArgs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>periodically<sp/>update<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++updateLevel<sp/>&gt;=<sp/>20000)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;dump();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>updateLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>the<sp/>command<sp/>throw<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commandAborted)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>propogate;<sp/>recursive<sp/>drawing<sp/>comes<sp/>from<sp/>Form<sp/>XObjects<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>probably<sp/>be<sp/>drawn<sp/>in<sp/>a<sp/>separate<sp/>context<sp/>anyway<sp/>for<sp/>caching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>commandAborted<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>an<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abortCheckCbk)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateLevel<sp/>-<sp/>lastAbortCheck<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*abortCheckCbk)(abortCheckCbkData))<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastAbortCheck<sp/>=<sp/>updateLevel;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>got<sp/>an<sp/>argument<sp/>-<sp/>save<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&lt;<sp/>maxArgs)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[numArgs++]<sp/>=<sp/>obj;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too<sp/>many<sp/>arguments<sp/>-<sp/>something<sp/>is<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>args<sp/>in<sp/>content<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;throwing<sp/>away<sp/>arg:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.print(stdout);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>grab<sp/>the<sp/>next<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>args<sp/>at<sp/>end<sp/>with<sp/>no<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Leftover<sp/>args<sp/>in<sp/>content<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>leftovers:&quot;</highlight><highlight class="normal">,<sp/>numArgs);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].print(stdout);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[i].free();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>popStateGuard();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(topLevel<sp/>&amp;&amp;<sp/>updateLevel<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;dump();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::execOp(<ref refid="class_object" kindref="compound">Object</ref><sp/>*cmd,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="struct_operator" kindref="compound">Operator</ref><sp/>*op;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*argPtr;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>cmd-&gt;getCmd();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(op<sp/>=<sp/>findOp(name)))<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ignoreUndef<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>operator<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>check<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>argPtr<sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;numArgs<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&lt;<sp/>op-&gt;numArgs)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>few<sp/>({0:d})<sp/>args<sp/>to<sp/>&apos;{1:s}&apos;<sp/>operator&quot;</highlight><highlight class="normal">,<sp/>numArgs,<sp/>name);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandAborted<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>op-&gt;numArgs)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>getPos(),</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>({0:d})<sp/>args<sp/>to<sp/>&apos;{1:s}&apos;<sp/>operator&quot;</highlight><highlight class="normal">,<sp/>numArgs,<sp/>name);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argPtr<sp/>+=<sp/>numArgs<sp/>-<sp/>op-&gt;numArgs;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numArgs<sp/>=<sp/>op-&gt;numArgs;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>-op-&gt;numArgs)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>({0:d})<sp/>args<sp/>to<sp/>&apos;{1:s}&apos;<sp/>operator&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numArgs,<sp/>name);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!checkArg(&amp;argPtr[i],<sp/>op-&gt;tchk[i]))<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Arg<sp/>#{0:d}<sp/>to<sp/>&apos;{1:s}&apos;<sp/>operator<sp/>is<sp/>wrong<sp/>type<sp/>({2:s})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>name,<sp/>argPtr[i].getTypeName());</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>(this-&gt;*op-&gt;func)(argPtr,<sp/>numArgs);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><ref refid="struct_operator" kindref="compound">Operator</ref><sp/>*Gfx::findOp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>m,<sp/>cmp;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>numOps;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:<sp/>opTab[a]<sp/>&lt;<sp/>name<sp/>&lt;<sp/>opTab[b]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b<sp/>-<sp/>a<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(a<sp/>+<sp/>b)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>strcmp(opTab[m].name,<sp/>name);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>b<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;opTab[a];</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">GBool<sp/>Gfx::checkArg(<ref refid="class_object" kindref="compound">Object</ref><sp/>*arg,<sp/>TchkType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkBool:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isBool();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkInt:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isInt();</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkNum:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isNum();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkString:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isString();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkName:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isName();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkArray:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isArray();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkProps:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isDict()<sp/>||<sp/>arg-&gt;isName();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkSCN:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg-&gt;isNum()<sp/>||<sp/>arg-&gt;isName();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tchkNone:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">Goffset<sp/>Gfx::getPos()<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parser<sp/>?<sp/>parser-&gt;getPos()<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>graphics<sp/>state<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSave(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>saveState();</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opRestore(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opConcat(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(args[0].getNum(),<sp/>args[1].getNum(),</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[2].getNum(),<sp/>args[3].getNum(),</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[4].getNum(),<sp/>args[5].getNum());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>out-&gt;updateCTM(state,<sp/>args[0].getNum(),<sp/>args[1].getNum(),</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[2].getNum(),<sp/>args[3].getNum(),</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[4].getNum(),<sp/>args[5].getNum());</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetDash(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*a;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dash;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>args[0].getArray();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>a-&gt;getLength();</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>dash<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>dash<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;get(i,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isNum())<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>dash[i]<sp/>=<sp/>obj.getNum();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>state-&gt;setLineDash(dash,<sp/>length,<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>out-&gt;updateLineDash(state);</highlight></codeline>
<codeline lineno="993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFlat(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>state-&gt;setFlatness((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)args[0].getNum());</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>out-&gt;updateFlatness(state);</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetLineJoin(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>state-&gt;setLineJoin(args[0].getInt());</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>out-&gt;updateLineJoin(state);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetLineCap(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>state-&gt;setLineCap(args[0].getInt());</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>out-&gt;updateLineCap(state);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetMiterLimit(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>state-&gt;setMiterLimit(args[0].getNum());</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>out-&gt;updateMiterLimit(state);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetLineWidth(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>state-&gt;setLineWidth(args[0].getNum());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>out-&gt;updateLineWidth(state);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetExtGState(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3,<sp/>obj4,<sp/>obj5;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>args2[2];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>GfxBlendMode<sp/>mode;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>GBool<sp/>haveFillOP;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*funcs[4];</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>backdropColor;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>GBool<sp/>haveBackdropColor;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>GBool<sp/>alpha,<sp/>isolated,<sp/>knockout;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>opac;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res-&gt;lookupGState(args[0].getName(),<sp/>&amp;obj1))<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;ExtGState<sp/>&apos;{0:s}&apos;<sp/>is<sp/>wrong<sp/>type&quot;</highlight><highlight class="normal">,<sp/>args[0].getName());</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>gfx<sp/>state<sp/>dict:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.print();</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters<sp/>that<sp/>are<sp/>also<sp/>set<sp/>by<sp/>individual<sp/>PDF<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LW&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineWidth(&amp;obj2,<sp/>1);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineCap(&amp;obj2,<sp/>1);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LJ&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineJoin(&amp;obj2,<sp/>1);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;ML&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetMiterLimit(&amp;obj2,<sp/>1);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;args2[0]);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;args2[1]);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args2[0].isArray()<sp/>&amp;&amp;<sp/>args2[1].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opSetDash(args2,<sp/>2);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>args2[0].free();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>args2[1].free();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//~<sp/>need<sp/>to<sp/>add<sp/>a<sp/>new<sp/>version<sp/>of<sp/>GfxResources::lookupFont()<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>takes<sp/>an<sp/>indirect<sp/>ref<sp/>instead<sp/>of<sp/>a<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(0,<sp/>&amp;args2[0]);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.arrayGet(1,<sp/>&amp;args2[1]);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args2[0].isDict()<sp/>&amp;&amp;<sp/>args2[1].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opSetFont(args2,<sp/>2);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>args2[0].free();</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>args2[1].free();</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;FL&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetFlat(&amp;obj2,<sp/>1);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transparency<sp/>support:<sp/>blend<sp/>mode,<sp/>fill/stroke<sp/>opacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;BM&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;parseBlendMode(&amp;obj2,<sp/>&amp;mode))<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setBlendMode(mode);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateBlendMode(state);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>blend<sp/>mode<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;ca&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillOpacity(opac<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>opac<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>opac);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillOpacity(state);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;CA&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeOpacity(opac<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>opac<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>opac);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeOpacity(state);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill/stroke<sp/>overprint,<sp/>overprint<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveFillOP<sp/>=<sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;op&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())))<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillOverprint(obj2.getBool());</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillOverprint(state);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;OP&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeOverprint(obj2.getBool());</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeOverprint(state);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveFillOP)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillOverprint(obj2.getBool());</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillOverprint(state);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;OPM&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setOverprintMode(obj2.getInt());</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateOverprintMode(state);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stroke<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;SA&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeAdjust(obj2.getBool());</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeAdjust(state);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transfer<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;TR2&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;TR&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName(</highlight><highlight class="stringliteral">&quot;Default&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.isName(</highlight><highlight class="stringliteral">&quot;Identity&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>funcs[0]<sp/>=<sp/>funcs[1]<sp/>=<sp/>funcs[2]<sp/>=<sp/>funcs[3]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setTransfer(funcs);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateTransfer(state);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isArray()<sp/>&amp;&amp;<sp/>obj2.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[i]<sp/>=<sp/>Function::parse(&amp;obj3);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcs[i])<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setTransfer(funcs);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateTransfer(state);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName()<sp/>||<sp/>obj2.isDict()<sp/>||<sp/>obj2.isStream())<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((funcs[0]<sp/>=<sp/>Function::parse(&amp;obj2)))<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[1]<sp/>=<sp/>funcs[2]<sp/>=<sp/>funcs[3]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setTransfer(funcs);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateTransfer(state);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>transfer<sp/>function<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>is<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;AIS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setAlphaIsShape(obj2.getBool());</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateAlphaIsShape(state);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>text<sp/>knockout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;TK&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setTextKnockout(obj2.getBool());</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateTextKnockout(state);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>soft<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;SMask&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;clearSoftMask(state);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.dictLookup(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isName(</highlight><highlight class="stringliteral">&quot;Alpha&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>&quot;Luminosity&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.dictLookup(</highlight><highlight class="stringliteral">&quot;TR&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.isName(</highlight><highlight class="stringliteral">&quot;Default&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.isName(</highlight><highlight class="stringliteral">&quot;Identity&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]<sp/>=<sp/>Function::parse(&amp;obj3);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs[0]<sp/>==<sp/>NULL<sp/>||</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]-&gt;getInputSize()<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]-&gt;getOutputSize()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>transfer<sp/>function<sp/>in<sp/>soft<sp/>mask<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[0];</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcs[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveBackdropColor<sp/>=<sp/>obj2.dictLookup(</highlight><highlight class="stringliteral">&quot;BC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isArray()))<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>backdropColor.c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj3.arrayGetLength()<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.arrayGet(i,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj4.isNum())<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backdropColor.c[i]<sp/>=<sp/>dblToCol(obj4.getNum());</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.dictLookup(</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Group&quot;</highlight><highlight class="normal">,<sp/>&amp;obj4)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isolated<sp/>=<sp/>knockout<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj4.dictLookup(</highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj5)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj5,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj5.free();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj4.dictLookup(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>&amp;obj5)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isolated<sp/>=<sp/>obj5.getBool();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj5.free();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj4.dictLookup(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;obj5)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knockout<sp/>=<sp/>obj5.getBool();</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj5.free();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveBackdropColor)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace-&gt;getDefaultColor(&amp;backdropColor);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>get<sp/>the<sp/>parent<sp/>or<sp/>default<sp/>color<sp/>space<sp/>(?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backdropColor.c[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doSoftMask(&amp;obj3,<sp/>alpha,<sp/>blendingColorSpace,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isolated,<sp/>knockout,<sp/>funcs[0],<sp/>&amp;backdropColor);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs[0])<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>funcs[0];</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>soft<sp/>mask<sp/>in<sp/>ExtGState<sp/>-<sp/>missing<sp/>group&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>soft<sp/>mask<sp/>in<sp/>ExtGState<sp/>-<sp/>missing<sp/>group&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>soft<sp/>mask<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>fargs0,<sp/>fargs1;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetNF(0,&amp;fargs0);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(1,&amp;fargs1);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fargs0.isRef()<sp/>&amp;&amp;<sp/>fargs1.isNum())<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>fobj;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>fargs0.fetch(xref,<sp/>&amp;fobj);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fobj.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>fargs0.getRef();</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font<sp/>=<sp/>GfxFont::makeFont(xref,args[0].getName(),r,fobj.getDict());</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFont(font,fargs1.getNum());</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>fobj.free();</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fargs0.free();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fargs1.free();</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>args<sp/>mismatch<sp/>for<sp/>/Font<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LW&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineWidth(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineCap(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;LJ&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetLineJoin(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;ML&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetMiterLimit(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>dargs[2];</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGetNF(0,&amp;dargs[0]);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.arrayGet(1,&amp;dargs[1]);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dargs[0].isArray()<sp/>&amp;&amp;<sp/>dargs[1].isInt())<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetDash(dargs,2);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dargs[0].free();</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dargs[1].free();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>args<sp/>mismatch<sp/>for<sp/>/D<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;RI&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isName())<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetRenderingIntent(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;FL&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>opSetFlat(&amp;obj2,1);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doSoftMask(<ref refid="class_object" kindref="compound">Object</ref><sp/>*str,<sp/>GBool<sp/>alpha,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace,</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>isolated,<sp/>GBool<sp/>knockout,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*transferFunc,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*backdropColor)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/>*resDict;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>bbox[4];</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>excessive<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formDepth<sp/>&gt;<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>stream<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>str-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>form<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;FormType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(obj1.isNull()<sp/>||<sp/>(obj1.isInt()<sp/>&amp;&amp;<sp/>obj1.getInt()<sp/>==<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>form<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj2.isNum()))<sp/>bbox[i]<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box<sp/>(non<sp/>number)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj2.isNum()))<sp/>m[i]<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>m[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0]<sp/>=<sp/>1;<sp/>m[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2]<sp/>=<sp/>0;<sp/>m[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>m[4]<sp/>=<sp/>0;<sp/>m[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>resDict<sp/>=<sp/>obj1.isDict()<sp/>?<sp/>obj1.getDict()<sp/>:<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>++formDepth;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>drawForm(str,<sp/>resDict,<sp/>m,<sp/>bbox,<sp/>gTrue,<sp/>gTrue,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blendingColorSpace,<sp/>isolated,<sp/>knockout,</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha,<sp/>transferFunc,<sp/>backdropColor);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>--formDepth;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blendingColorSpace;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetRenderingIntent(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>state-&gt;setRenderingIntent(args[0].getName());</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>color<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillGray(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>color.c[0]<sp/>=<sp/>dblToCol(args[0].getNum());</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeGray(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>color.c[0]<sp/>=<sp/>dblToCol(args[0].getNum());</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillCMYKColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeCMYKColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillRGBColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeRGBColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillColorSpace(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(args[0].getName(),<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;args[0],<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getDefaultColor(&amp;color);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>(fill)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeColorSpace(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>res-&gt;lookupColorSpace(args[0].getName(),<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isNull())<sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;args[0],<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColorSpace(colorSpace);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace-&gt;getDefaultColor(&amp;color);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>color<sp/>space<sp/>(stroke)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>!=<sp/>state-&gt;getFillColorSpace()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;sc&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeColor(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>!=<sp/>state-&gt;getStrokeColorSpace()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;SC&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFillColorN(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((<ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*)state-&gt;getFillColorSpace())-&gt;getUnder()<sp/>||</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numArgs<sp/>-<sp/>1<sp/>!=<sp/>((<ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*)state-&gt;getFillColorSpace())</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;getUnder()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;scn&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Investigate<sp/>if<sp/>this<sp/>is<sp/>what<sp/>Adobe<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[numArgs-1].isName()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(pattern<sp/>=<sp/>res-&gt;lookupPattern(args[numArgs-1].getName(),<sp/>out,<sp/>state)))<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillPattern(pattern);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>!=<sp/>state-&gt;getFillColorSpace()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;scn&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Investigate<sp/>if<sp/>this<sp/>is<sp/>what<sp/>Adobe<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetStrokeColorN(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((<ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*)state-&gt;getStrokeColorSpace())</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;getUnder()<sp/>||</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numArgs<sp/>-<sp/>1<sp/>!=<sp/>((<ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*)state-&gt;getStrokeColorSpace())</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;getUnder()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;SCN&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Investigate<sp/>if<sp/>this<sp/>is<sp/>what<sp/>Adobe<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(numArgs<sp/>&lt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;SCN&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[numArgs-1].isName()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>(pattern<sp/>=<sp/>res-&gt;lookupPattern(args[numArgs-1].getName(),<sp/>out,<sp/>state)))<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setStrokePattern(pattern);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>!=<sp/>state-&gt;getStrokeColorSpace()-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>&apos;SCN&apos;<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numArgs<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>gfxColorMaxComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].isNum())<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>dblToCol(args[i].getNum());</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.c[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Investigate<sp/>if<sp/>this<sp/>is<sp/>what<sp/>Adobe<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>path<sp/>segment<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opMoveTo(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(args[0].getNum(),<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opLineTo(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>current<sp/>point<sp/>in<sp/>lineto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(args[0].getNum(),<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCurveTo(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>current<sp/>point<sp/>in<sp/>curveto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>args[2].getNum();</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>args[3].getNum();</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>args[4].getNum();</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>y3<sp/>=<sp/>args[5].getNum();</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>state-&gt;curveTo(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCurveTo1(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>current<sp/>point<sp/>in<sp/>curveto1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>state-&gt;getCurX();</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>state-&gt;getCurY();</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>args[2].getNum();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>y3<sp/>=<sp/>args[3].getNum();</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>state-&gt;curveTo(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCurveTo2(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>current<sp/>point<sp/>in<sp/>curveto2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>args[2].getNum();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>args[3].getNum();</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>y3<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>state-&gt;curveTo(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opRectangle(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>args[2].getNum();</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>args[3].getNum();</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(x,<sp/>y);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x<sp/>+<sp/>w,<sp/>y);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x<sp/>+<sp/>w,<sp/>y<sp/>+<sp/>h);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x,<sp/>y<sp/>+<sp/>h);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opClosePath(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>current<sp/>point<sp/>in<sp/>closepath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>path<sp/>painting<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEndPath(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCloseStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>*<sp/></highlight><highlight class="comment">/*args[]*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*numArgs*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>closepath/stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opFill(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>fill&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gFalse);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEOFill(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>eofill&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gTrue);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;eoFill(state);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opFillStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>fill/stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gFalse);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCloseFillStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>closepath/fill/stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gFalse);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEOFillStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>eofill/stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gTrue);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;eoFill(state);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opCloseEOFillStroke(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;isCurPt())<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error(errSyntaxError,<sp/>getPos(),<sp/>&quot;No<sp/>path<sp/>in<sp/>closepath/eofill/stroke&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isPath())<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternFill(gTrue);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;eoFill(state);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternStroke();</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>doEndPath();</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doPatternFill(GBool<sp/>eoFill)<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>kludge<sp/>--<sp/>patterns<sp/>can<sp/>be<sp/>really<sp/>slow,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>them<sp/>if<sp/>we&apos;re<sp/>only<sp/>doing<sp/>text<sp/>extraction,<sp/>since<sp/>they<sp/>almost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>certainly<sp/>don&apos;t<sp/>contain<sp/>any<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pattern<sp/>=<sp/>state-&gt;getFillPattern()))<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pattern-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>doTilingPatternFill((<ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*)pattern,<sp/>gFalse,<sp/>eoFill,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>doShadingPatternFill((<ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref><sp/>*)pattern,<sp/>gFalse,<sp/>eoFill,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>pattern<sp/>type<sp/>({0:d})<sp/>in<sp/>fill&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pattern-&gt;getType());</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doPatternStroke()<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>kludge<sp/>--<sp/>patterns<sp/>can<sp/>be<sp/>really<sp/>slow,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>them<sp/>if<sp/>we&apos;re<sp/>only<sp/>doing<sp/>text<sp/>extraction,<sp/>since<sp/>they<sp/>almost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>certainly<sp/>don&apos;t<sp/>contain<sp/>any<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pattern<sp/>=<sp/>state-&gt;getStrokePattern()))<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pattern-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>doTilingPatternFill((<ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*)pattern,<sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>doShadingPatternFill((<ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref><sp/>*)pattern,<sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>pattern<sp/>type<sp/>({0:d})<sp/>in<sp/>stroke&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pattern-&gt;getType());</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doPatternText()<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern" kindref="compound">GfxPattern</ref><sp/>*pattern;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>kludge<sp/>--<sp/>patterns<sp/>can<sp/>be<sp/>really<sp/>slow,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>them<sp/>if<sp/>we&apos;re<sp/>only<sp/>doing<sp/>text<sp/>extraction,<sp/>since<sp/>they<sp/>almost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>certainly<sp/>don&apos;t<sp/>contain<sp/>any<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pattern<sp/>=<sp/>state-&gt;getFillPattern()))<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pattern-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>doTilingPatternFill((<ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*)pattern,<sp/>gFalse,<sp/>gFalse,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>doShadingPatternFill((<ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref><sp/>*)pattern,<sp/>gFalse,<sp/>gFalse,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>pattern<sp/>type<sp/>({0:d})<sp/>in<sp/>fill&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pattern-&gt;getType());</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doPatternImageMask(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>saveState();</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>out-&gt;setSoftMaskFromImageMask(state,<sp/>ref,<sp/>str,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>invert,<sp/>inlineImg,<sp/>baseMatrix);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(0,<sp/>0);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(1,<sp/>0);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(1,<sp/>1);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(0,<sp/>1);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>doPatternText();</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>out-&gt;unsetSoftMaskFromImageMask(state,<sp/>baseMatrix);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doTilingPatternFill(<ref refid="class_gfx_tiling_pattern" kindref="compound">GfxTilingPattern</ref><sp/>*tPat,</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>stroke,<sp/>GBool<sp/>eoFill,<sp/>GBool<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*patCS;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*cs;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*savedState;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>x,<sp/>y,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cxMin,<sp/>cyMin,<sp/>cxMax,<sp/>cyMax;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xi0,<sp/>yi0,<sp/>xi1,<sp/>yi1,<sp/>xi,<sp/>yi;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm,<sp/>*btm,<sp/>*ptm;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>ictm[6],<sp/>m1[6],<sp/>imb[6];</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xstep,<sp/>ystep;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>patCS<sp/>=<sp/>(<ref refid="class_gfx_pattern_color_space" kindref="compound">GfxPatternColorSpace</ref><sp/>*)(stroke<sp/>?<sp/>state-&gt;getStrokeColorSpace()</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>state-&gt;getFillColorSpace());</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>(pattern<sp/>space)<sp/>-&gt;<sp/>(current<sp/>space)<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>btm<sp/>=<sp/>baseMatrix;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>ptm<sp/>=<sp/>tPat-&gt;getMatrix();</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iCTM<sp/>=<sp/>invert<sp/>CTM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>ctm[0]<sp/>*<sp/>ctm[3]<sp/>-<sp/>ctm[1]<sp/>*<sp/>ctm[2];</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Singular<sp/>matrix<sp/>in<sp/>tiling<sp/>pattern<sp/>fill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>ictm[0]<sp/>=<sp/>ctm[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>ictm[1]<sp/>=<sp/>-ctm[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>ictm[2]<sp/>=<sp/>-ctm[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>ictm[3]<sp/>=<sp/>ctm[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/>ictm[4]<sp/>=<sp/>(ctm[2]<sp/>*<sp/>ctm[5]<sp/>-<sp/>ctm[3]<sp/>*<sp/>ctm[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>ictm[5]<sp/>=<sp/>(ctm[1]<sp/>*<sp/>ctm[4]<sp/>-<sp/>ctm[0]<sp/>*<sp/>ctm[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>PTM<sp/>*<sp/>BTM<sp/>=<sp/>PTM<sp/>*<sp/>base<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>m1[0]<sp/>=<sp/>ptm[0]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[1]<sp/>*<sp/>btm[2];</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>m1[1]<sp/>=<sp/>ptm[0]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[1]<sp/>*<sp/>btm[3];</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>m1[2]<sp/>=<sp/>ptm[2]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[3]<sp/>*<sp/>btm[2];</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>m1[3]<sp/>=<sp/>ptm[2]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[3]<sp/>*<sp/>btm[3];</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>m1[4]<sp/>=<sp/>ptm[4]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[5]<sp/>*<sp/>btm[2]<sp/>+<sp/>btm[4];</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>m1[5]<sp/>=<sp/>ptm[4]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[5]<sp/>*<sp/>btm[3]<sp/>+<sp/>btm[5];</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>m1<sp/>*<sp/>iCTM<sp/>=<sp/>(PTM<sp/>*<sp/>BTM)<sp/>*<sp/>(iCTM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>m[0]<sp/>=<sp/>m1[0]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[1]<sp/>*<sp/>ictm[2];</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/>m[1]<sp/>=<sp/>m1[0]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[1]<sp/>*<sp/>ictm[3];</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/>m[2]<sp/>=<sp/>m1[2]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[3]<sp/>*<sp/>ictm[2];</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>m[3]<sp/>=<sp/>m1[2]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[3]<sp/>*<sp/>ictm[3];</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>m[4]<sp/>=<sp/>m1[4]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[5]<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>m[5]<sp/>=<sp/>m1[4]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[5]<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>(device<sp/>space)<sp/>-&gt;<sp/>(pattern<sp/>space)<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>m1[0]<sp/>*<sp/>m1[3]<sp/>-<sp/>m1[1]<sp/>*<sp/>m1[2];</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Singular<sp/>matrix<sp/>in<sp/>tiling<sp/>pattern<sp/>fill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>imb[0]<sp/>=<sp/>m1[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>imb[1]<sp/>=<sp/>-m1[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>imb[2]<sp/>=<sp/>-m1[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>imb[3]<sp/>=<sp/>m1[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>imb[4]<sp/>=<sp/>(m1[2]<sp/>*<sp/>m1[5]<sp/>-<sp/>m1[3]<sp/>*<sp/>m1[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>imb[5]<sp/>=<sp/>(m1[1]<sp/>*<sp/>m1[4]<sp/>-<sp/>m1[0]<sp/>*<sp/>m1[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>current<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>savedState<sp/>=<sp/>saveStateStack();</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>underlying<sp/>color<sp/>space<sp/>(for<sp/>uncolored<sp/>tiling<sp/>patterns);<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>various<sp/>other<sp/>parameters<sp/>(stroke<sp/>color,<sp/>line<sp/>width)<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adobe&apos;s<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>state-&gt;setFillPattern(NULL);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tPat-&gt;getPaintType()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(cs<sp/>=<sp/>patCS-&gt;getUnder()))<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColorSpace(cs-&gt;copy());</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColorSpace(cs-&gt;copy());</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stroke)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(state-&gt;getStrokeColor());</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(state-&gt;getFillColor());</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColorSpace(cs);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>cs-&gt;getDefaultColor(&amp;color);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColorSpace(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>());</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stroke)<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setLineWidth(0);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateLineWidth(state);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>to<sp/>current<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stroke)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clipToStrokePath();</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clipToStrokePath(state);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!text)<sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eoFill)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;eoClip(state);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region,<sp/>check<sp/>for<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>state-&gt;getClipBBox(&amp;cxMin,<sp/>&amp;cyMin,<sp/>&amp;cxMax,<sp/>&amp;cyMax);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cxMin<sp/>&gt;<sp/>cxMax<sp/>||<sp/>cyMin<sp/>&gt;<sp/>cyMax)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>restore;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>clip<sp/>region<sp/>bbox<sp/>to<sp/>pattern<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>cxMin<sp/>*<sp/>imb[0]<sp/>+<sp/>cyMin<sp/>*<sp/>imb[2]<sp/>+<sp/>imb[4];</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>cxMin<sp/>*<sp/>imb[1]<sp/>+<sp/>cyMin<sp/>*<sp/>imb[3]<sp/>+<sp/>imb[5];</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>cxMin<sp/>*<sp/>imb[0]<sp/>+<sp/>cyMax<sp/>*<sp/>imb[2]<sp/>+<sp/>imb[4];</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>cxMin<sp/>*<sp/>imb[1]<sp/>+<sp/>cyMax<sp/>*<sp/>imb[3]<sp/>+<sp/>imb[5];</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>cxMax<sp/>*<sp/>imb[0]<sp/>+<sp/>cyMin<sp/>*<sp/>imb[2]<sp/>+<sp/>imb[4];</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>cxMax<sp/>*<sp/>imb[1]<sp/>+<sp/>cyMin<sp/>*<sp/>imb[3]<sp/>+<sp/>imb[5];</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>cxMax<sp/>*<sp/>imb[0]<sp/>+<sp/>cyMax<sp/>*<sp/>imb[2]<sp/>+<sp/>imb[4];</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>cxMax<sp/>*<sp/>imb[1]<sp/>+<sp/>cyMax<sp/>*<sp/>imb[3]<sp/>+<sp/>imb[5];</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>treat<sp/>negative<sp/>steps<sp/>differently<sp/>--<sp/>start<sp/>at<sp/>right/top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>edge<sp/>instead<sp/>of<sp/>left/bottom<sp/>(?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>xstep<sp/>=<sp/>fabs(tPat-&gt;getXStep());</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>ystep<sp/>=<sp/>fabs(tPat-&gt;getYStep());</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tPat-&gt;getBBox()[0]<sp/>&lt;<sp/>tPat-&gt;getBBox()[2])<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>xi0<sp/>=<sp/>(int)ceil((xMin<sp/>-<sp/>tPat-&gt;getBBox()[2])<sp/>/<sp/>xstep);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>xi1<sp/>=<sp/>(int)floor((xMax<sp/>-<sp/>tPat-&gt;getBBox()[0])<sp/>/<sp/>xstep)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>xi0<sp/>=<sp/>(int)ceil((xMin<sp/>-<sp/>tPat-&gt;getBBox()[0])<sp/>/<sp/>xstep);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>xi1<sp/>=<sp/>(int)floor((xMax<sp/>-<sp/>tPat-&gt;getBBox()[2])<sp/>/<sp/>xstep)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tPat-&gt;getBBox()[1]<sp/>&lt;<sp/>tPat-&gt;getBBox()[3])<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>yi0<sp/>=<sp/>(int)ceil((yMin<sp/>-<sp/>tPat-&gt;getBBox()[3])<sp/>/<sp/>ystep);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>yi1<sp/>=<sp/>(int)floor((yMax<sp/>-<sp/>tPat-&gt;getBBox()[1])<sp/>/<sp/>ystep)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>yi0<sp/>=<sp/>(int)ceil((yMin<sp/>-<sp/>tPat-&gt;getBBox()[1])<sp/>/<sp/>ystep);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>yi1<sp/>=<sp/>(int)floor((yMax<sp/>-<sp/>tPat-&gt;getBBox()[3])<sp/>/<sp/>ystep)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>m1[i]<sp/>=<sp/>m[i];</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>m1[4]<sp/>=<sp/>m[4];</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>m1[5]<sp/>=<sp/>m[5];</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useTilingPatternFill()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;tilingPatternFill(state,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>catalog,<sp/>tPat-&gt;getContentStream(),</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tPat-&gt;getMatrix(),<sp/>tPat-&gt;getPaintType(),<sp/>tPat-&gt;getTilingType(),</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tPat-&gt;getResDict(),<sp/>m1,<sp/>tPat-&gt;getBBox(),</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xi0,<sp/>yi0,<sp/>xi1,<sp/>yi1,<sp/>xstep,<sp/>ystep))<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>restore;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updatePatternOpacity(state);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yi<sp/>=<sp/>yi0;<sp/>yi<sp/>&lt;<sp/>yi1;<sp/>++yi)<sp/>{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xi<sp/>=<sp/>xi0;<sp/>xi<sp/>&lt;<sp/>xi1;<sp/>++xi)<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xi<sp/>*<sp/>xstep;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>yi<sp/>*<sp/>ystep;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[4]<sp/>=<sp/>x<sp/>*<sp/>m[0]<sp/>+<sp/>y<sp/>*<sp/>m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[5]<sp/>=<sp/>x<sp/>*<sp/>m[1]<sp/>+<sp/>y<sp/>*<sp/>m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawForm(tPat-&gt;getContentStream(),<sp/>tPat-&gt;getResDict(),</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1,<sp/>tPat-&gt;getBBox());</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clearPatternOpacity(state);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/>restore:</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>restoreStateStack(savedState);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doShadingPatternFill(<ref refid="class_gfx_shading_pattern" kindref="compound">GfxShadingPattern</ref><sp/>*sPat,</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>stroke,<sp/>GBool<sp/>eoFill,<sp/>GBool<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*savedState;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm,<sp/>*btm,<sp/>*ptm;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>ictm[6],<sp/>m1[6];</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>shading<sp/>=<sp/>sPat-&gt;getShading();</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>current<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>savedState<sp/>=<sp/>saveStateStack();</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>to<sp/>current<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stroke)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clipToStrokePath();</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clipToStrokePath(state);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!text)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eoFill)<sp/>{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;eoClip(state);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>(pattern<sp/>space)<sp/>-&gt;<sp/>(current<sp/>space)<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>btm<sp/>=<sp/>baseMatrix;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>ptm<sp/>=<sp/>sPat-&gt;getMatrix();</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iCTM<sp/>=<sp/>invert<sp/>CTM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>ctm[0]<sp/>*<sp/>ctm[3]<sp/>-<sp/>ctm[1]<sp/>*<sp/>ctm[2];</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Singular<sp/>matrix<sp/>in<sp/>shading<sp/>pattern<sp/>fill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>ictm[0]<sp/>=<sp/>ctm[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>ictm[1]<sp/>=<sp/>-ctm[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>ictm[2]<sp/>=<sp/>-ctm[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>ictm[3]<sp/>=<sp/>ctm[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>ictm[4]<sp/>=<sp/>(ctm[2]<sp/>*<sp/>ctm[5]<sp/>-<sp/>ctm[3]<sp/>*<sp/>ctm[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>ictm[5]<sp/>=<sp/>(ctm[1]<sp/>*<sp/>ctm[4]<sp/>-<sp/>ctm[0]<sp/>*<sp/>ctm[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>PTM<sp/>*<sp/>BTM<sp/>=<sp/>PTM<sp/>*<sp/>base<sp/>transform<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>m1[0]<sp/>=<sp/>ptm[0]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[1]<sp/>*<sp/>btm[2];</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>m1[1]<sp/>=<sp/>ptm[0]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[1]<sp/>*<sp/>btm[3];</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>m1[2]<sp/>=<sp/>ptm[2]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[3]<sp/>*<sp/>btm[2];</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>m1[3]<sp/>=<sp/>ptm[2]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[3]<sp/>*<sp/>btm[3];</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>m1[4]<sp/>=<sp/>ptm[4]<sp/>*<sp/>btm[0]<sp/>+<sp/>ptm[5]<sp/>*<sp/>btm[2]<sp/>+<sp/>btm[4];</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>m1[5]<sp/>=<sp/>ptm[4]<sp/>*<sp/>btm[1]<sp/>+<sp/>ptm[5]<sp/>*<sp/>btm[3]<sp/>+<sp/>btm[5];</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>m1<sp/>*<sp/>iCTM<sp/>=<sp/>(PTM<sp/>*<sp/>BTM)<sp/>*<sp/>(iCTM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>m[0]<sp/>=<sp/>m1[0]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[1]<sp/>*<sp/>ictm[2];</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>m[1]<sp/>=<sp/>m1[0]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[1]<sp/>*<sp/>ictm[3];</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>m[2]<sp/>=<sp/>m1[2]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[3]<sp/>*<sp/>ictm[2];</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>m[3]<sp/>=<sp/>m1[2]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[3]<sp/>*<sp/>ictm[3];</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>m[4]<sp/>=<sp/>m1[4]<sp/>*<sp/>ictm[0]<sp/>+<sp/>m1[5]<sp/>*<sp/>ictm[2]<sp/>+<sp/>ictm[4];</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>m[5]<sp/>=<sp/>m1[4]<sp/>*<sp/>ictm[1]<sp/>+<sp/>m1[5]<sp/>*<sp/>ictm[3]<sp/>+<sp/>ictm[5];</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>new<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(m[0],<sp/>m[1],<sp/>m[2],<sp/>m[3],<sp/>m[4],<sp/>m[5]);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>out-&gt;updateCTM(state,<sp/>m[0],<sp/>m[1],<sp/>m[2],<sp/>m[3],<sp/>m[4],<sp/>m[5]);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>to<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getHasBBox())<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(shading-&gt;getColorSpace()-&gt;copy());</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>background<sp/>color<sp/>fill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getHasBackground())<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(shading-&gt;getBackground());</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>//~tmp:<sp/>turn<sp/>off<sp/>anti-aliasing<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/>GBool<sp/>vaa<sp/>=<sp/>out-&gt;getVectorAntialias();</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaa)<sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;setVectorAntialias(gFalse);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>shading<sp/>type-specific<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shading-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill((<ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/>doAxialShFill((<ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/>doRadialShFill((<ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>doGouraudTriangleShFill((<ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatchMeshShFill((<ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>//~tmp:<sp/>turn<sp/>off<sp/>anti-aliasing<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaa)<sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;setVectorAntialias(gTrue);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>restoreStateStack(savedState);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opShFill(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_shading" kindref="compound">GfxShading</ref><sp/>*shading;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*savedState;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(shading<sp/>=<sp/>res-&gt;lookupShading(args[0].getName(),<sp/>out,<sp/>state)))<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>current<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/>savedState<sp/>=<sp/>saveStateStack();</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>to<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getHasBBox())<sp/>{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(shading-&gt;getColorSpace()-&gt;copy());</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>//~tmp:<sp/>turn<sp/>off<sp/>anti-aliasing<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/>GBool<sp/>vaa<sp/>=<sp/>out-&gt;getVectorAntialias();</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaa)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;setVectorAntialias(gFalse);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>shading<sp/>type-specific<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shading-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill((<ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>doAxialShFill((<ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>doRadialShFill((<ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>doGouraudTriangleShFill((<ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatchMeshShFill((<ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*)shading);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>//~tmp:<sp/>turn<sp/>off<sp/>anti-aliasing<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaa)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;setVectorAntialias(gTrue);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>restoreStateStack(savedState);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shading;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doFunctionShFill(<ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>colors[4];</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useShadedFills(<sp/>shading-&gt;getType()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;functionShadedFill(state,<sp/>shading))<sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>shading-&gt;getDomain(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(x0,<sp/>y0,<sp/>&amp;colors[0]);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(x0,<sp/>y1,<sp/>&amp;colors[1]);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(x1,<sp/>y0,<sp/>&amp;colors[2]);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(x1,<sp/>y1,<sp/>&amp;colors[3]);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>doFunctionShFill1(shading,<sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>colors,<sp/>0);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doFunctionShFill1(<ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading,</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0,</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*colors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>fillColor;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color0M,<sp/>color1M,<sp/>colorM0,<sp/>colorM1,<sp/>colorMM;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>colors2[4];</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrix;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xM,<sp/>yM;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>shading-&gt;getColorSpace()-&gt;getNComps();</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>matrix<sp/>=<sp/>shading-&gt;getMatrix();</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>the<sp/>four<sp/>corner<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(colors[i].c[j]<sp/>-<sp/>colors[(i+1)&amp;3].c[j])<sp/>&gt;<sp/>functionColorDelta)<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>nComps)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>center<sp/>of<sp/>the<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>xM<sp/>=<sp/>0.5<sp/>*<sp/>(x0<sp/>+<sp/>x1);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>yM<sp/>=<sp/>0.5<sp/>*<sp/>(y0<sp/>+<sp/>y1);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>four<sp/>corner<sp/>colors<sp/>are<sp/>close<sp/>(or<sp/>we<sp/>hit<sp/>the<sp/>recursive<sp/>limit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>fill<sp/>the<sp/>rectangle;<sp/>but<sp/>require<sp/>at<sp/>least<sp/>one<sp/>subdivision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(depth==0)<sp/>to<sp/>avoid<sp/>problems<sp/>when<sp/>the<sp/>four<sp/>outer<sp/>corners<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shaded<sp/>region<sp/>are<sp/>the<sp/>same<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>depth<sp/>&gt;<sp/>0)<sp/>||<sp/>depth<sp/>==<sp/>functionMaxDepth)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>center<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(xM,<sp/>yM,<sp/>&amp;fillColor);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;fillColor);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(x0<sp/>*<sp/>matrix[0]<sp/>+<sp/>y0<sp/>*<sp/>matrix[2]<sp/>+<sp/>matrix[4],</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>*<sp/>matrix[1]<sp/>+<sp/>y0<sp/>*<sp/>matrix[3]<sp/>+<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(x1<sp/>*<sp/>matrix[0]<sp/>+<sp/>y0<sp/>*<sp/>matrix[2]<sp/>+<sp/>matrix[4],</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>*<sp/>matrix[1]<sp/>+<sp/>y0<sp/>*<sp/>matrix[3]<sp/>+<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(x1<sp/>*<sp/>matrix[0]<sp/>+<sp/>y1<sp/>*<sp/>matrix[2]<sp/>+<sp/>matrix[4],</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>*<sp/>matrix[1]<sp/>+<sp/>y1<sp/>*<sp/>matrix[3]<sp/>+<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(x0<sp/>*<sp/>matrix[0]<sp/>+<sp/>y1<sp/>*<sp/>matrix[2]<sp/>+<sp/>matrix[4],</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>*<sp/>matrix[1]<sp/>+<sp/>y1<sp/>*<sp/>matrix[3]<sp/>+<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>four<sp/>corner<sp/>colors<sp/>are<sp/>not<sp/>close<sp/>enough<sp/>--<sp/>subdivide<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colors[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorM0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>colors[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(x0,y0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xM,y0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x1,y0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+----------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>UL<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>UR<sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color0M<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMM<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>color1M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(x0,yM)<sp/>+----------+----------+<sp/>(x1,yM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xM,yM)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>LL<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>LR<sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+----------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colors[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorM1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>colors[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(x0,y1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xM,y1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x1,y1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(x0,<sp/>yM,<sp/>&amp;color0M);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(x1,<sp/>yM,<sp/>&amp;color1M);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(xM,<sp/>y0,<sp/>&amp;colorM0);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(xM,<sp/>y1,<sp/>&amp;colorM1);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getColor(xM,<sp/>yM,<sp/>&amp;colorMM);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper-left<sp/>sub-rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[0]<sp/>=<sp/>colors[0];</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[1]<sp/>=<sp/>color0M;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[2]<sp/>=<sp/>colorM0;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[3]<sp/>=<sp/>colorMM;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill1(shading,<sp/>x0,<sp/>y0,<sp/>xM,<sp/>yM,<sp/>colors2,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lower-left<sp/>sub-rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[0]<sp/>=<sp/>color0M;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[1]<sp/>=<sp/>colors[1];</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[2]<sp/>=<sp/>colorMM;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[3]<sp/>=<sp/>colorM1;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill1(shading,<sp/>x0,<sp/>yM,<sp/>xM,<sp/>y1,<sp/>colors2,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper-right<sp/>sub-rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[0]<sp/>=<sp/>colorM0;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[1]<sp/>=<sp/>colorMM;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[2]<sp/>=<sp/>colors[2];</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[3]<sp/>=<sp/>color1M;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill1(shading,<sp/>xM,<sp/>y0,<sp/>x1,<sp/>yM,<sp/>colors2,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lower-right<sp/>sub-rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[0]<sp/>=<sp/>colorMM;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[1]<sp/>=<sp/>colorM1;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[2]<sp/>=<sp/>color1M;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>colors2[3]<sp/>=<sp/>colors[3];</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>doFunctionShFill1(shading,<sp/>xM,<sp/>yM,<sp/>x1,<sp/>y1,<sp/>colors2,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bubbleSort(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>array[])</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kk<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>j<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>4;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[k]<sp/>&lt;<sp/>array[kk])<sp/>{</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kk<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>array[j];</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>array[j]<sp/>=<sp/>array[kk];</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>array[kk]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doAxialShFill(<ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy,<sp/>mul;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>GBool<sp/>dxZero,<sp/>dyZero;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bboxIntersections[4];</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/>tMax,<sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s[4],<sp/>sMin,<sp/>sMax,<sp/>tmp;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ux0,<sp/>uy0,<sp/>ux1,<sp/>uy1,<sp/>vx0,<sp/>vy0,<sp/>vx1,<sp/>vy1;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/>t1,<sp/>tt;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ta[axialMaxSplits<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next[axialMaxSplits<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color0,<sp/>color1;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>GBool<sp/>needExtend<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>min<sp/>and<sp/>max<sp/>t<sp/>values,<sp/>based<sp/>on<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>dxZero<sp/>=<sp/>fabs(dx)<sp/>&lt;<sp/>0.01;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>dyZero<sp/>=<sp/>fabs(dy)<sp/>&lt;<sp/>0.01;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero<sp/>&amp;&amp;<sp/>dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>tMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>1<sp/>/<sp/>(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxIntersections[0]<sp/>=<sp/>((xMin<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMin<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxIntersections[1]<sp/>=<sp/>((xMin<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMax<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxIntersections[2]<sp/>=<sp/>((xMax<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMin<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxIntersections[3]<sp/>=<sp/>((xMax<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMax<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>bubbleSort(bboxIntersections);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>bboxIntersections[0];</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>bboxIntersections[3];</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMin<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>!shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMax<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>!shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useShadedFills(<sp/>shading-&gt;getType()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;axialShadedFill(state,<sp/>shading,<sp/>tMin,<sp/>tMax))<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>function<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;getDomain0();</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;getDomain1();</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Traverse<sp/>the<sp/>t<sp/>axis<sp/>and<sp/>do<sp/>the<sp/>shading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>point<sp/>(tx,<sp/>ty)<sp/>on<sp/>the<sp/>t<sp/>axis,<sp/>consider<sp/>a<sp/>line<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>point<sp/>perpendicular<sp/>to<sp/>the<sp/>t<sp/>axis:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x(s)<sp/>=<sp/>tx<sp/>+<sp/>s<sp/>*<sp/>-dy<sp/><sp/><sp/>--&gt;<sp/><sp/><sp/>s<sp/>=<sp/>(x<sp/>-<sp/>tx)<sp/>/<sp/>-dy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>y(s)<sp/>=<sp/>ty<sp/>+<sp/>s<sp/>*<sp/>dx<sp/><sp/><sp/><sp/>--&gt;<sp/><sp/><sp/>s<sp/>=<sp/>(y<sp/>-<sp/>ty)<sp/>/<sp/>dx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>look<sp/>at<sp/>the<sp/>intersection<sp/>of<sp/>this<sp/>line<sp/>with<sp/>the<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax).<sp/><sp/>In<sp/>the<sp/>general<sp/>case,<sp/>there<sp/>are<sp/>four</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intersection<sp/>points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>(xMin<sp/>-<sp/>tx)<sp/>/<sp/>-dy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>(xMax<sp/>-<sp/>tx)<sp/>/<sp/>-dy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>(yMin<sp/>-<sp/>ty)<sp/>/<sp/>dx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>s3<sp/>=<sp/>(yMax<sp/>-<sp/>ty)<sp/>/<sp/>dx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>want<sp/>the<sp/>middle<sp/>two<sp/>s<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>where<sp/>dx<sp/>=<sp/>0,<sp/>take<sp/>s0<sp/>and<sp/>s1;<sp/>in<sp/>the<sp/>case<sp/>where<sp/>dy<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>take<sp/>s2<sp/>and<sp/>s3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>filled<sp/>polygon<sp/>is<sp/>bounded<sp/>by<sp/>two<sp/>of<sp/>these<sp/>line<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perpdendicular<sp/>to<sp/>the<sp/>t<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>t<sp/>axis<sp/>is<sp/>bisected<sp/>into<sp/>smaller<sp/>regions<sp/>until<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>difference<sp/>across<sp/>a<sp/>region<sp/>is<sp/>small<sp/>enough,<sp/>and<sp/>then<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>painted<sp/>with<sp/>a<sp/>single<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up:<sp/>require<sp/>at<sp/>least<sp/>one<sp/>split<sp/>to<sp/>avoid<sp/>problems<sp/>when<sp/>the<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ends<sp/>of<sp/>the<sp/>t<sp/>axis<sp/>have<sp/>the<sp/>same<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>shading-&gt;getColorSpace()-&gt;getNComps();</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>ta[0]<sp/>=<sp/>tMin;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>next[0]<sp/>=<sp/>axialMaxSplits<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>ta[axialMaxSplits<sp/>/<sp/>2]<sp/>=<sp/>0.5<sp/>*<sp/>(tMin<sp/>+<sp/>tMax);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>next[axialMaxSplits<sp/>/<sp/>2]<sp/>=<sp/>axialMaxSplits;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>ta[axialMaxSplits]<sp/>=<sp/>tMax;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>color<sp/>at<sp/>t<sp/>=<sp/>tMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMin<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMin<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t0<sp/>+<sp/>(t1<sp/>-<sp/>t0)<sp/>*<sp/>tMin;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>shading-&gt;getColor(tt,<sp/>&amp;color0);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useFillColorStop())<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>add<sp/>stop<sp/>color<sp/>when<sp/>t<sp/>=<sp/>tMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color0);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColorStop(state,<sp/>0);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>coordinates<sp/>of<sp/>the<sp/>point<sp/>on<sp/>the<sp/>t<sp/>axis<sp/>at<sp/>t<sp/>=<sp/>tMin;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>compute<sp/>the<sp/>intersection<sp/>of<sp/>the<sp/>perpendicular<sp/>line<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>x0<sp/>+<sp/>tMin<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>y0<sp/>+<sp/>tMin<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero<sp/>&amp;&amp;<sp/>dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero)<sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>(xMin<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>(xMax<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMin<sp/>&gt;<sp/>sMax)<sp/>{<sp/>tmp<sp/>=<sp/>sMin;<sp/>sMin<sp/>=<sp/>sMax;<sp/>sMax<sp/>=<sp/>tmp;<sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>(yMin<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>(yMax<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMin<sp/>&gt;<sp/>sMax)<sp/>{<sp/>tmp<sp/>=<sp/>sMin;<sp/>sMin<sp/>=<sp/>sMax;<sp/>sMax<sp/>=<sp/>tmp;<sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>(yMin<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>s[1]<sp/>=<sp/>(yMax<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>s[2]<sp/>=<sp/>(xMin<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/>s[3]<sp/>=<sp/>(xMax<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>bubbleSort(s);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>ux0<sp/>=<sp/>tx<sp/>-<sp/>sMin<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>uy0<sp/>=<sp/>ty<sp/>+<sp/>sMin<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>vx0<sp/>=<sp/>tx<sp/>-<sp/>sMax<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/>vy0<sp/>=<sp/>ty<sp/>+<sp/>sMax<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doneBBox1,<sp/>doneBBox2;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero<sp/>&amp;&amp;<sp/>dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/>doneBBox1<sp/>=<sp/>doneBBox2<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/>doneBBox1<sp/>=<sp/>bboxIntersections[1]<sp/>&lt;<sp/>tMin;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>doneBBox2<sp/>=<sp/>bboxIntersections[2]<sp/>&gt;<sp/>tMax;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>output<sp/>device<sp/>doesn&apos;t<sp/>support<sp/>the<sp/>extended<sp/>mode<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>do<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>needExtend<sp/>=<sp/>!out-&gt;axialShadedSupportExtend(state,<sp/>shading);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>axialMaxSplits)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bisect<sp/>until<sp/>color<sp/>difference<sp/>is<sp/>small<sp/>enough<sp/>or<sp/>we<sp/>hit<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bisection<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>next[i];</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>i<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ta[j]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ta[j]<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t0<sp/>+<sp/>(t1<sp/>-<sp/>t0)<sp/>*<sp/>ta[j];</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(tt,<sp/>&amp;color1);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSameGfxColor(color1,<sp/>color0,<sp/>nComps,<sp/>axialColorDelta))<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>these<sp/>two<sp/>if<sp/>what<sp/>we<sp/>guarantee<sp/>is<sp/>that<sp/>if<sp/>we<sp/>are<sp/>skipping<sp/>lots<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>positions<sp/>because<sp/>the<sp/>colors<sp/>are<sp/>the<sp/>same,<sp/>we<sp/>still<sp/>create<sp/>a<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>vertexs<sp/>passing<sp/>by<sp/>bboxIntersections[1]<sp/>and<sp/>bboxIntersections[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>we<sp/>can<sp/>have<sp/>empty<sp/>regions<sp/>that<sp/>should<sp/>really<sp/>be<sp/>painted<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>like<sp/>happened<sp/>in<sp/>bug<sp/>19896</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>we<sp/>do<sp/>to<sp/>ensure<sp/>that<sp/>we<sp/>pass<sp/>a<sp/>line<sp/>through<sp/>this<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>making<sp/>sure<sp/>use<sp/>the<sp/>exact<sp/>bboxIntersections[]<sp/>value<sp/>as<sp/>one<sp/>of<sp/>the<sp/>used<sp/>ta[]<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doneBBox1<sp/>&amp;&amp;<sp/>ta[i]<sp/>&lt;<sp/>bboxIntersections[1]<sp/>&amp;&amp;<sp/>ta[j]<sp/>&gt;<sp/>bboxIntersections[1])<sp/>{</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teoricalj<sp/>=<sp/>(int)<sp/>((bboxIntersections[1]<sp/>-<sp/>tMin)<sp/>*<sp/>axialMaxSplits<sp/>/<sp/>(tMax<sp/>-<sp/>tMin));</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teoricalj<sp/>&lt;=<sp/>i)<sp/>teoricalj<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teoricalj<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[i]<sp/>=<sp/>teoricalj;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[teoricalj]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teoricalj<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ta[teoricalj]<sp/>=<sp/>bboxIntersections[1];</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>teoricalj;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doneBBox1<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doneBBox2<sp/>&amp;&amp;<sp/>ta[i]<sp/>&lt;<sp/>bboxIntersections[2]<sp/>&amp;&amp;<sp/>ta[j]<sp/>&gt;<sp/>bboxIntersections[2])<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teoricalj<sp/>=<sp/>(int)<sp/>((bboxIntersections[2]<sp/>-<sp/>tMin)<sp/>*<sp/>axialMaxSplits<sp/>/<sp/>(tMax<sp/>-<sp/>tMin));</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teoricalj<sp/>&lt;=<sp/>i)<sp/>teoricalj<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teoricalj<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[i]<sp/>=<sp/>teoricalj;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[teoricalj]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teoricalj<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ta[teoricalj]<sp/>=<sp/>bboxIntersections[2];</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>teoricalj;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doneBBox2<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>+<sp/>j)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ta[k]<sp/>=<sp/>0.5<sp/>*<sp/>(ta[i]<sp/>+<sp/>ta[j]);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next[i]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next[k]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>average<sp/>of<sp/>the<sp/>colors<sp/>of<sp/>the<sp/>two<sp/>sides<sp/>of<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color0.c[k]<sp/>=<sp/>(color0.c[k]<sp/>+<sp/>color1.c[k])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>coordinates<sp/>of<sp/>the<sp/>point<sp/>on<sp/>the<sp/>t<sp/>axis;<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>intersection<sp/>of<sp/>the<sp/>perpendicular<sp/>line<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>x0<sp/>+<sp/>ta[j]<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>y0<sp/>+<sp/>ta[j]<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero<sp/>&amp;&amp;<sp/>dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dxZero)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>(xMin<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>(xMax<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMin<sp/>&gt;<sp/>sMax)<sp/>{<sp/>tmp<sp/>=<sp/>sMin;<sp/>sMin<sp/>=<sp/>sMax;<sp/>sMax<sp/>=<sp/>tmp;<sp/>}</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dyZero)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>(yMin<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>(yMax<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMin<sp/>&gt;<sp/>sMax)<sp/>{<sp/>tmp<sp/>=<sp/>sMin;<sp/>sMin<sp/>=<sp/>sMax;<sp/>sMax<sp/>=<sp/>tmp;<sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>(yMin<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[1]<sp/>=<sp/>(yMax<sp/>-<sp/>ty)<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[2]<sp/>=<sp/>(xMin<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[3]<sp/>=<sp/>(xMax<sp/>-<sp/>tx)<sp/>/<sp/>-dy;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bubbleSort(s);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>ux1<sp/>=<sp/>tx<sp/>-<sp/>sMin<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>uy1<sp/>=<sp/>ty<sp/>+<sp/>sMin<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/>vx1<sp/>=<sp/>tx<sp/>-<sp/>sMax<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>vy1<sp/>=<sp/>ty<sp/>+<sp/>sMax<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color0);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useFillColorStop())</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColorStop(state,<sp/>(ta[j]<sp/>-<sp/>tMin)/(tMax<sp/>-<sp/>tMin));</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needExtend)<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(ux0,<sp/>uy0);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(vx0,<sp/>vy0);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(vx1,<sp/>vy1);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(ux1,<sp/>uy1);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;useFillColorStop())<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>for<sp/>next<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>ux0<sp/>=<sp/>ux1;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>uy0<sp/>=<sp/>uy1;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/>vx0<sp/>=<sp/>vx1;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>vy0<sp/>=<sp/>vy1;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>color0<sp/>=<sp/>color1;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>next[i];</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useFillColorStop())<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!needExtend)<sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getShadingColorRadialHelper(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color)</highlight></codeline>
<codeline lineno="2949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>t0)<sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t0,<sp/>color);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t1,<sp/>color);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t,<sp/>color);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>t0)<sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t0,<sp/>color);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t1,<sp/>color);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(t,<sp/>color);</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doRadialShFill(<ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>r0,<sp/>x1,<sp/>y1,<sp/>r1,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>colorA,<sp/>colorB;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xa,<sp/>ya,<sp/>xb,<sp/>yb,<sp/>ra,<sp/>rb;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ta,<sp/>tb,<sp/>sa,<sp/>sb;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sz,<sp/>xz,<sp/>yz,<sp/>sMin,<sp/>sMax;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/>GBool<sp/>enclosed;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ia,<sp/>ib,<sp/>k,<sp/>n;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/>alpha,<sp/>angle,<sp/>t;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>GBool<sp/>needExtend<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>shading<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;r0,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;r1);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;getDomain0();</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;getDomain1();</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>nComps<sp/>=<sp/>shading-&gt;getColorSpace()-&gt;getNComps();</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>point<sp/>at<sp/>which<sp/>r(s)<sp/>=<sp/>0;<sp/>check<sp/>for<sp/>the<sp/>enclosed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>case;<sp/>and<sp/>compute<sp/>the<sp/>angles<sp/>for<sp/>the<sp/>tangent<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>==<sp/>x1<sp/>&amp;&amp;<sp/>y0<sp/>==<sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>==<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>(r1<sp/>&gt;<sp/>r0)<sp/>?<sp/>-r0<sp/>/<sp/>(r1<sp/>-<sp/>r0)<sp/>:<sp/>-r1<sp/>/<sp/>(r0<sp/>-<sp/>r1);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>xz<sp/>=<sp/>x0<sp/>+<sp/>sz<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/>yz<sp/>=<sp/>y0<sp/>+<sp/>sz<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>(xz<sp/>-<sp/>x0)<sp/>*<sp/>(xz<sp/>-<sp/>x0)<sp/>+<sp/>(yz<sp/>-<sp/>y0)<sp/>*<sp/>(yz<sp/>-<sp/>y0)<sp/>&lt;=<sp/>r0<sp/>*<sp/>r0;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>asin(r0<sp/>/<sp/>sqrt((x0<sp/>-<sp/>xz)<sp/>*<sp/>(x0<sp/>-<sp/>xz)<sp/>+<sp/>(y0<sp/>-<sp/>yz)<sp/>*<sp/>(y0<sp/>-<sp/>yz)));</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&gt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>-theta;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>atan2(y1<sp/>-<sp/>y0,<sp/>x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>(possibly<sp/>extended)<sp/>s<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>x(s)<sp/>+<sp/>r(s)<sp/>=<sp/>xMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1<sp/>+<sp/>r1)<sp/>-<sp/>(x0<sp/>+<sp/>r0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>(xMin<sp/>-<sp/>(x0<sp/>+<sp/>r0))<sp/>/<sp/>((x1<sp/>+<sp/>r1)<sp/>-<sp/>(x0<sp/>+<sp/>r0));</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&lt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>x(s)<sp/>-<sp/>r(s)<sp/>=<sp/>xMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1<sp/>-<sp/>r1)<sp/>-<sp/>(x0<sp/>-<sp/>r0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>(xMax<sp/>-<sp/>(x0<sp/>-<sp/>r0))<sp/>/<sp/>((x1<sp/>-<sp/>r1)<sp/>-<sp/>(x0<sp/>-<sp/>r0));</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&lt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>y(s)<sp/>+<sp/>r(s)<sp/>=<sp/>yMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1<sp/>+<sp/>r1)<sp/>-<sp/>(y0<sp/>+<sp/>r0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>(yMin<sp/>-<sp/>(y0<sp/>+<sp/>r0))<sp/>/<sp/>((y1<sp/>+<sp/>r1)<sp/>-<sp/>(y0<sp/>+<sp/>r0));</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&lt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>y(s)<sp/>-<sp/>r(s)<sp/>=<sp/>yMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1<sp/>-<sp/>r1)<sp/>-<sp/>(y0<sp/>-<sp/>r0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>(yMax<sp/>-<sp/>(y0<sp/>-<sp/>r0))<sp/>/<sp/>((y1<sp/>-<sp/>r1)<sp/>-<sp/>(y0<sp/>-<sp/>r0));</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&lt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>against<sp/>sz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&lt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMin<sp/>&lt;<sp/>sz)<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&gt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sMax<sp/>&gt;<sp/>sz)<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>&apos;extend&apos;<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>sMin<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shading-&gt;getExtend1()<sp/>&amp;&amp;<sp/>sMax<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useShadedFills(<sp/>shading-&gt;getType()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;radialShadedFill(state,<sp/>shading,<sp/>sMin,<sp/>sMax))<sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>number<sp/>of<sp/>steps<sp/>into<sp/>which<sp/>circles<sp/>must<sp/>be<sp/>divided<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>achieve<sp/>a<sp/>curve<sp/>flatness<sp/>of<sp/>0.1<sp/>pixel<sp/>in<sp/>device<sp/>space<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>largest<sp/>circle<sp/>(note<sp/>that<sp/>&quot;device<sp/>space&quot;<sp/>is<sp/>72<sp/>dpi<sp/>when<sp/>generating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PostScript,<sp/>hence<sp/>the<sp/>relatively<sp/>small<sp/>0.1<sp/>pixel<sp/>accuracy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>ctm<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>fabs(ctm[0]);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ctm[1])<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>fabs(ctm[1]);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ctm[2])<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>fabs(ctm[2]);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ctm[3])<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>fabs(ctm[3]);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&gt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>*=<sp/>r0;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>*=<sp/>r1;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(int)(M_PI<sp/>/<sp/>acos(1<sp/>-<sp/>0.1<sp/>/<sp/>t));</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>200)<sp/>{</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>for<sp/>the<sp/>start<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/>ia<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>sMin;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>ta<sp/>=<sp/>t0<sp/>+<sp/>sa<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/>xa<sp/>=<sp/>x0<sp/>+<sp/>sa<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/>ya<sp/>=<sp/>y0<sp/>+<sp/>sa<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/>ra<sp/>=<sp/>r0<sp/>+<sp/>sa<sp/>*<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/>getShadingColorRadialHelper(t0,<sp/>t1,<sp/>ta,<sp/>shading,<sp/>&amp;colorA);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>needExtend<sp/>=<sp/>!out-&gt;radialShadedSupportExtend(state,<sp/>shading);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>circles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ia<sp/>&lt;<sp/>radialMaxSplits)<sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>as<sp/>far<sp/>along<sp/>the<sp/>t<sp/>axis<sp/>(toward<sp/>t1)<sp/>as<sp/>we<sp/>can,<sp/>such<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>difference<sp/>is<sp/>within<sp/>the<sp/>tolerance<sp/>(radialColorDelta)<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>uses<sp/>bisection<sp/>(between<sp/>the<sp/>current<sp/>value,<sp/>t,<sp/>and<sp/>t1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>limited<sp/>to<sp/>radialMaxSplits<sp/>points<sp/>along<sp/>the<sp/>t<sp/>axis;<sp/>require<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>one<sp/>split<sp/>to<sp/>avoid<sp/>problems<sp/>when<sp/>the<sp/>innermost<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outermost<sp/>colors<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>radialMaxSplits;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>sb<sp/>=<sp/>sMax;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>tb<sp/>=<sp/>t0<sp/>+<sp/>sb<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>getShadingColorRadialHelper(t0,<sp/>t1,<sp/>tb,<sp/>shading,<sp/>&amp;colorB);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ib<sp/>-<sp/>ia<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSameGfxColor(colorB,<sp/>colorA,<sp/>nComps,<sp/>radialColorDelta))<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>shading<sp/>is<sp/>not<sp/>necessarily<sp/>lineal<sp/>so<sp/>having<sp/>two<sp/>points<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>color<sp/>does<sp/>not<sp/>mean<sp/>all<sp/>the<sp/>areas<sp/>in<sp/>between<sp/>have<sp/>the<sp/>same<sp/>color<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ic<sp/>=<sp/>ia<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ic<sp/>&lt;=<sp/>ib;<sp/>ic++)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>colorC;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>sMin<sp/>+<sp/>((double)ic<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)radialMaxSplits)<sp/>*<sp/>(sMax<sp/>-<sp/>sMin);</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tc<sp/>=<sp/>t0<sp/>+<sp/>sc<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getShadingColorRadialHelper(t0,<sp/>t1,<sp/>tc,<sp/>shading,<sp/>&amp;colorC);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isSameGfxColor(colorC,<sp/>colorA,<sp/>nComps,<sp/>radialColorDelta))<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>(ic<sp/>&gt;<sp/>ia<sp/>+<sp/>1)<sp/>?<sp/>ic<sp/>-<sp/>1<sp/>:<sp/>ia<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb<sp/>=<sp/>sMin<sp/>+<sp/>((double)ib<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)radialMaxSplits)<sp/>*<sp/>(sMax<sp/>-<sp/>sMin);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tb<sp/>=<sp/>t0<sp/>+<sp/>sb<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getShadingColorRadialHelper(t0,<sp/>t1,<sp/>tb,<sp/>shading,<sp/>&amp;colorB);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>(ia<sp/>+<sp/>ib)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb<sp/>=<sp/>sMin<sp/>+<sp/>((double)ib<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)radialMaxSplits)<sp/>*<sp/>(sMax<sp/>-<sp/>sMin);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tb<sp/>=<sp/>t0<sp/>+<sp/>sb<sp/>*<sp/>(t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getShadingColorRadialHelper(t0,<sp/>t1,<sp/>tb,<sp/>shading,<sp/>&amp;colorB);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>center<sp/>and<sp/>radius<sp/>of<sp/>the<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/>xb<sp/>=<sp/>x0<sp/>+<sp/>sb<sp/>*<sp/>(x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>yb<sp/>=<sp/>y0<sp/>+<sp/>sb<sp/>*<sp/>(y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/>rb<sp/>=<sp/>r0<sp/>+<sp/>sb<sp/>*<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>average<sp/>of<sp/>the<sp/>colors<sp/>at<sp/>the<sp/>two<sp/>circles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorA.c[k]<sp/>=<sp/>(colorA.c[k]<sp/>+<sp/>colorB.c[k])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;colorA);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useFillColorStop())</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColorStop(state,<sp/>(sa<sp/>-<sp/>sMin)/(sMax<sp/>-<sp/>sMin));</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needExtend)<sp/>{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>path<sp/>for<sp/>first<sp/>circle<sp/>(counterclockwise)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xa<sp/>+<sp/>ra,<sp/>ya);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>2<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(angle),<sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>and<sp/>append<sp/>path<sp/>for<sp/>second<sp/>circle<sp/>(clockwise)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xb<sp/>+<sp/>rb,<sp/>yb);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>-((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>2<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xb<sp/>+<sp/>rb<sp/>*<sp/>cos(angle),<sp/>yb<sp/>+<sp/>rb<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>first<sp/>subpath<sp/>(clockwise)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI),</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI));</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>(2<sp/>*<sp/>theta<sp/>+<sp/>M_PI);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xb<sp/>+<sp/>rb<sp/>*<sp/>cos(angle),<sp/>yb<sp/>+<sp/>rb<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>alpha<sp/>-<sp/>theta<sp/>-<sp/>0.5<sp/>*<sp/>M_PI</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>(2<sp/>*<sp/>theta<sp/>-<sp/>M_PI);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(angle),<sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>second<sp/>subpath<sp/>(counterclockwise)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI),</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI));</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>alpha<sp/>+<sp/>theta<sp/>+<sp/>0.5<sp/>*<sp/>M_PI</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>(-2<sp/>*<sp/>theta<sp/>+<sp/>M_PI);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xb<sp/>+<sp/>rb<sp/>*<sp/>cos(angle),<sp/>yb<sp/>+<sp/>rb<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>alpha<sp/>-<sp/>theta<sp/>-<sp/>0.5<sp/>*<sp/>M_PI</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>(2<sp/>*<sp/>theta<sp/>+<sp/>M_PI);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(angle),<sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;useFillColorStop())<sp/>{</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>to<sp/>the<sp/>next<sp/>value<sp/>of<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>ia<sp/>=<sp/>ib;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sb;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>tb;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>xb;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>yb;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>rb;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/>colorA<sp/>=<sp/>colorB;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useFillColorStop())<sp/>{</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>add<sp/>stop<sp/>color<sp/>when<sp/>sb<sp/>=<sp/>sMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;colorA);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColorStop(state,<sp/>(sb<sp/>-<sp/>sMin)/(sMax<sp/>-<sp/>sMin));</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!needExtend)</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>the<sp/>smaller<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>r0<sp/>&lt;=<sp/>r1)<sp/>||</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/>(shading-&gt;getExtend1()<sp/>&amp;&amp;<sp/>r1<sp/>&lt;<sp/>r0))<sp/>{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&lt;=<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(ta,<sp/>&amp;colorA);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;colorA);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xa<sp/>+<sp/>ra,<sp/>ya);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>2<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(angle),<sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>the<sp/>larger<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>r0<sp/>&gt;<sp/>r1)<sp/>||</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>(shading-&gt;getExtend1()<sp/>&amp;&amp;<sp/>r1<sp/>&gt;=<sp/>r0))<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&gt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getColor(ta,<sp/>&amp;colorA);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;colorA);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(xa<sp/>+<sp/>ra,<sp/>ya);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>((double)k<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>*<sp/>2<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xa<sp/>+<sp/>ra<sp/>*<sp/>cos(angle),<sp/>ya<sp/>+<sp/>ra<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doGouraudTriangleShFill(<ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useShadedFills(<sp/>shading-&gt;getType()))<sp/>{</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;gouraudTriangleShadedFill(<sp/>state,<sp/>shading))</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocate<sp/>a<sp/>path<sp/>(speed<sp/>improvements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(0.,<sp/>0.);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(1.,<sp/>0.);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(0.,<sp/>1.);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator" kindref="compound">GfxState::ReusablePathIterator</ref><sp/>*reusablePath<sp/>=<sp/>state-&gt;getReusablePath();</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;isParameterized())<sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>with<sp/>parameterized<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color0,<sp/>color1,<sp/>color2;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>relative<sp/>threshold:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>refineColorThreshold<sp/>=<sp/>gouraudParameterizedColorDelta<sp/>*</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1afde54962e071a49f42ebbd0b7a33393e" kindref="member">getParameterDomainMax</ref>()<sp/>-<sp/>shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1a702b7864620fa2b509f58354343653c2" kindref="member">getParameterDomainMin</ref>());</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNTriangles();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">getTriangle</ref>(i,<sp/>&amp;x0,<sp/>&amp;y0,<sp/>&amp;color0,</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;color1,</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x2,<sp/>&amp;y2,<sp/>&amp;color2);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gouraudFillTriangle(x0,<sp/>y0,<sp/>color0,<sp/>x1,<sp/>y1,<sp/>color1,<sp/>x2,<sp/>y2,<sp/>color2,<sp/>refineColorThreshold,<sp/>0,<sp/>shading,<sp/>reusablePath);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>always<sp/>produces<sp/>output<sp/>--<sp/>even<sp/>for<sp/>parameterized<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>it<sp/>ignores<sp/>the<sp/>parameterized<sp/>color<sp/>map<sp/>(the<sp/>function).<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>using<sp/>this<sp/>code<sp/>in<sp/>for<sp/>parameterized<sp/>shadings<sp/>might<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>in<sp/>circumstances<sp/>(namely<sp/>if<sp/>the<sp/>function<sp/>is<sp/>linear<sp/>in<sp/>the<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triangle),<sp/>but<sp/>in<sp/>general,<sp/>it<sp/>will<sp/>simply<sp/>be<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color0,<sp/>color1,<sp/>color2;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNTriangles();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;<ref refid="class_gfx_gouraud_triangle_shading_1ae22356d46b989547db9dbb247ed34bad" kindref="member">getTriangle</ref>(i,<sp/>&amp;x0,<sp/>&amp;y0,<sp/>&amp;color0,</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;color1,</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;x2,<sp/>&amp;y2,<sp/>&amp;color2);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gouraudFillTriangle(x0,<sp/>y0,<sp/>&amp;color0,<sp/>x1,<sp/>y1,<sp/>&amp;color1,<sp/>x2,<sp/>y2,<sp/>&amp;color2,<sp/>shading-&gt;getColorSpace()-&gt;getNComps(),<sp/>0,<sp/>reusablePath);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>reusablePath;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkTrue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message)<sp/>{</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!b))<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/>message);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::gouraudFillTriangle(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color0,</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color1,</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*color2,</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nComps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator" kindref="compound">GfxState::ReusablePathIterator</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x01,<sp/>y01,<sp/>x12,<sp/>y12,<sp/>x20,<sp/>y20;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color01,<sp/>color12,<sp/>color20;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(color0-&gt;c[i]<sp/>-<sp/>color1-&gt;c[i])<sp/>&gt;<sp/>gouraudColorDelta<sp/>||</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>abs(color1-&gt;c[i]<sp/>-<sp/>color2-&gt;c[i])<sp/>&gt;<sp/>gouraudColorDelta)<sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>nComps<sp/>||<sp/>depth<sp/>==<sp/>gouraudMaxDepth)<sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(color0);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a59f8f6d089eb2ae9b0f28e0b7a37342a" kindref="member">reset</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x0,y0);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x1,y1);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x2,y2);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x0,y0);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(<sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>x01<sp/>=<sp/>0.5<sp/>*<sp/>(x0<sp/>+<sp/>x1);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>y01<sp/>=<sp/>0.5<sp/>*<sp/>(y0<sp/>+<sp/>y1);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>x12<sp/>=<sp/>0.5<sp/>*<sp/>(x1<sp/>+<sp/>x2);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>y12<sp/>=<sp/>0.5<sp/>*<sp/>(y1<sp/>+<sp/>y2);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>x20<sp/>=<sp/>0.5<sp/>*<sp/>(x2<sp/>+<sp/>x0);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/>y20<sp/>=<sp/>0.5<sp/>*<sp/>(y2<sp/>+<sp/>y0);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color01.c[i]<sp/>=<sp/>(color0-&gt;c[i]<sp/>+<sp/>color1-&gt;c[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color12.c[i]<sp/>=<sp/>(color1-&gt;c[i]<sp/>+<sp/>color2-&gt;c[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color20.c[i]<sp/>=<sp/>(color2-&gt;c[i]<sp/>+<sp/>color0-&gt;c[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x0,<sp/>y0,<sp/>color0,<sp/>x01,<sp/>y01,<sp/>&amp;color01,</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x20,<sp/>y20,<sp/>&amp;color20,<sp/>nComps,<sp/>depth<sp/>+<sp/>1,<sp/>path);</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x01,<sp/>y01,<sp/>&amp;color01,<sp/>x1,<sp/>y1,<sp/>color1,</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x12,<sp/>y12,<sp/>&amp;color12,<sp/>nComps,<sp/>depth<sp/>+<sp/>1,<sp/>path);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x01,<sp/>y01,<sp/>&amp;color01,<sp/>x12,<sp/>y12,<sp/>&amp;color12,</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x20,<sp/>y20,<sp/>&amp;color20,<sp/>nComps,<sp/>depth<sp/>+<sp/>1,<sp/>path);</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x20,<sp/>y20,<sp/>&amp;color20,<sp/>x12,<sp/>y12,<sp/>&amp;color12,</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2,<sp/>y2,<sp/>color2,<sp/>nComps,<sp/>depth<sp/>+<sp/>1,<sp/>path);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::gouraudFillTriangle(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color0,</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color1,</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color2,</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>refineColorThreshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="class_gfx_gouraud_triangle_shading" kindref="compound">GfxGouraudTriangleShading</ref><sp/>*shading,<sp/><ref refid="class_gfx_state_1_1_reusable_path_iterator" kindref="compound">GfxState::ReusablePathIterator</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanColor<sp/>=<sp/>(color0<sp/>+<sp/>color1<sp/>+<sp/>color2)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFineEnough<sp/>=<sp/></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(color0<sp/>-<sp/>meanColor)<sp/>&lt;<sp/>refineColorThreshold<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(color1<sp/>-<sp/>meanColor)<sp/>&lt;<sp/>refineColorThreshold<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(color2<sp/>-<sp/>meanColor)<sp/>&lt;<sp/>refineColorThreshold;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFineEnough<sp/>||<sp/>depth<sp/>==<sp/>gouraudMaxDepth)<sp/>{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor(meanColor,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;color);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a59f8f6d089eb2ae9b0f28e0b7a37342a" kindref="member">reset</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x0,y0);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x1,y1);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x2,y2);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(!path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>not<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1af4e893977b96e25d14e64d93bb8a76f1" kindref="member">setCoord</ref>(x0,y0);<sp/><sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a9ec26361635eb53e8803b38b0ad86cd9" kindref="member">next</ref>();<sp/><sp/>checkTrue(<sp/>path-&gt;<ref refid="class_gfx_state_1_1_reusable_path_iterator_1a044ed0b09dfce40f703700db98c6e1d9" kindref="member">isEnd</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>should<sp/>be<sp/>at<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x01<sp/>=<sp/>0.5<sp/>*<sp/>(x0<sp/>+<sp/>x1);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y01<sp/>=<sp/>0.5<sp/>*<sp/>(y0<sp/>+<sp/>y1);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x12<sp/>=<sp/>0.5<sp/>*<sp/>(x1<sp/>+<sp/>x2);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y12<sp/>=<sp/>0.5<sp/>*<sp/>(y1<sp/>+<sp/>y2);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x20<sp/>=<sp/>0.5<sp/>*<sp/>(x2<sp/>+<sp/>x0);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y20<sp/>=<sp/>0.5<sp/>*<sp/>(y2<sp/>+<sp/>y0);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color01<sp/>=<sp/>(color0<sp/>+<sp/>color1)<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color12<sp/>=<sp/>(color1<sp/>+<sp/>color2)<sp/>/<sp/>2.;<sp/></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>color20<sp/>=<sp/>(color2<sp/>+<sp/>color0)<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>++depth;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x0,<sp/>y0,<sp/>color0,<sp/></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x01,<sp/>y01,<sp/>color01,</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x20,<sp/>y20,<sp/>color20,<sp/></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold,<sp/>depth,<sp/>shading,<sp/>path);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x01,<sp/>y01,<sp/>color01,<sp/></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1,<sp/>y1,<sp/>color1,</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x12,<sp/>y12,<sp/>color12,<sp/></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold,<sp/>depth,<sp/>shading,<sp/>path);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x01,<sp/>y01,<sp/>color01,<sp/></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x12,<sp/>y12,<sp/>color12,</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x20,<sp/>y20,<sp/>color20,<sp/></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold,<sp/>depth,<sp/>shading,<sp/>path);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>gouraudFillTriangle(x20,<sp/>y20,<sp/>color20,<sp/></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x12,<sp/>y12,<sp/>color12,</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2,<sp/>y2,<sp/>color2,<sp/></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold,<sp/>depth,<sp/>shading,<sp/>path);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doPatchMeshShFill(<ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/>i;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useShadedFills(<sp/>shading-&gt;getType()))<sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;patchMeshShadedFill(<sp/>state,<sp/>shading))</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNPatches()<sp/>&gt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNPatches()<sp/>&gt;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNPatches()<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3501"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Parameterized<sp/>shadings<sp/>take<sp/>one<sp/>parameter<sp/>[t_0,t_e]</highlight></codeline>
<codeline lineno="3502"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>map<sp/>it<sp/>into<sp/>the<sp/>color<sp/>space.</highlight></codeline>
<codeline lineno="3503"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3504"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Consequently,<sp/>all<sp/>color<sp/>values<sp/>are<sp/>stored<sp/>as<sp/>doubles.</highlight></codeline>
<codeline lineno="3505"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3506"><highlight class="comment"><sp/><sp/><sp/>*<sp/>These<sp/>color<sp/>values<sp/>are<sp/>interpreted<sp/>as<sp/>parameters<sp/>for<sp/>parameterized</highlight></codeline>
<codeline lineno="3507"><highlight class="comment"><sp/><sp/><sp/>*<sp/>shadings<sp/>and<sp/>as<sp/>colorspace<sp/>entities<sp/>otherwise.</highlight></codeline>
<codeline lineno="3508"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3509"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>only<sp/>difference<sp/>is<sp/>that<sp/>color<sp/>space<sp/>entities<sp/>are<sp/>stored<sp/>into</highlight></codeline>
<codeline lineno="3510"><highlight class="comment"><sp/><sp/><sp/>*<sp/>DOUBLE<sp/>arrays,<sp/>not<sp/>into<sp/>arrays<sp/>of<sp/>type<sp/>GfxColorComp.</highlight></codeline>
<codeline lineno="3511"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorComps<sp/>=<sp/>shading-&gt;getColorSpace()-&gt;getNComps();</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>refineColorThreshold;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>shading-&gt;isParameterized()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold<sp/>=<sp/>gouraudParameterizedColorDelta<sp/>*</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shading-&gt;<ref refid="class_gfx_patch_mesh_shading_1ac03f7da2444d285f27708d1db5dc2299" kindref="member">getParameterDomainMax</ref>()<sp/>-<sp/>shading-&gt;<ref refid="class_gfx_patch_mesh_shading_1a9dfc69bcc0118dd37cb237634031b856" kindref="member">getParameterDomainMin</ref>());</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold<sp/>=<sp/>patchColorDelta;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNPatches();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPatch(shading-&gt;getPatch(i),</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorComps,<sp/></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;isParameterized()<sp/>?<sp/>1<sp/>:<sp/>colorComps,</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refineColorThreshold,</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shading);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::fillPatch(<ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>*patch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorComps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patchColorComps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>refineColorThreshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="class_gfx_patch_mesh_shading" kindref="compound">GfxPatchMeshShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_patch" kindref="compound">GfxPatch</ref><sp/>patch00,<sp/>patch01,<sp/>patch10,<sp/>patch11;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx[4][8],<sp/>yy[4][8];</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xxm,<sp/>yym;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>patchColorComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>comparisons<sp/>are<sp/>done<sp/>in<sp/>double<sp/>arithmetics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>non-parameterized<sp/>shadings,<sp/>they<sp/>are<sp/>done<sp/>in<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>-<sp/>patch-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>&gt;<sp/>refineColorThreshold<sp/>||</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(patch-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>-<sp/>patch-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>&gt;<sp/>refineColorThreshold<sp/>||</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(patch-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>-<sp/>patch-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>&gt;<sp/>refineColorThreshold<sp/>||</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(patch-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>-<sp/>patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>&gt;<sp/>refineColorThreshold)<sp/>{</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>patchColorComps<sp/>||<sp/>depth<sp/>==<sp/>patchMaxDepth)<sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>flatColor;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>shading-&gt;isParameterized()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shading-&gt;getParameterizedColor(<sp/>patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[0],<sp/>&amp;flatColor<sp/>);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i&lt;colorComps;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simply<sp/>cast<sp/>to<sp/>the<sp/>desired<sp/>type;<sp/>that&apos;s<sp/>all<sp/>what<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flatColor.c[i]<sp/>=<sp/>GfxColorComp(patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFillColor(&amp;flatColor);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(patch-&gt;x[0][0],<sp/>patch-&gt;y[0][0]);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;curveTo(patch-&gt;x[0][1],<sp/>patch-&gt;y[0][1],</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][2],<sp/>patch-&gt;y[0][2],</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][3],<sp/>patch-&gt;y[0][3]);</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;curveTo(patch-&gt;x[1][3],<sp/>patch-&gt;y[1][3],</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[2][3],<sp/>patch-&gt;y[2][3],</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][3],<sp/>patch-&gt;y[3][3]);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;curveTo(patch-&gt;x[3][2],<sp/>patch-&gt;y[3][2],</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][1],<sp/>patch-&gt;y[3][1],</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[3][0],<sp/>patch-&gt;y[3][0]);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;curveTo(patch-&gt;x[2][0],<sp/>patch-&gt;y[2][0],</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[1][0],<sp/>patch-&gt;y[1][0],</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;x[0][0],<sp/>patch-&gt;y[0][0]);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][0]<sp/>=<sp/>patch-&gt;x[i][0];</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][0]<sp/>=<sp/>patch-&gt;y[i][0];</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][1]<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;x[i][0]<sp/>+<sp/>patch-&gt;x[i][1]);</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][1]<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;y[i][0]<sp/>+<sp/>patch-&gt;y[i][1]);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xxm<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;x[i][1]<sp/>+<sp/>patch-&gt;x[i][2]);</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yym<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;y[i][1]<sp/>+<sp/>patch-&gt;y[i][2]);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][6]<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;x[i][2]<sp/>+<sp/>patch-&gt;x[i][3]);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][6]<sp/>=<sp/>0.5<sp/>*<sp/>(patch-&gt;y[i][2]<sp/>+<sp/>patch-&gt;y[i][3]);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][2]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[i][1]<sp/>+<sp/>xxm);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][2]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[i][1]<sp/>+<sp/>yym);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][5]<sp/>=<sp/>0.5<sp/>*<sp/>(xxm<sp/>+<sp/>xx[i][6]);</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][5]<sp/>=<sp/>0.5<sp/>*<sp/>(yym<sp/>+<sp/>yy[i][6]);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][3]<sp/>=<sp/>xx[i][4]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[i][2]<sp/>+<sp/>xx[i][5]);</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][3]<sp/>=<sp/>yy[i][4]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[i][2]<sp/>+<sp/>yy[i][5]);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx[i][7]<sp/>=<sp/>patch-&gt;x[i][3];</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy[i][7]<sp/>=<sp/>patch-&gt;y[i][3];</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.x[0][i]<sp/>=<sp/>xx[0][i];</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.y[0][i]<sp/>=<sp/>yy[0][i];</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.x[1][i]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[0][i]<sp/>+<sp/>xx[1][i]);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.y[1][i]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[0][i]<sp/>+<sp/>yy[1][i]);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xxm<sp/>=<sp/>0.5<sp/>*<sp/>(xx[1][i]<sp/>+<sp/>xx[2][i]);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yym<sp/>=<sp/>0.5<sp/>*<sp/>(yy[1][i]<sp/>+<sp/>yy[2][i]);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.x[2][i]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[2][i]<sp/>+<sp/>xx[3][i]);</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.y[2][i]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[2][i]<sp/>+<sp/>yy[3][i]);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.x[2][i]<sp/>=<sp/>0.5<sp/>*<sp/>(patch00.x[1][i]<sp/>+<sp/>xxm);</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.y[2][i]<sp/>=<sp/>0.5<sp/>*<sp/>(patch00.y[1][i]<sp/>+<sp/>yym);</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.x[1][i]<sp/>=<sp/>0.5<sp/>*<sp/>(xxm<sp/>+<sp/>patch10.x[2][i]);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.y[1][i]<sp/>=<sp/>0.5<sp/>*<sp/>(yym<sp/>+<sp/>patch10.y[2][i]);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.x[3][i]<sp/>=<sp/>0.5<sp/>*<sp/>(patch00.x[2][i]<sp/>+<sp/>patch10.x[1][i]);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.y[3][i]<sp/>=<sp/>0.5<sp/>*<sp/>(patch00.y[2][i]<sp/>+<sp/>patch10.y[1][i]);</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.x[0][i]<sp/>=<sp/>patch00.x[3][i];</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.y[0][i]<sp/>=<sp/>patch00.y[3][i];</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.x[3][i]<sp/>=<sp/>xx[3][i];</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.y[3][i]<sp/>=<sp/>yy[3][i];</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.x[0][i-4]<sp/>=<sp/>xx[0][i];</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.y[0][i-4]<sp/>=<sp/>yy[0][i];</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.x[1][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[0][i]<sp/>+<sp/>xx[1][i]);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.y[1][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[0][i]<sp/>+<sp/>yy[1][i]);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xxm<sp/>=<sp/>0.5<sp/>*<sp/>(xx[1][i]<sp/>+<sp/>xx[2][i]);</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yym<sp/>=<sp/>0.5<sp/>*<sp/>(yy[1][i]<sp/>+<sp/>yy[2][i]);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.x[2][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(xx[2][i]<sp/>+<sp/>xx[3][i]);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.y[2][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(yy[2][i]<sp/>+<sp/>yy[3][i]);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.x[2][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(patch01.x[1][i-4]<sp/>+<sp/>xxm);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.y[2][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(patch01.y[1][i-4]<sp/>+<sp/>yym);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.x[1][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(xxm<sp/>+<sp/>patch11.x[2][i-4]);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.y[1][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(yym<sp/>+<sp/>patch11.y[2][i-4]);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.x[3][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(patch01.x[2][i-4]<sp/>+<sp/>patch11.x[1][i-4]);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.y[3][i-4]<sp/>=<sp/>0.5<sp/>*<sp/>(patch01.y[2][i-4]<sp/>+<sp/>patch11.y[1][i-4]);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.x[0][i-4]<sp/>=<sp/>patch01.x[3][i-4];</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.y[0][i-4]<sp/>=<sp/>patch01.y[3][i-4];</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.x[3][i-4]<sp/>=<sp/>xx[3][i];</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.y[3][i-4]<sp/>=<sp/>yy[3][i];</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>patchColorComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>(patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>+</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch00.color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>(patch-&gt;color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>+</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch01.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>(patch-&gt;color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>+</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch11.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>(patch-&gt;color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>+</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch10.color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch00.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>(patch00.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>+</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch01.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch01.color[1][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch00.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch11.color[0][0].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch00.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patch10.color[0][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i]<sp/>=<sp/>patch00.color[1][1].<ref refid="struct_gfx_patch_1_1_color_value_1ad69e7f7186b9be22d716d1c6b96c416b" kindref="member">c</ref>[i];</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPatch(&amp;patch00,<sp/>colorComps,<sp/>patchColorComps,<sp/>refineColorThreshold,<sp/>depth<sp/>+<sp/>1,<sp/>shading);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPatch(&amp;patch10,<sp/>colorComps,<sp/>patchColorComps,<sp/>refineColorThreshold,<sp/>depth<sp/>+<sp/>1,<sp/>shading);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPatch(&amp;patch01,<sp/>colorComps,<sp/>patchColorComps,<sp/>refineColorThreshold,<sp/>depth<sp/>+<sp/>1,<sp/>shading);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>fillPatch(&amp;patch11,<sp/>colorComps,<sp/>patchColorComps,<sp/>refineColorThreshold,<sp/>depth<sp/>+<sp/>1,<sp/>shading);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doEndPath()<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isCurPt()<sp/>&amp;&amp;<sp/>clip<sp/>!=<sp/>clipNone)<sp/>{</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip<sp/>==<sp/>clipNormal)<sp/>{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;eoClip(state);</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/>clip<sp/>=<sp/>clipNone;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>path<sp/>clipping<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opClip(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>clip<sp/>=<sp/>clipNormal;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEOClip(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>clip<sp/>=<sp/>clipEO;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text<sp/>object<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opBeginText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/>out-&gt;beginTextObject(state);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>state-&gt;setTextMat(1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(0,<sp/>0);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>out-&gt;updateTextMat(state);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEndText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/>out-&gt;endTextObject(state);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text<sp/>state<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetCharSpacing(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/>state-&gt;setCharSpace(args[0].getNum());</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>out-&gt;updateCharSpace(state);</highlight></codeline>
<codeline lineno="3717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetFont(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(font<sp/>=<sp/>res-&gt;lookupFont(args[0].getName())))<sp/>{</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unsetting<sp/>the<sp/>font<sp/>(drawing<sp/>no<sp/>text)<sp/>is<sp/>better<sp/>than<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>one<sp/>and<sp/>drawing<sp/>random<sp/>glyphs<sp/>from<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setFont(NULL,<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>font:<sp/>tag=%s<sp/>name=&apos;%s&apos;<sp/>%g\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getTag()-&gt;getCString(),</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getName()<sp/>?<sp/>font-&gt;getName()-&gt;getCString()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;???&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>font-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/>state-&gt;setFont(font,<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetTextLeading(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/>state-&gt;setLeading(args[0].getNum());</highlight></codeline>
<codeline lineno="3744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetTextRender(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>state-&gt;setRender(args[0].getInt());</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>out-&gt;updateRender(state);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetTextRise(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/>state-&gt;setRise(args[0].getNum());</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/>out-&gt;updateRise(state);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetWordSpacing(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>state-&gt;setWordSpace(args[0].getNum());</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>out-&gt;updateWordSpace(state);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetHorizScaling(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>state-&gt;setHorizScaling(args[0].getNum());</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>out-&gt;updateHorizScaling(state);</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text<sp/>positioning<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opTextMove(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state-&gt;getLineX()<sp/>+<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>state-&gt;getLineY()<sp/>+<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opTextMoveSet(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state-&gt;getLineX()<sp/>+<sp/>args[0].getNum();</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>args[1].getNum();</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/>state-&gt;setLeading(-ty);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/>ty<sp/>+=<sp/>state-&gt;getLineY();</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetTextMatrix(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/>state-&gt;setTextMat(args[0].getNum(),<sp/>args[1].getNum(),</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[2].getNum(),<sp/>args[3].getNum(),</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[4].getNum(),<sp/>args[5].getNum());</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(0,<sp/>0);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/>out-&gt;updateTextMat(state);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/>fontChanged<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opTextNextLine(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state-&gt;getLineX();</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>state-&gt;getLineY()<sp/>-<sp/>state-&gt;getLeading();</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text<sp/>string<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opShowText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;getFont())<sp/>{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>font<sp/>in<sp/>show&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontChanged)<sp/>{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/>out-&gt;beginStringOp(state);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/>doShowText(args[0].getString());</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/>out-&gt;endStringOp(state);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState)<sp/>{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>doIncCharCount(args[0].getString());</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opMoveShowText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;getFont())<sp/>{</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>font<sp/>in<sp/>move/show&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontChanged)<sp/>{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state-&gt;getLineX();</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>state-&gt;getLineY()<sp/>-<sp/>state-&gt;getLeading();</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/>out-&gt;beginStringOp(state);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>doShowText(args[0].getString());</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/>out-&gt;endStringOp(state);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState)<sp/>{</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>doIncCharCount(args[0].getString());</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opMoveSetShowText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;getFont())<sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>font<sp/>in<sp/>move/set/show&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontChanged)<sp/>{</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>state-&gt;setWordSpace(args[0].getNum());</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>state-&gt;setCharSpace(args[1].getNum());</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>tx<sp/>=<sp/>state-&gt;getLineX();</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>ty<sp/>=<sp/>state-&gt;getLineY()<sp/>-<sp/>state-&gt;getLeading();</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>state-&gt;textMoveTo(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>out-&gt;updateWordSpace(state);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>out-&gt;updateCharSpace(state);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/>out-&gt;updateTextPos(state);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/>out-&gt;beginStringOp(state);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>doShowText(args[2].getString());</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/>out-&gt;endStringOp(state);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)<sp/>{</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>doIncCharCount(args[2].getString());</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opShowSpaceText(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*a;</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;getFont())<sp/>{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>font<sp/>in<sp/>show/space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontChanged)<sp/>{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/>fontChanged<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>out-&gt;beginStringOp(state);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>wMode<sp/>=<sp/>state-&gt;getFont()-&gt;getWMode();</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>args[0].getArray();</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;get(i,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isNum())<sp/>{</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>uses<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>the<sp/>font<sp/>size<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acrobat&apos;s<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;textShift(0,<sp/>-obj.getNum()<sp/>*<sp/>0.001<sp/>*</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFontSize());</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;textShift(-obj.getNum()<sp/>*<sp/>0.001<sp/>*</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFontSize()<sp/>*</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getHorizScaling(),<sp/>0);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateTextShift(state,<sp/>obj.getNum());</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isString())<sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doShowText(obj.getString());</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Element<sp/>of<sp/>show/space<sp/>array<sp/>must<sp/>be<sp/>number<sp/>or<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>out-&gt;endStringOp(state);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState)<sp/>{</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>args[0].getArray();</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;get(i,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isString())<sp/>{</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/>doIncCharCount(obj.getString());</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doShowText(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>riseX,<sp/>riseY;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>CharCode<sp/>code;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>Unicode<sp/>*u<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>dx,<sp/>dy,<sp/>dx2,<sp/>dy2,<sp/>curX,<sp/>curY,<sp/>tdx,<sp/>tdy,<sp/>ddx,<sp/>ddy;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originX,<sp/>originY,<sp/>tOriginX,<sp/>tOriginY;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oldCTM[6],<sp/>newCTM[6];</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>charProc;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*oldParser;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*savedState;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>render;</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>GBool<sp/>patternFill;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>n,<sp/>uLen,<sp/>nChars,<sp/>nSpaces,<sp/>i;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>font<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/>wMode<sp/>=<sp/>font-&gt;getWMode();</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useDrawChar())<sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;beginString(state,<sp/>s);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>doing<sp/>a<sp/>pattern<sp/>fill,<sp/>set<sp/>up<sp/>clipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/>render<sp/>=<sp/>state-&gt;getRender();</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(render<sp/>&amp;<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>patternFill<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/>saveState();</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>fill,<sp/>enable<sp/>clipping,<sp/>leave<sp/>stroke<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((render<sp/>^<sp/>(render<sp/>&gt;&gt;<sp/>1))<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>render<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>render<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setRender(render);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateRender(state);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/>patternFill<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>state-&gt;textTransformDelta(0,<sp/>state-&gt;getRise(),<sp/>&amp;riseX,<sp/>&amp;riseY);</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>state-&gt;getCurX()<sp/>+<sp/>riseX;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/>y0<sp/>=<sp/>state-&gt;getCurY()<sp/>+<sp/>riseY;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>a<sp/>Type<sp/>3<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getType()<sp/>==<sp/>fontType3<sp/>&amp;&amp;<sp/>out-&gt;interpretType3Chars())<sp/>{</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>state-&gt;getCTM();</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldCTM[i]<sp/>=<sp/>mat[i];</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>state-&gt;getTextMat();</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[0]<sp/>=<sp/>mat[0]<sp/>*<sp/>oldCTM[0]<sp/>+<sp/>mat[1]<sp/>*<sp/>oldCTM[2];</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[1]<sp/>=<sp/>mat[0]<sp/>*<sp/>oldCTM[1]<sp/>+<sp/>mat[1]<sp/>*<sp/>oldCTM[3];</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[2]<sp/>=<sp/>mat[2]<sp/>*<sp/>oldCTM[0]<sp/>+<sp/>mat[3]<sp/>*<sp/>oldCTM[2];</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[3]<sp/>=<sp/>mat[2]<sp/>*<sp/>oldCTM[1]<sp/>+<sp/>mat[3]<sp/>*<sp/>oldCTM[3];</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>font-&gt;getFontMatrix();</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[0]<sp/>=<sp/>mat[0]<sp/>*<sp/>newCTM[0]<sp/>+<sp/>mat[1]<sp/>*<sp/>newCTM[2];</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[1]<sp/>=<sp/>mat[0]<sp/>*<sp/>newCTM[1]<sp/>+<sp/>mat[1]<sp/>*<sp/>newCTM[3];</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[2]<sp/>=<sp/>mat[2]<sp/>*<sp/>newCTM[0]<sp/>+<sp/>mat[3]<sp/>*<sp/>newCTM[2];</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[3]<sp/>=<sp/>mat[2]<sp/>*<sp/>newCTM[1]<sp/>+<sp/>mat[3]<sp/>*<sp/>newCTM[3];</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[0]<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[1]<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[2]<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[3]<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[0]<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/>newCTM[2]<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/>curX<sp/>=<sp/>state-&gt;getCurX();</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>curY<sp/>=<sp/>state-&gt;getCurY();</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/>oldParser<sp/>=<sp/>parser;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>font-&gt;getNextChar(p,<sp/>len,<sp/>&amp;code,</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;u,<sp/>&amp;uLen,</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx,<sp/>&amp;dy,<sp/>&amp;originX,<sp/>&amp;originY);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx<sp/>*<sp/>state-&gt;getFontSize()<sp/>+<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(dx,<sp/>dy,<sp/>&amp;tdx,<sp/>&amp;tdy);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;transform(curX<sp/>+<sp/>riseX,<sp/>curY<sp/>+<sp/>riseY,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>savedState<sp/>=<sp/>saveStateStack();</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setCTM(newCTM[0],<sp/>newCTM[1],<sp/>newCTM[2],<sp/>newCTM[3],<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>the<sp/>CTM<sp/>concat<sp/>values<sp/>here<sp/>are<sp/>wrong<sp/>(but<sp/>never<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateCTM(state,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;transformDelta(dx,<sp/>dy,<sp/>&amp;ddx,<sp/>&amp;ddy);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out-&gt;beginType3Char(state,<sp/>curX<sp/>+<sp/>riseX,<sp/>curY<sp/>+<sp/>riseY,<sp/>ddx,<sp/>ddy,</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code,<sp/>u,<sp/>uLen))<sp/>{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCharProc(code,<sp/>&amp;charProc);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((resDict<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getResources()))<sp/>{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pushResources(resDict);</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charProc.isStream())<sp/>{</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display(&amp;charProc,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>bad<sp/>Type3<sp/>CharProc<sp/>entry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endType3Char(state);</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resDict)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>popResources();</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>charProc.free();</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>restoreStateStack(savedState);</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GfxState::restore()<sp/>does<sp/>*not*<sp/>restore<sp/>the<sp/>current<sp/>position,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>deal<sp/>with<sp/>it<sp/>here<sp/>using<sp/>(curX,<sp/>curY)<sp/>and<sp/>(lineX,<sp/>lineY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curX<sp/>+=<sp/>tdx;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curY<sp/>+=<sp/>tdy;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;moveTo(curX,<sp/>curY);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateCTM(state,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>oldParser;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useDrawChar())<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>font-&gt;getNextChar(p,<sp/>len,<sp/>&amp;code,</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;u,<sp/>&amp;uLen,</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx,<sp/>&amp;dy,<sp/>&amp;originX,<sp/>&amp;originY);</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>dy<sp/>*<sp/>state-&gt;getFontSize()<sp/>+<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx<sp/>*<sp/>state-&gt;getFontSize()<sp/>+<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(dx,<sp/>dy,<sp/>&amp;tdx,<sp/>&amp;tdy);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originX<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originY<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(originX,<sp/>originY,<sp/>&amp;tOriginX,<sp/>&amp;tOriginY);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;drawChar(state,<sp/>state-&gt;getCurX()<sp/>+<sp/>riseX,<sp/>state-&gt;getCurY()<sp/>+<sp/>riseY,</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tdx,<sp/>tdy,<sp/>tOriginX,<sp/>tOriginY,<sp/>code,<sp/>n,<sp/>u,<sp/>uLen);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;shift(tdx,<sp/>tdy);</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>nChars<sp/>=<sp/>nSpaces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>font-&gt;getNextChar(p,<sp/>len,<sp/>&amp;code,</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;u,<sp/>&amp;uLen,</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx2,<sp/>&amp;dy2,<sp/>&amp;originX,<sp/>&amp;originY);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>+=<sp/>dx2;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>+=<sp/>dy2;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/>++nSpaces;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nChars;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>dy<sp/>*<sp/>state-&gt;getFontSize()</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>nChars<sp/>*<sp/>state-&gt;getCharSpace()</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>nSpaces<sp/>*<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx<sp/>*<sp/>state-&gt;getFontSize()</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>nChars<sp/>*<sp/>state-&gt;getCharSpace()</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>nSpaces<sp/>*<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(dx,<sp/>dy,<sp/>&amp;tdx,<sp/>&amp;tdy);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocState)</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;drawString(state,<sp/>s);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;shift(tdx,<sp/>tdy);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useDrawChar())<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endString(state);</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(patternFill<sp/>&amp;&amp;<sp/>ocState)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;saveTextPos(state);</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>OutputDev<sp/>to<sp/>do<sp/>the<sp/>clipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endTextObject(state);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>clipping<sp/>bbox<sp/>so<sp/>doPatternText<sp/>will<sp/>work<sp/>--<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>text<sp/>bounding<sp/>box<sp/>does<sp/>not<sp/>extend<sp/>past<sp/>the<sp/>baseline<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>direction<sp/>by<sp/>more<sp/>than<sp/>twice<sp/>the<sp/>font<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>state-&gt;getCurX()<sp/>+<sp/>riseX;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>state-&gt;getCurY()<sp/>+<sp/>riseY;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x0;<sp/>x0<sp/>=<sp/>x1;<sp/>x1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&gt;<sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y0;<sp/>y0<sp/>=<sp/>y1;<sp/>y1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(0,<sp/>state-&gt;getFontSize(),<sp/>&amp;dx,<sp/>&amp;dy);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;textTransformDelta(state-&gt;getFontSize(),<sp/>0,<sp/>&amp;dx2,<sp/>&amp;dy2);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>fabs(dx);</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/>dx2<sp/>=<sp/>fabs(dx2);</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx2<sp/>&gt;<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx2;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>fabs(dy);</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/>dy2<sp/>=<sp/>fabs(dy2);</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy2<sp/>&gt;<sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>dy2;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clipToRect(x0<sp/>-<sp/>2<sp/>*<sp/>dx,<sp/>y0<sp/>-<sp/>2<sp/>*<sp/>dy,<sp/>x1<sp/>+<sp/>2<sp/>*<sp/>dx,<sp/>y1<sp/>+<sp/>2<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>render<sp/>mode<sp/>to<sp/>fill-only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setRender(0);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateRender(state);</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternText();</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;restoreTextPos(state);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>updateLevel<sp/>+=<sp/>10<sp/>*<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="4164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>this<sp/>is<sp/>only<sp/>called<sp/>when<sp/>ocState<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doIncCharCount(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;needCharCount())<sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;incCharCount(s-&gt;getLength());</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XObject<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opXObject(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3,<sp/>refObj;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>opiDict;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState<sp/>&amp;&amp;<sp/>!out-&gt;needCharCount())<sp/>{</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>args[0].getName();</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res-&gt;lookupXObject(name,<sp/>&amp;obj1))<sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isStream())<sp/>{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;XObject<sp/>&apos;{0:s}&apos;<sp/>is<sp/>wrong<sp/>type&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/>obj1.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;OPI&quot;</highlight><highlight class="normal">,<sp/>&amp;opiDict);</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opiDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;opiBegin(state,<sp/>opiDict.getDict());</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/>obj1.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Subtype&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName(</highlight><highlight class="stringliteral">&quot;Image&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupXObjectNF(name,<sp/>&amp;refObj);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doImage(&amp;refObj,<sp/>obj1.getStream(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refObj.free();</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName(</highlight><highlight class="stringliteral">&quot;Form&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;lookupXObjectNF(name,<sp/>&amp;refObj);</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/>GBool<sp/>shouldDoForm<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>drawingFormIt;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refObj.isRef())<sp/>{</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>refObj.getRef().num;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formsDrawing.find(num)<sp/>==<sp/>formsDrawing.end())<sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/>drawingFormIt<sp/>=<sp/>formsDrawing.insert(num).first;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>shouldDoForm<sp/>=<sp/>gFalse;<sp/><sp/></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldDoForm)<sp/>{</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;useDrawForm()<sp/>&amp;&amp;<sp/>refObj.isRef())<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawForm(refObj.getRef());</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>doForm(&amp;obj1);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refObj.isRef()<sp/>&amp;&amp;<sp/>shouldDoForm)<sp/>{</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formsDrawing.erase(drawingFormIt);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/>refObj.free();</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName(</highlight><highlight class="stringliteral">&quot;PS&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Level1&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;psXObject(obj1.getStream(),</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.isStream()<sp/>?<sp/>obj3.getStream()<sp/>:<sp/>(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*)NULL);</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName())<sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>XObject<sp/>subtype<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>obj2.getName());</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;XObject<sp/>subtype<sp/>is<sp/>missing<sp/>or<sp/>wrong<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opiDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;opiEnd(state,<sp/>opiDict.getDict());</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/>opiDict.free();</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doImage(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/>*maskDict;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/>maskBits;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>GBool<sp/>interpolate;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>StreamColorSpaceMode<sp/>csMode;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/>GBool<sp/>mask;</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>GBool<sp/>invert;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,<sp/>*maskColorSpace;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,<sp/>*maskColorMap;</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>maskObj,<sp/>smaskObj;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/>GBool<sp/>haveColorKeyMask,<sp/>haveExplicitMask,<sp/>haveSoftMask;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskColors[2*gfxColorMaxComps];</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/>maskHeight;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>GBool<sp/>maskInvert;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>GBool<sp/>maskInterpolate;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr;</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>info<sp/>from<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>csMode<sp/>=<sp/>streamCSNone;</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>str-&gt;getImageParams(&amp;bits,<sp/>&amp;csMode);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>stream<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>str-&gt;getDict();</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>optional<sp/>content<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref)<sp/>{</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;OC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catalog-&gt;getOptContentConfig()<sp/>&amp;&amp;<sp/>!catalog-&gt;getOptContentConfig()-&gt;optContentIsVisible(&amp;obj1))<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isReal())</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)obj1.getReal();</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isReal())</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)obj1.getReal();</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;<sp/>1<sp/>||<sp/>height<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Interpolate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>interpolate<sp/>=<sp/>obj1.getBool();</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/>interpolate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>maskInterpolate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>or<sp/>mask?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ImageMask&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;IM&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>obj1.getBool();</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isNull())</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BPC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)<sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>a<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)<sp/>{</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>inverted<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/>invert<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Table<sp/>4.39<sp/>says<sp/>/Decode<sp/>must<sp/>be<sp/>[1<sp/>0]<sp/>or<sp/>[0<sp/>1].<sp/>Adobe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accepts<sp/>[1.0<sp/>0.0]<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isNum()<sp/>&amp;&amp;<sp/>obj2.getNum()<sp/>&gt;=<sp/>0.9)</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/>invert<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>drawing<sp/>is<sp/>disabled,<sp/>skip<sp/>over<sp/>inline<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState<sp/>||<sp/>!out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/>doPatternImageMask(ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawImageMask(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>interpolate,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>color<sp/>space<sp/>and<sp/>color<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName()<sp/>&amp;&amp;<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(obj1.getName(),<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1<sp/>=<sp/>obj2;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objIntent;</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tempIntent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Intent&quot;</highlight><highlight class="normal">,<sp/>&amp;objIntent);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objIntent.isName())<sp/>{</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempIntent<sp/>=<sp/>state-&gt;getRenderingIntent();</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempIntent<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempIntent<sp/>=<sp/>strdup(tempIntent);</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setRenderingIntent(objIntent.getName());</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj1,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objIntent.isName())<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setRenderingIntent(tempIntent);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tempIntent);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objIntent.free();</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csMode<sp/>==<sp/>streamCSDeviceGray)<sp/>{</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultGray&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_gray_color_space" kindref="compound">GfxDeviceGrayColorSpace</ref>();</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csMode<sp/>==<sp/>streamCSDeviceRGB)<sp/>{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultRGB&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>();</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csMode<sp/>==<sp/>streamCSDeviceCMYK)<sp/>{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objCS;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(</highlight><highlight class="stringliteral">&quot;DefaultCMYK&quot;</highlight><highlight class="normal">,<sp/>&amp;objCS);</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCS.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_c_m_y_k_color_space" kindref="compound">GfxDeviceCMYKColorSpace</ref>();</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;objCS,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objCS.free();</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!colorSpace)<sp/>{</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorSpace;</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref>(bits,<sp/>&amp;obj1,<sp/>colorSpace);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!colorMap-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorMap;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/>haveColorKeyMask<sp/>=<sp/>haveExplicitMask<sp/>=<sp/>haveSoftMask<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/>maskWidth<sp/>=<sp/>maskHeight<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/>maskInvert<sp/>=<sp/>gFalse;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>maskColorMap<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Mask&quot;</highlight><highlight class="normal">,<sp/>&amp;maskObj);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;SMask&quot;</highlight><highlight class="normal">,<sp/>&amp;smaskObj);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smaskObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>soft<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/>smaskObj.getStream();</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict<sp/>=<sp/>smaskObj.streamGetDict();</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskHeight<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Interpolate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskInterpolate<sp/>=<sp/>obj1.getBool();</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskInterpolate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BitsPerComponent&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BPC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskBits<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorSpace&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName())<sp/>{</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;lookupColorSpace(obj1.getName(),<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1<sp/>=<sp/>obj2;</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskColorSpace<sp/>=<sp/>GfxColorSpace::parse(NULL,<sp/>&amp;obj1,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!maskColorSpace<sp/>||<sp/>maskColorSpace-&gt;getMode()<sp/>!=<sp/>csDeviceGray)<sp/>{</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref>(maskBits,<sp/>&amp;obj1,<sp/>maskColorSpace);</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!maskColorMap-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskColorMap;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>Matte<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matte&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.getArray()-&gt;getLength()<sp/>!=<sp/>colorSpace-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Matte<sp/>entry<sp/>should<sp/>have<sp/>{0:d}<sp/>components<sp/>but<sp/>has<sp/>{1:d}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorSpace-&gt;getNComps(),<sp/>obj1.getArray()-&gt;getLength());</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskWidth<sp/>!=<sp/>width<sp/>||<sp/>maskHeight<sp/>!=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Softmask<sp/>with<sp/>matte<sp/>entry<sp/>{0:d}<sp/>x<sp/>{1:d}<sp/>must<sp/>have<sp/>same<sp/>geometry<sp/>as<sp/>the<sp/>image<sp/>{2:d}<sp/>x<sp/>{3:d}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth,<sp/>maskHeight,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>matteColor;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>colorSpace-&gt;getNComps();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.getArray()-&gt;get(i,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isNum())<sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Matte<sp/>entry<sp/>{0:d}<sp/>should<sp/>be<sp/>a<sp/>number<sp/>but<sp/>it&apos;s<sp/>of<sp/>type<sp/>{1:d}&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>obj2.getType());</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matteColor.c[i]<sp/>=<sp/>dblToCol(obj2.getNum());</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>colorSpace-&gt;getNComps())<sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskColorMap-&gt;setMatteColor(&amp;matteColor);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSoftMask<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>key<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>maskObj.arrayGetLength()<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>2*gfxColorMaxComps;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>maskObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskColors[i]<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isReal())<sp/>{</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Mask<sp/>entry<sp/>should<sp/>be<sp/>an<sp/>integer<sp/>but<sp/>it&apos;s<sp/>a<sp/>real,<sp/>trying<sp/>to<sp/>use<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskColors[i]<sp/>=<sp/>(int)<sp/>obj1.getReal();</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Mask<sp/>entry<sp/>should<sp/>be<sp/>an<sp/>integer<sp/>but<sp/>it&apos;s<sp/>of<sp/>type<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>obj1.getType());</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveColorKeyMask<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/>maskObj.getStream();</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict<sp/>=<sp/>maskObj.streamGetDict();</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt())<sp/>{</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskHeight<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Interpolate&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskInterpolate<sp/>=<sp/>obj1.getBool();</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskInterpolate<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ImageMask&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;IM&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isBool()<sp/>||<sp/>!obj1.getBool())<sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskInvert<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Decode&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/>maskDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Table<sp/>4.39<sp/>says<sp/>/Decode<sp/>must<sp/>be<sp/>[1<sp/>0]<sp/>or<sp/>[0<sp/>1].<sp/>Adobe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accepts<sp/>[1.0<sp/>0.0]<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isNum()<sp/>&amp;&amp;<sp/>obj2.getNum()<sp/>&gt;=<sp/>0.9)<sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskInvert<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isNull())<sp/>{</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err2;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveExplicitMask<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>drawing<sp/>is<sp/>disabled,<sp/>skip<sp/>over<sp/>inline<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ocState<sp/>||<sp/>!out-&gt;needNonText())<sp/>{</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>*<sp/>colorMap-&gt;getNumPixelComps()<sp/>*</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits()<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveSoftMask)<sp/>{</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawSoftMaskedImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskColorMap,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskColorMap;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveExplicitMask)<sp/>{</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawMaskedImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert,<sp/>maskInterpolate);</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveColorKeyMask<sp/>?<sp/>maskColors<sp/>:<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)NULL,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>colorMap;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/>maskObj.free();</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/>smaskObj.free();</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>width<sp/>*<sp/>height)<sp/>&gt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/>updateLevel<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/>err2:</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>image<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal">GBool<sp/>Gfx::checkTransparencyGroup(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>effect<sp/>of<sp/>compositing<sp/>objects<sp/>as<sp/>a<sp/>group:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>ExtGState<sp/>entries<sp/>with<sp/>ca<sp/>!=<sp/>1<sp/>or<sp/>CA<sp/>!=<sp/>1<sp/>or<sp/>BM<sp/>!=<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>extGStates;</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/>GBool<sp/>transpGroup<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>opac;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resDict<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/>pushResources(resDict);</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ExtGState&quot;</highlight><highlight class="normal">,<sp/>&amp;extGStates);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extGStates.isDict())<sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict<sp/>=<sp/>extGStates.getDict();</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dict-&gt;getLength()<sp/>&amp;&amp;<sp/>!transpGroup;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GfxBlendMode<sp/>mode;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res-&gt;lookupGState(dict-&gt;getKey(i),<sp/>&amp;obj1)<sp/>&amp;&amp;<sp/>obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;BM&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;parseBlendMode(&amp;obj2,<sp/>&amp;mode))<sp/>{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>gfxBlendNormal)</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>blend<sp/>mode<sp/>in<sp/>ExtGState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;ca&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>opac<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>opac<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>opac;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opac<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;CA&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNum())<sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opac<sp/>=<sp/>opac<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>opac<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>opac;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opac<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>is<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!transpGroup<sp/>&amp;&amp;<sp/>obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;AIS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>obj2.getBool();</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>soft<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!transpGroup<sp/>&amp;&amp;<sp/>!obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;SMask&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj2.isName(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/>extGStates.free();</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>popResources();</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpGroup;</highlight></codeline>
<codeline lineno="4790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::doForm(<ref refid="class_object" kindref="compound">Object</ref><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/>GBool<sp/>transpGroup,<sp/>isolated,<sp/>knockout;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>matrixObj,<sp/>bboxObj;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>bbox[4];</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>resObj;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict;</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/>GBool<sp/>ocSaved;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>excessive<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formDepth<sp/>&gt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>stream<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>str-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>form<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;FormType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(obj1.isNull()<sp/>||<sp/>(obj1.isInt()<sp/>&amp;&amp;<sp/>obj1.getInt()<sp/>==<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>form<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>optional<sp/>content<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/>ocSaved<sp/>=<sp/>ocState;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;OC&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(catalog-&gt;getOptContentConfig()<sp/>&amp;&amp;<sp/>!catalog-&gt;getOptContentConfig()-&gt;optContentIsVisible(&amp;obj1))<sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;needCharCount())<sp/>{</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ocState<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;bboxObj);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bboxObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>ocState<sp/>=<sp/>ocSaved;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj1.isNum()))<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bbox[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;matrixObj);</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrixObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj1.isNum()))<sp/>m[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>m[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0]<sp/>=<sp/>1;<sp/>m[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2]<sp/>=<sp/>0;<sp/>m[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>m[4]<sp/>=<sp/>0;<sp/>m[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/>matrixObj.free();</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resObj);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>resDict<sp/>=<sp/>resObj.isDict()<sp/>?<sp/>resObj.getDict()<sp/>:<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>a<sp/>transparency<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>transpGroup<sp/>=<sp/>isolated<sp/>=<sp/>knockout<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/>blendingColorSpace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Group&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2)-&gt;isName(</highlight><highlight class="stringliteral">&quot;Transparency&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isNull())<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/>blendingColorSpace<sp/>=<sp/>GfxColorSpace::parse(res,<sp/>&amp;obj3,<sp/>out,<sp/>state);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/>isolated<sp/>=<sp/>obj3.getBool();</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.dictLookup(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isBool())<sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/>knockout<sp/>=<sp/>obj3.getBool();</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup<sp/>=<sp/>isolated<sp/>||<sp/>out-&gt;checkTransparencyGroup(state,<sp/>knockout)<sp/>||<sp/>checkTransparencyGroup(resDict);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/>++formDepth;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>drawForm(str,<sp/>resDict,<sp/>m,<sp/>bbox,</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transpGroup,<sp/>gFalse,<sp/>blendingColorSpace,<sp/>isolated,<sp/>knockout);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>--formDepth;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blendingColorSpace)<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blendingColorSpace;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/>resObj.free();</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/>ocState<sp/>=<sp/>ocSaved;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::drawForm(<ref refid="class_object" kindref="compound">Object</ref><sp/>*str,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*matrix,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>transpGroup,<sp/>GBool<sp/>softMask,</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*blendingColorSpace,</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>isolated,<sp/>GBool<sp/>knockout,</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>alpha,<sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*transferFunc,</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*backdropColor)<sp/>{</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*oldParser;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*savedState;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oldBaseMatrix[6];</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>new<sp/>resources<sp/>on<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>pushResources(resDict);</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>current<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/>savedState<sp/>=<sp/>saveStateStack();</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kill<sp/>any<sp/>pre-existing<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>current<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>oldParser<sp/>=<sp/>parser;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>form<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>state-&gt;concatCTM(matrix[0],<sp/>matrix[1],<sp/>matrix[2],</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[3],<sp/>matrix[4],<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/>out-&gt;updateCTM(state,<sp/>matrix[0],<sp/>matrix[1],<sp/>matrix[2],</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[3],<sp/>matrix[4],<sp/>matrix[5]);</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>form<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(bbox[0],<sp/>bbox[1]);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(bbox[2],<sp/>bbox[1]);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(bbox[2],<sp/>bbox[3]);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(bbox[0],<sp/>bbox[3]);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/>state-&gt;clip();</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(softMask<sp/>||<sp/>transpGroup)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getBlendMode()<sp/>!=<sp/>gfxBlendNormal)<sp/>{</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setBlendMode(gfxBlendNormal);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateBlendMode(state);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillOpacity()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFillOpacity(1);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFillOpacity(state);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeOpacity()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setStrokeOpacity(1);</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateStrokeOpacity(state);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;clearSoftMask(state);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;beginTransparencyGroup(state,<sp/>bbox,<sp/>blendingColorSpace,</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isolated,<sp/>knockout,<sp/>softMask);</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>base<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/>oldBaseMatrix[i]<sp/>=<sp/>baseMatrix[i];</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMatrix[i]<sp/>=<sp/>state-&gt;getCTM()[i];</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*stateBefore<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/>display(str,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stateBefore<sp/>!=<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;isParentState(stateBefore))<sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;There&apos;s<sp/>a<sp/>form<sp/>with<sp/>more<sp/>q<sp/>than<sp/>Q,<sp/>trying<sp/>to<sp/>fix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stateBefore<sp/>!=<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;There&apos;s<sp/>a<sp/>form<sp/>with<sp/>more<sp/>Q<sp/>than<sp/>q&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(softMask<sp/>||<sp/>transpGroup)<sp/>{</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endTransparencyGroup(state);</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>base<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMatrix[i]<sp/>=<sp/>oldBaseMatrix[i];</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/>oldParser;</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>graphics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/>restoreStateStack(savedState);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>resource<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/>popResources();</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(softMask)<sp/>{</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;setSoftMask(state,<sp/>bbox,<sp/>alpha,<sp/>transferFunc,<sp/>backdropColor);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpGroup)<sp/>{</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;paintTransparencyGroup(state,<sp/>bbox);</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in-line<sp/>image<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opBeginImage(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>this<sp/>function<sp/>is<sp/>run<sp/>even<sp/>if<sp/>ocState<sp/>is<sp/>false<sp/>--<sp/>doImage()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>responsible<sp/>for<sp/>skipping<sp/>over<sp/>the<sp/>inline<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>dict/stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>buildImageStream();</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>doImage(NULL,<sp/>str,<sp/>gTrue);</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&apos;EI&apos;<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>str-&gt;getUndecodedStream()-&gt;getChar();</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>str-&gt;getUndecodedStream()-&gt;getChar();</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(c1<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c2<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>str-&gt;getUndecodedStream()-&gt;getChar();</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*Gfx::buildImageStream()<sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>dict;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/>dict.initDict(xref);</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/>parser-&gt;getObj(&amp;obj);</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!obj.isCmd(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!obj.isEOF())<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isName())<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Inline<sp/>image<sp/>dictionary<sp/>key<sp/>must<sp/>be<sp/>a<sp/>name<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>copyString(obj.getName());</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj);</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isEOF()<sp/>||<sp/>obj.isError())<sp/>{</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(key);</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.dictAdd(key,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isEOF())<sp/>{</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>file<sp/>in<sp/>inline<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser-&gt;getStream())<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_embed_stream" kindref="compound">EmbedStream</ref>(parser-&gt;getStream(),<sp/>&amp;dict,<sp/>gFalse,<sp/>0);</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str-&gt;addFilters(&amp;dict);</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"></highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opImageData(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>&apos;ID&apos;<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEndImage(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>error(errInternal,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>&apos;EI&apos;<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>3<sp/>font<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetCharWidth(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>out-&gt;type3D0(state,<sp/>args[0].getNum(),<sp/>args[1].getNum());</highlight></codeline>
<codeline lineno="5104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opSetCacheDevice(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/>out-&gt;type3D1(state,<sp/>args[0].getNum(),<sp/>args[1].getNum(),</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[2].getNum(),<sp/>args[3].getNum(),</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[4].getNum(),<sp/>args[5].getNum());</highlight></codeline>
<codeline lineno="5110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatibility<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opBeginIgnoreUndef(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/>++ignoreUndef;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEndIgnoreUndef(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ignoreUndef<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>--ignoreUndef;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>marked<sp/>content<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>GfxMarkedContentKind<sp/>{</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/>gfxMCOptionalContent,</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/>gfxMCActualText,</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/>gfxMCOther</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135" refid="struct_marked_content_stack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/>GfxMarkedContentKind<sp/>kind;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/>GBool<sp/>ocSuppressed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>ignoring<sp/>content<sp/>based<sp/>on<sp/>OptionalContent?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*next;<sp/></highlight><highlight class="comment">//<sp/>next<sp/>object<sp/>on<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::popMarkedContent()<sp/>{</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>mcStack<sp/>=<sp/>mc-&gt;next;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mc;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::pushMarkedContent()<sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref>();</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/>mc-&gt;ocSuppressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/>mc-&gt;kind<sp/>=<sp/>gfxMCOther;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/>mc-&gt;next<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/>mcStack<sp/>=<sp/>mc;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal">GBool<sp/>Gfx::contentIsHidden()<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hidden<sp/>=<sp/>mc<sp/>&amp;&amp;<sp/>mc-&gt;ocSuppressed;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!hidden<sp/>&amp;&amp;<sp/>mc<sp/>&amp;&amp;<sp/>mc-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>mc<sp/>=<sp/>mc-&gt;next;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>hidden<sp/>=<sp/>mc-&gt;ocSuppressed;</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hidden;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opBeginMarkedContent(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>a<sp/>new<sp/>stack<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/>pushMarkedContent();</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><ref refid="class_o_c_gs" kindref="compound">OCGs</ref><sp/>*contentConfig<sp/>=<sp/>catalog-&gt;getOptContentConfig();</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name0<sp/>=<sp/>args[0].getName();</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strncmp(<sp/>name0,<sp/></highlight><highlight class="stringliteral">&quot;OC&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>contentConfig)<sp/>{</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numArgs<sp/>&gt;=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args[1].isName())<sp/>{</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>MC<sp/>Type:<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>args[1].getType());</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name1<sp/>=<sp/>args[1].getName();</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>markedContent;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;kind<sp/>=<sp/>gfxMCOptionalContent;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res-&gt;lookupMarkedContentNF(<sp/>name1,<sp/>&amp;markedContent<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible<sp/>=<sp/>contentConfig-&gt;optContentIsVisible(&amp;markedContent);</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;ocSuppressed<sp/>=<sp/>!(visible);</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;DID<sp/>NOT<sp/>find<sp/>{0:s}&quot;</highlight><highlight class="normal">,<sp/>name1);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedContent.free();</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;insufficient<sp/>arguments<sp/>for<sp/>Marked<sp/>Content&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[0].isName(</highlight><highlight class="stringliteral">&quot;Span&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>numArgs<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>args[1].isDict())<sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[1].dictLookup(</highlight><highlight class="stringliteral">&quot;ActualText&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;beginActualText(state,<sp/>obj.getString());</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;kind<sp/>=<sp/>gfxMCActualText;</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>marked<sp/>content:<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>args[0].getName());</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[1].print(stdout);</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/>ocState<sp/>=<sp/>!contentIsHidden();</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>args[1].isDict())<sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;beginMarkedContent(args[0].getName(),<sp/>args[1].getDict());</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numArgs<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;beginMarkedContent(args[0].getName(),<sp/>NULL);</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opEndMarkedContent(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mcStack)<sp/>{</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Mismatched<sp/>EMC<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><ref refid="struct_marked_content_stack" kindref="compound">MarkedContentStack</ref><sp/>*mc<sp/>=<sp/>mcStack;</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/>GfxMarkedContentKind<sp/>mcKind<sp/>=<sp/>mc-&gt;kind;</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/>popMarkedContent();</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcKind<sp/>==<sp/>gfxMCActualText)</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;endActualText(state);</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/>ocState<sp/>=<sp/>!contentIsHidden();</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/>out-&gt;endMarkedContent(state);</highlight></codeline>
<codeline lineno="5233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::opMarkPoint(<ref refid="class_object" kindref="compound">Object</ref><sp/>args[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs)<sp/>{</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printCommands)<sp/>{</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>mark<sp/>point:<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>args[0].getName());</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[1].print(stdout);</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numArgs<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>args[1].isDict())<sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;markPoint(args[0].getName(),args[1].getDict());</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;markPoint(args[0].getName());</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>misc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight></codeline>
<codeline lineno="5256" refid="struct_gfx_stack_state_saver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_gfx_stack_state_saver" kindref="compound">GfxStackStateSaver</ref><sp/>{</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_stack_state_saver" kindref="compound">GfxStackStateSaver</ref>(<ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx)<sp/>:<sp/>gfx(gfx)<sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx-&gt;saveState();</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/>~<ref refid="struct_gfx_stack_state_saver" kindref="compound">GfxStackStateSaver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx-&gt;restoreState();</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::drawAnnot(<ref refid="class_object" kindref="compound">Object</ref><sp/>*str,<sp/><ref refid="class_annot_border" kindref="compound">AnnotBorder</ref><sp/>*border,<sp/><ref refid="class_annot_color" kindref="compound">AnnotColor</ref><sp/>*aColor,</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate)<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/>*resDict;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>matrixObj,<sp/>bboxObj,<sp/>resObj,<sp/>obj1;</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>formXMin,<sp/>formYMin,<sp/>formXMax,<sp/>formYMax;</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>sx,<sp/>sy,<sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>bbox[4];</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dash,<sp/>*dash2;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dashLength;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>assumes<sp/>that<sp/>we<sp/>are<sp/>in<sp/>the<sp/>default<sp/>user<sp/>space,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.,<sp/>baseMatrix<sp/>=<sp/>ctm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>bounding<sp/>box<sp/>has<sp/>zero<sp/>width<sp/>or<sp/>height,<sp/>don&apos;t<sp/>draw<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>==<sp/>xMax<sp/>||<sp/>yMin<sp/>==<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>saves<sp/>gfx<sp/>state<sp/>and<sp/>automatically<sp/>restores<sp/>it<sp/>on<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_stack_state_saver" kindref="compound">GfxStackStateSaver</ref><sp/>stackStateSaver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotation<sp/>around<sp/>the<sp/>topleft<sp/>corner<sp/>(for<sp/>the<sp/>NoRotate<sp/>flag)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_rad<sp/>=<sp/>rotate<sp/>*<sp/>M_PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>cos(angle_rad);</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sin(angle_rad);</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(xMin,<sp/>yMax)<sp/>is<sp/>the<sp/>pivot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unrotateMTX[6]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+c,<sp/>-s,</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+s,<sp/>+c,</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-c*xMin<sp/>-<sp/>s*yMax<sp/>+<sp/>xMin,<sp/>-c*yMax<sp/>+<sp/>s*xMin<sp/>+<sp/>yMax</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;concatCTM(unrotateMTX[0],<sp/>unrotateMTX[1],<sp/>unrotateMTX[2],</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unrotateMTX[3],<sp/>unrotateMTX[4],<sp/>unrotateMTX[5]);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateCTM(state,<sp/>unrotateMTX[0],<sp/>unrotateMTX[1],<sp/>unrotateMTX[2],</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unrotateMTX[3],<sp/>unrotateMTX[4],<sp/>unrotateMTX[5]);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>appearance<sp/>stream<sp/>(if<sp/>there<sp/>is<sp/>one)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>stream<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>str-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>form<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;bboxObj);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bboxObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bboxObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj1.isNum()))<sp/>{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>form<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;matrixObj);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrixObj.isArray()<sp/>&amp;&amp;<sp/>matrixObj.arrayGetLength()<sp/>&gt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(obj1.isNum()))<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixObj.free();</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>getPos(),<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m[0]<sp/>=<sp/>1;<sp/>m[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m[2]<sp/>=<sp/>0;<sp/>m[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m[4]<sp/>=<sp/>0;<sp/>m[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixObj.free();</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the<sp/>form<sp/>bbox<sp/>to<sp/>default<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>space,<sp/>and<sp/>construct<sp/>the<sp/>transformed<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>bbox[0]<sp/>*<sp/>m[0]<sp/>+<sp/>bbox[1]<sp/>*<sp/>m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>bbox[0]<sp/>*<sp/>m[1]<sp/>+<sp/>bbox[1]<sp/>*<sp/>m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/>formXMin<sp/>=<sp/>formXMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/>formYMin<sp/>=<sp/>formYMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>bbox[0]<sp/>*<sp/>m[0]<sp/>+<sp/>bbox[3]<sp/>*<sp/>m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>bbox[0]<sp/>*<sp/>m[1]<sp/>+<sp/>bbox[3]<sp/>*<sp/>m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>formXMin)<sp/>{</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>formXMax)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>formYMin)<sp/>{</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>formYMax)<sp/>{</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>bbox[2]<sp/>*<sp/>m[0]<sp/>+<sp/>bbox[1]<sp/>*<sp/>m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>bbox[2]<sp/>*<sp/>m[1]<sp/>+<sp/>bbox[1]<sp/>*<sp/>m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>formXMin)<sp/>{</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>formXMax)<sp/>{</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>formYMin)<sp/>{</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>formYMax)<sp/>{</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>bbox[2]<sp/>*<sp/>m[0]<sp/>+<sp/>bbox[3]<sp/>*<sp/>m[2]<sp/>+<sp/>m[4];</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>bbox[2]<sp/>*<sp/>m[1]<sp/>+<sp/>bbox[3]<sp/>*<sp/>m[3]<sp/>+<sp/>m[5];</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>formXMin)<sp/>{</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>formXMax)<sp/>{</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formXMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>formYMin)<sp/>{</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>formYMax)<sp/>{</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formYMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>mapping<sp/>matrix,<sp/>[sx<sp/>0<sp/><sp/>0],<sp/>which<sp/>maps<sp/>the<sp/>transformed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0<sp/><sp/>sy<sp/>0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[tx<sp/>ty<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bbox<sp/>to<sp/>the<sp/>annotation<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formXMin<sp/>==<sp/>formXMax)<sp/>{</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shouldn&apos;t<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sx<sp/>=<sp/>(xMax<sp/>-<sp/>xMin)<sp/>/<sp/>(formXMax<sp/>-<sp/>formXMin);</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formYMin<sp/>==<sp/>formYMax)<sp/>{</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shouldn&apos;t<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>(yMax<sp/>-<sp/>yMin)<sp/>/<sp/>(formYMax<sp/>-<sp/>formYMin);</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-formXMin<sp/>*<sp/>sx<sp/>+<sp/>xMin;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-formYMin<sp/>*<sp/>sy<sp/>+<sp/>yMin;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>final<sp/>transform<sp/>matrix<sp/>is<sp/>(form<sp/>matrix)<sp/>*<sp/>(mapping<sp/>matrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0]<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1]<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2]<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>m[3]<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/>m[4]<sp/>=<sp/>m[4]<sp/>*<sp/>sx<sp/>+<sp/>tx;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/>m[5]<sp/>=<sp/>m[5]<sp/>*<sp/>sy<sp/>+<sp/>ty;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resObj);</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict<sp/>=<sp/>resObj.isDict()<sp/>?<sp/>resObj.getDict()<sp/>:<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>drawForm(str,<sp/>resDict,<sp/>m,<sp/>bbox);</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/>resObj.free();</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(border<sp/>&amp;&amp;<sp/>border-&gt;getWidth()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceRGB)<sp/>{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setStrokePattern(NULL);</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setStrokeColorSpace(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>());</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aColor<sp/>&amp;&amp;<sp/>(aColor-&gt;getSpace()<sp/>==<sp/>AnnotColor::colorRGB))<sp/>{</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*values<sp/>=<sp/>aColor-&gt;getValues();</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>values[0];</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>values[1];</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>values[2];</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>g<sp/>=<sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>dblToCol(r);</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[1]<sp/>=<sp/>dblToCol(g);</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/>color.c[2]<sp/>=<sp/>dblToCol(b);</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setStrokeColor(&amp;color);</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateStrokeColor(state);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;setLineWidth(border-&gt;getWidth());</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;updateLineWidth(state);</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/>dashLength<sp/>=<sp/>border-&gt;getDashLength();</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/>dash<sp/>=<sp/>border-&gt;getDash();</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(border-&gt;getStyle()<sp/>==<sp/>AnnotBorder::borderDashed<sp/>&amp;&amp;<sp/>dashLength<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dash2<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(dashLength,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dash2,<sp/>dash,<sp/>dashLength<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setLineDash(dash2,<sp/>dashLength,<sp/>0);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateLineDash(state);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>doesn&apos;t<sp/>currently<sp/>handle<sp/>the<sp/>beveled<sp/>and<sp/>engraved<sp/>styles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;moveTo(xMin,<sp/>yMin);</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(border-&gt;getStyle()<sp/>!=<sp/>AnnotBorder::borderUnderlined)<sp/>{</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;lineTo(xMin,<sp/>yMax);</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;stroke(state);</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Gfx::bottomGuard()<sp/>{</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stateGuards[stateGuards.size()-1];</highlight></codeline>
<codeline lineno="5486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::pushStateGuard()<sp/>{</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/>stateGuards.push_back(stackHeight);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::popStateGuard()<sp/>{</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stackHeight<sp/>&gt;<sp/>bottomGuard()<sp/>&amp;&amp;<sp/>state-&gt;hasSaves())</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/>stateGuards.pop_back();</highlight></codeline>
<codeline lineno="5496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight></codeline>
<codeline lineno="5498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::saveState()<sp/>{</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/>out-&gt;saveState(state);</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>state-&gt;save();</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/>stackHeight++;</highlight></codeline>
<codeline lineno="5502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"></highlight></codeline>
<codeline lineno="5504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::restoreState()<sp/>{</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stackHeight<sp/>&lt;=<sp/>bottomGuard()<sp/>||<sp/>!state-&gt;hasSaves())<sp/>{</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Restoring<sp/>state<sp/>when<sp/>no<sp/>valid<sp/>states<sp/>to<sp/>pop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/>commandAborted<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>state-&gt;restore();</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/>out-&gt;restoreState(state);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/>stackHeight--;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>state<sp/>stack,<sp/>and<sp/>initialize<sp/>it<sp/>with<sp/>a<sp/>copy<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*Gfx::saveStateStack()<sp/>{</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*oldState;</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/>out-&gt;saveState(state);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>oldState<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>state-&gt;copy(gTrue);</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldState;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Switch<sp/>back<sp/>to<sp/>the<sp/>previous<sp/>state<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::restoreStateStack(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*oldState)<sp/>{</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(state-&gt;hasSaves())<sp/>{</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/>restoreState();</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>oldState;</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/>out-&gt;restoreState(state);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"></highlight></codeline>
<codeline lineno="5536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::pushResources(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref>(xref,<sp/>resDict,<sp/>res);</highlight></codeline>
<codeline lineno="5538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Gfx::popResources()<sp/>{</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_resources" kindref="compound">GfxResources</ref><sp/>*resPtr;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/>resPtr<sp/>=<sp/>res-&gt;getNext();</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>resPtr;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/Gfx.cc"/>
  </compounddef>
</doxygen>
