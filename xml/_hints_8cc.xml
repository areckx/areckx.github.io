<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_hints_8cc" kind="file" language="C++">
    <compoundname>Hints.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="_hints_8h" local="yes">Hints.h</includes>
    <includes refid="_linearization_8h" local="yes">Linearization.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2parser_8h" local="yes">Parser.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2lexer_8h" local="yes">Lexer.h</includes>
    <includes refid="_security_handler_8h" local="yes">SecurityHandler.h</includes>
    <includes local="no">limits.h</includes>
    <incdepgraph>
      <node id="87643">
        <label>stdarg.h</label>
      </node>
      <node id="87637">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87649" relation="include">
        </childnode>
        <childnode refid="87633" relation="include">
        </childnode>
      </node>
      <node id="87644">
        <label>stdlib.h</label>
      </node>
      <node id="87640">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="87632" relation="include">
        </childnode>
        <childnode refid="87631" relation="include">
        </childnode>
      </node>
      <node id="87634">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87632" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
        <childnode refid="87637" relation="include">
        </childnode>
        <childnode refid="87650" relation="include">
        </childnode>
        <childnode refid="87651" relation="include">
        </childnode>
        <childnode refid="87652" relation="include">
        </childnode>
        <childnode refid="87653" relation="include">
        </childnode>
        <childnode refid="87654" relation="include">
        </childnode>
        <childnode refid="87649" relation="include">
        </childnode>
      </node>
      <node id="87647">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
      </node>
      <node id="87650">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
        <childnode refid="87633" relation="include">
        </childnode>
      </node>
      <node id="87626">
        <label>thirdparty/poppler/poppler/Hints.cc</label>
        <link refid="_hints_8cc"/>
        <childnode refid="87627" relation="include">
        </childnode>
        <childnode refid="87628" relation="include">
        </childnode>
        <childnode refid="87656" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87649" relation="include">
        </childnode>
        <childnode refid="87637" relation="include">
        </childnode>
        <childnode refid="87657" relation="include">
        </childnode>
        <childnode refid="87658" relation="include">
        </childnode>
        <childnode refid="87659" relation="include">
        </childnode>
        <childnode refid="87642" relation="include">
        </childnode>
      </node>
      <node id="87658">
        <label>Lexer.h</label>
        <link refid="thirdparty_2poppler_2poppler_2lexer_8h_source"/>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87649" relation="include">
        </childnode>
      </node>
      <node id="87646">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="87643" relation="include">
        </childnode>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87641" relation="include">
        </childnode>
      </node>
      <node id="87628">
        <label>Hints.h</label>
        <link refid="_hints_8h_source"/>
        <childnode refid="87629" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87633" relation="include">
        </childnode>
        <childnode refid="87634" relation="include">
        </childnode>
      </node>
      <node id="87648">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
      </node>
      <node id="87652">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="87638" relation="include">
        </childnode>
      </node>
      <node id="87651">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
      </node>
      <node id="87657">
        <label>Parser.h</label>
        <link refid="thirdparty_2poppler_2poppler_2parser_8h_source"/>
        <childnode refid="87658" relation="include">
        </childnode>
      </node>
      <node id="87642">
        <label>limits.h</label>
      </node>
      <node id="87631">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="87632" relation="include">
        </childnode>
      </node>
      <node id="87645">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="87649">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87632" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87635" relation="include">
        </childnode>
      </node>
      <node id="87636">
        <label>pthread.h</label>
      </node>
      <node id="87629">
        <label>string.h</label>
      </node>
      <node id="87641">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="87642" relation="include">
        </childnode>
        <childnode refid="87643" relation="include">
        </childnode>
        <childnode refid="87644" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
      </node>
      <node id="87653">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87652" relation="include">
        </childnode>
        <childnode refid="87639" relation="include">
        </childnode>
      </node>
      <node id="87638">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="87639" relation="include">
        </childnode>
        <childnode refid="87632" relation="include">
        </childnode>
        <childnode refid="87629" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87640" relation="include">
        </childnode>
        <childnode refid="87641" relation="include">
        </childnode>
        <childnode refid="87645" relation="include">
        </childnode>
        <childnode refid="87646" relation="include">
        </childnode>
        <childnode refid="87647" relation="include">
        </childnode>
        <childnode refid="87648" relation="include">
        </childnode>
        <childnode refid="87649" relation="include">
        </childnode>
      </node>
      <node id="87633">
        <label>vector</label>
      </node>
      <node id="87659">
        <label>SecurityHandler.h</label>
        <link refid="_security_handler_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
      </node>
      <node id="87656">
        <label>Linearization.h</label>
        <link refid="_linearization_8h_source"/>
        <childnode refid="87630" relation="include">
        </childnode>
        <childnode refid="87638" relation="include">
        </childnode>
      </node>
      <node id="87635">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="87636" relation="include">
        </childnode>
      </node>
      <node id="87655">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="87630">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="87631" relation="include">
        </childnode>
      </node>
      <node id="87639">
        <label>set</label>
      </node>
      <node id="87627">
        <label>config.h</label>
      </node>
      <node id="87654">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="87638" relation="include">
        </childnode>
        <childnode refid="87655" relation="include">
        </childnode>
      </node>
      <node id="87632">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hints.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2010,<sp/>2012<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2010,<sp/>2011,<sp/>2013,<sp/>2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2010,<sp/>2013<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2013<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hints.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Linearization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SecurityHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">Hints::Hints(<ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*str,<sp/><ref refid="class_linearization" kindref="compound">Linearization</ref><sp/>*linearization,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,<sp/><ref refid="class_security_handler" kindref="compound">SecurityHandler</ref><sp/>*secHdlr)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>mainXRefEntriesOffset<sp/>=<sp/>linearization-&gt;getMainXRefEntriesOffset();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>nPages<sp/>=<sp/>linearization-&gt;getNumPages();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>pageFirst<sp/>=<sp/>linearization-&gt;getPageFirst();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>pageEndFirst<sp/>=<sp/>linearization-&gt;getEndFirst();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>pageObjectFirst<sp/>=<sp/>linearization-&gt;getObjectNumberFirst();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageObjectFirst<sp/>&lt;<sp/>0<sp/>||<sp/>pageObjectFirst<sp/>&gt;=<sp/>xref-&gt;getNumObjects())<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>reference<sp/>for<sp/>first<sp/>page<sp/>object<sp/>({0:d})<sp/>in<sp/>linearization<sp/>table<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pageObjectFirst);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>pageObjectFirst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>pageOffsetFirst<sp/>=<sp/>xref-&gt;getEntry(pageObjectFirst)-&gt;offset;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPages<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>pages<sp/>({0:d})<sp/>for<sp/>hints<sp/>table&quot;</highlight><highlight class="normal">,<sp/>nPages);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nPages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>nObjects<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>pageObjectNum<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>xRefOffset<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>pageLength<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>pageOffset<sp/>=<sp/>(Goffset<sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Goffset));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>numSharedObject<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>sharedObjectId<sp/>=<sp/>(Guint<sp/>**)<sp/>gmallocn_checkoverflow(nPages,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint*));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nObjects<sp/>||<sp/>!pageObjectNum<sp/>||<sp/>!xRefOffset<sp/>||<sp/>!pageLength<sp/>||<sp/>!pageOffset<sp/>||</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!numSharedObject<sp/>||<sp/>!sharedObjectId)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>hints<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>nPages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>memset(pageLength,<sp/>0,<sp/>nPages<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>memset(pageOffset,<sp/>0,<sp/>nPages<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>memset(numSharedObject,<sp/>0,<sp/>nPages<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>memset(pageObjectNum,<sp/>0,<sp/>nPages<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>nSharedGroups<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>groupLength<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>groupOffset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>groupHasSignature<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>groupNumObjects<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>groupXRefOffset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>readTables(str,<sp/>linearization,<sp/>xref,<sp/>secHdlr);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">Hints::~Hints()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>gfree(nObjects);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>gfree(pageObjectNum);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>gfree(xRefOffset);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>gfree(pageLength);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>gfree(pageOffset);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numSharedObject[i])<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfree(sharedObjectId[i]);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>gfree(sharedObjectId);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>gfree(numSharedObject);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>gfree(groupLength);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>gfree(groupOffset);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>gfree(groupHasSignature);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>gfree(groupNumObjects);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>gfree(groupXRefOffset);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Hints::readTables(<ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*str,<sp/><ref refid="class_linearization" kindref="compound">Linearization</ref><sp/>*linearization,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,<sp/><ref refid="class_security_handler" kindref="compound">SecurityHandler</ref><sp/>*secHdlr)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>hintsOffset<sp/>=<sp/>linearization-&gt;getHintsOffset();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>hintsLength<sp/>=<sp/>linearization-&gt;getHintsLength();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>hintsOffset2<sp/>=<sp/>linearization-&gt;getHintsOffset2();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>hintsLength2<sp/>=<sp/>linearization-&gt;getHintsLength2();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufLength<sp/>=<sp/>hintsLength<sp/>+<sp/>hintsLength2;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/>buf(bufLength);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>&amp;buf[0];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*s<sp/>=<sp/>str-&gt;makeSubStream(hintsOffset,<sp/>gFalse,<sp/>hintsLength,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>s-&gt;reset();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i<sp/>&lt;<sp/>hintsLength;<sp/>i++)<sp/>{<sp/>*p++<sp/>=<sp/>s-&gt;getChar();<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hintsOffset2<sp/>&amp;&amp;<sp/>hintsLength2)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>str-&gt;makeSubStream(hintsOffset2,<sp/>gFalse,<sp/>hintsLength2,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;reset();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i<sp/>&lt;<sp/>hintsLength2;<sp/>i++)<sp/>{<sp/>*p++<sp/>=<sp/>s-&gt;getChar();<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref><sp/>*memStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref><sp/>(&amp;buf[0],<sp/>0,<sp/>bufLength,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(xref,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(xref,<sp/>memStream),<sp/>gTrue);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>gen;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser-&gt;getObj(&amp;obj)-&gt;isInt()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(num<sp/>=<sp/>obj.getInt(),<sp/>obj.free(),<sp/>parser-&gt;getObj(&amp;obj)-&gt;isInt())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(gen<sp/>=<sp/>obj.getInt(),<sp/>obj.free(),<sp/>parser-&gt;getObj(&amp;obj)-&gt;isCmd(</highlight><highlight class="stringliteral">&quot;obj&quot;</highlight><highlight class="normal">))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(obj.free(),<sp/>parser-&gt;getObj(&amp;obj,<sp/>gFalse,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr<sp/>?<sp/>secHdlr-&gt;getFileKey()<sp/>:<sp/>(Guchar<sp/>*)NULL,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr<sp/>?<sp/>secHdlr-&gt;getEncAlgorithm()<sp/>:<sp/>cryptRC4,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secHdlr<sp/>?<sp/>secHdlr-&gt;getFileKeyLength()<sp/>:<sp/>0,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num,<sp/>gen,<sp/>0,<sp/>gTrue)-&gt;isStream()))<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*hintsStream<sp/>=<sp/>obj.getStream();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*hintsDict<sp/>=<sp/>obj.streamGetDict();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sharedStreamOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hintsDict-&gt;lookupInt(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;sharedStreamOffset)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sharedStreamOffset<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hintsStream-&gt;reset();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readPageOffsetTable(hintsStream);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hintsStream-&gt;reset();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;sharedStreamOffset;<sp/>i++)<sp/>hintsStream-&gt;getChar();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readSharedObjectsTable(hintsStream);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shared<sp/>object<sp/>hint<sp/>table<sp/>offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>parsing<sp/>hints<sp/>table<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Hints::readPageOffsetTable(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPages<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>pages<sp/>reading<sp/>page<sp/>offset<sp/>hints<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>nObjectLeast<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nObjectLeast<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>least<sp/>number<sp/>of<sp/>objects<sp/>reading<sp/>page<sp/>offset<sp/>hints<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>nPages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>objectOffsetFirst<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objectOffsetFirst<sp/>&gt;=<sp/>hintsOffset)<sp/>objectOffsetFirst<sp/>+=<sp/>hintsLength;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>nBitsDiffObjects<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>pageLengthLeast<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>nBitsDiffPageLength<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>OffsetStreamLeast<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>nBitsOffsetStream<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>lengthStreamLeast<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>nBitsLengthStream<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>nBitsNumShared<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>nBitsShared<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>nBitsNumerator<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>denominator<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>nObjects[i]<sp/>=<sp/>nObjectLeast<sp/>+<sp/>readBits(nBitsDiffObjects,<sp/>str);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>nObjects[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>xRefOffset[0]<sp/>=<sp/>mainXRefEntriesOffset<sp/>+<sp/>20;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>xRefOffset[i]<sp/>=<sp/>xRefOffset[i-1]<sp/>+<sp/>20*nObjects[i-1];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>pageObjectNum[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>pageObjectNum[i]<sp/>=<sp/>pageObjectNum[i-1]<sp/>+<sp/>nObjects[i-1];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>pageObjectNum[0]<sp/>=<sp/>pageObjectFirst;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>pageLength[i]<sp/>=<sp/>pageLengthLeast<sp/>+<sp/>readBits(nBitsDiffPageLength,<sp/>str);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>numSharedObject[0]<sp/>=<sp/>readBits(nBitsNumShared,<sp/>str);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>numSharedObject[0]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>trust<sp/>the<sp/>read<sp/>value<sp/>to<sp/>be<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>sharedObjectId[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>numSharedObject[i]<sp/>=<sp/>readBits(nBitsNumShared,<sp/>str);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numSharedObject[i]<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint))<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>shared<sp/>objects&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numSharedObject[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>sharedObjectId[i]<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(numSharedObject[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numSharedObject[i]<sp/>&amp;&amp;<sp/>!sharedObjectId[i])<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>shared<sp/>object<sp/>IDs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numSharedObject[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>j=0;<sp/>j<sp/>&lt;<sp/>numSharedObject[i];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sharedObjectId[i][j]<sp/>=<sp/>readBits(nBitsShared,<sp/>str);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>pageOffset[0]<sp/>=<sp/>pageOffsetFirst;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>pageOffsets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;nPages;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>pageOffset[i]<sp/>=<sp/>pageOffset[i-1]<sp/>+<sp/>pageLength[i-1];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Hints::readSharedObjectsTable(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>Guint<sp/>firstSharedObjectNumber<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Guint<sp/>firstSharedObjectOffset<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>firstSharedObjectOffset<sp/>+=<sp/>hintsLength;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>Guint<sp/>nSharedGroupsFirst<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>Guint<sp/>nSharedGroups<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>Guint<sp/>nBitsNumObjects<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>Guint<sp/>groupLengthLeast<sp/>=<sp/>readBits(32,<sp/>str);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>Guint<sp/>nBitsDiffGroupLength<sp/>=<sp/>readBits(16,<sp/>str);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!nSharedGroups)<sp/>||<sp/>(nSharedGroups<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint)))<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>shared<sp/>object<sp/>groups&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nSharedGroups<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!nSharedGroupsFirst)<sp/>||<sp/>(nSharedGroupsFirst<sp/>&gt;<sp/>nSharedGroups))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>first<sp/>page<sp/>shared<sp/>object<sp/>groups&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nSharedGroups<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>groupLength<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nSharedGroups,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>groupOffset<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nSharedGroups,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>groupHasSignature<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nSharedGroups,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>groupNumObjects<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nSharedGroups,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>groupXRefOffset<sp/>=<sp/>(Guint<sp/>*)<sp/>gmallocn_checkoverflow(nSharedGroups,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Guint));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!groupLength<sp/>||<sp/>!groupOffset<sp/>||<sp/>!groupHasSignature<sp/>||</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!groupNumObjects<sp/>||<sp/>!groupXRefOffset)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>shared<sp/>object<sp/>groups&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nSharedGroups<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>groupLength[i]<sp/>=<sp/>groupLengthLeast<sp/>+<sp/>readBits(nBitsDiffGroupLength,<sp/>str);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>groupOffset[0]<sp/>=<sp/>objectOffsetFirst;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=1;<sp/>i&lt;nSharedGroupsFirst;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>groupOffset[i]<sp/>=<sp/>groupOffset[i-1]<sp/>+<sp/>groupLength[i-1];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSharedGroups<sp/>&gt;<sp/>nSharedGroupsFirst<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>groupOffset[nSharedGroupsFirst]<sp/>=<sp/>firstSharedObjectOffset;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=nSharedGroupsFirst+1;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupOffset[i]<sp/>=<sp/>groupOffset[i-1]<sp/>+<sp/>groupLength[i-1];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>groupHasSignature[i]<sp/>=<sp/>readBits(1,<sp/>str);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupHasSignature[i])<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readBits(128,<sp/>str);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>inputBits<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>on<sp/>byte<sp/>boundary.<sp/>Not<sp/>in<sp/>specs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>groupNumObjects[i]<sp/>=</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBitsNumObjects<sp/>?<sp/>1<sp/>+<sp/>readBits(nBitsNumObjects,<sp/>str)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=0;<sp/>i&lt;nSharedGroupsFirst;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>groupNumObjects[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>groupXRefOffset[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSharedGroups<sp/>&gt;<sp/>nSharedGroupsFirst<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>groupXRefOffset[nSharedGroupsFirst]<sp/>=</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mainXRefEntriesOffset<sp/>+<sp/>20*firstSharedObjectNumber;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i=nSharedGroupsFirst+1;<sp/>i&lt;nSharedGroups;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupXRefOffset[i]<sp/>=<sp/>groupXRefOffset[i-1]<sp/>+<sp/>20*groupNumObjects[i-1];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">Goffset<sp/>Hints::getPageOffset(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((page<sp/>&lt;<sp/>1)<sp/>||<sp/>(page<sp/>&gt;<sp/>nPages))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&gt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageOffset[page-1];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&lt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageOffset[page];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageOffset[0];</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">std::vector&lt;ByteRange&gt;*<sp/>Hints::getPageRanges(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((page<sp/>&lt;<sp/>1)<sp/>||<sp/>(page<sp/>&gt;<sp/>nPages))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&gt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>page-1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&lt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>page;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="struct___byte_range" kindref="compound">ByteRange</ref><sp/>pageRange;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>std::vector&lt;ByteRange&gt;<sp/>*v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;ByteRange&gt;;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>pageRange.offset<sp/>=<sp/>pageOffset[idx];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>pageRange.length<sp/>=<sp/>pageLength[idx];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>v-&gt;push_back(pageRange);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>pageRange.offset<sp/>=<sp/>xRefOffset[idx];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>pageRange.length<sp/>=<sp/>20*nObjects[idx];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>v-&gt;push_back(pageRange);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>j=0;<sp/>j&lt;numSharedObject[idx];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Guint<sp/>k<sp/>=<sp/>sharedObjectId[idx][j];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pageRange.offset<sp/>=<sp/>groupOffset[k];</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pageRange.length<sp/>=<sp/>groupLength[k];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v-&gt;push_back(pageRange);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pageRange.offset<sp/>=<sp/>groupXRefOffset[k];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pageRange.length<sp/>=<sp/>20*groupNumObjects[k];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v-&gt;push_back(pageRange);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">Guint<sp/>Hints::readBit(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>Guint<sp/>bit;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputBits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Guint)<sp/>-1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsBuffer<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>inputBits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>bit<sp/>=<sp/>(bitsBuffer<sp/>&gt;&gt;<sp/>(inputBits<sp/>-<sp/>1))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>--inputBits;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">Guint<sp/>Hints::readBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>Guint<sp/>bit,<sp/>bits;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readBit(str);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>bit<sp/>=<sp/>(readBit(str)<sp/>&lt;&lt;<sp/>(n-1));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit<sp/>==<sp/>(Guint)<sp/>-1)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>bits<sp/>=<sp/>readBits(n-1,<sp/>str);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>(Guint)<sp/>-1)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit<sp/>|<sp/>bits;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Hints::getPageObjectNum(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((page<sp/>&lt;<sp/>1)<sp/>||<sp/>(page<sp/>&gt;<sp/>nPages))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&gt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageObjectNum[page-1];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-1<sp/>&lt;<sp/>pageFirst)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageObjectNum[page];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pageObjectNum[0];</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/Hints.cc"/>
  </compounddef>
</doxygen>
